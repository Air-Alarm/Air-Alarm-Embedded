
STM32NUCLEO-F401RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000867c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004dc  08008820  08008820  00018820  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008cfc  08008cfc  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  08008cfc  08008cfc  00018cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d04  08008d04  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d04  08008d04  00018d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d08  08008d08  00018d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08008d0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  200001e8  08008ef4  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ac  08008ef4  000204ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013ca0  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002593  00000000  00000000  00033eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001060  00000000  00000000  00036450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fb0  00000000  00000000  000374b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017cfb  00000000  00000000  00038460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013222  00000000  00000000  0005015b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091c86  00000000  00000000  0006337d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f5003  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057dc  00000000  00000000  000f5058  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008804 	.word	0x08008804

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	08008804 	.word	0x08008804

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bcc:	f000 b96e 	b.w	8000eac <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468c      	mov	ip, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f040 8083 	bne.w	8000cfe <__udivmoddi4+0x116>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d947      	bls.n	8000c8e <__udivmoddi4+0xa6>
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	b142      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	f1c2 0020 	rsb	r0, r2, #32
 8000c08:	fa24 f000 	lsr.w	r0, r4, r0
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	4097      	lsls	r7, r2
 8000c10:	ea40 0c01 	orr.w	ip, r0, r1
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c20:	fa1f fe87 	uxth.w	lr, r7
 8000c24:	fb08 c116 	mls	r1, r8, r6, ip
 8000c28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c3a:	f080 8119 	bcs.w	8000e70 <__udivmoddi4+0x288>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8116 	bls.w	8000e70 <__udivmoddi4+0x288>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	443b      	add	r3, r7
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c50:	fb08 3310 	mls	r3, r8, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	193c      	adds	r4, r7, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c66:	f080 8105 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	f240 8102 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c70:	3802      	subs	r0, #2
 8000c72:	443c      	add	r4, r7
 8000c74:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c78:	eba4 040e 	sub.w	r4, r4, lr
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	b11d      	cbz	r5, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c5 4300 	strd	r4, r3, [r5]
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	b902      	cbnz	r2, 8000c92 <__udivmoddi4+0xaa>
 8000c90:	deff      	udf	#255	; 0xff
 8000c92:	fab2 f282 	clz	r2, r2
 8000c96:	2a00      	cmp	r2, #0
 8000c98:	d150      	bne.n	8000d3c <__udivmoddi4+0x154>
 8000c9a:	1bcb      	subs	r3, r1, r7
 8000c9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca0:	fa1f f887 	uxth.w	r8, r7
 8000ca4:	2601      	movs	r6, #1
 8000ca6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000caa:	0c21      	lsrs	r1, r4, #16
 8000cac:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000cbc:	1879      	adds	r1, r7, r1
 8000cbe:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0xe2>
 8000cc4:	428b      	cmp	r3, r1
 8000cc6:	f200 80e9 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000cca:	4684      	mov	ip, r0
 8000ccc:	1ac9      	subs	r1, r1, r3
 8000cce:	b2a3      	uxth	r3, r4
 8000cd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cd8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cdc:	fb08 f800 	mul.w	r8, r8, r0
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x10c>
 8000ce4:	193c      	adds	r4, r7, r4
 8000ce6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x10a>
 8000cec:	45a0      	cmp	r8, r4
 8000cee:	f200 80d9 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	eba4 0408 	sub.w	r4, r4, r8
 8000cf8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cfc:	e7bf      	b.n	8000c7e <__udivmoddi4+0x96>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x12e>
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	f000 80b1 	beq.w	8000e6a <__udivmoddi4+0x282>
 8000d08:	2600      	movs	r6, #0
 8000d0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0e:	4630      	mov	r0, r6
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f683 	clz	r6, r3
 8000d1a:	2e00      	cmp	r6, #0
 8000d1c:	d14a      	bne.n	8000db4 <__udivmoddi4+0x1cc>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0x140>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80b8 	bhi.w	8000e98 <__udivmoddi4+0x2b0>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	468c      	mov	ip, r1
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	d0a8      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000d36:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d3a:	e7a5      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000d3c:	f1c2 0320 	rsb	r3, r2, #32
 8000d40:	fa20 f603 	lsr.w	r6, r0, r3
 8000d44:	4097      	lsls	r7, r2
 8000d46:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4e:	40d9      	lsrs	r1, r3
 8000d50:	4330      	orrs	r0, r6
 8000d52:	0c03      	lsrs	r3, r0, #16
 8000d54:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d58:	fa1f f887 	uxth.w	r8, r7
 8000d5c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb06 f108 	mul.w	r1, r6, r8
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x19c>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d76:	f080 808d 	bcs.w	8000e94 <__udivmoddi4+0x2ac>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 808a 	bls.w	8000e94 <__udivmoddi4+0x2ac>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b281      	uxth	r1, r0
 8000d88:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb00 f308 	mul.w	r3, r0, r8
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x1c4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000da2:	d273      	bcs.n	8000e8c <__udivmoddi4+0x2a4>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	d971      	bls.n	8000e8c <__udivmoddi4+0x2a4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	4439      	add	r1, r7
 8000dac:	1acb      	subs	r3, r1, r3
 8000dae:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000db2:	e778      	b.n	8000ca6 <__udivmoddi4+0xbe>
 8000db4:	f1c6 0c20 	rsb	ip, r6, #32
 8000db8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dbc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dc0:	431c      	orrs	r4, r3
 8000dc2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dc6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dca:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dce:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	0c3b      	lsrs	r3, r7, #16
 8000dd6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dda:	fa1f f884 	uxth.w	r8, r4
 8000dde:	fb0e 1119 	mls	r1, lr, r9, r1
 8000de2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000de6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dea:	458a      	cmp	sl, r1
 8000dec:	fa02 f206 	lsl.w	r2, r2, r6
 8000df0:	fa00 f306 	lsl.w	r3, r0, r6
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x220>
 8000df6:	1861      	adds	r1, r4, r1
 8000df8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000dfc:	d248      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000dfe:	458a      	cmp	sl, r1
 8000e00:	d946      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4421      	add	r1, r4
 8000e08:	eba1 010a 	sub.w	r1, r1, sl
 8000e0c:	b2bf      	uxth	r7, r7
 8000e0e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e12:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e16:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e1a:	fb00 f808 	mul.w	r8, r0, r8
 8000e1e:	45b8      	cmp	r8, r7
 8000e20:	d907      	bls.n	8000e32 <__udivmoddi4+0x24a>
 8000e22:	19e7      	adds	r7, r4, r7
 8000e24:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e28:	d22e      	bcs.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2a:	45b8      	cmp	r8, r7
 8000e2c:	d92c      	bls.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4427      	add	r7, r4
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	eba7 0708 	sub.w	r7, r7, r8
 8000e3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3e:	454f      	cmp	r7, r9
 8000e40:	46c6      	mov	lr, r8
 8000e42:	4649      	mov	r1, r9
 8000e44:	d31a      	bcc.n	8000e7c <__udivmoddi4+0x294>
 8000e46:	d017      	beq.n	8000e78 <__udivmoddi4+0x290>
 8000e48:	b15d      	cbz	r5, 8000e62 <__udivmoddi4+0x27a>
 8000e4a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e4e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e52:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e56:	40f2      	lsrs	r2, r6
 8000e58:	ea4c 0202 	orr.w	r2, ip, r2
 8000e5c:	40f7      	lsrs	r7, r6
 8000e5e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e62:	2600      	movs	r6, #0
 8000e64:	4631      	mov	r1, r6
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e70b      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e9      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6fd      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e78:	4543      	cmp	r3, r8
 8000e7a:	d2e5      	bcs.n	8000e48 <__udivmoddi4+0x260>
 8000e7c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e80:	eb69 0104 	sbc.w	r1, r9, r4
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7df      	b.n	8000e48 <__udivmoddi4+0x260>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e7d2      	b.n	8000e32 <__udivmoddi4+0x24a>
 8000e8c:	4660      	mov	r0, ip
 8000e8e:	e78d      	b.n	8000dac <__udivmoddi4+0x1c4>
 8000e90:	4681      	mov	r9, r0
 8000e92:	e7b9      	b.n	8000e08 <__udivmoddi4+0x220>
 8000e94:	4666      	mov	r6, ip
 8000e96:	e775      	b.n	8000d84 <__udivmoddi4+0x19c>
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e74a      	b.n	8000d32 <__udivmoddi4+0x14a>
 8000e9c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea0:	4439      	add	r1, r7
 8000ea2:	e713      	b.n	8000ccc <__udivmoddi4+0xe4>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	443c      	add	r4, r7
 8000ea8:	e724      	b.n	8000cf4 <__udivmoddi4+0x10c>
 8000eaa:	bf00      	nop

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <lcd16x2_i2c_sendCommand>:
#define LCD_I2C_SLAVE_ADDRESS_0  0x4E
#define LCD_I2C_SLAVE_ADDRESS_1  0x7E


static void lcd16x2_i2c_sendCommand(uint8_t command)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af02      	add	r7, sp, #8
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	71fb      	strb	r3, [r7, #7]
  const uint8_t command_0_3 = (0xF0 & (command<<4));
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	011b      	lsls	r3, r3, #4
 8000ebe:	73fb      	strb	r3, [r7, #15]
  const uint8_t command_4_7 = (0xF0 & command);
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	f023 030f 	bic.w	r3, r3, #15
 8000ec6:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 8000ec8:	7bbb      	ldrb	r3, [r7, #14]
 8000eca:	f043 030c 	orr.w	r3, r3, #12
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	723b      	strb	r3, [r7, #8]
 8000ed2:	7bbb      	ldrb	r3, [r7, #14]
 8000ed4:	f043 0308 	orr.w	r3, r3, #8
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	727b      	strb	r3, [r7, #9]
 8000edc:	7bfb      	ldrb	r3, [r7, #15]
 8000ede:	f043 030c 	orr.w	r3, r3, #12
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	72bb      	strb	r3, [r7, #10]
 8000ee6:	7bfb      	ldrb	r3, [r7, #15]
 8000ee8:	f043 0308 	orr.w	r3, r3, #8
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	72fb      	strb	r3, [r7, #11]
      command_4_7 | LCD_EN | LCD_BK_LIGHT,
      command_4_7 | LCD_BK_LIGHT,
      command_0_3 | LCD_EN | LCD_BK_LIGHT,
      command_0_3 | LCD_BK_LIGHT,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 8000ef0:	4b07      	ldr	r3, [pc, #28]	; (8000f10 <lcd16x2_i2c_sendCommand+0x60>)
 8000ef2:	6818      	ldr	r0, [r3, #0]
 8000ef4:	4b07      	ldr	r3, [pc, #28]	; (8000f14 <lcd16x2_i2c_sendCommand+0x64>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	b299      	uxth	r1, r3
 8000efa:	f107 0208 	add.w	r2, r7, #8
 8000efe:	23c8      	movs	r3, #200	; 0xc8
 8000f00:	9300      	str	r3, [sp, #0]
 8000f02:	2304      	movs	r3, #4
 8000f04:	f002 f866 	bl	8002fd4 <HAL_I2C_Master_Transmit>
}
 8000f08:	bf00      	nop
 8000f0a:	3710      	adds	r7, #16
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20000204 	.word	0x20000204
 8000f14:	20000208 	.word	0x20000208

08000f18 <lcd16x2_i2c_sendData>:

static void lcd16x2_i2c_sendData(uint8_t data)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af02      	add	r7, sp, #8
 8000f1e:	4603      	mov	r3, r0
 8000f20:	71fb      	strb	r3, [r7, #7]
  const uint8_t data_0_3 = (0xF0 & (data<<4));
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	011b      	lsls	r3, r3, #4
 8000f26:	73fb      	strb	r3, [r7, #15]
  const uint8_t data_4_7 = (0xF0 & data);
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	f023 030f 	bic.w	r3, r3, #15
 8000f2e:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 8000f30:	7bbb      	ldrb	r3, [r7, #14]
 8000f32:	f043 030d 	orr.w	r3, r3, #13
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	723b      	strb	r3, [r7, #8]
 8000f3a:	7bbb      	ldrb	r3, [r7, #14]
 8000f3c:	f043 0309 	orr.w	r3, r3, #9
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	727b      	strb	r3, [r7, #9]
 8000f44:	7bfb      	ldrb	r3, [r7, #15]
 8000f46:	f043 030d 	orr.w	r3, r3, #13
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	72bb      	strb	r3, [r7, #10]
 8000f4e:	7bfb      	ldrb	r3, [r7, #15]
 8000f50:	f043 0309 	orr.w	r3, r3, #9
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	72fb      	strb	r3, [r7, #11]
      data_4_7 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_4_7 | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_BK_LIGHT | LCD_RS,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 8000f58:	4b07      	ldr	r3, [pc, #28]	; (8000f78 <lcd16x2_i2c_sendData+0x60>)
 8000f5a:	6818      	ldr	r0, [r3, #0]
 8000f5c:	4b07      	ldr	r3, [pc, #28]	; (8000f7c <lcd16x2_i2c_sendData+0x64>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	b299      	uxth	r1, r3
 8000f62:	f107 0208 	add.w	r2, r7, #8
 8000f66:	23c8      	movs	r3, #200	; 0xc8
 8000f68:	9300      	str	r3, [sp, #0]
 8000f6a:	2304      	movs	r3, #4
 8000f6c:	f002 f832 	bl	8002fd4 <HAL_I2C_Master_Transmit>
}
 8000f70:	bf00      	nop
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000204 	.word	0x20000204
 8000f7c:	20000208 	.word	0x20000208

08000f80 <lcd16x2_i2c_init>:



bool lcd16x2_i2c_init(I2C_HandleTypeDef *pI2cHandle)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  HAL_Delay(50);
 8000f88:	2032      	movs	r0, #50	; 0x32
 8000f8a:	f001 fb5f 	bl	800264c <HAL_Delay>
  lcd16x2_i2cHandle = pI2cHandle;
 8000f8e:	4a30      	ldr	r2, [pc, #192]	; (8001050 <lcd16x2_i2c_init+0xd0>)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6013      	str	r3, [r2, #0]
  if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_0, 5, 500) != HAL_OK)
 8000f94:	4b2e      	ldr	r3, [pc, #184]	; (8001050 <lcd16x2_i2c_init+0xd0>)
 8000f96:	6818      	ldr	r0, [r3, #0]
 8000f98:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000f9c:	2205      	movs	r2, #5
 8000f9e:	214e      	movs	r1, #78	; 0x4e
 8000fa0:	f002 f916 	bl	80031d0 <HAL_I2C_IsDeviceReady>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d010      	beq.n	8000fcc <lcd16x2_i2c_init+0x4c>
  {
    if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_1, 5, 500) != HAL_OK)
 8000faa:	4b29      	ldr	r3, [pc, #164]	; (8001050 <lcd16x2_i2c_init+0xd0>)
 8000fac:	6818      	ldr	r0, [r3, #0]
 8000fae:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000fb2:	2205      	movs	r2, #5
 8000fb4:	217e      	movs	r1, #126	; 0x7e
 8000fb6:	f002 f90b 	bl	80031d0 <HAL_I2C_IsDeviceReady>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <lcd16x2_i2c_init+0x44>
    {
      return false;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	e040      	b.n	8001046 <lcd16x2_i2c_init+0xc6>
    }
    else
    {
      LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_1;
 8000fc4:	4b23      	ldr	r3, [pc, #140]	; (8001054 <lcd16x2_i2c_init+0xd4>)
 8000fc6:	227e      	movs	r2, #126	; 0x7e
 8000fc8:	701a      	strb	r2, [r3, #0]
 8000fca:	e002      	b.n	8000fd2 <lcd16x2_i2c_init+0x52>
    }
  }
  else
  {
    LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_0;
 8000fcc:	4b21      	ldr	r3, [pc, #132]	; (8001054 <lcd16x2_i2c_init+0xd4>)
 8000fce:	224e      	movs	r2, #78	; 0x4e
 8000fd0:	701a      	strb	r2, [r3, #0]
  }

  HAL_Delay(45);
 8000fd2:	202d      	movs	r0, #45	; 0x2d
 8000fd4:	f001 fb3a 	bl	800264c <HAL_Delay>

  lcd16x2_i2c_sendCommand(0x30);
 8000fd8:	2030      	movs	r0, #48	; 0x30
 8000fda:	f7ff ff69 	bl	8000eb0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(5);
 8000fde:	2005      	movs	r0, #5
 8000fe0:	f001 fb34 	bl	800264c <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 8000fe4:	2030      	movs	r0, #48	; 0x30
 8000fe6:	f7ff ff63 	bl	8000eb0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 8000fea:	2001      	movs	r0, #1
 8000fec:	f001 fb2e 	bl	800264c <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 8000ff0:	2030      	movs	r0, #48	; 0x30
 8000ff2:	f7ff ff5d 	bl	8000eb0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 8000ff6:	2008      	movs	r0, #8
 8000ff8:	f001 fb28 	bl	800264c <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x20);
 8000ffc:	2020      	movs	r0, #32
 8000ffe:	f7ff ff57 	bl	8000eb0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 8001002:	2008      	movs	r0, #8
 8001004:	f001 fb22 	bl	800264c <HAL_Delay>

  lcd16x2_i2c_sendCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 8001008:	2028      	movs	r0, #40	; 0x28
 800100a:	f7ff ff51 	bl	8000eb0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 800100e:	2001      	movs	r0, #1
 8001010:	f001 fb1c 	bl	800264c <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL);
 8001014:	2008      	movs	r0, #8
 8001016:	f7ff ff4b 	bl	8000eb0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 800101a:	2001      	movs	r0, #1
 800101c:	f001 fb16 	bl	800264c <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_CLEARDISPLAY);
 8001020:	2001      	movs	r0, #1
 8001022:	f7ff ff45 	bl	8000eb0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 8001026:	2003      	movs	r0, #3
 8001028:	f001 fb10 	bl	800264c <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x04 | LCD_ENTRY_ID);
 800102c:	2006      	movs	r0, #6
 800102e:	f7ff ff3f 	bl	8000eb0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f001 fb0a 	bl	800264c <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_D);
 8001038:	200c      	movs	r0, #12
 800103a:	f7ff ff39 	bl	8000eb0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 800103e:	2003      	movs	r0, #3
 8001040:	f001 fb04 	bl	800264c <HAL_Delay>

  return true;
 8001044:	2301      	movs	r3, #1
}
 8001046:	4618      	mov	r0, r3
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000204 	.word	0x20000204
 8001054:	20000208 	.word	0x20000208

08001058 <lcd16x2_i2c_setCursor>:


void lcd16x2_i2c_setCursor(uint8_t row, uint8_t col)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	460a      	mov	r2, r1
 8001062:	71fb      	strb	r3, [r7, #7]
 8001064:	4613      	mov	r3, r2
 8001066:	71bb      	strb	r3, [r7, #6]
  uint8_t maskData;
  maskData = (col)&0x0F;
 8001068:	79bb      	ldrb	r3, [r7, #6]
 800106a:	f003 030f 	and.w	r3, r3, #15
 800106e:	73fb      	strb	r3, [r7, #15]
  if(row==0)
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d108      	bne.n	8001088 <lcd16x2_i2c_setCursor+0x30>
  {
    maskData |= (0x80);
 8001076:	7bfb      	ldrb	r3, [r7, #15]
 8001078:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800107c:	73fb      	strb	r3, [r7, #15]
    lcd16x2_i2c_sendCommand(maskData);
 800107e:	7bfb      	ldrb	r3, [r7, #15]
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff ff15 	bl	8000eb0 <lcd16x2_i2c_sendCommand>
  else
  {
    maskData |= (0xc0);
    lcd16x2_i2c_sendCommand(maskData);
  }
}
 8001086:	e007      	b.n	8001098 <lcd16x2_i2c_setCursor+0x40>
    maskData |= (0xc0);
 8001088:	7bfb      	ldrb	r3, [r7, #15]
 800108a:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800108e:	73fb      	strb	r3, [r7, #15]
    lcd16x2_i2c_sendCommand(maskData);
 8001090:	7bfb      	ldrb	r3, [r7, #15]
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff ff0c 	bl	8000eb0 <lcd16x2_i2c_sendCommand>
}
 8001098:	bf00      	nop
 800109a:	3710      	adds	r7, #16
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <lcd16x2_i2c_clear>:



void lcd16x2_i2c_clear(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  lcd16x2_i2c_sendCommand(LCD_CLEARDISPLAY);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff03 	bl	8000eb0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 80010aa:	2003      	movs	r0, #3
 80010ac:	f001 face 	bl	800264c <HAL_Delay>
}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <lcd16x2_i2c_printf>:



void lcd16x2_i2c_printf(const char* str, ...)
{
 80010b4:	b40f      	push	{r0, r1, r2, r3}
 80010b6:	b590      	push	{r4, r7, lr}
 80010b8:	b089      	sub	sp, #36	; 0x24
 80010ba:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;
  va_start(args, str);
 80010bc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80010c0:	607b      	str	r3, [r7, #4]
  vsprintf(stringArray, str, args);
 80010c2:	f107 0308 	add.w	r3, r7, #8
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80010ca:	4618      	mov	r0, r3
 80010cc:	f005 f988 	bl	80063e0 <vsiprintf>
  va_end(args);
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 80010d0:	2300      	movs	r3, #0
 80010d2:	77fb      	strb	r3, [r7, #31]
 80010d4:	e00b      	b.n	80010ee <lcd16x2_i2c_printf+0x3a>
  {
    lcd16x2_i2c_sendData((uint8_t)stringArray[i]);
 80010d6:	7ffb      	ldrb	r3, [r7, #31]
 80010d8:	f107 0220 	add.w	r2, r7, #32
 80010dc:	4413      	add	r3, r2
 80010de:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff ff18 	bl	8000f18 <lcd16x2_i2c_sendData>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 80010e8:	7ffb      	ldrb	r3, [r7, #31]
 80010ea:	3301      	adds	r3, #1
 80010ec:	77fb      	strb	r3, [r7, #31]
 80010ee:	7ffc      	ldrb	r4, [r7, #31]
 80010f0:	f107 0308 	add.w	r3, r7, #8
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff f873 	bl	80001e0 <strlen>
 80010fa:	4603      	mov	r3, r0
 80010fc:	429c      	cmp	r4, r3
 80010fe:	d202      	bcs.n	8001106 <lcd16x2_i2c_printf+0x52>
 8001100:	7ffb      	ldrb	r3, [r7, #31]
 8001102:	2b0f      	cmp	r3, #15
 8001104:	d9e7      	bls.n	80010d6 <lcd16x2_i2c_printf+0x22>
  }
}
 8001106:	bf00      	nop
 8001108:	3724      	adds	r7, #36	; 0x24
 800110a:	46bd      	mov	sp, r7
 800110c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001110:	b004      	add	sp, #16
 8001112:	4770      	bx	lr

08001114 <Seg_Off>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim);


void Seg_Off(void){//다음 세그먼트 출력전 모두 꺼서 잔상 없애기
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, A_Pin|B_Pin|C_Pin|D_Pin|E_Pin|F_Pin|G_Pin, 0); //세그먼트 구성 핀 모두 끄기
 8001118:	2200      	movs	r2, #0
 800111a:	f44f 61fe 	mov.w	r1, #2032	; 0x7f0
 800111e:	4805      	ldr	r0, [pc, #20]	; (8001134 <Seg_Off+0x20>)
 8001120:	f001 fdc8 	bl	8002cb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, Dig1_Pin|Dig2_Pin|Dig3_Pin|Dig4_Pin, 1); //세그먼트 Dgit핀 모두 끄기
 8001124:	2201      	movs	r2, #1
 8001126:	210f      	movs	r1, #15
 8001128:	4803      	ldr	r0, [pc, #12]	; (8001138 <Seg_Off+0x24>)
 800112a:	f001 fdc3 	bl	8002cb4 <HAL_GPIO_WritePin>
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40020000 	.word	0x40020000
 8001138:	40020400 	.word	0x40020400

0800113c <Segment>:


void Segment() {//세그먼트 숫자 출력
 800113c:	b580      	push	{r7, lr}
 800113e:	b08a      	sub	sp, #40	; 0x28
 8001140:	af00      	add	r7, sp, #0
	unsigned char List_Of_Segment_Info[10] = { 0xC0, 0xF9, 0xA4, 0xB0, 0x99,
 8001142:	4a51      	ldr	r2, [pc, #324]	; (8001288 <Segment+0x14c>)
 8001144:	f107 031c 	add.w	r3, r7, #28
 8001148:	ca07      	ldmia	r2, {r0, r1, r2}
 800114a:	c303      	stmia	r3!, {r0, r1}
 800114c:	801a      	strh	r2, [r3, #0]
	 		  0x92, 0x82, 0xD8, 0x80, 0x98 };
	int addr[4];
	Seg_Off(); // 모든 세그먼트 끄기
 800114e:	f7ff ffe1 	bl	8001114 <Seg_Off>


	if(Seg_Out % 100 == 60){//60분, 24시간 카운트
 8001152:	4b4e      	ldr	r3, [pc, #312]	; (800128c <Segment+0x150>)
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	4b4e      	ldr	r3, [pc, #312]	; (8001290 <Segment+0x154>)
 8001158:	fb83 1302 	smull	r1, r3, r3, r2
 800115c:	1159      	asrs	r1, r3, #5
 800115e:	17d3      	asrs	r3, r2, #31
 8001160:	1acb      	subs	r3, r1, r3
 8001162:	2164      	movs	r1, #100	; 0x64
 8001164:	fb01 f303 	mul.w	r3, r1, r3
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	2b3c      	cmp	r3, #60	; 0x3c
 800116c:	d105      	bne.n	800117a <Segment+0x3e>
		Seg_Out = Seg_Out + 40;
 800116e:	4b47      	ldr	r3, [pc, #284]	; (800128c <Segment+0x150>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	3328      	adds	r3, #40	; 0x28
 8001174:	4a45      	ldr	r2, [pc, #276]	; (800128c <Segment+0x150>)
 8001176:	6013      	str	r3, [r2, #0]
 8001178:	e007      	b.n	800118a <Segment+0x4e>
	}
	else if(Seg_Out >= 2400){
 800117a:	4b44      	ldr	r3, [pc, #272]	; (800128c <Segment+0x150>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8001182:	db02      	blt.n	800118a <Segment+0x4e>
		Seg_Out = 0;
 8001184:	4b41      	ldr	r3, [pc, #260]	; (800128c <Segment+0x150>)
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
	}

	addr[0] = Seg_Out / 1000;
 800118a:	4b40      	ldr	r3, [pc, #256]	; (800128c <Segment+0x150>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a41      	ldr	r2, [pc, #260]	; (8001294 <Segment+0x158>)
 8001190:	fb82 1203 	smull	r1, r2, r2, r3
 8001194:	1192      	asrs	r2, r2, #6
 8001196:	17db      	asrs	r3, r3, #31
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	60fb      	str	r3, [r7, #12]
	addr[1] = Seg_Out % 1000 / 100;
 800119c:	4b3b      	ldr	r3, [pc, #236]	; (800128c <Segment+0x150>)
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	4b3c      	ldr	r3, [pc, #240]	; (8001294 <Segment+0x158>)
 80011a2:	fb83 1302 	smull	r1, r3, r3, r2
 80011a6:	1199      	asrs	r1, r3, #6
 80011a8:	17d3      	asrs	r3, r2, #31
 80011aa:	1acb      	subs	r3, r1, r3
 80011ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011b0:	fb01 f303 	mul.w	r3, r1, r3
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	4a36      	ldr	r2, [pc, #216]	; (8001290 <Segment+0x154>)
 80011b8:	fb82 1203 	smull	r1, r2, r2, r3
 80011bc:	1152      	asrs	r2, r2, #5
 80011be:	17db      	asrs	r3, r3, #31
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	613b      	str	r3, [r7, #16]
	addr[2] = Seg_Out % 100 / 10;
 80011c4:	4b31      	ldr	r3, [pc, #196]	; (800128c <Segment+0x150>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	4b31      	ldr	r3, [pc, #196]	; (8001290 <Segment+0x154>)
 80011ca:	fb83 1302 	smull	r1, r3, r3, r2
 80011ce:	1159      	asrs	r1, r3, #5
 80011d0:	17d3      	asrs	r3, r2, #31
 80011d2:	1acb      	subs	r3, r1, r3
 80011d4:	2164      	movs	r1, #100	; 0x64
 80011d6:	fb01 f303 	mul.w	r3, r1, r3
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	4a2e      	ldr	r2, [pc, #184]	; (8001298 <Segment+0x15c>)
 80011de:	fb82 1203 	smull	r1, r2, r2, r3
 80011e2:	1092      	asrs	r2, r2, #2
 80011e4:	17db      	asrs	r3, r3, #31
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	617b      	str	r3, [r7, #20]
	addr[3] = Seg_Out % 10;
 80011ea:	4b28      	ldr	r3, [pc, #160]	; (800128c <Segment+0x150>)
 80011ec:	6819      	ldr	r1, [r3, #0]
 80011ee:	4b2a      	ldr	r3, [pc, #168]	; (8001298 <Segment+0x15c>)
 80011f0:	fb83 2301 	smull	r2, r3, r3, r1
 80011f4:	109a      	asrs	r2, r3, #2
 80011f6:	17cb      	asrs	r3, r1, #31
 80011f8:	1ad2      	subs	r2, r2, r3
 80011fa:	4613      	mov	r3, r2
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	4413      	add	r3, r2
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	1aca      	subs	r2, r1, r3
 8001204:	61ba      	str	r2, [r7, #24]


	uint16_t i[4] = {1,2,4,8}; //세그먼트 Dgit 조정
 8001206:	4a25      	ldr	r2, [pc, #148]	; (800129c <Segment+0x160>)
 8001208:	1d3b      	adds	r3, r7, #4
 800120a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800120e:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_GPIO_WritePin(GPIOB, i[segdig], 0);
 8001212:	4b23      	ldr	r3, [pc, #140]	; (80012a0 <Segment+0x164>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800121c:	4413      	add	r3, r2
 800121e:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8001222:	2200      	movs	r2, #0
 8001224:	4619      	mov	r1, r3
 8001226:	481f      	ldr	r0, [pc, #124]	; (80012a4 <Segment+0x168>)
 8001228:	f001 fd44 	bl	8002cb4 <HAL_GPIO_WritePin>

	uint16_t j = 0;//출력 핀과 입력 값의 비트연산을 위한 변수
 800122c:	2300      	movs	r3, #0
 800122e:	84fb      	strh	r3, [r7, #38]	; 0x26

	j |= (~(List_Of_Segment_Info[addr[segdig]]&0xFF))<<4; //PA4 부터로 옮기고시프트 4로 변경
 8001230:	4b1b      	ldr	r3, [pc, #108]	; (80012a0 <Segment+0x164>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800123a:	4413      	add	r3, r2
 800123c:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8001240:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001244:	4413      	add	r3, r2
 8001246:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800124a:	43db      	mvns	r3, r3
 800124c:	011b      	lsls	r3, r3, #4
 800124e:	b21a      	sxth	r2, r3
 8001250:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001254:	4313      	orrs	r3, r2
 8001256:	b21b      	sxth	r3, r3
 8001258:	84fb      	strh	r3, [r7, #38]	; 0x26
	HAL_GPIO_WritePin(GPIOA, j, 1);
 800125a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800125c:	2201      	movs	r2, #1
 800125e:	4619      	mov	r1, r3
 8001260:	4811      	ldr	r0, [pc, #68]	; (80012a8 <Segment+0x16c>)
 8001262:	f001 fd27 	bl	8002cb4 <HAL_GPIO_WritePin>

	segdig++;
 8001266:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <Segment+0x164>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	3301      	adds	r3, #1
 800126c:	4a0c      	ldr	r2, [pc, #48]	; (80012a0 <Segment+0x164>)
 800126e:	6013      	str	r3, [r2, #0]
	if (segdig == 4){
 8001270:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <Segment+0x164>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2b04      	cmp	r3, #4
 8001276:	d102      	bne.n	800127e <Segment+0x142>
		segdig = 0;
 8001278:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <Segment+0x164>)
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
	}

}
 800127e:	bf00      	nop
 8001280:	3728      	adds	r7, #40	; 0x28
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	08008820 	.word	0x08008820
 800128c:	20000000 	.word	0x20000000
 8001290:	51eb851f 	.word	0x51eb851f
 8001294:	10624dd3 	.word	0x10624dd3
 8001298:	66666667 	.word	0x66666667
 800129c:	0800882c 	.word	0x0800882c
 80012a0:	2000020c 	.word	0x2000020c
 80012a4:	40020400 	.word	0x40020400
 80012a8:	40020000 	.word	0x40020000

080012ac <check_CO2>:
	Dfalling_time  = 0;

}


void check_CO2(){
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0

	TH =  falling_time - rising_time;
 80012b0:	4b18      	ldr	r3, [pc, #96]	; (8001314 <check_CO2+0x68>)
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	4b18      	ldr	r3, [pc, #96]	; (8001318 <check_CO2+0x6c>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	461a      	mov	r2, r3
 80012bc:	4b17      	ldr	r3, [pc, #92]	; (800131c <check_CO2+0x70>)
 80012be:	601a      	str	r2, [r3, #0]
	TL = rerising_time - falling_time;
 80012c0:	4b17      	ldr	r3, [pc, #92]	; (8001320 <check_CO2+0x74>)
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	4b13      	ldr	r3, [pc, #76]	; (8001314 <check_CO2+0x68>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	461a      	mov	r2, r3
 80012cc:	4b15      	ldr	r3, [pc, #84]	; (8001324 <check_CO2+0x78>)
 80012ce:	601a      	str	r2, [r3, #0]
	C = 2000*(TH-2)/(TH+TL-4)+250;
 80012d0:	4b12      	ldr	r3, [pc, #72]	; (800131c <check_CO2+0x70>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80012d8:	fb02 f303 	mul.w	r3, r2, r3
 80012dc:	f5a3 627a 	sub.w	r2, r3, #4000	; 0xfa0
 80012e0:	4b0e      	ldr	r3, [pc, #56]	; (800131c <check_CO2+0x70>)
 80012e2:	6819      	ldr	r1, [r3, #0]
 80012e4:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <check_CO2+0x78>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	440b      	add	r3, r1
 80012ea:	3b04      	subs	r3, #4
 80012ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80012f0:	33fa      	adds	r3, #250	; 0xfa
 80012f2:	461a      	mov	r2, r3
 80012f4:	4b0c      	ldr	r3, [pc, #48]	; (8001328 <check_CO2+0x7c>)
 80012f6:	601a      	str	r2, [r3, #0]

	rising_time = 0;
 80012f8:	4b07      	ldr	r3, [pc, #28]	; (8001318 <check_CO2+0x6c>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
	falling_time  = 0;
 80012fe:	4b05      	ldr	r3, [pc, #20]	; (8001314 <check_CO2+0x68>)
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
	rerising_time = 0;
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <check_CO2+0x74>)
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]

}
 800130a:	bf00      	nop
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	20000444 	.word	0x20000444
 8001318:	20000448 	.word	0x20000448
 800131c:	20000370 	.word	0x20000370
 8001320:	2000044c 	.word	0x2000044c
 8001324:	20000358 	.word	0x20000358
 8001328:	20000308 	.word	0x20000308

0800132c <LCD_Load_Print>:


void LCD_Load_Print(){
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0


	  sprintf(Line1, "Air-Alarm V1.0.0");
 8001330:	490e      	ldr	r1, [pc, #56]	; (800136c <LCD_Load_Print+0x40>)
 8001332:	480f      	ldr	r0, [pc, #60]	; (8001370 <LCD_Load_Print+0x44>)
 8001334:	f005 f81e 	bl	8006374 <siprintf>
	  sprintf(Line2, "Air Monitor");
 8001338:	490e      	ldr	r1, [pc, #56]	; (8001374 <LCD_Load_Print+0x48>)
 800133a:	480f      	ldr	r0, [pc, #60]	; (8001378 <LCD_Load_Print+0x4c>)
 800133c:	f005 f81a 	bl	8006374 <siprintf>
	  lcd16x2_i2c_clear();
 8001340:	f7ff feae 	bl	80010a0 <lcd16x2_i2c_clear>
	  lcd16x2_i2c_setCursor(0,0);
 8001344:	2100      	movs	r1, #0
 8001346:	2000      	movs	r0, #0
 8001348:	f7ff fe86 	bl	8001058 <lcd16x2_i2c_setCursor>
	  lcd16x2_i2c_printf(Line1);
 800134c:	4808      	ldr	r0, [pc, #32]	; (8001370 <LCD_Load_Print+0x44>)
 800134e:	f7ff feb1 	bl	80010b4 <lcd16x2_i2c_printf>
	  lcd16x2_i2c_setCursor(1,0);
 8001352:	2100      	movs	r1, #0
 8001354:	2001      	movs	r0, #1
 8001356:	f7ff fe7f 	bl	8001058 <lcd16x2_i2c_setCursor>
	  lcd16x2_i2c_printf(Line2);
 800135a:	4807      	ldr	r0, [pc, #28]	; (8001378 <LCD_Load_Print+0x4c>)
 800135c:	f7ff feaa 	bl	80010b4 <lcd16x2_i2c_printf>
	  lcd = 0;
 8001360:	4b06      	ldr	r3, [pc, #24]	; (800137c <LCD_Load_Print+0x50>)
 8001362:	2200      	movs	r2, #0
 8001364:	701a      	strb	r2, [r3, #0]

}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	08008834 	.word	0x08008834
 8001370:	2000035c 	.word	0x2000035c
 8001374:	08008848 	.word	0x08008848
 8001378:	200002f0 	.word	0x200002f0
 800137c:	20000004 	.word	0x20000004

08001380 <DHT_Startbit>:

void DHT_Startbit(){
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};//아웃풋 모드로 변경
 8001386:	1d3b      	adds	r3, r7, #4
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 1);
 8001394:	2201      	movs	r2, #1
 8001396:	2120      	movs	r1, #32
 8001398:	480c      	ldr	r0, [pc, #48]	; (80013cc <DHT_Startbit+0x4c>)
 800139a:	f001 fc8b 	bl	8002cb4 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 800139e:	2320      	movs	r3, #32
 80013a0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80013a2:	2311      	movs	r3, #17
 80013a4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013a6:	2301      	movs	r3, #1
 80013a8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013aa:	2302      	movs	r3, #2
 80013ac:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ae:	1d3b      	adds	r3, r7, #4
 80013b0:	4619      	mov	r1, r3
 80013b2:	4806      	ldr	r0, [pc, #24]	; (80013cc <DHT_Startbit+0x4c>)
 80013b4:	f001 fae2 	bl	800297c <HAL_GPIO_Init>


	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 0);
 80013b8:	2200      	movs	r2, #0
 80013ba:	2120      	movs	r1, #32
 80013bc:	4803      	ldr	r0, [pc, #12]	; (80013cc <DHT_Startbit+0x4c>)
 80013be:	f001 fc79 	bl	8002cb4 <HAL_GPIO_WritePin>

}
 80013c2:	bf00      	nop
 80013c4:	3718      	adds	r7, #24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40020800 	.word	0x40020800

080013d0 <DHT_getData>:

char DHT_getData() {// 다음 측정주기까지1ms 이상 여유 있어야함.
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08a      	sub	sp, #40	; 0x28
 80013d4:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 1);
 80013d6:	2201      	movs	r2, #1
 80013d8:	2120      	movs	r1, #32
 80013da:	487a      	ldr	r0, [pc, #488]	; (80015c4 <DHT_getData+0x1f4>)
 80013dc:	f001 fc6a 	bl	8002cb4 <HAL_GPIO_WritePin>

	GPIO_InitTypeDef GPIO_InitStruct = {0};//인풋 모드로 변경
 80013e0:	f107 0308 	add.w	r3, r7, #8
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 80013f0:	2320      	movs	r3, #32
 80013f2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013f4:	2300      	movs	r3, #0
 80013f6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013f8:	2301      	movs	r3, #1
 80013fa:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013fc:	f107 0308 	add.w	r3, r7, #8
 8001400:	4619      	mov	r1, r3
 8001402:	4870      	ldr	r0, [pc, #448]	; (80015c4 <DHT_getData+0x1f4>)
 8001404:	f001 faba 	bl	800297c <HAL_GPIO_Init>

	uint16_t timeout = 0;
 8001408:	2300      	movs	r3, #0
 800140a:	84fb      	strh	r3, [r7, #38]	; 0x26
	while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5)) {
 800140c:	e009      	b.n	8001422 <DHT_getData+0x52>
		timeout++;
 800140e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001410:	3301      	adds	r3, #1
 8001412:	84fb      	strh	r3, [r7, #38]	; 0x26
		if (timeout > 10000) return 1;//10000회 반복동안 값 안들어오면 측정하지 않고 리턴
 8001414:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001416:	f242 7210 	movw	r2, #10000	; 0x2710
 800141a:	4293      	cmp	r3, r2
 800141c:	d901      	bls.n	8001422 <DHT_getData+0x52>
 800141e:	2301      	movs	r3, #1
 8001420:	e0cc      	b.n	80015bc <DHT_getData+0x1ec>
	while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5)) {
 8001422:	2120      	movs	r1, #32
 8001424:	4867      	ldr	r0, [pc, #412]	; (80015c4 <DHT_getData+0x1f4>)
 8001426:	f001 fc2d 	bl	8002c84 <HAL_GPIO_ReadPin>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d1ee      	bne.n	800140e <DHT_getData+0x3e>
	}
	timeout = 0;
 8001430:	2300      	movs	r3, #0
 8001432:	84fb      	strh	r3, [r7, #38]	; 0x26

	while(!(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5))) {
 8001434:	e009      	b.n	800144a <DHT_getData+0x7a>
		timeout++;
 8001436:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001438:	3301      	adds	r3, #1
 800143a:	84fb      	strh	r3, [r7, #38]	; 0x26
		if (timeout > 10000) return 1;
 800143c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800143e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001442:	4293      	cmp	r3, r2
 8001444:	d901      	bls.n	800144a <DHT_getData+0x7a>
 8001446:	2301      	movs	r3, #1
 8001448:	e0b8      	b.n	80015bc <DHT_getData+0x1ec>
	while(!(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5))) {
 800144a:	2120      	movs	r1, #32
 800144c:	485d      	ldr	r0, [pc, #372]	; (80015c4 <DHT_getData+0x1f4>)
 800144e:	f001 fc19 	bl	8002c84 <HAL_GPIO_ReadPin>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d0ee      	beq.n	8001436 <DHT_getData+0x66>
	}
	timeout = 0;
 8001458:	2300      	movs	r3, #0
 800145a:	84fb      	strh	r3, [r7, #38]	; 0x26

	while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5)) {
 800145c:	e009      	b.n	8001472 <DHT_getData+0xa2>
		timeout++;
 800145e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001460:	3301      	adds	r3, #1
 8001462:	84fb      	strh	r3, [r7, #38]	; 0x26
		if (timeout > 10000) return 1;
 8001464:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001466:	f242 7210 	movw	r2, #10000	; 0x2710
 800146a:	4293      	cmp	r3, r2
 800146c:	d901      	bls.n	8001472 <DHT_getData+0xa2>
 800146e:	2301      	movs	r3, #1
 8001470:	e0a4      	b.n	80015bc <DHT_getData+0x1ec>
	while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5)) {
 8001472:	2120      	movs	r1, #32
 8001474:	4853      	ldr	r0, [pc, #332]	; (80015c4 <DHT_getData+0x1f4>)
 8001476:	f001 fc05 	bl	8002c84 <HAL_GPIO_ReadPin>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d1ee      	bne.n	800145e <DHT_getData+0x8e>
	}

	uint8_t rawData[5] = {0,0,0,0,0};
 8001480:	4a51      	ldr	r2, [pc, #324]	; (80015c8 <DHT_getData+0x1f8>)
 8001482:	463b      	mov	r3, r7
 8001484:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001488:	6018      	str	r0, [r3, #0]
 800148a:	3304      	adds	r3, #4
 800148c:	7019      	strb	r1, [r3, #0]
	for(uint8_t a = 0; a < 5; a++) {
 800148e:	2300      	movs	r3, #0
 8001490:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001494:	e049      	b.n	800152a <DHT_getData+0x15a>
		for(uint8_t b = 7; b != 255; b--) {
 8001496:	2307      	movs	r3, #7
 8001498:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800149c:	e03c      	b.n	8001518 <DHT_getData+0x148>
			uint32_t hT = 0, lT = 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	623b      	str	r3, [r7, #32]
 80014a2:	2300      	movs	r3, #0
 80014a4:	61fb      	str	r3, [r7, #28]

			while(!(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5))) lT++;
 80014a6:	e002      	b.n	80014ae <DHT_getData+0xde>
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	3301      	adds	r3, #1
 80014ac:	61fb      	str	r3, [r7, #28]
 80014ae:	2120      	movs	r1, #32
 80014b0:	4844      	ldr	r0, [pc, #272]	; (80015c4 <DHT_getData+0x1f4>)
 80014b2:	f001 fbe7 	bl	8002c84 <HAL_GPIO_ReadPin>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d0f5      	beq.n	80014a8 <DHT_getData+0xd8>

			timeout = 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	84fb      	strh	r3, [r7, #38]	; 0x26
			while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5)) hT++;
 80014c0:	e002      	b.n	80014c8 <DHT_getData+0xf8>
 80014c2:	6a3b      	ldr	r3, [r7, #32]
 80014c4:	3301      	adds	r3, #1
 80014c6:	623b      	str	r3, [r7, #32]
 80014c8:	2120      	movs	r1, #32
 80014ca:	483e      	ldr	r0, [pc, #248]	; (80015c4 <DHT_getData+0x1f4>)
 80014cc:	f001 fbda 	bl	8002c84 <HAL_GPIO_ReadPin>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1f5      	bne.n	80014c2 <DHT_getData+0xf2>
			if(hT > lT) rawData[a] |= (1<<b);
 80014d6:	6a3a      	ldr	r2, [r7, #32]
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	429a      	cmp	r2, r3
 80014dc:	d917      	bls.n	800150e <DHT_getData+0x13e>
 80014de:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80014e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80014e6:	4413      	add	r3, r2
 80014e8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80014ec:	b25a      	sxtb	r2, r3
 80014ee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80014f2:	2101      	movs	r1, #1
 80014f4:	fa01 f303 	lsl.w	r3, r1, r3
 80014f8:	b25b      	sxtb	r3, r3
 80014fa:	4313      	orrs	r3, r2
 80014fc:	b25a      	sxtb	r2, r3
 80014fe:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001502:	b2d2      	uxtb	r2, r2
 8001504:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001508:	440b      	add	r3, r1
 800150a:	f803 2c28 	strb.w	r2, [r3, #-40]
		for(uint8_t b = 7; b != 255; b--) {
 800150e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001512:	3b01      	subs	r3, #1
 8001514:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001518:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800151c:	2bff      	cmp	r3, #255	; 0xff
 800151e:	d1be      	bne.n	800149e <DHT_getData+0xce>
	for(uint8_t a = 0; a < 5; a++) {
 8001520:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001524:	3301      	adds	r3, #1
 8001526:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800152a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800152e:	2b04      	cmp	r3, #4
 8001530:	d9b1      	bls.n	8001496 <DHT_getData+0xc6>
		}
	}


	if((uint8_t)(rawData[0] + rawData[1] + rawData[2] + rawData[3]) == rawData[4]) {//오류 검사
 8001532:	783a      	ldrb	r2, [r7, #0]
 8001534:	787b      	ldrb	r3, [r7, #1]
 8001536:	4413      	add	r3, r2
 8001538:	b2da      	uxtb	r2, r3
 800153a:	78bb      	ldrb	r3, [r7, #2]
 800153c:	4413      	add	r3, r2
 800153e:	b2da      	uxtb	r2, r3
 8001540:	78fb      	ldrb	r3, [r7, #3]
 8001542:	4413      	add	r3, r2
 8001544:	b2da      	uxtb	r2, r3
 8001546:	793b      	ldrb	r3, [r7, #4]
 8001548:	429a      	cmp	r2, r3
 800154a:	d136      	bne.n	80015ba <DHT_getData+0x1ea>
		temp_Humi[1] = (float)(((uint16_t)rawData[0]<<8) | rawData[1])*0.1f;
 800154c:	783b      	ldrb	r3, [r7, #0]
 800154e:	021b      	lsls	r3, r3, #8
 8001550:	787a      	ldrb	r2, [r7, #1]
 8001552:	4313      	orrs	r3, r2
 8001554:	ee07 3a90 	vmov	s15, r3
 8001558:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800155c:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80015cc <DHT_getData+0x1fc>
 8001560:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001564:	4b1a      	ldr	r3, [pc, #104]	; (80015d0 <DHT_getData+0x200>)
 8001566:	edc3 7a01 	vstr	s15, [r3, #4]
		if(!(rawData[2] & (1<<7))) {
 800156a:	78bb      	ldrb	r3, [r7, #2]
 800156c:	b25b      	sxtb	r3, r3
 800156e:	2b00      	cmp	r3, #0
 8001570:	db0f      	blt.n	8001592 <DHT_getData+0x1c2>

			temp_Humi[0] = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*0.1f;
 8001572:	78bb      	ldrb	r3, [r7, #2]
 8001574:	021b      	lsls	r3, r3, #8
 8001576:	78fa      	ldrb	r2, [r7, #3]
 8001578:	4313      	orrs	r3, r2
 800157a:	ee07 3a90 	vmov	s15, r3
 800157e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001582:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80015cc <DHT_getData+0x1fc>
 8001586:	ee67 7a87 	vmul.f32	s15, s15, s14
 800158a:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <DHT_getData+0x200>)
 800158c:	edc3 7a00 	vstr	s15, [r3]
 8001590:	e013      	b.n	80015ba <DHT_getData+0x1ea>
		}	else {
			rawData[2] &= ~(1<<7);
 8001592:	78bb      	ldrb	r3, [r7, #2]
 8001594:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001598:	b2db      	uxtb	r3, r3
 800159a:	70bb      	strb	r3, [r7, #2]
			temp_Humi[0] = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*-0.1f;
 800159c:	78bb      	ldrb	r3, [r7, #2]
 800159e:	021b      	lsls	r3, r3, #8
 80015a0:	78fa      	ldrb	r2, [r7, #3]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	ee07 3a90 	vmov	s15, r3
 80015a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015ac:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80015d4 <DHT_getData+0x204>
 80015b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015b4:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <DHT_getData+0x200>)
 80015b6:	edc3 7a00 	vstr	s15, [r3]
		}
	}
	return 0;// 정상 종료
 80015ba:	2300      	movs	r3, #0
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3728      	adds	r7, #40	; 0x28
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40020800 	.word	0x40020800
 80015c8:	08008854 	.word	0x08008854
 80015cc:	3dcccccd 	.word	0x3dcccccd
 80015d0:	20000214 	.word	0x20000214
 80015d4:	bdcccccd 	.word	0xbdcccccd

080015d8 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)//GPIO 인터럽트 콜백
{
 80015d8:	b480      	push	{r7}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == 8192) {	//버튼 눌르면 1분 올리기
 80015e2:	88fb      	ldrh	r3, [r7, #6]
 80015e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015e8:	d11e      	bne.n	8001628 <HAL_GPIO_EXTI_Callback+0x50>

		int gap =
				Loop_Count < Old_Loop_Count ?
 80015ea:	4b23      	ldr	r3, [pc, #140]	; (8001678 <HAL_GPIO_EXTI_Callback+0xa0>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	4b23      	ldr	r3, [pc, #140]	; (800167c <HAL_GPIO_EXTI_Callback+0xa4>)
 80015f0:	681b      	ldr	r3, [r3, #0]
						Old_Loop_Count - Loop_Count :
 80015f2:	429a      	cmp	r2, r3
 80015f4:	da05      	bge.n	8001602 <HAL_GPIO_EXTI_Callback+0x2a>
 80015f6:	4b21      	ldr	r3, [pc, #132]	; (800167c <HAL_GPIO_EXTI_Callback+0xa4>)
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	4b1f      	ldr	r3, [pc, #124]	; (8001678 <HAL_GPIO_EXTI_Callback+0xa0>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	e004      	b.n	800160c <HAL_GPIO_EXTI_Callback+0x34>
						Loop_Count - Old_Loop_Count;
 8001602:	4b1d      	ldr	r3, [pc, #116]	; (8001678 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	4b1d      	ldr	r3, [pc, #116]	; (800167c <HAL_GPIO_EXTI_Callback+0xa4>)
 8001608:	681b      	ldr	r3, [r3, #0]
						Old_Loop_Count - Loop_Count :
 800160a:	1ad3      	subs	r3, r2, r3
		int gap =
 800160c:	60bb      	str	r3, [r7, #8]

		if (gap > 100) {
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	2b64      	cmp	r3, #100	; 0x64
 8001612:	dd04      	ble.n	800161e <HAL_GPIO_EXTI_Callback+0x46>
			Seg_Out++;
 8001614:	4b1a      	ldr	r3, [pc, #104]	; (8001680 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	3301      	adds	r3, #1
 800161a:	4a19      	ldr	r2, [pc, #100]	; (8001680 <HAL_GPIO_EXTI_Callback+0xa8>)
 800161c:	6013      	str	r3, [r2, #0]

		}
		Old_Loop_Count = Loop_Count;
 800161e:	4b16      	ldr	r3, [pc, #88]	; (8001678 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a16      	ldr	r2, [pc, #88]	; (800167c <HAL_GPIO_EXTI_Callback+0xa4>)
 8001624:	6013      	str	r3, [r2, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001626:	e021      	b.n	800166c <HAL_GPIO_EXTI_Callback+0x94>
	else if(GPIO_Pin == 16384){
 8001628:	88fb      	ldrh	r3, [r7, #6]
 800162a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800162e:	d11d      	bne.n	800166c <HAL_GPIO_EXTI_Callback+0x94>
				Loop_Count < Old_Loop_Count ?
 8001630:	4b11      	ldr	r3, [pc, #68]	; (8001678 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	4b11      	ldr	r3, [pc, #68]	; (800167c <HAL_GPIO_EXTI_Callback+0xa4>)
 8001636:	681b      	ldr	r3, [r3, #0]
						Old_Loop_Count - Loop_Count :
 8001638:	429a      	cmp	r2, r3
 800163a:	da05      	bge.n	8001648 <HAL_GPIO_EXTI_Callback+0x70>
 800163c:	4b0f      	ldr	r3, [pc, #60]	; (800167c <HAL_GPIO_EXTI_Callback+0xa4>)
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	4b0d      	ldr	r3, [pc, #52]	; (8001678 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	e004      	b.n	8001652 <HAL_GPIO_EXTI_Callback+0x7a>
						Loop_Count - Old_Loop_Count;
 8001648:	4b0b      	ldr	r3, [pc, #44]	; (8001678 <HAL_GPIO_EXTI_Callback+0xa0>)
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	4b0b      	ldr	r3, [pc, #44]	; (800167c <HAL_GPIO_EXTI_Callback+0xa4>)
 800164e:	681b      	ldr	r3, [r3, #0]
						Old_Loop_Count - Loop_Count :
 8001650:	1ad3      	subs	r3, r2, r3
		int gap =
 8001652:	60fb      	str	r3, [r7, #12]
		if (gap > 100) {
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	2b64      	cmp	r3, #100	; 0x64
 8001658:	dd04      	ble.n	8001664 <HAL_GPIO_EXTI_Callback+0x8c>
			Seg_Out = Seg_Out + 100; //1시간 올리기
 800165a:	4b09      	ldr	r3, [pc, #36]	; (8001680 <HAL_GPIO_EXTI_Callback+0xa8>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	3364      	adds	r3, #100	; 0x64
 8001660:	4a07      	ldr	r2, [pc, #28]	; (8001680 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001662:	6013      	str	r3, [r2, #0]
		Old_Loop_Count = Loop_Count;
 8001664:	4b04      	ldr	r3, [pc, #16]	; (8001678 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a04      	ldr	r2, [pc, #16]	; (800167c <HAL_GPIO_EXTI_Callback+0xa4>)
 800166a:	6013      	str	r3, [r2, #0]
}
 800166c:	bf00      	nop
 800166e:	3714      	adds	r7, #20
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	20000304 	.word	0x20000304
 800167c:	2000022c 	.word	0x2000022c
 8001680:	20000000 	.word	0x20000000

08001684 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001684:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001686:	b095      	sub	sp, #84	; 0x54
 8001688:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800168a:	f000 ff9d 	bl	80025c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800168e:	f000 f953 	bl	8001938 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001692:	f000 fae5 	bl	8001c60 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001696:	f000 f9cd 	bl	8001a34 <MX_I2C1_Init>
  MX_TIM10_Init();
 800169a:	f000 fa45 	bl	8001b28 <MX_TIM10_Init>
  MX_TIM11_Init();
 800169e:	f000 fa67 	bl	8001b70 <MX_TIM11_Init>
  MX_USART2_UART_Init();
 80016a2:	f000 fa89 	bl	8001bb8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80016a6:	f000 f9f3 	bl	8001a90 <MX_TIM2_Init>
  MX_USART6_UART_Init();
 80016aa:	f000 faaf 	bl	8001c0c <MX_USART6_UART_Init>
  HAL_UART_Receive_IT(&huart6, &rx6_data, 1);
 80016ae:	2201      	movs	r2, #1
 80016b0:	4985      	ldr	r1, [pc, #532]	; (80018c8 <main+0x244>)
 80016b2:	4886      	ldr	r0, [pc, #536]	; (80018cc <main+0x248>)
 80016b4:	f003 fa8f 	bl	8004bd6 <HAL_UART_Receive_IT>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80016b8:	f000 f9a8 	bl	8001a0c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim10);//타이머 10 시작 1ms
 80016bc:	4884      	ldr	r0, [pc, #528]	; (80018d0 <main+0x24c>)
 80016be:	f002 fdb5 	bl	800422c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);//타이머 11 시작 1s
 80016c2:	4884      	ldr	r0, [pc, #528]	; (80018d4 <main+0x250>)
 80016c4:	f002 fdb2 	bl	800422c <HAL_TIM_Base_Start_IT>
  if(lcd16x2_i2c_init(&hi2c1)){//LCD init 하기
 80016c8:	4883      	ldr	r0, [pc, #524]	; (80018d8 <main+0x254>)
 80016ca:	f7ff fc59 	bl	8000f80 <lcd16x2_i2c_init>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d005      	beq.n	80016e0 <main+0x5c>
 	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 1);
 80016d4:	2201      	movs	r2, #1
 80016d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016da:	4880      	ldr	r0, [pc, #512]	; (80018dc <main+0x258>)
 80016dc:	f001 faea 	bl	8002cb4 <HAL_GPIO_WritePin>
  }
  lcd16x2_i2c_clear();
 80016e0:	f7ff fcde 	bl	80010a0 <lcd16x2_i2c_clear>


  LCD_Load_Print();
 80016e4:	f7ff fe22 	bl	800132c <LCD_Load_Print>
  rising_check = 1;//Co2 라이징 포인트부터 잡기
 80016e8:	4b7d      	ldr	r3, [pc, #500]	; (80018e0 <main+0x25c>)
 80016ea:	2201      	movs	r2, #1
 80016ec:	701a      	strb	r2, [r3, #0]
//	  unsigned char a = '2';
//
//	  HAL_UART_Transmit(&huart2, &a, 1, 10);


	  if (ms > 1){
 80016ee:	4b7d      	ldr	r3, [pc, #500]	; (80018e4 <main+0x260>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d904      	bls.n	8001700 <main+0x7c>
	  	  		  Segment();//3ms마다 세븐세그먼트를 출력
 80016f6:	f7ff fd21 	bl	800113c <Segment>
	  	  		  ms = 0;
 80016fa:	4b7a      	ldr	r3, [pc, #488]	; (80018e4 <main+0x260>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	701a      	strb	r2, [r3, #0]
	  }

	  if (rising_time < falling_time && falling_time < rerising_time){
 8001700:	4b79      	ldr	r3, [pc, #484]	; (80018e8 <main+0x264>)
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	4b79      	ldr	r3, [pc, #484]	; (80018ec <main+0x268>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	429a      	cmp	r2, r3
 800170a:	da07      	bge.n	800171c <main+0x98>
 800170c:	4b77      	ldr	r3, [pc, #476]	; (80018ec <main+0x268>)
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	4b77      	ldr	r3, [pc, #476]	; (80018f0 <main+0x26c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	429a      	cmp	r2, r3
 8001716:	da01      	bge.n	800171c <main+0x98>
		  check_CO2();
 8001718:	f7ff fdc8 	bl	80012ac <check_CO2>
//	  if (Dfalling_time < Drising_time){
//		  check_Dust();
//	  }


	  if (Dust_time > 1000){
 800171c:	4b75      	ldr	r3, [pc, #468]	; (80018f4 <main+0x270>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001724:	dd3b      	ble.n	800179e <main+0x11a>
		  if (Dust <= 0){
 8001726:	4b74      	ldr	r3, [pc, #464]	; (80018f8 <main+0x274>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2b00      	cmp	r3, #0
 800172c:	dc03      	bgt.n	8001736 <main+0xb2>
			  Dust = 1;
 800172e:	4b72      	ldr	r3, [pc, #456]	; (80018f8 <main+0x274>)
 8001730:	2201      	movs	r2, #1
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	e030      	b.n	8001798 <main+0x114>
		  }
		  else if (Dust <= 1){
 8001736:	4b70      	ldr	r3, [pc, #448]	; (80018f8 <main+0x274>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2b01      	cmp	r3, #1
 800173c:	dc0e      	bgt.n	800175c <main+0xd8>
			  Dust = Dust + (rand()%2);
 800173e:	f004 fdd9 	bl	80062f4 <rand>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	bfb8      	it	lt
 800174c:	425b      	neglt	r3, r3
 800174e:	461a      	mov	r2, r3
 8001750:	4b69      	ldr	r3, [pc, #420]	; (80018f8 <main+0x274>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4413      	add	r3, r2
 8001756:	4a68      	ldr	r2, [pc, #416]	; (80018f8 <main+0x274>)
 8001758:	6013      	str	r3, [r2, #0]
 800175a:	e01d      	b.n	8001798 <main+0x114>
		  }
		  else if (Dust > 15){
 800175c:	4b66      	ldr	r3, [pc, #408]	; (80018f8 <main+0x274>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2b0f      	cmp	r3, #15
 8001762:	dd07      	ble.n	8001774 <main+0xf0>
			  Dust = Dust + ((rand()%1) - 1);
 8001764:	f004 fdc6 	bl	80062f4 <rand>
 8001768:	4b63      	ldr	r3, [pc, #396]	; (80018f8 <main+0x274>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	3b01      	subs	r3, #1
 800176e:	4a62      	ldr	r2, [pc, #392]	; (80018f8 <main+0x274>)
 8001770:	6013      	str	r3, [r2, #0]
 8001772:	e011      	b.n	8001798 <main+0x114>
		  }
		  else{
			  Dust = Dust + (rand()%3) -1;;
 8001774:	f004 fdbe 	bl	80062f4 <rand>
 8001778:	4601      	mov	r1, r0
 800177a:	4b60      	ldr	r3, [pc, #384]	; (80018fc <main+0x278>)
 800177c:	fb83 3201 	smull	r3, r2, r3, r1
 8001780:	17cb      	asrs	r3, r1, #31
 8001782:	1ad2      	subs	r2, r2, r3
 8001784:	4613      	mov	r3, r2
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	4413      	add	r3, r2
 800178a:	1aca      	subs	r2, r1, r3
 800178c:	4b5a      	ldr	r3, [pc, #360]	; (80018f8 <main+0x274>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4413      	add	r3, r2
 8001792:	3b01      	subs	r3, #1
 8001794:	4a58      	ldr	r2, [pc, #352]	; (80018f8 <main+0x274>)
 8001796:	6013      	str	r3, [r2, #0]
		  }
		 Dust_time = 0;
 8001798:	4b56      	ldr	r3, [pc, #344]	; (80018f4 <main+0x270>)
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]





	  if (DHT22_Loop_Time >  5|| DHT22_Loop_Time == -1)//5초마다 온도 측정 스타트 비트 실행하고 진행
 800179e:	4b58      	ldr	r3, [pc, #352]	; (8001900 <main+0x27c>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	2b05      	cmp	r3, #5
 80017a4:	d90b      	bls.n	80017be <main+0x13a>
	  {
		  if (DHT22_Stat_Check == 0){
 80017a6:	4b57      	ldr	r3, [pc, #348]	; (8001904 <main+0x280>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d107      	bne.n	80017be <main+0x13a>
			  DHT_Startbit();
 80017ae:	f7ff fde7 	bl	8001380 <DHT_Startbit>
			  DHT22_Elapsed_Time = 0;
 80017b2:	4b55      	ldr	r3, [pc, #340]	; (8001908 <main+0x284>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	701a      	strb	r2, [r3, #0]
			  DHT22_Stat_Check = 1;
 80017b8:	4b52      	ldr	r3, [pc, #328]	; (8001904 <main+0x280>)
 80017ba:	2201      	movs	r2, #1
 80017bc:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  if (DHT22_Stat_Check && DHT22_Elapsed_Time > 17)//스타트 비트 출력 17ms 이상 경과한경우 읽기 시작
 80017be:	4b51      	ldr	r3, [pc, #324]	; (8001904 <main+0x280>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d015      	beq.n	80017f2 <main+0x16e>
 80017c6:	4b50      	ldr	r3, [pc, #320]	; (8001908 <main+0x284>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	2b11      	cmp	r3, #17
 80017cc:	d911      	bls.n	80017f2 <main+0x16e>
	  {
		  char DHT_Return = DHT_getData();
 80017ce:	f7ff fdff 	bl	80013d0 <DHT_getData>
 80017d2:	4603      	mov	r3, r0
 80017d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		  if (DHT_Return == 1){//타임아웃 리턴받은경우 다음 루프때 다시 측정하기
 80017d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d102      	bne.n	80017e6 <main+0x162>
			  DHT22_Loop_Time = -1;
 80017e0:	4b47      	ldr	r3, [pc, #284]	; (8001900 <main+0x27c>)
 80017e2:	22ff      	movs	r2, #255	; 0xff
 80017e4:	701a      	strb	r2, [r3, #0]
		  }
		  DHT22_Stat_Check = 0;
 80017e6:	4b47      	ldr	r3, [pc, #284]	; (8001904 <main+0x280>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	701a      	strb	r2, [r3, #0]
		  DHT22_Loop_Time = 0;
 80017ec:	4b44      	ldr	r3, [pc, #272]	; (8001900 <main+0x27c>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	701a      	strb	r2, [r3, #0]
	  }




	  if (lcd > 10 || lcd == -1){
 80017f2:	4b46      	ldr	r3, [pc, #280]	; (800190c <main+0x288>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	2b0a      	cmp	r3, #10
 80017f8:	d92e      	bls.n	8001858 <main+0x1d4>

		  sprintf(Line1, "T: %2.1f  D: %d", temp_Humi[0], Dust);
 80017fa:	4b45      	ldr	r3, [pc, #276]	; (8001910 <main+0x28c>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7fe feaa 	bl	8000558 <__aeabi_f2d>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	493b      	ldr	r1, [pc, #236]	; (80018f8 <main+0x274>)
 800180a:	6809      	ldr	r1, [r1, #0]
 800180c:	9100      	str	r1, [sp, #0]
 800180e:	4941      	ldr	r1, [pc, #260]	; (8001914 <main+0x290>)
 8001810:	4841      	ldr	r0, [pc, #260]	; (8001918 <main+0x294>)
 8001812:	f004 fdaf 	bl	8006374 <siprintf>
		  sprintf(Line2, "H: %2.1f  C: %d", temp_Humi[1], C);
 8001816:	4b3e      	ldr	r3, [pc, #248]	; (8001910 <main+0x28c>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	4618      	mov	r0, r3
 800181c:	f7fe fe9c 	bl	8000558 <__aeabi_f2d>
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	493d      	ldr	r1, [pc, #244]	; (800191c <main+0x298>)
 8001826:	6809      	ldr	r1, [r1, #0]
 8001828:	9100      	str	r1, [sp, #0]
 800182a:	493d      	ldr	r1, [pc, #244]	; (8001920 <main+0x29c>)
 800182c:	483d      	ldr	r0, [pc, #244]	; (8001924 <main+0x2a0>)
 800182e:	f004 fda1 	bl	8006374 <siprintf>
		  lcd16x2_i2c_clear();
 8001832:	f7ff fc35 	bl	80010a0 <lcd16x2_i2c_clear>
		  lcd16x2_i2c_setCursor(0,0);
 8001836:	2100      	movs	r1, #0
 8001838:	2000      	movs	r0, #0
 800183a:	f7ff fc0d 	bl	8001058 <lcd16x2_i2c_setCursor>
		  lcd16x2_i2c_printf(Line1);
 800183e:	4836      	ldr	r0, [pc, #216]	; (8001918 <main+0x294>)
 8001840:	f7ff fc38 	bl	80010b4 <lcd16x2_i2c_printf>
		  lcd16x2_i2c_setCursor(1,0);
 8001844:	2100      	movs	r1, #0
 8001846:	2001      	movs	r0, #1
 8001848:	f7ff fc06 	bl	8001058 <lcd16x2_i2c_setCursor>
		  lcd16x2_i2c_printf(Line2);
 800184c:	4835      	ldr	r0, [pc, #212]	; (8001924 <main+0x2a0>)
 800184e:	f7ff fc31 	bl	80010b4 <lcd16x2_i2c_printf>
		  lcd = 0;
 8001852:	4b2e      	ldr	r3, [pc, #184]	; (800190c <main+0x288>)
 8001854:	2200      	movs	r2, #0
 8001856:	701a      	strb	r2, [r3, #0]
	  }




	  if(Uart_Loop_Time >= 10){
 8001858:	4b33      	ldr	r3, [pc, #204]	; (8001928 <main+0x2a4>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	2b09      	cmp	r3, #9
 800185e:	f67f af46 	bls.w	80016ee <main+0x6a>
		char msg[40];
		sprintf(msg, "W:%d,T:%2.1f,H:%2.1f,D:%d,C:%d\n", Seg_Out, temp_Humi[0], temp_Humi[1],Dust,C);
 8001862:	4b32      	ldr	r3, [pc, #200]	; (800192c <main+0x2a8>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	607b      	str	r3, [r7, #4]
 8001868:	4b29      	ldr	r3, [pc, #164]	; (8001910 <main+0x28c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4618      	mov	r0, r3
 800186e:	f7fe fe73 	bl	8000558 <__aeabi_f2d>
 8001872:	4604      	mov	r4, r0
 8001874:	460d      	mov	r5, r1
 8001876:	4b26      	ldr	r3, [pc, #152]	; (8001910 <main+0x28c>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	4618      	mov	r0, r3
 800187c:	f7fe fe6c 	bl	8000558 <__aeabi_f2d>
 8001880:	4602      	mov	r2, r0
 8001882:	460b      	mov	r3, r1
 8001884:	491c      	ldr	r1, [pc, #112]	; (80018f8 <main+0x274>)
 8001886:	6809      	ldr	r1, [r1, #0]
 8001888:	4824      	ldr	r0, [pc, #144]	; (800191c <main+0x298>)
 800188a:	6800      	ldr	r0, [r0, #0]
 800188c:	f107 060c 	add.w	r6, r7, #12
 8001890:	9005      	str	r0, [sp, #20]
 8001892:	9104      	str	r1, [sp, #16]
 8001894:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001898:	e9cd 4500 	strd	r4, r5, [sp]
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	4924      	ldr	r1, [pc, #144]	; (8001930 <main+0x2ac>)
 80018a0:	4630      	mov	r0, r6
 80018a2:	f004 fd67 	bl	8006374 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 0xFF);
 80018a6:	f107 030c 	add.w	r3, r7, #12
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7fe fc98 	bl	80001e0 <strlen>
 80018b0:	4603      	mov	r3, r0
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	f107 010c 	add.w	r1, r7, #12
 80018b8:	23ff      	movs	r3, #255	; 0xff
 80018ba:	481e      	ldr	r0, [pc, #120]	; (8001934 <main+0x2b0>)
 80018bc:	f003 f8f9 	bl	8004ab2 <HAL_UART_Transmit>
		Uart_Loop_Time = 0;
 80018c0:	4b19      	ldr	r3, [pc, #100]	; (8001928 <main+0x2a4>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	701a      	strb	r2, [r3, #0]
	  if (ms > 1){
 80018c6:	e712      	b.n	80016ee <main+0x6a>
 80018c8:	2000030c 	.word	0x2000030c
 80018cc:	20000374 	.word	0x20000374
 80018d0:	20000294 	.word	0x20000294
 80018d4:	20000310 	.word	0x20000310
 80018d8:	20000240 	.word	0x20000240
 80018dc:	40020800 	.word	0x40020800
 80018e0:	20000224 	.word	0x20000224
 80018e4:	2000020a 	.word	0x2000020a
 80018e8:	20000448 	.word	0x20000448
 80018ec:	20000444 	.word	0x20000444
 80018f0:	2000044c 	.word	0x2000044c
 80018f4:	20000228 	.word	0x20000228
 80018f8:	20000008 	.word	0x20000008
 80018fc:	55555556 	.word	0x55555556
 8001900:	20000005 	.word	0x20000005
 8001904:	2000021d 	.word	0x2000021d
 8001908:	2000021c 	.word	0x2000021c
 800190c:	20000004 	.word	0x20000004
 8001910:	20000214 	.word	0x20000214
 8001914:	0800885c 	.word	0x0800885c
 8001918:	2000035c 	.word	0x2000035c
 800191c:	20000308 	.word	0x20000308
 8001920:	0800886c 	.word	0x0800886c
 8001924:	200002f0 	.word	0x200002f0
 8001928:	20000210 	.word	0x20000210
 800192c:	20000000 	.word	0x20000000
 8001930:	0800887c 	.word	0x0800887c
 8001934:	20000400 	.word	0x20000400

08001938 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b094      	sub	sp, #80	; 0x50
 800193c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800193e:	f107 0320 	add.w	r3, r7, #32
 8001942:	2230      	movs	r2, #48	; 0x30
 8001944:	2100      	movs	r1, #0
 8001946:	4618      	mov	r0, r3
 8001948:	f004 f862 	bl	8005a10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800194c:	f107 030c 	add.w	r3, r7, #12
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	605a      	str	r2, [r3, #4]
 8001956:	609a      	str	r2, [r3, #8]
 8001958:	60da      	str	r2, [r3, #12]
 800195a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800195c:	2300      	movs	r3, #0
 800195e:	60bb      	str	r3, [r7, #8]
 8001960:	4b28      	ldr	r3, [pc, #160]	; (8001a04 <SystemClock_Config+0xcc>)
 8001962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001964:	4a27      	ldr	r2, [pc, #156]	; (8001a04 <SystemClock_Config+0xcc>)
 8001966:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800196a:	6413      	str	r3, [r2, #64]	; 0x40
 800196c:	4b25      	ldr	r3, [pc, #148]	; (8001a04 <SystemClock_Config+0xcc>)
 800196e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001970:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001974:	60bb      	str	r3, [r7, #8]
 8001976:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001978:	2300      	movs	r3, #0
 800197a:	607b      	str	r3, [r7, #4]
 800197c:	4b22      	ldr	r3, [pc, #136]	; (8001a08 <SystemClock_Config+0xd0>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001984:	4a20      	ldr	r2, [pc, #128]	; (8001a08 <SystemClock_Config+0xd0>)
 8001986:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800198a:	6013      	str	r3, [r2, #0]
 800198c:	4b1e      	ldr	r3, [pc, #120]	; (8001a08 <SystemClock_Config+0xd0>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001994:	607b      	str	r3, [r7, #4]
 8001996:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001998:	2302      	movs	r3, #2
 800199a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800199c:	2301      	movs	r3, #1
 800199e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019a0:	2310      	movs	r3, #16
 80019a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019a4:	2302      	movs	r3, #2
 80019a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019a8:	2300      	movs	r3, #0
 80019aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80019ac:	2308      	movs	r3, #8
 80019ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80019b0:	2354      	movs	r3, #84	; 0x54
 80019b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019b4:	2302      	movs	r3, #2
 80019b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80019b8:	2307      	movs	r3, #7
 80019ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019bc:	f107 0320 	add.w	r3, r7, #32
 80019c0:	4618      	mov	r0, r3
 80019c2:	f001 ff3d 	bl	8003840 <HAL_RCC_OscConfig>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80019cc:	f000 fada 	bl	8001f84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019d0:	230f      	movs	r3, #15
 80019d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019d4:	2302      	movs	r3, #2
 80019d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019d8:	2300      	movs	r3, #0
 80019da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019e2:	2300      	movs	r3, #0
 80019e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019e6:	f107 030c 	add.w	r3, r7, #12
 80019ea:	2102      	movs	r1, #2
 80019ec:	4618      	mov	r0, r3
 80019ee:	f002 f99f 	bl	8003d30 <HAL_RCC_ClockConfig>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80019f8:	f000 fac4 	bl	8001f84 <Error_Handler>
  }
}
 80019fc:	bf00      	nop
 80019fe:	3750      	adds	r7, #80	; 0x50
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40023800 	.word	0x40023800
 8001a08:	40007000 	.word	0x40007000

08001a0c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* TIM1_TRG_COM_TIM11_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001a10:	2200      	movs	r2, #0
 8001a12:	2100      	movs	r1, #0
 8001a14:	201a      	movs	r0, #26
 8001a16:	f000 fef5 	bl	8002804 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001a1a:	201a      	movs	r0, #26
 8001a1c:	f000 ff0e 	bl	800283c <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001a20:	2200      	movs	r2, #0
 8001a22:	2100      	movs	r1, #0
 8001a24:	2028      	movs	r0, #40	; 0x28
 8001a26:	f000 feed 	bl	8002804 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a2a:	2028      	movs	r0, #40	; 0x28
 8001a2c:	f000 ff06 	bl	800283c <HAL_NVIC_EnableIRQ>
}
 8001a30:	bf00      	nop
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a38:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <MX_I2C1_Init+0x50>)
 8001a3a:	4a13      	ldr	r2, [pc, #76]	; (8001a88 <MX_I2C1_Init+0x54>)
 8001a3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a3e:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <MX_I2C1_Init+0x50>)
 8001a40:	4a12      	ldr	r2, [pc, #72]	; (8001a8c <MX_I2C1_Init+0x58>)
 8001a42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a44:	4b0f      	ldr	r3, [pc, #60]	; (8001a84 <MX_I2C1_Init+0x50>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a4a:	4b0e      	ldr	r3, [pc, #56]	; (8001a84 <MX_I2C1_Init+0x50>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a50:	4b0c      	ldr	r3, [pc, #48]	; (8001a84 <MX_I2C1_Init+0x50>)
 8001a52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a56:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a58:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <MX_I2C1_Init+0x50>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a5e:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <MX_I2C1_Init+0x50>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a64:	4b07      	ldr	r3, [pc, #28]	; (8001a84 <MX_I2C1_Init+0x50>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a6a:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <MX_I2C1_Init+0x50>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a70:	4804      	ldr	r0, [pc, #16]	; (8001a84 <MX_I2C1_Init+0x50>)
 8001a72:	f001 f96b 	bl	8002d4c <HAL_I2C_Init>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a7c:	f000 fa82 	bl	8001f84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a80:	bf00      	nop
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	20000240 	.word	0x20000240
 8001a88:	40005400 	.word	0x40005400
 8001a8c:	000186a0 	.word	0x000186a0

08001a90 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b086      	sub	sp, #24
 8001a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a96:	f107 0308 	add.w	r3, r7, #8
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	605a      	str	r2, [r3, #4]
 8001aa0:	609a      	str	r2, [r3, #8]
 8001aa2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aa4:	463b      	mov	r3, r7
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001aac:	4b1d      	ldr	r3, [pc, #116]	; (8001b24 <MX_TIM2_Init+0x94>)
 8001aae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ab2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8001ab4:	4b1b      	ldr	r3, [pc, #108]	; (8001b24 <MX_TIM2_Init+0x94>)
 8001ab6:	2253      	movs	r2, #83	; 0x53
 8001ab8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aba:	4b1a      	ldr	r3, [pc, #104]	; (8001b24 <MX_TIM2_Init+0x94>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 8001ac0:	4b18      	ldr	r3, [pc, #96]	; (8001b24 <MX_TIM2_Init+0x94>)
 8001ac2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001ac6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ac8:	4b16      	ldr	r3, [pc, #88]	; (8001b24 <MX_TIM2_Init+0x94>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ace:	4b15      	ldr	r3, [pc, #84]	; (8001b24 <MX_TIM2_Init+0x94>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ad4:	4813      	ldr	r0, [pc, #76]	; (8001b24 <MX_TIM2_Init+0x94>)
 8001ad6:	f002 fb59 	bl	800418c <HAL_TIM_Base_Init>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001ae0:	f000 fa50 	bl	8001f84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ae4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ae8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001aea:	f107 0308 	add.w	r3, r7, #8
 8001aee:	4619      	mov	r1, r3
 8001af0:	480c      	ldr	r0, [pc, #48]	; (8001b24 <MX_TIM2_Init+0x94>)
 8001af2:	f002 fd05 	bl	8004500 <HAL_TIM_ConfigClockSource>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001afc:	f000 fa42 	bl	8001f84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b00:	2300      	movs	r3, #0
 8001b02:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b04:	2300      	movs	r3, #0
 8001b06:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b08:	463b      	mov	r3, r7
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4805      	ldr	r0, [pc, #20]	; (8001b24 <MX_TIM2_Init+0x94>)
 8001b0e:	f002 ff01 	bl	8004914 <HAL_TIMEx_MasterConfigSynchronization>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001b18:	f000 fa34 	bl	8001f84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b1c:	bf00      	nop
 8001b1e:	3718      	adds	r7, #24
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	200003b8 	.word	0x200003b8

08001b28 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001b2c:	4b0e      	ldr	r3, [pc, #56]	; (8001b68 <MX_TIM10_Init+0x40>)
 8001b2e:	4a0f      	ldr	r2, [pc, #60]	; (8001b6c <MX_TIM10_Init+0x44>)
 8001b30:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 10000-1;
 8001b32:	4b0d      	ldr	r3, [pc, #52]	; (8001b68 <MX_TIM10_Init+0x40>)
 8001b34:	f242 720f 	movw	r2, #9999	; 0x270f
 8001b38:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b3a:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <MX_TIM10_Init+0x40>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 8400-1;
 8001b40:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <MX_TIM10_Init+0x40>)
 8001b42:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001b46:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b48:	4b07      	ldr	r3, [pc, #28]	; (8001b68 <MX_TIM10_Init+0x40>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b4e:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <MX_TIM10_Init+0x40>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001b54:	4804      	ldr	r0, [pc, #16]	; (8001b68 <MX_TIM10_Init+0x40>)
 8001b56:	f002 fb19 	bl	800418c <HAL_TIM_Base_Init>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8001b60:	f000 fa10 	bl	8001f84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001b64:	bf00      	nop
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	20000294 	.word	0x20000294
 8001b6c:	40014400 	.word	0x40014400

08001b70 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001b74:	4b0e      	ldr	r3, [pc, #56]	; (8001bb0 <MX_TIM11_Init+0x40>)
 8001b76:	4a0f      	ldr	r2, [pc, #60]	; (8001bb4 <MX_TIM11_Init+0x44>)
 8001b78:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 100-1;
 8001b7a:	4b0d      	ldr	r3, [pc, #52]	; (8001bb0 <MX_TIM11_Init+0x40>)
 8001b7c:	2263      	movs	r2, #99	; 0x63
 8001b7e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b80:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <MX_TIM11_Init+0x40>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 840-1;
 8001b86:	4b0a      	ldr	r3, [pc, #40]	; (8001bb0 <MX_TIM11_Init+0x40>)
 8001b88:	f240 3247 	movw	r2, #839	; 0x347
 8001b8c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b8e:	4b08      	ldr	r3, [pc, #32]	; (8001bb0 <MX_TIM11_Init+0x40>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b94:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <MX_TIM11_Init+0x40>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001b9a:	4805      	ldr	r0, [pc, #20]	; (8001bb0 <MX_TIM11_Init+0x40>)
 8001b9c:	f002 faf6 	bl	800418c <HAL_TIM_Base_Init>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001ba6:	f000 f9ed 	bl	8001f84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001baa:	bf00      	nop
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	20000310 	.word	0x20000310
 8001bb4:	40014800 	.word	0x40014800

08001bb8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bbc:	4b11      	ldr	r3, [pc, #68]	; (8001c04 <MX_USART2_UART_Init+0x4c>)
 8001bbe:	4a12      	ldr	r2, [pc, #72]	; (8001c08 <MX_USART2_UART_Init+0x50>)
 8001bc0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bc2:	4b10      	ldr	r3, [pc, #64]	; (8001c04 <MX_USART2_UART_Init+0x4c>)
 8001bc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bc8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bca:	4b0e      	ldr	r3, [pc, #56]	; (8001c04 <MX_USART2_UART_Init+0x4c>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bd0:	4b0c      	ldr	r3, [pc, #48]	; (8001c04 <MX_USART2_UART_Init+0x4c>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bd6:	4b0b      	ldr	r3, [pc, #44]	; (8001c04 <MX_USART2_UART_Init+0x4c>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bdc:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <MX_USART2_UART_Init+0x4c>)
 8001bde:	220c      	movs	r2, #12
 8001be0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001be2:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <MX_USART2_UART_Init+0x4c>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001be8:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <MX_USART2_UART_Init+0x4c>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bee:	4805      	ldr	r0, [pc, #20]	; (8001c04 <MX_USART2_UART_Init+0x4c>)
 8001bf0:	f002 ff12 	bl	8004a18 <HAL_UART_Init>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001bfa:	f000 f9c3 	bl	8001f84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20000400 	.word	0x20000400
 8001c08:	40004400 	.word	0x40004400

08001c0c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001c10:	4b11      	ldr	r3, [pc, #68]	; (8001c58 <MX_USART6_UART_Init+0x4c>)
 8001c12:	4a12      	ldr	r2, [pc, #72]	; (8001c5c <MX_USART6_UART_Init+0x50>)
 8001c14:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001c16:	4b10      	ldr	r3, [pc, #64]	; (8001c58 <MX_USART6_UART_Init+0x4c>)
 8001c18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c1c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001c1e:	4b0e      	ldr	r3, [pc, #56]	; (8001c58 <MX_USART6_UART_Init+0x4c>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001c24:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <MX_USART6_UART_Init+0x4c>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001c2a:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <MX_USART6_UART_Init+0x4c>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001c30:	4b09      	ldr	r3, [pc, #36]	; (8001c58 <MX_USART6_UART_Init+0x4c>)
 8001c32:	220c      	movs	r2, #12
 8001c34:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c36:	4b08      	ldr	r3, [pc, #32]	; (8001c58 <MX_USART6_UART_Init+0x4c>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c3c:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <MX_USART6_UART_Init+0x4c>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001c42:	4805      	ldr	r0, [pc, #20]	; (8001c58 <MX_USART6_UART_Init+0x4c>)
 8001c44:	f002 fee8 	bl	8004a18 <HAL_UART_Init>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001c4e:	f000 f999 	bl	8001f84 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001c52:	bf00      	nop
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	20000374 	.word	0x20000374
 8001c5c:	40011400 	.word	0x40011400

08001c60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b08a      	sub	sp, #40	; 0x28
 8001c64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c66:	f107 0314 	add.w	r3, r7, #20
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	605a      	str	r2, [r3, #4]
 8001c70:	609a      	str	r2, [r3, #8]
 8001c72:	60da      	str	r2, [r3, #12]
 8001c74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	613b      	str	r3, [r7, #16]
 8001c7a:	4b48      	ldr	r3, [pc, #288]	; (8001d9c <MX_GPIO_Init+0x13c>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	4a47      	ldr	r2, [pc, #284]	; (8001d9c <MX_GPIO_Init+0x13c>)
 8001c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c84:	6313      	str	r3, [r2, #48]	; 0x30
 8001c86:	4b45      	ldr	r3, [pc, #276]	; (8001d9c <MX_GPIO_Init+0x13c>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c8e:	613b      	str	r3, [r7, #16]
 8001c90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	4b41      	ldr	r3, [pc, #260]	; (8001d9c <MX_GPIO_Init+0x13c>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	4a40      	ldr	r2, [pc, #256]	; (8001d9c <MX_GPIO_Init+0x13c>)
 8001c9c:	f043 0301 	orr.w	r3, r3, #1
 8001ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca2:	4b3e      	ldr	r3, [pc, #248]	; (8001d9c <MX_GPIO_Init+0x13c>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	60fb      	str	r3, [r7, #12]
 8001cac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60bb      	str	r3, [r7, #8]
 8001cb2:	4b3a      	ldr	r3, [pc, #232]	; (8001d9c <MX_GPIO_Init+0x13c>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	4a39      	ldr	r2, [pc, #228]	; (8001d9c <MX_GPIO_Init+0x13c>)
 8001cb8:	f043 0304 	orr.w	r3, r3, #4
 8001cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cbe:	4b37      	ldr	r3, [pc, #220]	; (8001d9c <MX_GPIO_Init+0x13c>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc2:	f003 0304 	and.w	r3, r3, #4
 8001cc6:	60bb      	str	r3, [r7, #8]
 8001cc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	607b      	str	r3, [r7, #4]
 8001cce:	4b33      	ldr	r3, [pc, #204]	; (8001d9c <MX_GPIO_Init+0x13c>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	4a32      	ldr	r2, [pc, #200]	; (8001d9c <MX_GPIO_Init+0x13c>)
 8001cd4:	f043 0302 	orr.w	r3, r3, #2
 8001cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cda:	4b30      	ldr	r3, [pc, #192]	; (8001d9c <MX_GPIO_Init+0x13c>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	607b      	str	r3, [r7, #4]
 8001ce4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, A_Pin|B_Pin|C_Pin|D_Pin
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f44f 617f 	mov.w	r1, #4080	; 0xff0
 8001cec:	482c      	ldr	r0, [pc, #176]	; (8001da0 <MX_GPIO_Init+0x140>)
 8001cee:	f000 ffe1 	bl	8002cb4 <HAL_GPIO_WritePin>
                          |E_Pin|F_Pin|G_Pin|DotT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	2120      	movs	r1, #32
 8001cf6:	482b      	ldr	r0, [pc, #172]	; (8001da4 <MX_GPIO_Init+0x144>)
 8001cf8:	f000 ffdc 	bl	8002cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Dig1_Pin|Dig2_Pin|Dig3_Pin|Dig4_Pin, GPIO_PIN_RESET);
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	210f      	movs	r1, #15
 8001d00:	4829      	ldr	r0, [pc, #164]	; (8001da8 <MX_GPIO_Init+0x148>)
 8001d02:	f000 ffd7 	bl	8002cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A_Pin B_Pin C_Pin D_Pin
                           E_Pin F_Pin G_Pin DotT_Pin */
  GPIO_InitStruct.Pin = A_Pin|B_Pin|C_Pin|D_Pin
 8001d06:	f44f 637f 	mov.w	r3, #4080	; 0xff0
 8001d0a:	617b      	str	r3, [r7, #20]
                          |E_Pin|F_Pin|G_Pin|DotT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d10:	2300      	movs	r3, #0
 8001d12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d14:	2300      	movs	r3, #0
 8001d16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d18:	f107 0314 	add.w	r3, r7, #20
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4820      	ldr	r0, [pc, #128]	; (8001da0 <MX_GPIO_Init+0x140>)
 8001d20:	f000 fe2c 	bl	800297c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001d24:	2320      	movs	r3, #32
 8001d26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d30:	2300      	movs	r3, #0
 8001d32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d34:	f107 0314 	add.w	r3, r7, #20
 8001d38:	4619      	mov	r1, r3
 8001d3a:	481a      	ldr	r0, [pc, #104]	; (8001da4 <MX_GPIO_Init+0x144>)
 8001d3c:	f000 fe1e 	bl	800297c <HAL_GPIO_Init>

  /*Configure GPIO pins : Dig1_Pin Dig2_Pin Dig3_Pin Dig4_Pin */
  GPIO_InitStruct.Pin = Dig1_Pin|Dig2_Pin|Dig3_Pin|Dig4_Pin;
 8001d40:	230f      	movs	r3, #15
 8001d42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d44:	2301      	movs	r3, #1
 8001d46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d50:	f107 0314 	add.w	r3, r7, #20
 8001d54:	4619      	mov	r1, r3
 8001d56:	4814      	ldr	r0, [pc, #80]	; (8001da8 <MX_GPIO_Init+0x148>)
 8001d58:	f000 fe10 	bl	800297c <HAL_GPIO_Init>

  /*Configure GPIO pins : Switch2_Pin Switch1_Pin */
  GPIO_InitStruct.Pin = Switch2_Pin|Switch1_Pin;
 8001d5c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001d60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d62:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001d66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d68:	2302      	movs	r3, #2
 8001d6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d6c:	f107 0314 	add.w	r3, r7, #20
 8001d70:	4619      	mov	r1, r3
 8001d72:	480d      	ldr	r0, [pc, #52]	; (8001da8 <MX_GPIO_Init+0x148>)
 8001d74:	f000 fe02 	bl	800297c <HAL_GPIO_Init>

  /*Configure GPIO pin : CO2_Pin */
  GPIO_InitStruct.Pin = CO2_Pin;
 8001d78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d82:	2300      	movs	r3, #0
 8001d84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CO2_GPIO_Port, &GPIO_InitStruct);
 8001d86:	f107 0314 	add.w	r3, r7, #20
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4805      	ldr	r0, [pc, #20]	; (8001da4 <MX_GPIO_Init+0x144>)
 8001d8e:	f000 fdf5 	bl	800297c <HAL_GPIO_Init>

}
 8001d92:	bf00      	nop
 8001d94:	3728      	adds	r7, #40	; 0x28
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	40020000 	.word	0x40020000
 8001da4:	40020800 	.word	0x40020800
 8001da8:	40020400 	.word	0x40020400

08001dac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */


	if(htim->Instance == TIM10){//타이머6 인터럽트 실행(1초)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a5b      	ldr	r2, [pc, #364]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d12d      	bne.n	8001e1a <HAL_TIM_PeriodElapsedCallback+0x6e>

	  HAL_GPIO_TogglePin(GPIOA, DotT_Pin); //세그먼트 시계 중앙 도트 점멸
 8001dbe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001dc2:	485a      	ldr	r0, [pc, #360]	; (8001f2c <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001dc4:	f000 ff8f 	bl	8002ce6 <HAL_GPIO_TogglePin>
	  DHT22_Loop_Time++; //DHT 센서 타이머 카운트
 8001dc8:	4b59      	ldr	r3, [pc, #356]	; (8001f30 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	b2da      	uxtb	r2, r3
 8001dd0:	4b57      	ldr	r3, [pc, #348]	; (8001f30 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001dd2:	701a      	strb	r2, [r3, #0]
	  if(second >= 60){//60초 마다 세븐세그먼트(시계) 출력값 ++
 8001dd4:	4b57      	ldr	r3, [pc, #348]	; (8001f34 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	2b3b      	cmp	r3, #59	; 0x3b
 8001dda:	d907      	bls.n	8001dec <HAL_TIM_PeriodElapsedCallback+0x40>
		  Seg_Out++;
 8001ddc:	4b56      	ldr	r3, [pc, #344]	; (8001f38 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	3301      	adds	r3, #1
 8001de2:	4a55      	ldr	r2, [pc, #340]	; (8001f38 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001de4:	6013      	str	r3, [r2, #0]
		  second = 0;
 8001de6:	4b53      	ldr	r3, [pc, #332]	; (8001f34 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	701a      	strb	r2, [r3, #0]
	  }
	  lcd++; //LCD 출력 시간 카운트
 8001dec:	4b53      	ldr	r3, [pc, #332]	; (8001f3c <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	3301      	adds	r3, #1
 8001df2:	b2da      	uxtb	r2, r3
 8001df4:	4b51      	ldr	r3, [pc, #324]	; (8001f3c <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001df6:	701a      	strb	r2, [r3, #0]
	  second++;
 8001df8:	4b4e      	ldr	r3, [pc, #312]	; (8001f34 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	b2da      	uxtb	r2, r3
 8001e00:	4b4c      	ldr	r3, [pc, #304]	; (8001f34 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001e02:	701a      	strb	r2, [r3, #0]
	  Uart_Loop_Time++;
 8001e04:	4b4e      	ldr	r3, [pc, #312]	; (8001f40 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	b2da      	uxtb	r2, r3
 8001e0c:	4b4c      	ldr	r3, [pc, #304]	; (8001f40 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001e0e:	701a      	strb	r2, [r3, #0]
	  Dust_time++;
 8001e10:	4b4c      	ldr	r3, [pc, #304]	; (8001f44 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	3301      	adds	r3, #1
 8001e16:	4a4b      	ldr	r2, [pc, #300]	; (8001f44 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001e18:	6013      	str	r3, [r2, #0]

	}
	if(htim->Instance == TIM11){//타이머6 인터럽트 실행(1ms)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a4a      	ldr	r2, [pc, #296]	; (8001f48 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d176      	bne.n	8001f12 <HAL_TIM_PeriodElapsedCallback+0x166>
		Loop_Count++;
 8001e24:	4b49      	ldr	r3, [pc, #292]	; (8001f4c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	4a48      	ldr	r2, [pc, #288]	; (8001f4c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001e2c:	6013      	str	r3, [r2, #0]
		ms++;
 8001e2e:	4b48      	ldr	r3, [pc, #288]	; (8001f50 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	3301      	adds	r3, #1
 8001e34:	b2da      	uxtb	r2, r3
 8001e36:	4b46      	ldr	r3, [pc, #280]	; (8001f50 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001e38:	701a      	strb	r2, [r3, #0]
		CO2ms++;
 8001e3a:	4b46      	ldr	r3, [pc, #280]	; (8001f54 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	4a44      	ldr	r2, [pc, #272]	; (8001f54 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001e42:	6013      	str	r3, [r2, #0]
		DHT22_Elapsed_Time++;
 8001e44:	4b44      	ldr	r3, [pc, #272]	; (8001f58 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	b2da      	uxtb	r2, r3
 8001e4c:	4b42      	ldr	r3, [pc, #264]	; (8001f58 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001e4e:	701a      	strb	r2, [r3, #0]

		//checkms++;
		CO2_Pin_State = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8);
 8001e50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e54:	4841      	ldr	r0, [pc, #260]	; (8001f5c <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001e56:	f000 ff15 	bl	8002c84 <HAL_GPIO_ReadPin>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	4b40      	ldr	r3, [pc, #256]	; (8001f60 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001e60:	701a      	strb	r2, [r3, #0]

		if (rising_check == 1 && CO2_Pin_State != OLD_CO2_Pin_State && CO2_Pin_State == 1){ //라이징 엣지
 8001e62:	4b40      	ldr	r3, [pc, #256]	; (8001f64 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d11a      	bne.n	8001ea0 <HAL_TIM_PeriodElapsedCallback+0xf4>
 8001e6a:	4b3d      	ldr	r3, [pc, #244]	; (8001f60 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001e6c:	781a      	ldrb	r2, [r3, #0]
 8001e6e:	4b3e      	ldr	r3, [pc, #248]	; (8001f68 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d014      	beq.n	8001ea0 <HAL_TIM_PeriodElapsedCallback+0xf4>
 8001e76:	4b3a      	ldr	r3, [pc, #232]	; (8001f60 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d110      	bne.n	8001ea0 <HAL_TIM_PeriodElapsedCallback+0xf4>
			CO2ms = 0;
 8001e7e:	4b35      	ldr	r3, [pc, #212]	; (8001f54 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
			rising_time = CO2ms;
 8001e84:	4b33      	ldr	r3, [pc, #204]	; (8001f54 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	461a      	mov	r2, r3
 8001e8a:	4b38      	ldr	r3, [pc, #224]	; (8001f6c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001e8c:	601a      	str	r2, [r3, #0]
			rising_check = 0;
 8001e8e:	4b35      	ldr	r3, [pc, #212]	; (8001f64 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	701a      	strb	r2, [r3, #0]
			falling_time = 0;
 8001e94:	4b36      	ldr	r3, [pc, #216]	; (8001f70 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]
			falling_check = 1;
 8001e9a:	4b36      	ldr	r3, [pc, #216]	; (8001f74 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	701a      	strb	r2, [r3, #0]
		}

		if (falling_check && CO2_Pin_State != OLD_CO2_Pin_State && CO2_Pin_State == 0){ //폴링 엣지
 8001ea0:	4b34      	ldr	r3, [pc, #208]	; (8001f74 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d017      	beq.n	8001ed8 <HAL_TIM_PeriodElapsedCallback+0x12c>
 8001ea8:	4b2d      	ldr	r3, [pc, #180]	; (8001f60 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001eaa:	781a      	ldrb	r2, [r3, #0]
 8001eac:	4b2e      	ldr	r3, [pc, #184]	; (8001f68 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d011      	beq.n	8001ed8 <HAL_TIM_PeriodElapsedCallback+0x12c>
 8001eb4:	4b2a      	ldr	r3, [pc, #168]	; (8001f60 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d10d      	bne.n	8001ed8 <HAL_TIM_PeriodElapsedCallback+0x12c>
			falling_check = 0;
 8001ebc:	4b2d      	ldr	r3, [pc, #180]	; (8001f74 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	701a      	strb	r2, [r3, #0]
			falling_time = CO2ms;
 8001ec2:	4b24      	ldr	r3, [pc, #144]	; (8001f54 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	4b29      	ldr	r3, [pc, #164]	; (8001f70 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001eca:	601a      	str	r2, [r3, #0]
			rerising_time = 0;
 8001ecc:	4b2a      	ldr	r3, [pc, #168]	; (8001f78 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	601a      	str	r2, [r3, #0]
			rerising_check = 1;
 8001ed2:	4b2a      	ldr	r3, [pc, #168]	; (8001f7c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	701a      	strb	r2, [r3, #0]
		}

		if (rerising_check == 1 && CO2_Pin_State != OLD_CO2_Pin_State && CO2_Pin_State == 1){ //다음 라이징 엣지
 8001ed8:	4b28      	ldr	r3, [pc, #160]	; (8001f7c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d114      	bne.n	8001f0a <HAL_TIM_PeriodElapsedCallback+0x15e>
 8001ee0:	4b1f      	ldr	r3, [pc, #124]	; (8001f60 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001ee2:	781a      	ldrb	r2, [r3, #0]
 8001ee4:	4b20      	ldr	r3, [pc, #128]	; (8001f68 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d00e      	beq.n	8001f0a <HAL_TIM_PeriodElapsedCallback+0x15e>
 8001eec:	4b1c      	ldr	r3, [pc, #112]	; (8001f60 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d10a      	bne.n	8001f0a <HAL_TIM_PeriodElapsedCallback+0x15e>
			rerising_time = CO2ms;
 8001ef4:	4b17      	ldr	r3, [pc, #92]	; (8001f54 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	461a      	mov	r2, r3
 8001efa:	4b1f      	ldr	r3, [pc, #124]	; (8001f78 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001efc:	601a      	str	r2, [r3, #0]
			rerising_check = 0;
 8001efe:	4b1f      	ldr	r3, [pc, #124]	; (8001f7c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	701a      	strb	r2, [r3, #0]
			rising_check = 1;
 8001f04:	4b17      	ldr	r3, [pc, #92]	; (8001f64 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001f06:	2201      	movs	r2, #1
 8001f08:	701a      	strb	r2, [r3, #0]

		}



		OLD_CO2_Pin_State = CO2_Pin_State;
 8001f0a:	4b15      	ldr	r3, [pc, #84]	; (8001f60 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001f0c:	781a      	ldrb	r2, [r3, #0]
 8001f0e:	4b16      	ldr	r3, [pc, #88]	; (8001f68 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001f10:	701a      	strb	r2, [r3, #0]


		}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a1a      	ldr	r2, [pc, #104]	; (8001f80 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d101      	bne.n	8001f20 <HAL_TIM_PeriodElapsedCallback+0x174>
    HAL_IncTick();
 8001f1c:	f000 fb76 	bl	800260c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f20:	bf00      	nop
 8001f22:	3708      	adds	r7, #8
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	40014400 	.word	0x40014400
 8001f2c:	40020000 	.word	0x40020000
 8001f30:	20000005 	.word	0x20000005
 8001f34:	20000209 	.word	0x20000209
 8001f38:	20000000 	.word	0x20000000
 8001f3c:	20000004 	.word	0x20000004
 8001f40:	20000210 	.word	0x20000210
 8001f44:	20000228 	.word	0x20000228
 8001f48:	40014800 	.word	0x40014800
 8001f4c:	20000304 	.word	0x20000304
 8001f50:	2000020a 	.word	0x2000020a
 8001f54:	20000220 	.word	0x20000220
 8001f58:	2000021c 	.word	0x2000021c
 8001f5c:	40020800 	.word	0x40020800
 8001f60:	2000021e 	.word	0x2000021e
 8001f64:	20000224 	.word	0x20000224
 8001f68:	2000021f 	.word	0x2000021f
 8001f6c:	20000448 	.word	0x20000448
 8001f70:	20000444 	.word	0x20000444
 8001f74:	20000225 	.word	0x20000225
 8001f78:	2000044c 	.word	0x2000044c
 8001f7c:	20000226 	.word	0x20000226
 8001f80:	40010000 	.word	0x40010000

08001f84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f88:	b672      	cpsid	i
}
 8001f8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f8c:	e7fe      	b.n	8001f8c <Error_Handler+0x8>
	...

08001f90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	607b      	str	r3, [r7, #4]
 8001f9a:	4b14      	ldr	r3, [pc, #80]	; (8001fec <HAL_MspInit+0x5c>)
 8001f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9e:	4a13      	ldr	r2, [pc, #76]	; (8001fec <HAL_MspInit+0x5c>)
 8001fa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fa4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fa6:	4b11      	ldr	r3, [pc, #68]	; (8001fec <HAL_MspInit+0x5c>)
 8001fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001faa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fae:	607b      	str	r3, [r7, #4]
 8001fb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	603b      	str	r3, [r7, #0]
 8001fb6:	4b0d      	ldr	r3, [pc, #52]	; (8001fec <HAL_MspInit+0x5c>)
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	4a0c      	ldr	r2, [pc, #48]	; (8001fec <HAL_MspInit+0x5c>)
 8001fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fc2:	4b0a      	ldr	r3, [pc, #40]	; (8001fec <HAL_MspInit+0x5c>)
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fca:	603b      	str	r3, [r7, #0]
 8001fcc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001fce:	2007      	movs	r0, #7
 8001fd0:	f000 fc0d 	bl	80027ee <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	2005      	movs	r0, #5
 8001fda:	f000 fc13 	bl	8002804 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001fde:	2005      	movs	r0, #5
 8001fe0:	f000 fc2c 	bl	800283c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fe4:	bf00      	nop
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40023800 	.word	0x40023800

08001ff0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b08a      	sub	sp, #40	; 0x28
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff8:	f107 0314 	add.w	r3, r7, #20
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	605a      	str	r2, [r3, #4]
 8002002:	609a      	str	r2, [r3, #8]
 8002004:	60da      	str	r2, [r3, #12]
 8002006:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a19      	ldr	r2, [pc, #100]	; (8002074 <HAL_I2C_MspInit+0x84>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d12b      	bne.n	800206a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	613b      	str	r3, [r7, #16]
 8002016:	4b18      	ldr	r3, [pc, #96]	; (8002078 <HAL_I2C_MspInit+0x88>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201a:	4a17      	ldr	r2, [pc, #92]	; (8002078 <HAL_I2C_MspInit+0x88>)
 800201c:	f043 0302 	orr.w	r3, r3, #2
 8002020:	6313      	str	r3, [r2, #48]	; 0x30
 8002022:	4b15      	ldr	r3, [pc, #84]	; (8002078 <HAL_I2C_MspInit+0x88>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	613b      	str	r3, [r7, #16]
 800202c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800202e:	23c0      	movs	r3, #192	; 0xc0
 8002030:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002032:	2312      	movs	r3, #18
 8002034:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002036:	2301      	movs	r3, #1
 8002038:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800203a:	2303      	movs	r3, #3
 800203c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800203e:	2304      	movs	r3, #4
 8002040:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002042:	f107 0314 	add.w	r3, r7, #20
 8002046:	4619      	mov	r1, r3
 8002048:	480c      	ldr	r0, [pc, #48]	; (800207c <HAL_I2C_MspInit+0x8c>)
 800204a:	f000 fc97 	bl	800297c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	60fb      	str	r3, [r7, #12]
 8002052:	4b09      	ldr	r3, [pc, #36]	; (8002078 <HAL_I2C_MspInit+0x88>)
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	4a08      	ldr	r2, [pc, #32]	; (8002078 <HAL_I2C_MspInit+0x88>)
 8002058:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800205c:	6413      	str	r3, [r2, #64]	; 0x40
 800205e:	4b06      	ldr	r3, [pc, #24]	; (8002078 <HAL_I2C_MspInit+0x88>)
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002062:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800206a:	bf00      	nop
 800206c:	3728      	adds	r7, #40	; 0x28
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	40005400 	.word	0x40005400
 8002078:	40023800 	.word	0x40023800
 800207c:	40020400 	.word	0x40020400

08002080 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002090:	d116      	bne.n	80020c0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	617b      	str	r3, [r7, #20]
 8002096:	4b24      	ldr	r3, [pc, #144]	; (8002128 <HAL_TIM_Base_MspInit+0xa8>)
 8002098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209a:	4a23      	ldr	r2, [pc, #140]	; (8002128 <HAL_TIM_Base_MspInit+0xa8>)
 800209c:	f043 0301 	orr.w	r3, r3, #1
 80020a0:	6413      	str	r3, [r2, #64]	; 0x40
 80020a2:	4b21      	ldr	r3, [pc, #132]	; (8002128 <HAL_TIM_Base_MspInit+0xa8>)
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	617b      	str	r3, [r7, #20]
 80020ac:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80020ae:	2200      	movs	r2, #0
 80020b0:	2100      	movs	r1, #0
 80020b2:	201c      	movs	r0, #28
 80020b4:	f000 fba6 	bl	8002804 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80020b8:	201c      	movs	r0, #28
 80020ba:	f000 fbbf 	bl	800283c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80020be:	e02e      	b.n	800211e <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM10)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a19      	ldr	r2, [pc, #100]	; (800212c <HAL_TIM_Base_MspInit+0xac>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d116      	bne.n	80020f8 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80020ca:	2300      	movs	r3, #0
 80020cc:	613b      	str	r3, [r7, #16]
 80020ce:	4b16      	ldr	r3, [pc, #88]	; (8002128 <HAL_TIM_Base_MspInit+0xa8>)
 80020d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d2:	4a15      	ldr	r2, [pc, #84]	; (8002128 <HAL_TIM_Base_MspInit+0xa8>)
 80020d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020d8:	6453      	str	r3, [r2, #68]	; 0x44
 80020da:	4b13      	ldr	r3, [pc, #76]	; (8002128 <HAL_TIM_Base_MspInit+0xa8>)
 80020dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e2:	613b      	str	r3, [r7, #16]
 80020e4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80020e6:	2200      	movs	r2, #0
 80020e8:	2100      	movs	r1, #0
 80020ea:	2019      	movs	r0, #25
 80020ec:	f000 fb8a 	bl	8002804 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80020f0:	2019      	movs	r0, #25
 80020f2:	f000 fba3 	bl	800283c <HAL_NVIC_EnableIRQ>
}
 80020f6:	e012      	b.n	800211e <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM11)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a0c      	ldr	r2, [pc, #48]	; (8002130 <HAL_TIM_Base_MspInit+0xb0>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d10d      	bne.n	800211e <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002102:	2300      	movs	r3, #0
 8002104:	60fb      	str	r3, [r7, #12]
 8002106:	4b08      	ldr	r3, [pc, #32]	; (8002128 <HAL_TIM_Base_MspInit+0xa8>)
 8002108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210a:	4a07      	ldr	r2, [pc, #28]	; (8002128 <HAL_TIM_Base_MspInit+0xa8>)
 800210c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002110:	6453      	str	r3, [r2, #68]	; 0x44
 8002112:	4b05      	ldr	r3, [pc, #20]	; (8002128 <HAL_TIM_Base_MspInit+0xa8>)
 8002114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002116:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	68fb      	ldr	r3, [r7, #12]
}
 800211e:	bf00      	nop
 8002120:	3718      	adds	r7, #24
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	40023800 	.word	0x40023800
 800212c:	40014400 	.word	0x40014400
 8002130:	40014800 	.word	0x40014800

08002134 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b08c      	sub	sp, #48	; 0x30
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800213c:	f107 031c 	add.w	r3, r7, #28
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	605a      	str	r2, [r3, #4]
 8002146:	609a      	str	r2, [r3, #8]
 8002148:	60da      	str	r2, [r3, #12]
 800214a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a36      	ldr	r2, [pc, #216]	; (800222c <HAL_UART_MspInit+0xf8>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d12c      	bne.n	80021b0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	61bb      	str	r3, [r7, #24]
 800215a:	4b35      	ldr	r3, [pc, #212]	; (8002230 <HAL_UART_MspInit+0xfc>)
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	4a34      	ldr	r2, [pc, #208]	; (8002230 <HAL_UART_MspInit+0xfc>)
 8002160:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002164:	6413      	str	r3, [r2, #64]	; 0x40
 8002166:	4b32      	ldr	r3, [pc, #200]	; (8002230 <HAL_UART_MspInit+0xfc>)
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216e:	61bb      	str	r3, [r7, #24]
 8002170:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002172:	2300      	movs	r3, #0
 8002174:	617b      	str	r3, [r7, #20]
 8002176:	4b2e      	ldr	r3, [pc, #184]	; (8002230 <HAL_UART_MspInit+0xfc>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	4a2d      	ldr	r2, [pc, #180]	; (8002230 <HAL_UART_MspInit+0xfc>)
 800217c:	f043 0301 	orr.w	r3, r3, #1
 8002180:	6313      	str	r3, [r2, #48]	; 0x30
 8002182:	4b2b      	ldr	r3, [pc, #172]	; (8002230 <HAL_UART_MspInit+0xfc>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	617b      	str	r3, [r7, #20]
 800218c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800218e:	230c      	movs	r3, #12
 8002190:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002192:	2302      	movs	r3, #2
 8002194:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002196:	2300      	movs	r3, #0
 8002198:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800219a:	2303      	movs	r3, #3
 800219c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800219e:	2307      	movs	r3, #7
 80021a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a2:	f107 031c 	add.w	r3, r7, #28
 80021a6:	4619      	mov	r1, r3
 80021a8:	4822      	ldr	r0, [pc, #136]	; (8002234 <HAL_UART_MspInit+0x100>)
 80021aa:	f000 fbe7 	bl	800297c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80021ae:	e038      	b.n	8002222 <HAL_UART_MspInit+0xee>
  else if(huart->Instance==USART6)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a20      	ldr	r2, [pc, #128]	; (8002238 <HAL_UART_MspInit+0x104>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d133      	bne.n	8002222 <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART6_CLK_ENABLE();
 80021ba:	2300      	movs	r3, #0
 80021bc:	613b      	str	r3, [r7, #16]
 80021be:	4b1c      	ldr	r3, [pc, #112]	; (8002230 <HAL_UART_MspInit+0xfc>)
 80021c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c2:	4a1b      	ldr	r2, [pc, #108]	; (8002230 <HAL_UART_MspInit+0xfc>)
 80021c4:	f043 0320 	orr.w	r3, r3, #32
 80021c8:	6453      	str	r3, [r2, #68]	; 0x44
 80021ca:	4b19      	ldr	r3, [pc, #100]	; (8002230 <HAL_UART_MspInit+0xfc>)
 80021cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ce:	f003 0320 	and.w	r3, r3, #32
 80021d2:	613b      	str	r3, [r7, #16]
 80021d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021d6:	2300      	movs	r3, #0
 80021d8:	60fb      	str	r3, [r7, #12]
 80021da:	4b15      	ldr	r3, [pc, #84]	; (8002230 <HAL_UART_MspInit+0xfc>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021de:	4a14      	ldr	r2, [pc, #80]	; (8002230 <HAL_UART_MspInit+0xfc>)
 80021e0:	f043 0304 	orr.w	r3, r3, #4
 80021e4:	6313      	str	r3, [r2, #48]	; 0x30
 80021e6:	4b12      	ldr	r3, [pc, #72]	; (8002230 <HAL_UART_MspInit+0xfc>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	f003 0304 	and.w	r3, r3, #4
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021f2:	23c0      	movs	r3, #192	; 0xc0
 80021f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f6:	2302      	movs	r3, #2
 80021f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fa:	2300      	movs	r3, #0
 80021fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021fe:	2303      	movs	r3, #3
 8002200:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002202:	2308      	movs	r3, #8
 8002204:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002206:	f107 031c 	add.w	r3, r7, #28
 800220a:	4619      	mov	r1, r3
 800220c:	480b      	ldr	r0, [pc, #44]	; (800223c <HAL_UART_MspInit+0x108>)
 800220e:	f000 fbb5 	bl	800297c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002212:	2200      	movs	r2, #0
 8002214:	2100      	movs	r1, #0
 8002216:	2047      	movs	r0, #71	; 0x47
 8002218:	f000 faf4 	bl	8002804 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800221c:	2047      	movs	r0, #71	; 0x47
 800221e:	f000 fb0d 	bl	800283c <HAL_NVIC_EnableIRQ>
}
 8002222:	bf00      	nop
 8002224:	3730      	adds	r7, #48	; 0x30
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	40004400 	.word	0x40004400
 8002230:	40023800 	.word	0x40023800
 8002234:	40020000 	.word	0x40020000
 8002238:	40011400 	.word	0x40011400
 800223c:	40020800 	.word	0x40020800

08002240 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b08c      	sub	sp, #48	; 0x30
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002248:	2300      	movs	r3, #0
 800224a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800224c:	2300      	movs	r3, #0
 800224e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8002250:	2200      	movs	r2, #0
 8002252:	6879      	ldr	r1, [r7, #4]
 8002254:	2019      	movs	r0, #25
 8002256:	f000 fad5 	bl	8002804 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800225a:	2019      	movs	r0, #25
 800225c:	f000 faee 	bl	800283c <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002260:	2300      	movs	r3, #0
 8002262:	60fb      	str	r3, [r7, #12]
 8002264:	4b1e      	ldr	r3, [pc, #120]	; (80022e0 <HAL_InitTick+0xa0>)
 8002266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002268:	4a1d      	ldr	r2, [pc, #116]	; (80022e0 <HAL_InitTick+0xa0>)
 800226a:	f043 0301 	orr.w	r3, r3, #1
 800226e:	6453      	str	r3, [r2, #68]	; 0x44
 8002270:	4b1b      	ldr	r3, [pc, #108]	; (80022e0 <HAL_InitTick+0xa0>)
 8002272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	60fb      	str	r3, [r7, #12]
 800227a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800227c:	f107 0210 	add.w	r2, r7, #16
 8002280:	f107 0314 	add.w	r3, r7, #20
 8002284:	4611      	mov	r1, r2
 8002286:	4618      	mov	r0, r3
 8002288:	f001 ff4e 	bl	8004128 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800228c:	f001 ff38 	bl	8004100 <HAL_RCC_GetPCLK2Freq>
 8002290:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002294:	4a13      	ldr	r2, [pc, #76]	; (80022e4 <HAL_InitTick+0xa4>)
 8002296:	fba2 2303 	umull	r2, r3, r2, r3
 800229a:	0c9b      	lsrs	r3, r3, #18
 800229c:	3b01      	subs	r3, #1
 800229e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80022a0:	4b11      	ldr	r3, [pc, #68]	; (80022e8 <HAL_InitTick+0xa8>)
 80022a2:	4a12      	ldr	r2, [pc, #72]	; (80022ec <HAL_InitTick+0xac>)
 80022a4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80022a6:	4b10      	ldr	r3, [pc, #64]	; (80022e8 <HAL_InitTick+0xa8>)
 80022a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80022ac:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80022ae:	4a0e      	ldr	r2, [pc, #56]	; (80022e8 <HAL_InitTick+0xa8>)
 80022b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022b2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80022b4:	4b0c      	ldr	r3, [pc, #48]	; (80022e8 <HAL_InitTick+0xa8>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022ba:	4b0b      	ldr	r3, [pc, #44]	; (80022e8 <HAL_InitTick+0xa8>)
 80022bc:	2200      	movs	r2, #0
 80022be:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80022c0:	4809      	ldr	r0, [pc, #36]	; (80022e8 <HAL_InitTick+0xa8>)
 80022c2:	f001 ff63 	bl	800418c <HAL_TIM_Base_Init>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d104      	bne.n	80022d6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80022cc:	4806      	ldr	r0, [pc, #24]	; (80022e8 <HAL_InitTick+0xa8>)
 80022ce:	f001 ffad 	bl	800422c <HAL_TIM_Base_Start_IT>
 80022d2:	4603      	mov	r3, r0
 80022d4:	e000      	b.n	80022d8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3730      	adds	r7, #48	; 0x30
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	40023800 	.word	0x40023800
 80022e4:	431bde83 	.word	0x431bde83
 80022e8:	20000450 	.word	0x20000450
 80022ec:	40010000 	.word	0x40010000

080022f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022f4:	e7fe      	b.n	80022f4 <NMI_Handler+0x4>

080022f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022f6:	b480      	push	{r7}
 80022f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022fa:	e7fe      	b.n	80022fa <HardFault_Handler+0x4>

080022fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002300:	e7fe      	b.n	8002300 <MemManage_Handler+0x4>

08002302 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002302:	b480      	push	{r7}
 8002304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002306:	e7fe      	b.n	8002306 <BusFault_Handler+0x4>

08002308 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800230c:	e7fe      	b.n	800230c <UsageFault_Handler+0x4>

0800230e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800230e:	b480      	push	{r7}
 8002310:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002312:	bf00      	nop
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002320:	bf00      	nop
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr

0800232a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800232a:	b480      	push	{r7}
 800232c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800232e:	bf00      	nop
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800233c:	bf00      	nop
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr

08002346 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002346:	b480      	push	{r7}
 8002348:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800234a:	bf00      	nop
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002358:	4803      	ldr	r0, [pc, #12]	; (8002368 <TIM1_UP_TIM10_IRQHandler+0x14>)
 800235a:	f001 ffc9 	bl	80042f0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800235e:	4803      	ldr	r0, [pc, #12]	; (800236c <TIM1_UP_TIM10_IRQHandler+0x18>)
 8002360:	f001 ffc6 	bl	80042f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002364:	bf00      	nop
 8002366:	bd80      	pop	{r7, pc}
 8002368:	20000450 	.word	0x20000450
 800236c:	20000294 	.word	0x20000294

08002370 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002374:	4802      	ldr	r0, [pc, #8]	; (8002380 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002376:	f001 ffbb 	bl	80042f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800237a:	bf00      	nop
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	20000310 	.word	0x20000310

08002384 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002388:	4802      	ldr	r0, [pc, #8]	; (8002394 <TIM2_IRQHandler+0x10>)
 800238a:	f001 ffb1 	bl	80042f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800238e:	bf00      	nop
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	200003b8 	.word	0x200003b8

08002398 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800239c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80023a0:	f000 fcbc 	bl	8002d1c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80023a4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80023a8:	f000 fcb8 	bl	8002d1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80023ac:	bf00      	nop
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80023b4:	4802      	ldr	r0, [pc, #8]	; (80023c0 <USART6_IRQHandler+0x10>)
 80023b6:	f002 fc3f 	bl	8004c38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80023ba:	bf00      	nop
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	20000374 	.word	0x20000374

080023c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
	return 1;
 80023c8:	2301      	movs	r3, #1
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <_kill>:

int _kill(int pid, int sig)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80023de:	f003 faed 	bl	80059bc <__errno>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2216      	movs	r2, #22
 80023e6:	601a      	str	r2, [r3, #0]
	return -1;
 80023e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3708      	adds	r7, #8
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <_exit>:

void _exit (int status)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80023fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f7ff ffe7 	bl	80023d4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002406:	e7fe      	b.n	8002406 <_exit+0x12>

08002408 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002414:	2300      	movs	r3, #0
 8002416:	617b      	str	r3, [r7, #20]
 8002418:	e00a      	b.n	8002430 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800241a:	f3af 8000 	nop.w
 800241e:	4601      	mov	r1, r0
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	1c5a      	adds	r2, r3, #1
 8002424:	60ba      	str	r2, [r7, #8]
 8002426:	b2ca      	uxtb	r2, r1
 8002428:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	3301      	adds	r3, #1
 800242e:	617b      	str	r3, [r7, #20]
 8002430:	697a      	ldr	r2, [r7, #20]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	429a      	cmp	r2, r3
 8002436:	dbf0      	blt.n	800241a <_read+0x12>
	}

return len;
 8002438:	687b      	ldr	r3, [r7, #4]
}
 800243a:	4618      	mov	r0, r3
 800243c:	3718      	adds	r7, #24
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b086      	sub	sp, #24
 8002446:	af00      	add	r7, sp, #0
 8002448:	60f8      	str	r0, [r7, #12]
 800244a:	60b9      	str	r1, [r7, #8]
 800244c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800244e:	2300      	movs	r3, #0
 8002450:	617b      	str	r3, [r7, #20]
 8002452:	e009      	b.n	8002468 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	1c5a      	adds	r2, r3, #1
 8002458:	60ba      	str	r2, [r7, #8]
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	4618      	mov	r0, r3
 800245e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	3301      	adds	r3, #1
 8002466:	617b      	str	r3, [r7, #20]
 8002468:	697a      	ldr	r2, [r7, #20]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	429a      	cmp	r2, r3
 800246e:	dbf1      	blt.n	8002454 <_write+0x12>
	}
	return len;
 8002470:	687b      	ldr	r3, [r7, #4]
}
 8002472:	4618      	mov	r0, r3
 8002474:	3718      	adds	r7, #24
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <_close>:

int _close(int file)
{
 800247a:	b480      	push	{r7}
 800247c:	b083      	sub	sp, #12
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
	return -1;
 8002482:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002486:	4618      	mov	r0, r3
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr

08002492 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002492:	b480      	push	{r7}
 8002494:	b083      	sub	sp, #12
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
 800249a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024a2:	605a      	str	r2, [r3, #4]
	return 0;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr

080024b2 <_isatty>:

int _isatty(int file)
{
 80024b2:	b480      	push	{r7}
 80024b4:	b083      	sub	sp, #12
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
	return 1;
 80024ba:	2301      	movs	r3, #1
}
 80024bc:	4618      	mov	r0, r3
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	607a      	str	r2, [r7, #4]
	return 0;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3714      	adds	r7, #20
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
	...

080024e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024ec:	4a14      	ldr	r2, [pc, #80]	; (8002540 <_sbrk+0x5c>)
 80024ee:	4b15      	ldr	r3, [pc, #84]	; (8002544 <_sbrk+0x60>)
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024f8:	4b13      	ldr	r3, [pc, #76]	; (8002548 <_sbrk+0x64>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d102      	bne.n	8002506 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002500:	4b11      	ldr	r3, [pc, #68]	; (8002548 <_sbrk+0x64>)
 8002502:	4a12      	ldr	r2, [pc, #72]	; (800254c <_sbrk+0x68>)
 8002504:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002506:	4b10      	ldr	r3, [pc, #64]	; (8002548 <_sbrk+0x64>)
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4413      	add	r3, r2
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	429a      	cmp	r2, r3
 8002512:	d207      	bcs.n	8002524 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002514:	f003 fa52 	bl	80059bc <__errno>
 8002518:	4603      	mov	r3, r0
 800251a:	220c      	movs	r2, #12
 800251c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800251e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002522:	e009      	b.n	8002538 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002524:	4b08      	ldr	r3, [pc, #32]	; (8002548 <_sbrk+0x64>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800252a:	4b07      	ldr	r3, [pc, #28]	; (8002548 <_sbrk+0x64>)
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4413      	add	r3, r2
 8002532:	4a05      	ldr	r2, [pc, #20]	; (8002548 <_sbrk+0x64>)
 8002534:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002536:	68fb      	ldr	r3, [r7, #12]
}
 8002538:	4618      	mov	r0, r3
 800253a:	3718      	adds	r7, #24
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	20018000 	.word	0x20018000
 8002544:	00000400 	.word	0x00000400
 8002548:	20000230 	.word	0x20000230
 800254c:	200004b0 	.word	0x200004b0

08002550 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002554:	4b06      	ldr	r3, [pc, #24]	; (8002570 <SystemInit+0x20>)
 8002556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800255a:	4a05      	ldr	r2, [pc, #20]	; (8002570 <SystemInit+0x20>)
 800255c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002560:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002564:	bf00      	nop
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	e000ed00 	.word	0xe000ed00

08002574 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002574:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002578:	480d      	ldr	r0, [pc, #52]	; (80025b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800257a:	490e      	ldr	r1, [pc, #56]	; (80025b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800257c:	4a0e      	ldr	r2, [pc, #56]	; (80025b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800257e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002580:	e002      	b.n	8002588 <LoopCopyDataInit>

08002582 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002582:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002584:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002586:	3304      	adds	r3, #4

08002588 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002588:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800258a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800258c:	d3f9      	bcc.n	8002582 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800258e:	4a0b      	ldr	r2, [pc, #44]	; (80025bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002590:	4c0b      	ldr	r4, [pc, #44]	; (80025c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002592:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002594:	e001      	b.n	800259a <LoopFillZerobss>

08002596 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002596:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002598:	3204      	adds	r2, #4

0800259a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800259a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800259c:	d3fb      	bcc.n	8002596 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800259e:	f7ff ffd7 	bl	8002550 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025a2:	f003 fa11 	bl	80059c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025a6:	f7ff f86d 	bl	8001684 <main>
  bx  lr    
 80025aa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80025ac:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80025b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025b4:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80025b8:	08008d0c 	.word	0x08008d0c
  ldr r2, =_sbss
 80025bc:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80025c0:	200004ac 	.word	0x200004ac

080025c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025c4:	e7fe      	b.n	80025c4 <ADC_IRQHandler>
	...

080025c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025cc:	4b0e      	ldr	r3, [pc, #56]	; (8002608 <HAL_Init+0x40>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a0d      	ldr	r2, [pc, #52]	; (8002608 <HAL_Init+0x40>)
 80025d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025d8:	4b0b      	ldr	r3, [pc, #44]	; (8002608 <HAL_Init+0x40>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a0a      	ldr	r2, [pc, #40]	; (8002608 <HAL_Init+0x40>)
 80025de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025e4:	4b08      	ldr	r3, [pc, #32]	; (8002608 <HAL_Init+0x40>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a07      	ldr	r2, [pc, #28]	; (8002608 <HAL_Init+0x40>)
 80025ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025f0:	2003      	movs	r0, #3
 80025f2:	f000 f8fc 	bl	80027ee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025f6:	2000      	movs	r0, #0
 80025f8:	f7ff fe22 	bl	8002240 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025fc:	f7ff fcc8 	bl	8001f90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	40023c00 	.word	0x40023c00

0800260c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002610:	4b06      	ldr	r3, [pc, #24]	; (800262c <HAL_IncTick+0x20>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	461a      	mov	r2, r3
 8002616:	4b06      	ldr	r3, [pc, #24]	; (8002630 <HAL_IncTick+0x24>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4413      	add	r3, r2
 800261c:	4a04      	ldr	r2, [pc, #16]	; (8002630 <HAL_IncTick+0x24>)
 800261e:	6013      	str	r3, [r2, #0]
}
 8002620:	bf00      	nop
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	20000014 	.word	0x20000014
 8002630:	20000498 	.word	0x20000498

08002634 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  return uwTick;
 8002638:	4b03      	ldr	r3, [pc, #12]	; (8002648 <HAL_GetTick+0x14>)
 800263a:	681b      	ldr	r3, [r3, #0]
}
 800263c:	4618      	mov	r0, r3
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	20000498 	.word	0x20000498

0800264c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002654:	f7ff ffee 	bl	8002634 <HAL_GetTick>
 8002658:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002664:	d005      	beq.n	8002672 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002666:	4b0a      	ldr	r3, [pc, #40]	; (8002690 <HAL_Delay+0x44>)
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	461a      	mov	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	4413      	add	r3, r2
 8002670:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002672:	bf00      	nop
 8002674:	f7ff ffde 	bl	8002634 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	429a      	cmp	r2, r3
 8002682:	d8f7      	bhi.n	8002674 <HAL_Delay+0x28>
  {
  }
}
 8002684:	bf00      	nop
 8002686:	bf00      	nop
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	20000014 	.word	0x20000014

08002694 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002694:	b480      	push	{r7}
 8002696:	b085      	sub	sp, #20
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f003 0307 	and.w	r3, r3, #7
 80026a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026a4:	4b0c      	ldr	r3, [pc, #48]	; (80026d8 <__NVIC_SetPriorityGrouping+0x44>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026aa:	68ba      	ldr	r2, [r7, #8]
 80026ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026b0:	4013      	ands	r3, r2
 80026b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026c6:	4a04      	ldr	r2, [pc, #16]	; (80026d8 <__NVIC_SetPriorityGrouping+0x44>)
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	60d3      	str	r3, [r2, #12]
}
 80026cc:	bf00      	nop
 80026ce:	3714      	adds	r7, #20
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	e000ed00 	.word	0xe000ed00

080026dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026e0:	4b04      	ldr	r3, [pc, #16]	; (80026f4 <__NVIC_GetPriorityGrouping+0x18>)
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	0a1b      	lsrs	r3, r3, #8
 80026e6:	f003 0307 	and.w	r3, r3, #7
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr
 80026f4:	e000ed00 	.word	0xe000ed00

080026f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	4603      	mov	r3, r0
 8002700:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002706:	2b00      	cmp	r3, #0
 8002708:	db0b      	blt.n	8002722 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800270a:	79fb      	ldrb	r3, [r7, #7]
 800270c:	f003 021f 	and.w	r2, r3, #31
 8002710:	4907      	ldr	r1, [pc, #28]	; (8002730 <__NVIC_EnableIRQ+0x38>)
 8002712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002716:	095b      	lsrs	r3, r3, #5
 8002718:	2001      	movs	r0, #1
 800271a:	fa00 f202 	lsl.w	r2, r0, r2
 800271e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002722:	bf00      	nop
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	e000e100 	.word	0xe000e100

08002734 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	4603      	mov	r3, r0
 800273c:	6039      	str	r1, [r7, #0]
 800273e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002744:	2b00      	cmp	r3, #0
 8002746:	db0a      	blt.n	800275e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	b2da      	uxtb	r2, r3
 800274c:	490c      	ldr	r1, [pc, #48]	; (8002780 <__NVIC_SetPriority+0x4c>)
 800274e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002752:	0112      	lsls	r2, r2, #4
 8002754:	b2d2      	uxtb	r2, r2
 8002756:	440b      	add	r3, r1
 8002758:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800275c:	e00a      	b.n	8002774 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	b2da      	uxtb	r2, r3
 8002762:	4908      	ldr	r1, [pc, #32]	; (8002784 <__NVIC_SetPriority+0x50>)
 8002764:	79fb      	ldrb	r3, [r7, #7]
 8002766:	f003 030f 	and.w	r3, r3, #15
 800276a:	3b04      	subs	r3, #4
 800276c:	0112      	lsls	r2, r2, #4
 800276e:	b2d2      	uxtb	r2, r2
 8002770:	440b      	add	r3, r1
 8002772:	761a      	strb	r2, [r3, #24]
}
 8002774:	bf00      	nop
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr
 8002780:	e000e100 	.word	0xe000e100
 8002784:	e000ed00 	.word	0xe000ed00

08002788 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002788:	b480      	push	{r7}
 800278a:	b089      	sub	sp, #36	; 0x24
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f003 0307 	and.w	r3, r3, #7
 800279a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	f1c3 0307 	rsb	r3, r3, #7
 80027a2:	2b04      	cmp	r3, #4
 80027a4:	bf28      	it	cs
 80027a6:	2304      	movcs	r3, #4
 80027a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	3304      	adds	r3, #4
 80027ae:	2b06      	cmp	r3, #6
 80027b0:	d902      	bls.n	80027b8 <NVIC_EncodePriority+0x30>
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	3b03      	subs	r3, #3
 80027b6:	e000      	b.n	80027ba <NVIC_EncodePriority+0x32>
 80027b8:	2300      	movs	r3, #0
 80027ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	fa02 f303 	lsl.w	r3, r2, r3
 80027c6:	43da      	mvns	r2, r3
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	401a      	ands	r2, r3
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	fa01 f303 	lsl.w	r3, r1, r3
 80027da:	43d9      	mvns	r1, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027e0:	4313      	orrs	r3, r2
         );
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3724      	adds	r7, #36	; 0x24
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b082      	sub	sp, #8
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f7ff ff4c 	bl	8002694 <__NVIC_SetPriorityGrouping>
}
 80027fc:	bf00      	nop
 80027fe:	3708      	adds	r7, #8
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002804:	b580      	push	{r7, lr}
 8002806:	b086      	sub	sp, #24
 8002808:	af00      	add	r7, sp, #0
 800280a:	4603      	mov	r3, r0
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
 8002810:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002812:	2300      	movs	r3, #0
 8002814:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002816:	f7ff ff61 	bl	80026dc <__NVIC_GetPriorityGrouping>
 800281a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	68b9      	ldr	r1, [r7, #8]
 8002820:	6978      	ldr	r0, [r7, #20]
 8002822:	f7ff ffb1 	bl	8002788 <NVIC_EncodePriority>
 8002826:	4602      	mov	r2, r0
 8002828:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800282c:	4611      	mov	r1, r2
 800282e:	4618      	mov	r0, r3
 8002830:	f7ff ff80 	bl	8002734 <__NVIC_SetPriority>
}
 8002834:	bf00      	nop
 8002836:	3718      	adds	r7, #24
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	4603      	mov	r3, r0
 8002844:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284a:	4618      	mov	r0, r3
 800284c:	f7ff ff54 	bl	80026f8 <__NVIC_EnableIRQ>
}
 8002850:	bf00      	nop
 8002852:	3708      	adds	r7, #8
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002864:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002866:	f7ff fee5 	bl	8002634 <HAL_GetTick>
 800286a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002872:	b2db      	uxtb	r3, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d008      	beq.n	800288a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2280      	movs	r2, #128	; 0x80
 800287c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e052      	b.n	8002930 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f022 0216 	bic.w	r2, r2, #22
 8002898:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	695a      	ldr	r2, [r3, #20]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028a8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d103      	bne.n	80028ba <HAL_DMA_Abort+0x62>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d007      	beq.n	80028ca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f022 0208 	bic.w	r2, r2, #8
 80028c8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f022 0201 	bic.w	r2, r2, #1
 80028d8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028da:	e013      	b.n	8002904 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028dc:	f7ff feaa 	bl	8002634 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b05      	cmp	r3, #5
 80028e8:	d90c      	bls.n	8002904 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2220      	movs	r2, #32
 80028ee:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2203      	movs	r2, #3
 80028f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e015      	b.n	8002930 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1e4      	bne.n	80028dc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002916:	223f      	movs	r2, #63	; 0x3f
 8002918:	409a      	lsls	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	3710      	adds	r7, #16
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002946:	b2db      	uxtb	r3, r3
 8002948:	2b02      	cmp	r3, #2
 800294a:	d004      	beq.n	8002956 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2280      	movs	r2, #128	; 0x80
 8002950:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e00c      	b.n	8002970 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2205      	movs	r2, #5
 800295a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 0201 	bic.w	r2, r2, #1
 800296c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800297c:	b480      	push	{r7}
 800297e:	b089      	sub	sp, #36	; 0x24
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002986:	2300      	movs	r3, #0
 8002988:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800298a:	2300      	movs	r3, #0
 800298c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800298e:	2300      	movs	r3, #0
 8002990:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002992:	2300      	movs	r3, #0
 8002994:	61fb      	str	r3, [r7, #28]
 8002996:	e159      	b.n	8002c4c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002998:	2201      	movs	r2, #1
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	4013      	ands	r3, r2
 80029aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029ac:	693a      	ldr	r2, [r7, #16]
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	f040 8148 	bne.w	8002c46 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f003 0303 	and.w	r3, r3, #3
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d005      	beq.n	80029ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d130      	bne.n	8002a30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	2203      	movs	r2, #3
 80029da:	fa02 f303 	lsl.w	r3, r2, r3
 80029de:	43db      	mvns	r3, r3
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	4013      	ands	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	68da      	ldr	r2, [r3, #12]
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	fa02 f303 	lsl.w	r3, r2, r3
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a04:	2201      	movs	r2, #1
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	4013      	ands	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	091b      	lsrs	r3, r3, #4
 8002a1a:	f003 0201 	and.w	r2, r3, #1
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f003 0303 	and.w	r3, r3, #3
 8002a38:	2b03      	cmp	r3, #3
 8002a3a:	d017      	beq.n	8002a6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	2203      	movs	r2, #3
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	43db      	mvns	r3, r3
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	4013      	ands	r3, r2
 8002a52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	689a      	ldr	r2, [r3, #8]
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f003 0303 	and.w	r3, r3, #3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d123      	bne.n	8002ac0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	08da      	lsrs	r2, r3, #3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	3208      	adds	r2, #8
 8002a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	f003 0307 	and.w	r3, r3, #7
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	220f      	movs	r2, #15
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	43db      	mvns	r3, r3
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	691a      	ldr	r2, [r3, #16]
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	f003 0307 	and.w	r3, r3, #7
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	08da      	lsrs	r2, r3, #3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	3208      	adds	r2, #8
 8002aba:	69b9      	ldr	r1, [r7, #24]
 8002abc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	2203      	movs	r2, #3
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f003 0203 	and.w	r2, r3, #3
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f000 80a2 	beq.w	8002c46 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b02:	2300      	movs	r3, #0
 8002b04:	60fb      	str	r3, [r7, #12]
 8002b06:	4b57      	ldr	r3, [pc, #348]	; (8002c64 <HAL_GPIO_Init+0x2e8>)
 8002b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0a:	4a56      	ldr	r2, [pc, #344]	; (8002c64 <HAL_GPIO_Init+0x2e8>)
 8002b0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b10:	6453      	str	r3, [r2, #68]	; 0x44
 8002b12:	4b54      	ldr	r3, [pc, #336]	; (8002c64 <HAL_GPIO_Init+0x2e8>)
 8002b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b1e:	4a52      	ldr	r2, [pc, #328]	; (8002c68 <HAL_GPIO_Init+0x2ec>)
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	089b      	lsrs	r3, r3, #2
 8002b24:	3302      	adds	r3, #2
 8002b26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	f003 0303 	and.w	r3, r3, #3
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	220f      	movs	r2, #15
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	43db      	mvns	r3, r3
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a49      	ldr	r2, [pc, #292]	; (8002c6c <HAL_GPIO_Init+0x2f0>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d019      	beq.n	8002b7e <HAL_GPIO_Init+0x202>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a48      	ldr	r2, [pc, #288]	; (8002c70 <HAL_GPIO_Init+0x2f4>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d013      	beq.n	8002b7a <HAL_GPIO_Init+0x1fe>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a47      	ldr	r2, [pc, #284]	; (8002c74 <HAL_GPIO_Init+0x2f8>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d00d      	beq.n	8002b76 <HAL_GPIO_Init+0x1fa>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a46      	ldr	r2, [pc, #280]	; (8002c78 <HAL_GPIO_Init+0x2fc>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d007      	beq.n	8002b72 <HAL_GPIO_Init+0x1f6>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a45      	ldr	r2, [pc, #276]	; (8002c7c <HAL_GPIO_Init+0x300>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d101      	bne.n	8002b6e <HAL_GPIO_Init+0x1f2>
 8002b6a:	2304      	movs	r3, #4
 8002b6c:	e008      	b.n	8002b80 <HAL_GPIO_Init+0x204>
 8002b6e:	2307      	movs	r3, #7
 8002b70:	e006      	b.n	8002b80 <HAL_GPIO_Init+0x204>
 8002b72:	2303      	movs	r3, #3
 8002b74:	e004      	b.n	8002b80 <HAL_GPIO_Init+0x204>
 8002b76:	2302      	movs	r3, #2
 8002b78:	e002      	b.n	8002b80 <HAL_GPIO_Init+0x204>
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e000      	b.n	8002b80 <HAL_GPIO_Init+0x204>
 8002b7e:	2300      	movs	r3, #0
 8002b80:	69fa      	ldr	r2, [r7, #28]
 8002b82:	f002 0203 	and.w	r2, r2, #3
 8002b86:	0092      	lsls	r2, r2, #2
 8002b88:	4093      	lsls	r3, r2
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b90:	4935      	ldr	r1, [pc, #212]	; (8002c68 <HAL_GPIO_Init+0x2ec>)
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	089b      	lsrs	r3, r3, #2
 8002b96:	3302      	adds	r3, #2
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b9e:	4b38      	ldr	r3, [pc, #224]	; (8002c80 <HAL_GPIO_Init+0x304>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	43db      	mvns	r3, r3
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	4013      	ands	r3, r2
 8002bac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d003      	beq.n	8002bc2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bc2:	4a2f      	ldr	r2, [pc, #188]	; (8002c80 <HAL_GPIO_Init+0x304>)
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002bc8:	4b2d      	ldr	r3, [pc, #180]	; (8002c80 <HAL_GPIO_Init+0x304>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	43db      	mvns	r3, r3
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d003      	beq.n	8002bec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bec:	4a24      	ldr	r2, [pc, #144]	; (8002c80 <HAL_GPIO_Init+0x304>)
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bf2:	4b23      	ldr	r3, [pc, #140]	; (8002c80 <HAL_GPIO_Init+0x304>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	43db      	mvns	r3, r3
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	4013      	ands	r3, r2
 8002c00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d003      	beq.n	8002c16 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c16:	4a1a      	ldr	r2, [pc, #104]	; (8002c80 <HAL_GPIO_Init+0x304>)
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c1c:	4b18      	ldr	r3, [pc, #96]	; (8002c80 <HAL_GPIO_Init+0x304>)
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	43db      	mvns	r3, r3
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d003      	beq.n	8002c40 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c40:	4a0f      	ldr	r2, [pc, #60]	; (8002c80 <HAL_GPIO_Init+0x304>)
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	3301      	adds	r3, #1
 8002c4a:	61fb      	str	r3, [r7, #28]
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	2b0f      	cmp	r3, #15
 8002c50:	f67f aea2 	bls.w	8002998 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c54:	bf00      	nop
 8002c56:	bf00      	nop
 8002c58:	3724      	adds	r7, #36	; 0x24
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	40023800 	.word	0x40023800
 8002c68:	40013800 	.word	0x40013800
 8002c6c:	40020000 	.word	0x40020000
 8002c70:	40020400 	.word	0x40020400
 8002c74:	40020800 	.word	0x40020800
 8002c78:	40020c00 	.word	0x40020c00
 8002c7c:	40021000 	.word	0x40021000
 8002c80:	40013c00 	.word	0x40013c00

08002c84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	691a      	ldr	r2, [r3, #16]
 8002c94:	887b      	ldrh	r3, [r7, #2]
 8002c96:	4013      	ands	r3, r2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d002      	beq.n	8002ca2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	73fb      	strb	r3, [r7, #15]
 8002ca0:	e001      	b.n	8002ca6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3714      	adds	r7, #20
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	807b      	strh	r3, [r7, #2]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cc4:	787b      	ldrb	r3, [r7, #1]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d003      	beq.n	8002cd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cca:	887a      	ldrh	r2, [r7, #2]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cd0:	e003      	b.n	8002cda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cd2:	887b      	ldrh	r3, [r7, #2]
 8002cd4:	041a      	lsls	r2, r3, #16
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	619a      	str	r2, [r3, #24]
}
 8002cda:	bf00      	nop
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr

08002ce6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b085      	sub	sp, #20
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
 8002cee:	460b      	mov	r3, r1
 8002cf0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002cf8:	887a      	ldrh	r2, [r7, #2]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	041a      	lsls	r2, r3, #16
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	43d9      	mvns	r1, r3
 8002d04:	887b      	ldrh	r3, [r7, #2]
 8002d06:	400b      	ands	r3, r1
 8002d08:	431a      	orrs	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	619a      	str	r2, [r3, #24]
}
 8002d0e:	bf00      	nop
 8002d10:	3714      	adds	r7, #20
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
	...

08002d1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	4603      	mov	r3, r0
 8002d24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002d26:	4b08      	ldr	r3, [pc, #32]	; (8002d48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d28:	695a      	ldr	r2, [r3, #20]
 8002d2a:	88fb      	ldrh	r3, [r7, #6]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d006      	beq.n	8002d40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d32:	4a05      	ldr	r2, [pc, #20]	; (8002d48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d34:	88fb      	ldrh	r3, [r7, #6]
 8002d36:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d38:	88fb      	ldrh	r3, [r7, #6]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7fe fc4c 	bl	80015d8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002d40:	bf00      	nop
 8002d42:	3708      	adds	r7, #8
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	40013c00 	.word	0x40013c00

08002d4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e12b      	b.n	8002fb6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d106      	bne.n	8002d78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f7ff f93c 	bl	8001ff0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2224      	movs	r2, #36	; 0x24
 8002d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f022 0201 	bic.w	r2, r2, #1
 8002d8e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d9e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002db0:	f001 f992 	bl	80040d8 <HAL_RCC_GetPCLK1Freq>
 8002db4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	4a81      	ldr	r2, [pc, #516]	; (8002fc0 <HAL_I2C_Init+0x274>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d807      	bhi.n	8002dd0 <HAL_I2C_Init+0x84>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	4a80      	ldr	r2, [pc, #512]	; (8002fc4 <HAL_I2C_Init+0x278>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	bf94      	ite	ls
 8002dc8:	2301      	movls	r3, #1
 8002dca:	2300      	movhi	r3, #0
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	e006      	b.n	8002dde <HAL_I2C_Init+0x92>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	4a7d      	ldr	r2, [pc, #500]	; (8002fc8 <HAL_I2C_Init+0x27c>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	bf94      	ite	ls
 8002dd8:	2301      	movls	r3, #1
 8002dda:	2300      	movhi	r3, #0
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e0e7      	b.n	8002fb6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	4a78      	ldr	r2, [pc, #480]	; (8002fcc <HAL_I2C_Init+0x280>)
 8002dea:	fba2 2303 	umull	r2, r3, r2, r3
 8002dee:	0c9b      	lsrs	r3, r3, #18
 8002df0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68ba      	ldr	r2, [r7, #8]
 8002e02:	430a      	orrs	r2, r1
 8002e04:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	6a1b      	ldr	r3, [r3, #32]
 8002e0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	4a6a      	ldr	r2, [pc, #424]	; (8002fc0 <HAL_I2C_Init+0x274>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d802      	bhi.n	8002e20 <HAL_I2C_Init+0xd4>
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	e009      	b.n	8002e34 <HAL_I2C_Init+0xe8>
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e26:	fb02 f303 	mul.w	r3, r2, r3
 8002e2a:	4a69      	ldr	r2, [pc, #420]	; (8002fd0 <HAL_I2C_Init+0x284>)
 8002e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e30:	099b      	lsrs	r3, r3, #6
 8002e32:	3301      	adds	r3, #1
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	6812      	ldr	r2, [r2, #0]
 8002e38:	430b      	orrs	r3, r1
 8002e3a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	69db      	ldr	r3, [r3, #28]
 8002e42:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e46:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	495c      	ldr	r1, [pc, #368]	; (8002fc0 <HAL_I2C_Init+0x274>)
 8002e50:	428b      	cmp	r3, r1
 8002e52:	d819      	bhi.n	8002e88 <HAL_I2C_Init+0x13c>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	1e59      	subs	r1, r3, #1
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e62:	1c59      	adds	r1, r3, #1
 8002e64:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e68:	400b      	ands	r3, r1
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d00a      	beq.n	8002e84 <HAL_I2C_Init+0x138>
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	1e59      	subs	r1, r3, #1
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e82:	e051      	b.n	8002f28 <HAL_I2C_Init+0x1dc>
 8002e84:	2304      	movs	r3, #4
 8002e86:	e04f      	b.n	8002f28 <HAL_I2C_Init+0x1dc>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d111      	bne.n	8002eb4 <HAL_I2C_Init+0x168>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	1e58      	subs	r0, r3, #1
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6859      	ldr	r1, [r3, #4]
 8002e98:	460b      	mov	r3, r1
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	440b      	add	r3, r1
 8002e9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	bf0c      	ite	eq
 8002eac:	2301      	moveq	r3, #1
 8002eae:	2300      	movne	r3, #0
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	e012      	b.n	8002eda <HAL_I2C_Init+0x18e>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	1e58      	subs	r0, r3, #1
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6859      	ldr	r1, [r3, #4]
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	440b      	add	r3, r1
 8002ec2:	0099      	lsls	r1, r3, #2
 8002ec4:	440b      	add	r3, r1
 8002ec6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eca:	3301      	adds	r3, #1
 8002ecc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	bf0c      	ite	eq
 8002ed4:	2301      	moveq	r3, #1
 8002ed6:	2300      	movne	r3, #0
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <HAL_I2C_Init+0x196>
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e022      	b.n	8002f28 <HAL_I2C_Init+0x1dc>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10e      	bne.n	8002f08 <HAL_I2C_Init+0x1bc>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	1e58      	subs	r0, r3, #1
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6859      	ldr	r1, [r3, #4]
 8002ef2:	460b      	mov	r3, r1
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	440b      	add	r3, r1
 8002ef8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002efc:	3301      	adds	r3, #1
 8002efe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f06:	e00f      	b.n	8002f28 <HAL_I2C_Init+0x1dc>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	1e58      	subs	r0, r3, #1
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6859      	ldr	r1, [r3, #4]
 8002f10:	460b      	mov	r3, r1
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	440b      	add	r3, r1
 8002f16:	0099      	lsls	r1, r3, #2
 8002f18:	440b      	add	r3, r1
 8002f1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f1e:	3301      	adds	r3, #1
 8002f20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	6809      	ldr	r1, [r1, #0]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	69da      	ldr	r2, [r3, #28]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	431a      	orrs	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	6911      	ldr	r1, [r2, #16]
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	68d2      	ldr	r2, [r2, #12]
 8002f62:	4311      	orrs	r1, r2
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	6812      	ldr	r2, [r2, #0]
 8002f68:	430b      	orrs	r3, r1
 8002f6a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	695a      	ldr	r2, [r3, #20]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	431a      	orrs	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f042 0201 	orr.w	r2, r2, #1
 8002f96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2220      	movs	r2, #32
 8002fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	000186a0 	.word	0x000186a0
 8002fc4:	001e847f 	.word	0x001e847f
 8002fc8:	003d08ff 	.word	0x003d08ff
 8002fcc:	431bde83 	.word	0x431bde83
 8002fd0:	10624dd3 	.word	0x10624dd3

08002fd4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b088      	sub	sp, #32
 8002fd8:	af02      	add	r7, sp, #8
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	607a      	str	r2, [r7, #4]
 8002fde:	461a      	mov	r2, r3
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	817b      	strh	r3, [r7, #10]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002fe8:	f7ff fb24 	bl	8002634 <HAL_GetTick>
 8002fec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b20      	cmp	r3, #32
 8002ff8:	f040 80e0 	bne.w	80031bc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	9300      	str	r3, [sp, #0]
 8003000:	2319      	movs	r3, #25
 8003002:	2201      	movs	r2, #1
 8003004:	4970      	ldr	r1, [pc, #448]	; (80031c8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f000 fa92 	bl	8003530 <I2C_WaitOnFlagUntilTimeout>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003012:	2302      	movs	r3, #2
 8003014:	e0d3      	b.n	80031be <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800301c:	2b01      	cmp	r3, #1
 800301e:	d101      	bne.n	8003024 <HAL_I2C_Master_Transmit+0x50>
 8003020:	2302      	movs	r3, #2
 8003022:	e0cc      	b.n	80031be <HAL_I2C_Master_Transmit+0x1ea>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	2b01      	cmp	r3, #1
 8003038:	d007      	beq.n	800304a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f042 0201 	orr.w	r2, r2, #1
 8003048:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003058:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2221      	movs	r2, #33	; 0x21
 800305e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2210      	movs	r2, #16
 8003066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	893a      	ldrh	r2, [r7, #8]
 800307a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003080:	b29a      	uxth	r2, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	4a50      	ldr	r2, [pc, #320]	; (80031cc <HAL_I2C_Master_Transmit+0x1f8>)
 800308a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800308c:	8979      	ldrh	r1, [r7, #10]
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	6a3a      	ldr	r2, [r7, #32]
 8003092:	68f8      	ldr	r0, [r7, #12]
 8003094:	f000 f9ca 	bl	800342c <I2C_MasterRequestWrite>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e08d      	b.n	80031be <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030a2:	2300      	movs	r3, #0
 80030a4:	613b      	str	r3, [r7, #16]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	695b      	ldr	r3, [r3, #20]
 80030ac:	613b      	str	r3, [r7, #16]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	613b      	str	r3, [r7, #16]
 80030b6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80030b8:	e066      	b.n	8003188 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030ba:	697a      	ldr	r2, [r7, #20]
 80030bc:	6a39      	ldr	r1, [r7, #32]
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f000 fb0c 	bl	80036dc <I2C_WaitOnTXEFlagUntilTimeout>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00d      	beq.n	80030e6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ce:	2b04      	cmp	r3, #4
 80030d0:	d107      	bne.n	80030e2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e06b      	b.n	80031be <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ea:	781a      	ldrb	r2, [r3, #0]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f6:	1c5a      	adds	r2, r3, #1
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003100:	b29b      	uxth	r3, r3
 8003102:	3b01      	subs	r3, #1
 8003104:	b29a      	uxth	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800310e:	3b01      	subs	r3, #1
 8003110:	b29a      	uxth	r2, r3
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	695b      	ldr	r3, [r3, #20]
 800311c:	f003 0304 	and.w	r3, r3, #4
 8003120:	2b04      	cmp	r3, #4
 8003122:	d11b      	bne.n	800315c <HAL_I2C_Master_Transmit+0x188>
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003128:	2b00      	cmp	r3, #0
 800312a:	d017      	beq.n	800315c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003130:	781a      	ldrb	r2, [r3, #0]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313c:	1c5a      	adds	r2, r3, #1
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003146:	b29b      	uxth	r3, r3
 8003148:	3b01      	subs	r3, #1
 800314a:	b29a      	uxth	r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003154:	3b01      	subs	r3, #1
 8003156:	b29a      	uxth	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800315c:	697a      	ldr	r2, [r7, #20]
 800315e:	6a39      	ldr	r1, [r7, #32]
 8003160:	68f8      	ldr	r0, [r7, #12]
 8003162:	f000 fafc 	bl	800375e <I2C_WaitOnBTFFlagUntilTimeout>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00d      	beq.n	8003188 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003170:	2b04      	cmp	r3, #4
 8003172:	d107      	bne.n	8003184 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003182:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e01a      	b.n	80031be <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800318c:	2b00      	cmp	r3, #0
 800318e:	d194      	bne.n	80030ba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800319e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2220      	movs	r2, #32
 80031a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80031b8:	2300      	movs	r3, #0
 80031ba:	e000      	b.n	80031be <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80031bc:	2302      	movs	r3, #2
  }
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3718      	adds	r7, #24
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	00100002 	.word	0x00100002
 80031cc:	ffff0000 	.word	0xffff0000

080031d0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b08a      	sub	sp, #40	; 0x28
 80031d4:	af02      	add	r7, sp, #8
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	607a      	str	r2, [r7, #4]
 80031da:	603b      	str	r3, [r7, #0]
 80031dc:	460b      	mov	r3, r1
 80031de:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80031e0:	f7ff fa28 	bl	8002634 <HAL_GetTick>
 80031e4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80031e6:	2301      	movs	r3, #1
 80031e8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b20      	cmp	r3, #32
 80031f4:	f040 8111 	bne.w	800341a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	9300      	str	r3, [sp, #0]
 80031fc:	2319      	movs	r3, #25
 80031fe:	2201      	movs	r2, #1
 8003200:	4988      	ldr	r1, [pc, #544]	; (8003424 <HAL_I2C_IsDeviceReady+0x254>)
 8003202:	68f8      	ldr	r0, [r7, #12]
 8003204:	f000 f994 	bl	8003530 <I2C_WaitOnFlagUntilTimeout>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d001      	beq.n	8003212 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800320e:	2302      	movs	r3, #2
 8003210:	e104      	b.n	800341c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003218:	2b01      	cmp	r3, #1
 800321a:	d101      	bne.n	8003220 <HAL_I2C_IsDeviceReady+0x50>
 800321c:	2302      	movs	r3, #2
 800321e:	e0fd      	b.n	800341c <HAL_I2C_IsDeviceReady+0x24c>
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b01      	cmp	r3, #1
 8003234:	d007      	beq.n	8003246 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f042 0201 	orr.w	r2, r2, #1
 8003244:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003254:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2224      	movs	r2, #36	; 0x24
 800325a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	4a70      	ldr	r2, [pc, #448]	; (8003428 <HAL_I2C_IsDeviceReady+0x258>)
 8003268:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003278:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	9300      	str	r3, [sp, #0]
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	2200      	movs	r2, #0
 8003282:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003286:	68f8      	ldr	r0, [r7, #12]
 8003288:	f000 f952 	bl	8003530 <I2C_WaitOnFlagUntilTimeout>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00d      	beq.n	80032ae <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800329c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032a0:	d103      	bne.n	80032aa <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032a8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e0b6      	b.n	800341c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032ae:	897b      	ldrh	r3, [r7, #10]
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	461a      	mov	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80032bc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80032be:	f7ff f9b9 	bl	8002634 <HAL_GetTick>
 80032c2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	bf0c      	ite	eq
 80032d2:	2301      	moveq	r3, #1
 80032d4:	2300      	movne	r3, #0
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	695b      	ldr	r3, [r3, #20]
 80032e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032e8:	bf0c      	ite	eq
 80032ea:	2301      	moveq	r3, #1
 80032ec:	2300      	movne	r3, #0
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80032f2:	e025      	b.n	8003340 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80032f4:	f7ff f99e 	bl	8002634 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	683a      	ldr	r2, [r7, #0]
 8003300:	429a      	cmp	r2, r3
 8003302:	d302      	bcc.n	800330a <HAL_I2C_IsDeviceReady+0x13a>
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d103      	bne.n	8003312 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	22a0      	movs	r2, #160	; 0xa0
 800330e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	695b      	ldr	r3, [r3, #20]
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	2b02      	cmp	r3, #2
 800331e:	bf0c      	ite	eq
 8003320:	2301      	moveq	r3, #1
 8003322:	2300      	movne	r3, #0
 8003324:	b2db      	uxtb	r3, r3
 8003326:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003332:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003336:	bf0c      	ite	eq
 8003338:	2301      	moveq	r3, #1
 800333a:	2300      	movne	r3, #0
 800333c:	b2db      	uxtb	r3, r3
 800333e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003346:	b2db      	uxtb	r3, r3
 8003348:	2ba0      	cmp	r3, #160	; 0xa0
 800334a:	d005      	beq.n	8003358 <HAL_I2C_IsDeviceReady+0x188>
 800334c:	7dfb      	ldrb	r3, [r7, #23]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d102      	bne.n	8003358 <HAL_I2C_IsDeviceReady+0x188>
 8003352:	7dbb      	ldrb	r3, [r7, #22]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d0cd      	beq.n	80032f4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2220      	movs	r2, #32
 800335c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b02      	cmp	r3, #2
 800336c:	d129      	bne.n	80033c2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800337c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800337e:	2300      	movs	r3, #0
 8003380:	613b      	str	r3, [r7, #16]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	695b      	ldr	r3, [r3, #20]
 8003388:	613b      	str	r3, [r7, #16]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	613b      	str	r3, [r7, #16]
 8003392:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	9300      	str	r3, [sp, #0]
 8003398:	2319      	movs	r3, #25
 800339a:	2201      	movs	r2, #1
 800339c:	4921      	ldr	r1, [pc, #132]	; (8003424 <HAL_I2C_IsDeviceReady+0x254>)
 800339e:	68f8      	ldr	r0, [r7, #12]
 80033a0:	f000 f8c6 	bl	8003530 <I2C_WaitOnFlagUntilTimeout>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d001      	beq.n	80033ae <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e036      	b.n	800341c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2220      	movs	r2, #32
 80033b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80033be:	2300      	movs	r3, #0
 80033c0:	e02c      	b.n	800341c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033d0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033da:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	9300      	str	r3, [sp, #0]
 80033e0:	2319      	movs	r3, #25
 80033e2:	2201      	movs	r2, #1
 80033e4:	490f      	ldr	r1, [pc, #60]	; (8003424 <HAL_I2C_IsDeviceReady+0x254>)
 80033e6:	68f8      	ldr	r0, [r7, #12]
 80033e8:	f000 f8a2 	bl	8003530 <I2C_WaitOnFlagUntilTimeout>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d001      	beq.n	80033f6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e012      	b.n	800341c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	3301      	adds	r3, #1
 80033fa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	429a      	cmp	r2, r3
 8003402:	f4ff af32 	bcc.w	800326a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2220      	movs	r2, #32
 800340a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e000      	b.n	800341c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800341a:	2302      	movs	r3, #2
  }
}
 800341c:	4618      	mov	r0, r3
 800341e:	3720      	adds	r7, #32
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	00100002 	.word	0x00100002
 8003428:	ffff0000 	.word	0xffff0000

0800342c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b088      	sub	sp, #32
 8003430:	af02      	add	r7, sp, #8
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	607a      	str	r2, [r7, #4]
 8003436:	603b      	str	r3, [r7, #0]
 8003438:	460b      	mov	r3, r1
 800343a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003440:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	2b08      	cmp	r3, #8
 8003446:	d006      	beq.n	8003456 <I2C_MasterRequestWrite+0x2a>
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d003      	beq.n	8003456 <I2C_MasterRequestWrite+0x2a>
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003454:	d108      	bne.n	8003468 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003464:	601a      	str	r2, [r3, #0]
 8003466:	e00b      	b.n	8003480 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346c:	2b12      	cmp	r3, #18
 800346e:	d107      	bne.n	8003480 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800347e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	9300      	str	r3, [sp, #0]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800348c:	68f8      	ldr	r0, [r7, #12]
 800348e:	f000 f84f 	bl	8003530 <I2C_WaitOnFlagUntilTimeout>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00d      	beq.n	80034b4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034a6:	d103      	bne.n	80034b0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e035      	b.n	8003520 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034bc:	d108      	bne.n	80034d0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034be:	897b      	ldrh	r3, [r7, #10]
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	461a      	mov	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80034cc:	611a      	str	r2, [r3, #16]
 80034ce:	e01b      	b.n	8003508 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80034d0:	897b      	ldrh	r3, [r7, #10]
 80034d2:	11db      	asrs	r3, r3, #7
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	f003 0306 	and.w	r3, r3, #6
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	f063 030f 	orn	r3, r3, #15
 80034e0:	b2da      	uxtb	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	490e      	ldr	r1, [pc, #56]	; (8003528 <I2C_MasterRequestWrite+0xfc>)
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	f000 f875 	bl	80035de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e010      	b.n	8003520 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80034fe:	897b      	ldrh	r3, [r7, #10]
 8003500:	b2da      	uxtb	r2, r3
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	4907      	ldr	r1, [pc, #28]	; (800352c <I2C_MasterRequestWrite+0x100>)
 800350e:	68f8      	ldr	r0, [r7, #12]
 8003510:	f000 f865 	bl	80035de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e000      	b.n	8003520 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3718      	adds	r7, #24
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	00010008 	.word	0x00010008
 800352c:	00010002 	.word	0x00010002

08003530 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	603b      	str	r3, [r7, #0]
 800353c:	4613      	mov	r3, r2
 800353e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003540:	e025      	b.n	800358e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003548:	d021      	beq.n	800358e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800354a:	f7ff f873 	bl	8002634 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	683a      	ldr	r2, [r7, #0]
 8003556:	429a      	cmp	r2, r3
 8003558:	d302      	bcc.n	8003560 <I2C_WaitOnFlagUntilTimeout+0x30>
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d116      	bne.n	800358e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2220      	movs	r2, #32
 800356a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	f043 0220 	orr.w	r2, r3, #32
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e023      	b.n	80035d6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	0c1b      	lsrs	r3, r3, #16
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2b01      	cmp	r3, #1
 8003596:	d10d      	bne.n	80035b4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	43da      	mvns	r2, r3
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	4013      	ands	r3, r2
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	bf0c      	ite	eq
 80035aa:	2301      	moveq	r3, #1
 80035ac:	2300      	movne	r3, #0
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	461a      	mov	r2, r3
 80035b2:	e00c      	b.n	80035ce <I2C_WaitOnFlagUntilTimeout+0x9e>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	43da      	mvns	r2, r3
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	4013      	ands	r3, r2
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	bf0c      	ite	eq
 80035c6:	2301      	moveq	r3, #1
 80035c8:	2300      	movne	r3, #0
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	461a      	mov	r2, r3
 80035ce:	79fb      	ldrb	r3, [r7, #7]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d0b6      	beq.n	8003542 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3710      	adds	r7, #16
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80035de:	b580      	push	{r7, lr}
 80035e0:	b084      	sub	sp, #16
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	60f8      	str	r0, [r7, #12]
 80035e6:	60b9      	str	r1, [r7, #8]
 80035e8:	607a      	str	r2, [r7, #4]
 80035ea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035ec:	e051      	b.n	8003692 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	695b      	ldr	r3, [r3, #20]
 80035f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035fc:	d123      	bne.n	8003646 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800360c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003616:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2220      	movs	r2, #32
 8003622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003632:	f043 0204 	orr.w	r2, r3, #4
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e046      	b.n	80036d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800364c:	d021      	beq.n	8003692 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800364e:	f7fe fff1 	bl	8002634 <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	429a      	cmp	r2, r3
 800365c:	d302      	bcc.n	8003664 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d116      	bne.n	8003692 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2220      	movs	r2, #32
 800366e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367e:	f043 0220 	orr.w	r2, r3, #32
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e020      	b.n	80036d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	0c1b      	lsrs	r3, r3, #16
 8003696:	b2db      	uxtb	r3, r3
 8003698:	2b01      	cmp	r3, #1
 800369a:	d10c      	bne.n	80036b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	43da      	mvns	r2, r3
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	4013      	ands	r3, r2
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	bf14      	ite	ne
 80036ae:	2301      	movne	r3, #1
 80036b0:	2300      	moveq	r3, #0
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	e00b      	b.n	80036ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	43da      	mvns	r2, r3
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	4013      	ands	r3, r2
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	bf14      	ite	ne
 80036c8:	2301      	movne	r3, #1
 80036ca:	2300      	moveq	r3, #0
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d18d      	bne.n	80035ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3710      	adds	r7, #16
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036e8:	e02d      	b.n	8003746 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f000 f878 	bl	80037e0 <I2C_IsAcknowledgeFailed>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e02d      	b.n	8003756 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003700:	d021      	beq.n	8003746 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003702:	f7fe ff97 	bl	8002634 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	68ba      	ldr	r2, [r7, #8]
 800370e:	429a      	cmp	r2, r3
 8003710:	d302      	bcc.n	8003718 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d116      	bne.n	8003746 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2220      	movs	r2, #32
 8003722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003732:	f043 0220 	orr.w	r2, r3, #32
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e007      	b.n	8003756 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	695b      	ldr	r3, [r3, #20]
 800374c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003750:	2b80      	cmp	r3, #128	; 0x80
 8003752:	d1ca      	bne.n	80036ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800375e:	b580      	push	{r7, lr}
 8003760:	b084      	sub	sp, #16
 8003762:	af00      	add	r7, sp, #0
 8003764:	60f8      	str	r0, [r7, #12]
 8003766:	60b9      	str	r1, [r7, #8]
 8003768:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800376a:	e02d      	b.n	80037c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800376c:	68f8      	ldr	r0, [r7, #12]
 800376e:	f000 f837 	bl	80037e0 <I2C_IsAcknowledgeFailed>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d001      	beq.n	800377c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e02d      	b.n	80037d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003782:	d021      	beq.n	80037c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003784:	f7fe ff56 	bl	8002634 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	68ba      	ldr	r2, [r7, #8]
 8003790:	429a      	cmp	r2, r3
 8003792:	d302      	bcc.n	800379a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d116      	bne.n	80037c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2200      	movs	r2, #0
 800379e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2220      	movs	r2, #32
 80037a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b4:	f043 0220 	orr.w	r2, r3, #32
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e007      	b.n	80037d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	f003 0304 	and.w	r3, r3, #4
 80037d2:	2b04      	cmp	r3, #4
 80037d4:	d1ca      	bne.n	800376c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3710      	adds	r7, #16
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037f6:	d11b      	bne.n	8003830 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003800:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2220      	movs	r2, #32
 800380c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381c:	f043 0204 	orr.w	r2, r3, #4
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e000      	b.n	8003832 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	370c      	adds	r7, #12
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
	...

08003840 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b086      	sub	sp, #24
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e264      	b.n	8003d1c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	2b00      	cmp	r3, #0
 800385c:	d075      	beq.n	800394a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800385e:	4ba3      	ldr	r3, [pc, #652]	; (8003aec <HAL_RCC_OscConfig+0x2ac>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f003 030c 	and.w	r3, r3, #12
 8003866:	2b04      	cmp	r3, #4
 8003868:	d00c      	beq.n	8003884 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800386a:	4ba0      	ldr	r3, [pc, #640]	; (8003aec <HAL_RCC_OscConfig+0x2ac>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003872:	2b08      	cmp	r3, #8
 8003874:	d112      	bne.n	800389c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003876:	4b9d      	ldr	r3, [pc, #628]	; (8003aec <HAL_RCC_OscConfig+0x2ac>)
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800387e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003882:	d10b      	bne.n	800389c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003884:	4b99      	ldr	r3, [pc, #612]	; (8003aec <HAL_RCC_OscConfig+0x2ac>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d05b      	beq.n	8003948 <HAL_RCC_OscConfig+0x108>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d157      	bne.n	8003948 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e23f      	b.n	8003d1c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038a4:	d106      	bne.n	80038b4 <HAL_RCC_OscConfig+0x74>
 80038a6:	4b91      	ldr	r3, [pc, #580]	; (8003aec <HAL_RCC_OscConfig+0x2ac>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a90      	ldr	r2, [pc, #576]	; (8003aec <HAL_RCC_OscConfig+0x2ac>)
 80038ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038b0:	6013      	str	r3, [r2, #0]
 80038b2:	e01d      	b.n	80038f0 <HAL_RCC_OscConfig+0xb0>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038bc:	d10c      	bne.n	80038d8 <HAL_RCC_OscConfig+0x98>
 80038be:	4b8b      	ldr	r3, [pc, #556]	; (8003aec <HAL_RCC_OscConfig+0x2ac>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a8a      	ldr	r2, [pc, #552]	; (8003aec <HAL_RCC_OscConfig+0x2ac>)
 80038c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038c8:	6013      	str	r3, [r2, #0]
 80038ca:	4b88      	ldr	r3, [pc, #544]	; (8003aec <HAL_RCC_OscConfig+0x2ac>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a87      	ldr	r2, [pc, #540]	; (8003aec <HAL_RCC_OscConfig+0x2ac>)
 80038d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038d4:	6013      	str	r3, [r2, #0]
 80038d6:	e00b      	b.n	80038f0 <HAL_RCC_OscConfig+0xb0>
 80038d8:	4b84      	ldr	r3, [pc, #528]	; (8003aec <HAL_RCC_OscConfig+0x2ac>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a83      	ldr	r2, [pc, #524]	; (8003aec <HAL_RCC_OscConfig+0x2ac>)
 80038de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038e2:	6013      	str	r3, [r2, #0]
 80038e4:	4b81      	ldr	r3, [pc, #516]	; (8003aec <HAL_RCC_OscConfig+0x2ac>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a80      	ldr	r2, [pc, #512]	; (8003aec <HAL_RCC_OscConfig+0x2ac>)
 80038ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d013      	beq.n	8003920 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f8:	f7fe fe9c 	bl	8002634 <HAL_GetTick>
 80038fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038fe:	e008      	b.n	8003912 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003900:	f7fe fe98 	bl	8002634 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b64      	cmp	r3, #100	; 0x64
 800390c:	d901      	bls.n	8003912 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e204      	b.n	8003d1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003912:	4b76      	ldr	r3, [pc, #472]	; (8003aec <HAL_RCC_OscConfig+0x2ac>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d0f0      	beq.n	8003900 <HAL_RCC_OscConfig+0xc0>
 800391e:	e014      	b.n	800394a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003920:	f7fe fe88 	bl	8002634 <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003928:	f7fe fe84 	bl	8002634 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b64      	cmp	r3, #100	; 0x64
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e1f0      	b.n	8003d1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800393a:	4b6c      	ldr	r3, [pc, #432]	; (8003aec <HAL_RCC_OscConfig+0x2ac>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1f0      	bne.n	8003928 <HAL_RCC_OscConfig+0xe8>
 8003946:	e000      	b.n	800394a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003948:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d063      	beq.n	8003a1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003956:	4b65      	ldr	r3, [pc, #404]	; (8003aec <HAL_RCC_OscConfig+0x2ac>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f003 030c 	and.w	r3, r3, #12
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00b      	beq.n	800397a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003962:	4b62      	ldr	r3, [pc, #392]	; (8003aec <HAL_RCC_OscConfig+0x2ac>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800396a:	2b08      	cmp	r3, #8
 800396c:	d11c      	bne.n	80039a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800396e:	4b5f      	ldr	r3, [pc, #380]	; (8003aec <HAL_RCC_OscConfig+0x2ac>)
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d116      	bne.n	80039a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800397a:	4b5c      	ldr	r3, [pc, #368]	; (8003aec <HAL_RCC_OscConfig+0x2ac>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d005      	beq.n	8003992 <HAL_RCC_OscConfig+0x152>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d001      	beq.n	8003992 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e1c4      	b.n	8003d1c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003992:	4b56      	ldr	r3, [pc, #344]	; (8003aec <HAL_RCC_OscConfig+0x2ac>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	00db      	lsls	r3, r3, #3
 80039a0:	4952      	ldr	r1, [pc, #328]	; (8003aec <HAL_RCC_OscConfig+0x2ac>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039a6:	e03a      	b.n	8003a1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d020      	beq.n	80039f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039b0:	4b4f      	ldr	r3, [pc, #316]	; (8003af0 <HAL_RCC_OscConfig+0x2b0>)
 80039b2:	2201      	movs	r2, #1
 80039b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b6:	f7fe fe3d 	bl	8002634 <HAL_GetTick>
 80039ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039bc:	e008      	b.n	80039d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039be:	f7fe fe39 	bl	8002634 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d901      	bls.n	80039d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e1a5      	b.n	8003d1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039d0:	4b46      	ldr	r3, [pc, #280]	; (8003aec <HAL_RCC_OscConfig+0x2ac>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0302 	and.w	r3, r3, #2
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d0f0      	beq.n	80039be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039dc:	4b43      	ldr	r3, [pc, #268]	; (8003aec <HAL_RCC_OscConfig+0x2ac>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	00db      	lsls	r3, r3, #3
 80039ea:	4940      	ldr	r1, [pc, #256]	; (8003aec <HAL_RCC_OscConfig+0x2ac>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	600b      	str	r3, [r1, #0]
 80039f0:	e015      	b.n	8003a1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039f2:	4b3f      	ldr	r3, [pc, #252]	; (8003af0 <HAL_RCC_OscConfig+0x2b0>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f8:	f7fe fe1c 	bl	8002634 <HAL_GetTick>
 80039fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039fe:	e008      	b.n	8003a12 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a00:	f7fe fe18 	bl	8002634 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e184      	b.n	8003d1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a12:	4b36      	ldr	r3, [pc, #216]	; (8003aec <HAL_RCC_OscConfig+0x2ac>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1f0      	bne.n	8003a00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0308 	and.w	r3, r3, #8
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d030      	beq.n	8003a8c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d016      	beq.n	8003a60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a32:	4b30      	ldr	r3, [pc, #192]	; (8003af4 <HAL_RCC_OscConfig+0x2b4>)
 8003a34:	2201      	movs	r2, #1
 8003a36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a38:	f7fe fdfc 	bl	8002634 <HAL_GetTick>
 8003a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a3e:	e008      	b.n	8003a52 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a40:	f7fe fdf8 	bl	8002634 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e164      	b.n	8003d1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a52:	4b26      	ldr	r3, [pc, #152]	; (8003aec <HAL_RCC_OscConfig+0x2ac>)
 8003a54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d0f0      	beq.n	8003a40 <HAL_RCC_OscConfig+0x200>
 8003a5e:	e015      	b.n	8003a8c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a60:	4b24      	ldr	r3, [pc, #144]	; (8003af4 <HAL_RCC_OscConfig+0x2b4>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a66:	f7fe fde5 	bl	8002634 <HAL_GetTick>
 8003a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a6c:	e008      	b.n	8003a80 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a6e:	f7fe fde1 	bl	8002634 <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d901      	bls.n	8003a80 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e14d      	b.n	8003d1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a80:	4b1a      	ldr	r3, [pc, #104]	; (8003aec <HAL_RCC_OscConfig+0x2ac>)
 8003a82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a84:	f003 0302 	and.w	r3, r3, #2
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d1f0      	bne.n	8003a6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0304 	and.w	r3, r3, #4
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f000 80a0 	beq.w	8003bda <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a9e:	4b13      	ldr	r3, [pc, #76]	; (8003aec <HAL_RCC_OscConfig+0x2ac>)
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10f      	bne.n	8003aca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aaa:	2300      	movs	r3, #0
 8003aac:	60bb      	str	r3, [r7, #8]
 8003aae:	4b0f      	ldr	r3, [pc, #60]	; (8003aec <HAL_RCC_OscConfig+0x2ac>)
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab2:	4a0e      	ldr	r2, [pc, #56]	; (8003aec <HAL_RCC_OscConfig+0x2ac>)
 8003ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ab8:	6413      	str	r3, [r2, #64]	; 0x40
 8003aba:	4b0c      	ldr	r3, [pc, #48]	; (8003aec <HAL_RCC_OscConfig+0x2ac>)
 8003abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ac2:	60bb      	str	r3, [r7, #8]
 8003ac4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aca:	4b0b      	ldr	r3, [pc, #44]	; (8003af8 <HAL_RCC_OscConfig+0x2b8>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d121      	bne.n	8003b1a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ad6:	4b08      	ldr	r3, [pc, #32]	; (8003af8 <HAL_RCC_OscConfig+0x2b8>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a07      	ldr	r2, [pc, #28]	; (8003af8 <HAL_RCC_OscConfig+0x2b8>)
 8003adc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ae0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ae2:	f7fe fda7 	bl	8002634 <HAL_GetTick>
 8003ae6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ae8:	e011      	b.n	8003b0e <HAL_RCC_OscConfig+0x2ce>
 8003aea:	bf00      	nop
 8003aec:	40023800 	.word	0x40023800
 8003af0:	42470000 	.word	0x42470000
 8003af4:	42470e80 	.word	0x42470e80
 8003af8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003afc:	f7fe fd9a 	bl	8002634 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d901      	bls.n	8003b0e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e106      	b.n	8003d1c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b0e:	4b85      	ldr	r3, [pc, #532]	; (8003d24 <HAL_RCC_OscConfig+0x4e4>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d0f0      	beq.n	8003afc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d106      	bne.n	8003b30 <HAL_RCC_OscConfig+0x2f0>
 8003b22:	4b81      	ldr	r3, [pc, #516]	; (8003d28 <HAL_RCC_OscConfig+0x4e8>)
 8003b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b26:	4a80      	ldr	r2, [pc, #512]	; (8003d28 <HAL_RCC_OscConfig+0x4e8>)
 8003b28:	f043 0301 	orr.w	r3, r3, #1
 8003b2c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b2e:	e01c      	b.n	8003b6a <HAL_RCC_OscConfig+0x32a>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	2b05      	cmp	r3, #5
 8003b36:	d10c      	bne.n	8003b52 <HAL_RCC_OscConfig+0x312>
 8003b38:	4b7b      	ldr	r3, [pc, #492]	; (8003d28 <HAL_RCC_OscConfig+0x4e8>)
 8003b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b3c:	4a7a      	ldr	r2, [pc, #488]	; (8003d28 <HAL_RCC_OscConfig+0x4e8>)
 8003b3e:	f043 0304 	orr.w	r3, r3, #4
 8003b42:	6713      	str	r3, [r2, #112]	; 0x70
 8003b44:	4b78      	ldr	r3, [pc, #480]	; (8003d28 <HAL_RCC_OscConfig+0x4e8>)
 8003b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b48:	4a77      	ldr	r2, [pc, #476]	; (8003d28 <HAL_RCC_OscConfig+0x4e8>)
 8003b4a:	f043 0301 	orr.w	r3, r3, #1
 8003b4e:	6713      	str	r3, [r2, #112]	; 0x70
 8003b50:	e00b      	b.n	8003b6a <HAL_RCC_OscConfig+0x32a>
 8003b52:	4b75      	ldr	r3, [pc, #468]	; (8003d28 <HAL_RCC_OscConfig+0x4e8>)
 8003b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b56:	4a74      	ldr	r2, [pc, #464]	; (8003d28 <HAL_RCC_OscConfig+0x4e8>)
 8003b58:	f023 0301 	bic.w	r3, r3, #1
 8003b5c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b5e:	4b72      	ldr	r3, [pc, #456]	; (8003d28 <HAL_RCC_OscConfig+0x4e8>)
 8003b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b62:	4a71      	ldr	r2, [pc, #452]	; (8003d28 <HAL_RCC_OscConfig+0x4e8>)
 8003b64:	f023 0304 	bic.w	r3, r3, #4
 8003b68:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d015      	beq.n	8003b9e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b72:	f7fe fd5f 	bl	8002634 <HAL_GetTick>
 8003b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b78:	e00a      	b.n	8003b90 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b7a:	f7fe fd5b 	bl	8002634 <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d901      	bls.n	8003b90 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e0c5      	b.n	8003d1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b90:	4b65      	ldr	r3, [pc, #404]	; (8003d28 <HAL_RCC_OscConfig+0x4e8>)
 8003b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b94:	f003 0302 	and.w	r3, r3, #2
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d0ee      	beq.n	8003b7a <HAL_RCC_OscConfig+0x33a>
 8003b9c:	e014      	b.n	8003bc8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b9e:	f7fe fd49 	bl	8002634 <HAL_GetTick>
 8003ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ba4:	e00a      	b.n	8003bbc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ba6:	f7fe fd45 	bl	8002634 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d901      	bls.n	8003bbc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e0af      	b.n	8003d1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bbc:	4b5a      	ldr	r3, [pc, #360]	; (8003d28 <HAL_RCC_OscConfig+0x4e8>)
 8003bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc0:	f003 0302 	and.w	r3, r3, #2
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d1ee      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bc8:	7dfb      	ldrb	r3, [r7, #23]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d105      	bne.n	8003bda <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bce:	4b56      	ldr	r3, [pc, #344]	; (8003d28 <HAL_RCC_OscConfig+0x4e8>)
 8003bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd2:	4a55      	ldr	r2, [pc, #340]	; (8003d28 <HAL_RCC_OscConfig+0x4e8>)
 8003bd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bd8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	f000 809b 	beq.w	8003d1a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003be4:	4b50      	ldr	r3, [pc, #320]	; (8003d28 <HAL_RCC_OscConfig+0x4e8>)
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f003 030c 	and.w	r3, r3, #12
 8003bec:	2b08      	cmp	r3, #8
 8003bee:	d05c      	beq.n	8003caa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d141      	bne.n	8003c7c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bf8:	4b4c      	ldr	r3, [pc, #304]	; (8003d2c <HAL_RCC_OscConfig+0x4ec>)
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bfe:	f7fe fd19 	bl	8002634 <HAL_GetTick>
 8003c02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c04:	e008      	b.n	8003c18 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c06:	f7fe fd15 	bl	8002634 <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d901      	bls.n	8003c18 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e081      	b.n	8003d1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c18:	4b43      	ldr	r3, [pc, #268]	; (8003d28 <HAL_RCC_OscConfig+0x4e8>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1f0      	bne.n	8003c06 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	69da      	ldr	r2, [r3, #28]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a1b      	ldr	r3, [r3, #32]
 8003c2c:	431a      	orrs	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c32:	019b      	lsls	r3, r3, #6
 8003c34:	431a      	orrs	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3a:	085b      	lsrs	r3, r3, #1
 8003c3c:	3b01      	subs	r3, #1
 8003c3e:	041b      	lsls	r3, r3, #16
 8003c40:	431a      	orrs	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c46:	061b      	lsls	r3, r3, #24
 8003c48:	4937      	ldr	r1, [pc, #220]	; (8003d28 <HAL_RCC_OscConfig+0x4e8>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c4e:	4b37      	ldr	r3, [pc, #220]	; (8003d2c <HAL_RCC_OscConfig+0x4ec>)
 8003c50:	2201      	movs	r2, #1
 8003c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c54:	f7fe fcee 	bl	8002634 <HAL_GetTick>
 8003c58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c5a:	e008      	b.n	8003c6e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c5c:	f7fe fcea 	bl	8002634 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d901      	bls.n	8003c6e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e056      	b.n	8003d1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c6e:	4b2e      	ldr	r3, [pc, #184]	; (8003d28 <HAL_RCC_OscConfig+0x4e8>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d0f0      	beq.n	8003c5c <HAL_RCC_OscConfig+0x41c>
 8003c7a:	e04e      	b.n	8003d1a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c7c:	4b2b      	ldr	r3, [pc, #172]	; (8003d2c <HAL_RCC_OscConfig+0x4ec>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c82:	f7fe fcd7 	bl	8002634 <HAL_GetTick>
 8003c86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c88:	e008      	b.n	8003c9c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c8a:	f7fe fcd3 	bl	8002634 <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d901      	bls.n	8003c9c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e03f      	b.n	8003d1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c9c:	4b22      	ldr	r3, [pc, #136]	; (8003d28 <HAL_RCC_OscConfig+0x4e8>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d1f0      	bne.n	8003c8a <HAL_RCC_OscConfig+0x44a>
 8003ca8:	e037      	b.n	8003d1a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d101      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e032      	b.n	8003d1c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003cb6:	4b1c      	ldr	r3, [pc, #112]	; (8003d28 <HAL_RCC_OscConfig+0x4e8>)
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d028      	beq.n	8003d16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d121      	bne.n	8003d16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d11a      	bne.n	8003d16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003cec:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d111      	bne.n	8003d16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cfc:	085b      	lsrs	r3, r3, #1
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d107      	bne.n	8003d16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d10:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d001      	beq.n	8003d1a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e000      	b.n	8003d1c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3718      	adds	r7, #24
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	40007000 	.word	0x40007000
 8003d28:	40023800 	.word	0x40023800
 8003d2c:	42470060 	.word	0x42470060

08003d30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d101      	bne.n	8003d44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e0cc      	b.n	8003ede <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d44:	4b68      	ldr	r3, [pc, #416]	; (8003ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0307 	and.w	r3, r3, #7
 8003d4c:	683a      	ldr	r2, [r7, #0]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d90c      	bls.n	8003d6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d52:	4b65      	ldr	r3, [pc, #404]	; (8003ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d54:	683a      	ldr	r2, [r7, #0]
 8003d56:	b2d2      	uxtb	r2, r2
 8003d58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d5a:	4b63      	ldr	r3, [pc, #396]	; (8003ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0307 	and.w	r3, r3, #7
 8003d62:	683a      	ldr	r2, [r7, #0]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d001      	beq.n	8003d6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e0b8      	b.n	8003ede <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0302 	and.w	r3, r3, #2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d020      	beq.n	8003dba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0304 	and.w	r3, r3, #4
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d005      	beq.n	8003d90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d84:	4b59      	ldr	r3, [pc, #356]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	4a58      	ldr	r2, [pc, #352]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003d8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0308 	and.w	r3, r3, #8
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d005      	beq.n	8003da8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d9c:	4b53      	ldr	r3, [pc, #332]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	4a52      	ldr	r2, [pc, #328]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003da2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003da6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003da8:	4b50      	ldr	r3, [pc, #320]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	494d      	ldr	r1, [pc, #308]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d044      	beq.n	8003e50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d107      	bne.n	8003dde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dce:	4b47      	ldr	r3, [pc, #284]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d119      	bne.n	8003e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e07f      	b.n	8003ede <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d003      	beq.n	8003dee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dea:	2b03      	cmp	r3, #3
 8003dec:	d107      	bne.n	8003dfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dee:	4b3f      	ldr	r3, [pc, #252]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d109      	bne.n	8003e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e06f      	b.n	8003ede <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dfe:	4b3b      	ldr	r3, [pc, #236]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d101      	bne.n	8003e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e067      	b.n	8003ede <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e0e:	4b37      	ldr	r3, [pc, #220]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f023 0203 	bic.w	r2, r3, #3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	4934      	ldr	r1, [pc, #208]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e20:	f7fe fc08 	bl	8002634 <HAL_GetTick>
 8003e24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e26:	e00a      	b.n	8003e3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e28:	f7fe fc04 	bl	8002634 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d901      	bls.n	8003e3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e04f      	b.n	8003ede <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e3e:	4b2b      	ldr	r3, [pc, #172]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f003 020c 	and.w	r2, r3, #12
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d1eb      	bne.n	8003e28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e50:	4b25      	ldr	r3, [pc, #148]	; (8003ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0307 	and.w	r3, r3, #7
 8003e58:	683a      	ldr	r2, [r7, #0]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d20c      	bcs.n	8003e78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e5e:	4b22      	ldr	r3, [pc, #136]	; (8003ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e60:	683a      	ldr	r2, [r7, #0]
 8003e62:	b2d2      	uxtb	r2, r2
 8003e64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e66:	4b20      	ldr	r3, [pc, #128]	; (8003ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0307 	and.w	r3, r3, #7
 8003e6e:	683a      	ldr	r2, [r7, #0]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d001      	beq.n	8003e78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e032      	b.n	8003ede <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0304 	and.w	r3, r3, #4
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d008      	beq.n	8003e96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e84:	4b19      	ldr	r3, [pc, #100]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	4916      	ldr	r1, [pc, #88]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0308 	and.w	r3, r3, #8
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d009      	beq.n	8003eb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ea2:	4b12      	ldr	r3, [pc, #72]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	00db      	lsls	r3, r3, #3
 8003eb0:	490e      	ldr	r1, [pc, #56]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003eb6:	f000 f821 	bl	8003efc <HAL_RCC_GetSysClockFreq>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	4b0b      	ldr	r3, [pc, #44]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	091b      	lsrs	r3, r3, #4
 8003ec2:	f003 030f 	and.w	r3, r3, #15
 8003ec6:	490a      	ldr	r1, [pc, #40]	; (8003ef0 <HAL_RCC_ClockConfig+0x1c0>)
 8003ec8:	5ccb      	ldrb	r3, [r1, r3]
 8003eca:	fa22 f303 	lsr.w	r3, r2, r3
 8003ece:	4a09      	ldr	r2, [pc, #36]	; (8003ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ed0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ed2:	4b09      	ldr	r3, [pc, #36]	; (8003ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7fe f9b2 	bl	8002240 <HAL_InitTick>

  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	40023c00 	.word	0x40023c00
 8003eec:	40023800 	.word	0x40023800
 8003ef0:	0800889c 	.word	0x0800889c
 8003ef4:	2000000c 	.word	0x2000000c
 8003ef8:	20000010 	.word	0x20000010

08003efc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003efc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003f00:	b084      	sub	sp, #16
 8003f02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f04:	2300      	movs	r3, #0
 8003f06:	607b      	str	r3, [r7, #4]
 8003f08:	2300      	movs	r3, #0
 8003f0a:	60fb      	str	r3, [r7, #12]
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003f10:	2300      	movs	r3, #0
 8003f12:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f14:	4b67      	ldr	r3, [pc, #412]	; (80040b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f003 030c 	and.w	r3, r3, #12
 8003f1c:	2b08      	cmp	r3, #8
 8003f1e:	d00d      	beq.n	8003f3c <HAL_RCC_GetSysClockFreq+0x40>
 8003f20:	2b08      	cmp	r3, #8
 8003f22:	f200 80bd 	bhi.w	80040a0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d002      	beq.n	8003f30 <HAL_RCC_GetSysClockFreq+0x34>
 8003f2a:	2b04      	cmp	r3, #4
 8003f2c:	d003      	beq.n	8003f36 <HAL_RCC_GetSysClockFreq+0x3a>
 8003f2e:	e0b7      	b.n	80040a0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f30:	4b61      	ldr	r3, [pc, #388]	; (80040b8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003f32:	60bb      	str	r3, [r7, #8]
       break;
 8003f34:	e0b7      	b.n	80040a6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f36:	4b61      	ldr	r3, [pc, #388]	; (80040bc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003f38:	60bb      	str	r3, [r7, #8]
      break;
 8003f3a:	e0b4      	b.n	80040a6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f3c:	4b5d      	ldr	r3, [pc, #372]	; (80040b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f44:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f46:	4b5b      	ldr	r3, [pc, #364]	; (80040b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d04d      	beq.n	8003fee <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f52:	4b58      	ldr	r3, [pc, #352]	; (80040b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	099b      	lsrs	r3, r3, #6
 8003f58:	461a      	mov	r2, r3
 8003f5a:	f04f 0300 	mov.w	r3, #0
 8003f5e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003f62:	f04f 0100 	mov.w	r1, #0
 8003f66:	ea02 0800 	and.w	r8, r2, r0
 8003f6a:	ea03 0901 	and.w	r9, r3, r1
 8003f6e:	4640      	mov	r0, r8
 8003f70:	4649      	mov	r1, r9
 8003f72:	f04f 0200 	mov.w	r2, #0
 8003f76:	f04f 0300 	mov.w	r3, #0
 8003f7a:	014b      	lsls	r3, r1, #5
 8003f7c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003f80:	0142      	lsls	r2, r0, #5
 8003f82:	4610      	mov	r0, r2
 8003f84:	4619      	mov	r1, r3
 8003f86:	ebb0 0008 	subs.w	r0, r0, r8
 8003f8a:	eb61 0109 	sbc.w	r1, r1, r9
 8003f8e:	f04f 0200 	mov.w	r2, #0
 8003f92:	f04f 0300 	mov.w	r3, #0
 8003f96:	018b      	lsls	r3, r1, #6
 8003f98:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003f9c:	0182      	lsls	r2, r0, #6
 8003f9e:	1a12      	subs	r2, r2, r0
 8003fa0:	eb63 0301 	sbc.w	r3, r3, r1
 8003fa4:	f04f 0000 	mov.w	r0, #0
 8003fa8:	f04f 0100 	mov.w	r1, #0
 8003fac:	00d9      	lsls	r1, r3, #3
 8003fae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003fb2:	00d0      	lsls	r0, r2, #3
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	460b      	mov	r3, r1
 8003fb8:	eb12 0208 	adds.w	r2, r2, r8
 8003fbc:	eb43 0309 	adc.w	r3, r3, r9
 8003fc0:	f04f 0000 	mov.w	r0, #0
 8003fc4:	f04f 0100 	mov.w	r1, #0
 8003fc8:	0259      	lsls	r1, r3, #9
 8003fca:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003fce:	0250      	lsls	r0, r2, #9
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	4610      	mov	r0, r2
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	461a      	mov	r2, r3
 8003fdc:	f04f 0300 	mov.w	r3, #0
 8003fe0:	f7fc fdea 	bl	8000bb8 <__aeabi_uldivmod>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	4613      	mov	r3, r2
 8003fea:	60fb      	str	r3, [r7, #12]
 8003fec:	e04a      	b.n	8004084 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fee:	4b31      	ldr	r3, [pc, #196]	; (80040b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	099b      	lsrs	r3, r3, #6
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	f04f 0300 	mov.w	r3, #0
 8003ffa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003ffe:	f04f 0100 	mov.w	r1, #0
 8004002:	ea02 0400 	and.w	r4, r2, r0
 8004006:	ea03 0501 	and.w	r5, r3, r1
 800400a:	4620      	mov	r0, r4
 800400c:	4629      	mov	r1, r5
 800400e:	f04f 0200 	mov.w	r2, #0
 8004012:	f04f 0300 	mov.w	r3, #0
 8004016:	014b      	lsls	r3, r1, #5
 8004018:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800401c:	0142      	lsls	r2, r0, #5
 800401e:	4610      	mov	r0, r2
 8004020:	4619      	mov	r1, r3
 8004022:	1b00      	subs	r0, r0, r4
 8004024:	eb61 0105 	sbc.w	r1, r1, r5
 8004028:	f04f 0200 	mov.w	r2, #0
 800402c:	f04f 0300 	mov.w	r3, #0
 8004030:	018b      	lsls	r3, r1, #6
 8004032:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004036:	0182      	lsls	r2, r0, #6
 8004038:	1a12      	subs	r2, r2, r0
 800403a:	eb63 0301 	sbc.w	r3, r3, r1
 800403e:	f04f 0000 	mov.w	r0, #0
 8004042:	f04f 0100 	mov.w	r1, #0
 8004046:	00d9      	lsls	r1, r3, #3
 8004048:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800404c:	00d0      	lsls	r0, r2, #3
 800404e:	4602      	mov	r2, r0
 8004050:	460b      	mov	r3, r1
 8004052:	1912      	adds	r2, r2, r4
 8004054:	eb45 0303 	adc.w	r3, r5, r3
 8004058:	f04f 0000 	mov.w	r0, #0
 800405c:	f04f 0100 	mov.w	r1, #0
 8004060:	0299      	lsls	r1, r3, #10
 8004062:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004066:	0290      	lsls	r0, r2, #10
 8004068:	4602      	mov	r2, r0
 800406a:	460b      	mov	r3, r1
 800406c:	4610      	mov	r0, r2
 800406e:	4619      	mov	r1, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	461a      	mov	r2, r3
 8004074:	f04f 0300 	mov.w	r3, #0
 8004078:	f7fc fd9e 	bl	8000bb8 <__aeabi_uldivmod>
 800407c:	4602      	mov	r2, r0
 800407e:	460b      	mov	r3, r1
 8004080:	4613      	mov	r3, r2
 8004082:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004084:	4b0b      	ldr	r3, [pc, #44]	; (80040b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	0c1b      	lsrs	r3, r3, #16
 800408a:	f003 0303 	and.w	r3, r3, #3
 800408e:	3301      	adds	r3, #1
 8004090:	005b      	lsls	r3, r3, #1
 8004092:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	fbb2 f3f3 	udiv	r3, r2, r3
 800409c:	60bb      	str	r3, [r7, #8]
      break;
 800409e:	e002      	b.n	80040a6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040a0:	4b05      	ldr	r3, [pc, #20]	; (80040b8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80040a2:	60bb      	str	r3, [r7, #8]
      break;
 80040a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040a6:	68bb      	ldr	r3, [r7, #8]
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3710      	adds	r7, #16
 80040ac:	46bd      	mov	sp, r7
 80040ae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80040b2:	bf00      	nop
 80040b4:	40023800 	.word	0x40023800
 80040b8:	00f42400 	.word	0x00f42400
 80040bc:	007a1200 	.word	0x007a1200

080040c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040c0:	b480      	push	{r7}
 80040c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040c4:	4b03      	ldr	r3, [pc, #12]	; (80040d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80040c6:	681b      	ldr	r3, [r3, #0]
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	2000000c 	.word	0x2000000c

080040d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80040dc:	f7ff fff0 	bl	80040c0 <HAL_RCC_GetHCLKFreq>
 80040e0:	4602      	mov	r2, r0
 80040e2:	4b05      	ldr	r3, [pc, #20]	; (80040f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	0a9b      	lsrs	r3, r3, #10
 80040e8:	f003 0307 	and.w	r3, r3, #7
 80040ec:	4903      	ldr	r1, [pc, #12]	; (80040fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80040ee:	5ccb      	ldrb	r3, [r1, r3]
 80040f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	40023800 	.word	0x40023800
 80040fc:	080088ac 	.word	0x080088ac

08004100 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004104:	f7ff ffdc 	bl	80040c0 <HAL_RCC_GetHCLKFreq>
 8004108:	4602      	mov	r2, r0
 800410a:	4b05      	ldr	r3, [pc, #20]	; (8004120 <HAL_RCC_GetPCLK2Freq+0x20>)
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	0b5b      	lsrs	r3, r3, #13
 8004110:	f003 0307 	and.w	r3, r3, #7
 8004114:	4903      	ldr	r1, [pc, #12]	; (8004124 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004116:	5ccb      	ldrb	r3, [r1, r3]
 8004118:	fa22 f303 	lsr.w	r3, r2, r3
}
 800411c:	4618      	mov	r0, r3
 800411e:	bd80      	pop	{r7, pc}
 8004120:	40023800 	.word	0x40023800
 8004124:	080088ac 	.word	0x080088ac

08004128 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	220f      	movs	r2, #15
 8004136:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004138:	4b12      	ldr	r3, [pc, #72]	; (8004184 <HAL_RCC_GetClockConfig+0x5c>)
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f003 0203 	and.w	r2, r3, #3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004144:	4b0f      	ldr	r3, [pc, #60]	; (8004184 <HAL_RCC_GetClockConfig+0x5c>)
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004150:	4b0c      	ldr	r3, [pc, #48]	; (8004184 <HAL_RCC_GetClockConfig+0x5c>)
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800415c:	4b09      	ldr	r3, [pc, #36]	; (8004184 <HAL_RCC_GetClockConfig+0x5c>)
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	08db      	lsrs	r3, r3, #3
 8004162:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800416a:	4b07      	ldr	r3, [pc, #28]	; (8004188 <HAL_RCC_GetClockConfig+0x60>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0207 	and.w	r2, r3, #7
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	601a      	str	r2, [r3, #0]
}
 8004176:	bf00      	nop
 8004178:	370c      	adds	r7, #12
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	40023800 	.word	0x40023800
 8004188:	40023c00 	.word	0x40023c00

0800418c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e041      	b.n	8004222 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d106      	bne.n	80041b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f7fd ff64 	bl	8002080 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2202      	movs	r2, #2
 80041bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	3304      	adds	r3, #4
 80041c8:	4619      	mov	r1, r3
 80041ca:	4610      	mov	r0, r2
 80041cc:	f000 fa88 	bl	80046e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	3708      	adds	r7, #8
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
	...

0800422c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800422c:	b480      	push	{r7}
 800422e:	b085      	sub	sp, #20
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800423a:	b2db      	uxtb	r3, r3
 800423c:	2b01      	cmp	r3, #1
 800423e:	d001      	beq.n	8004244 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e044      	b.n	80042ce <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2202      	movs	r2, #2
 8004248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68da      	ldr	r2, [r3, #12]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f042 0201 	orr.w	r2, r2, #1
 800425a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a1e      	ldr	r2, [pc, #120]	; (80042dc <HAL_TIM_Base_Start_IT+0xb0>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d018      	beq.n	8004298 <HAL_TIM_Base_Start_IT+0x6c>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800426e:	d013      	beq.n	8004298 <HAL_TIM_Base_Start_IT+0x6c>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a1a      	ldr	r2, [pc, #104]	; (80042e0 <HAL_TIM_Base_Start_IT+0xb4>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d00e      	beq.n	8004298 <HAL_TIM_Base_Start_IT+0x6c>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a19      	ldr	r2, [pc, #100]	; (80042e4 <HAL_TIM_Base_Start_IT+0xb8>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d009      	beq.n	8004298 <HAL_TIM_Base_Start_IT+0x6c>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a17      	ldr	r2, [pc, #92]	; (80042e8 <HAL_TIM_Base_Start_IT+0xbc>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d004      	beq.n	8004298 <HAL_TIM_Base_Start_IT+0x6c>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a16      	ldr	r2, [pc, #88]	; (80042ec <HAL_TIM_Base_Start_IT+0xc0>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d111      	bne.n	80042bc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f003 0307 	and.w	r3, r3, #7
 80042a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2b06      	cmp	r3, #6
 80042a8:	d010      	beq.n	80042cc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f042 0201 	orr.w	r2, r2, #1
 80042b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042ba:	e007      	b.n	80042cc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f042 0201 	orr.w	r2, r2, #1
 80042ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3714      	adds	r7, #20
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	40010000 	.word	0x40010000
 80042e0:	40000400 	.word	0x40000400
 80042e4:	40000800 	.word	0x40000800
 80042e8:	40000c00 	.word	0x40000c00
 80042ec:	40014000 	.word	0x40014000

080042f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	f003 0302 	and.w	r3, r3, #2
 8004302:	2b02      	cmp	r3, #2
 8004304:	d122      	bne.n	800434c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	f003 0302 	and.w	r3, r3, #2
 8004310:	2b02      	cmp	r3, #2
 8004312:	d11b      	bne.n	800434c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f06f 0202 	mvn.w	r2, #2
 800431c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2201      	movs	r2, #1
 8004322:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	f003 0303 	and.w	r3, r3, #3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d003      	beq.n	800433a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 f9b5 	bl	80046a2 <HAL_TIM_IC_CaptureCallback>
 8004338:	e005      	b.n	8004346 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 f9a7 	bl	800468e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f000 f9b8 	bl	80046b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	f003 0304 	and.w	r3, r3, #4
 8004356:	2b04      	cmp	r3, #4
 8004358:	d122      	bne.n	80043a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	f003 0304 	and.w	r3, r3, #4
 8004364:	2b04      	cmp	r3, #4
 8004366:	d11b      	bne.n	80043a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f06f 0204 	mvn.w	r2, #4
 8004370:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2202      	movs	r2, #2
 8004376:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004382:	2b00      	cmp	r3, #0
 8004384:	d003      	beq.n	800438e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 f98b 	bl	80046a2 <HAL_TIM_IC_CaptureCallback>
 800438c:	e005      	b.n	800439a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 f97d 	bl	800468e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 f98e 	bl	80046b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	f003 0308 	and.w	r3, r3, #8
 80043aa:	2b08      	cmp	r3, #8
 80043ac:	d122      	bne.n	80043f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	f003 0308 	and.w	r3, r3, #8
 80043b8:	2b08      	cmp	r3, #8
 80043ba:	d11b      	bne.n	80043f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f06f 0208 	mvn.w	r2, #8
 80043c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2204      	movs	r2, #4
 80043ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	69db      	ldr	r3, [r3, #28]
 80043d2:	f003 0303 	and.w	r3, r3, #3
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d003      	beq.n	80043e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 f961 	bl	80046a2 <HAL_TIM_IC_CaptureCallback>
 80043e0:	e005      	b.n	80043ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 f953 	bl	800468e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f000 f964 	bl	80046b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	f003 0310 	and.w	r3, r3, #16
 80043fe:	2b10      	cmp	r3, #16
 8004400:	d122      	bne.n	8004448 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	f003 0310 	and.w	r3, r3, #16
 800440c:	2b10      	cmp	r3, #16
 800440e:	d11b      	bne.n	8004448 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f06f 0210 	mvn.w	r2, #16
 8004418:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2208      	movs	r2, #8
 800441e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	69db      	ldr	r3, [r3, #28]
 8004426:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800442a:	2b00      	cmp	r3, #0
 800442c:	d003      	beq.n	8004436 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 f937 	bl	80046a2 <HAL_TIM_IC_CaptureCallback>
 8004434:	e005      	b.n	8004442 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 f929 	bl	800468e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 f93a 	bl	80046b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	2b01      	cmp	r3, #1
 8004454:	d10e      	bne.n	8004474 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	f003 0301 	and.w	r3, r3, #1
 8004460:	2b01      	cmp	r3, #1
 8004462:	d107      	bne.n	8004474 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f06f 0201 	mvn.w	r2, #1
 800446c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f7fd fc9c 	bl	8001dac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800447e:	2b80      	cmp	r3, #128	; 0x80
 8004480:	d10e      	bne.n	80044a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800448c:	2b80      	cmp	r3, #128	; 0x80
 800448e:	d107      	bne.n	80044a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004498:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 fab2 	bl	8004a04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044aa:	2b40      	cmp	r3, #64	; 0x40
 80044ac:	d10e      	bne.n	80044cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044b8:	2b40      	cmp	r3, #64	; 0x40
 80044ba:	d107      	bne.n	80044cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 f8ff 	bl	80046ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	f003 0320 	and.w	r3, r3, #32
 80044d6:	2b20      	cmp	r3, #32
 80044d8:	d10e      	bne.n	80044f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	f003 0320 	and.w	r3, r3, #32
 80044e4:	2b20      	cmp	r3, #32
 80044e6:	d107      	bne.n	80044f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f06f 0220 	mvn.w	r2, #32
 80044f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 fa7c 	bl	80049f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044f8:	bf00      	nop
 80044fa:	3708      	adds	r7, #8
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800450a:	2300      	movs	r3, #0
 800450c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004514:	2b01      	cmp	r3, #1
 8004516:	d101      	bne.n	800451c <HAL_TIM_ConfigClockSource+0x1c>
 8004518:	2302      	movs	r3, #2
 800451a:	e0b4      	b.n	8004686 <HAL_TIM_ConfigClockSource+0x186>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2202      	movs	r2, #2
 8004528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800453a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004542:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68ba      	ldr	r2, [r7, #8]
 800454a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004554:	d03e      	beq.n	80045d4 <HAL_TIM_ConfigClockSource+0xd4>
 8004556:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800455a:	f200 8087 	bhi.w	800466c <HAL_TIM_ConfigClockSource+0x16c>
 800455e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004562:	f000 8086 	beq.w	8004672 <HAL_TIM_ConfigClockSource+0x172>
 8004566:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800456a:	d87f      	bhi.n	800466c <HAL_TIM_ConfigClockSource+0x16c>
 800456c:	2b70      	cmp	r3, #112	; 0x70
 800456e:	d01a      	beq.n	80045a6 <HAL_TIM_ConfigClockSource+0xa6>
 8004570:	2b70      	cmp	r3, #112	; 0x70
 8004572:	d87b      	bhi.n	800466c <HAL_TIM_ConfigClockSource+0x16c>
 8004574:	2b60      	cmp	r3, #96	; 0x60
 8004576:	d050      	beq.n	800461a <HAL_TIM_ConfigClockSource+0x11a>
 8004578:	2b60      	cmp	r3, #96	; 0x60
 800457a:	d877      	bhi.n	800466c <HAL_TIM_ConfigClockSource+0x16c>
 800457c:	2b50      	cmp	r3, #80	; 0x50
 800457e:	d03c      	beq.n	80045fa <HAL_TIM_ConfigClockSource+0xfa>
 8004580:	2b50      	cmp	r3, #80	; 0x50
 8004582:	d873      	bhi.n	800466c <HAL_TIM_ConfigClockSource+0x16c>
 8004584:	2b40      	cmp	r3, #64	; 0x40
 8004586:	d058      	beq.n	800463a <HAL_TIM_ConfigClockSource+0x13a>
 8004588:	2b40      	cmp	r3, #64	; 0x40
 800458a:	d86f      	bhi.n	800466c <HAL_TIM_ConfigClockSource+0x16c>
 800458c:	2b30      	cmp	r3, #48	; 0x30
 800458e:	d064      	beq.n	800465a <HAL_TIM_ConfigClockSource+0x15a>
 8004590:	2b30      	cmp	r3, #48	; 0x30
 8004592:	d86b      	bhi.n	800466c <HAL_TIM_ConfigClockSource+0x16c>
 8004594:	2b20      	cmp	r3, #32
 8004596:	d060      	beq.n	800465a <HAL_TIM_ConfigClockSource+0x15a>
 8004598:	2b20      	cmp	r3, #32
 800459a:	d867      	bhi.n	800466c <HAL_TIM_ConfigClockSource+0x16c>
 800459c:	2b00      	cmp	r3, #0
 800459e:	d05c      	beq.n	800465a <HAL_TIM_ConfigClockSource+0x15a>
 80045a0:	2b10      	cmp	r3, #16
 80045a2:	d05a      	beq.n	800465a <HAL_TIM_ConfigClockSource+0x15a>
 80045a4:	e062      	b.n	800466c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6818      	ldr	r0, [r3, #0]
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	6899      	ldr	r1, [r3, #8]
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	685a      	ldr	r2, [r3, #4]
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	f000 f98d 	bl	80048d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80045c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68ba      	ldr	r2, [r7, #8]
 80045d0:	609a      	str	r2, [r3, #8]
      break;
 80045d2:	e04f      	b.n	8004674 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6818      	ldr	r0, [r3, #0]
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	6899      	ldr	r1, [r3, #8]
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	685a      	ldr	r2, [r3, #4]
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	f000 f976 	bl	80048d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	689a      	ldr	r2, [r3, #8]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045f6:	609a      	str	r2, [r3, #8]
      break;
 80045f8:	e03c      	b.n	8004674 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6818      	ldr	r0, [r3, #0]
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	6859      	ldr	r1, [r3, #4]
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	461a      	mov	r2, r3
 8004608:	f000 f8ea 	bl	80047e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2150      	movs	r1, #80	; 0x50
 8004612:	4618      	mov	r0, r3
 8004614:	f000 f943 	bl	800489e <TIM_ITRx_SetConfig>
      break;
 8004618:	e02c      	b.n	8004674 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6818      	ldr	r0, [r3, #0]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	6859      	ldr	r1, [r3, #4]
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	461a      	mov	r2, r3
 8004628:	f000 f909 	bl	800483e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2160      	movs	r1, #96	; 0x60
 8004632:	4618      	mov	r0, r3
 8004634:	f000 f933 	bl	800489e <TIM_ITRx_SetConfig>
      break;
 8004638:	e01c      	b.n	8004674 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6818      	ldr	r0, [r3, #0]
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	6859      	ldr	r1, [r3, #4]
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	461a      	mov	r2, r3
 8004648:	f000 f8ca 	bl	80047e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2140      	movs	r1, #64	; 0x40
 8004652:	4618      	mov	r0, r3
 8004654:	f000 f923 	bl	800489e <TIM_ITRx_SetConfig>
      break;
 8004658:	e00c      	b.n	8004674 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4619      	mov	r1, r3
 8004664:	4610      	mov	r0, r2
 8004666:	f000 f91a 	bl	800489e <TIM_ITRx_SetConfig>
      break;
 800466a:	e003      	b.n	8004674 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	73fb      	strb	r3, [r7, #15]
      break;
 8004670:	e000      	b.n	8004674 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004672:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004684:	7bfb      	ldrb	r3, [r7, #15]
}
 8004686:	4618      	mov	r0, r3
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800468e:	b480      	push	{r7}
 8004690:	b083      	sub	sp, #12
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004696:	bf00      	nop
 8004698:	370c      	adds	r7, #12
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr

080046a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046a2:	b480      	push	{r7}
 80046a4:	b083      	sub	sp, #12
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046aa:	bf00      	nop
 80046ac:	370c      	adds	r7, #12
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr

080046b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046b6:	b480      	push	{r7}
 80046b8:	b083      	sub	sp, #12
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046be:	bf00      	nop
 80046c0:	370c      	adds	r7, #12
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr

080046ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046ca:	b480      	push	{r7}
 80046cc:	b083      	sub	sp, #12
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046d2:	bf00      	nop
 80046d4:	370c      	adds	r7, #12
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
	...

080046e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b085      	sub	sp, #20
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a34      	ldr	r2, [pc, #208]	; (80047c4 <TIM_Base_SetConfig+0xe4>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d00f      	beq.n	8004718 <TIM_Base_SetConfig+0x38>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046fe:	d00b      	beq.n	8004718 <TIM_Base_SetConfig+0x38>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a31      	ldr	r2, [pc, #196]	; (80047c8 <TIM_Base_SetConfig+0xe8>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d007      	beq.n	8004718 <TIM_Base_SetConfig+0x38>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a30      	ldr	r2, [pc, #192]	; (80047cc <TIM_Base_SetConfig+0xec>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d003      	beq.n	8004718 <TIM_Base_SetConfig+0x38>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a2f      	ldr	r2, [pc, #188]	; (80047d0 <TIM_Base_SetConfig+0xf0>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d108      	bne.n	800472a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800471e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	4313      	orrs	r3, r2
 8004728:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a25      	ldr	r2, [pc, #148]	; (80047c4 <TIM_Base_SetConfig+0xe4>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d01b      	beq.n	800476a <TIM_Base_SetConfig+0x8a>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004738:	d017      	beq.n	800476a <TIM_Base_SetConfig+0x8a>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a22      	ldr	r2, [pc, #136]	; (80047c8 <TIM_Base_SetConfig+0xe8>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d013      	beq.n	800476a <TIM_Base_SetConfig+0x8a>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a21      	ldr	r2, [pc, #132]	; (80047cc <TIM_Base_SetConfig+0xec>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d00f      	beq.n	800476a <TIM_Base_SetConfig+0x8a>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a20      	ldr	r2, [pc, #128]	; (80047d0 <TIM_Base_SetConfig+0xf0>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d00b      	beq.n	800476a <TIM_Base_SetConfig+0x8a>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a1f      	ldr	r2, [pc, #124]	; (80047d4 <TIM_Base_SetConfig+0xf4>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d007      	beq.n	800476a <TIM_Base_SetConfig+0x8a>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a1e      	ldr	r2, [pc, #120]	; (80047d8 <TIM_Base_SetConfig+0xf8>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d003      	beq.n	800476a <TIM_Base_SetConfig+0x8a>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a1d      	ldr	r2, [pc, #116]	; (80047dc <TIM_Base_SetConfig+0xfc>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d108      	bne.n	800477c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004770:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	4313      	orrs	r3, r2
 800477a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	4313      	orrs	r3, r2
 8004788:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	68fa      	ldr	r2, [r7, #12]
 800478e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	689a      	ldr	r2, [r3, #8]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4a08      	ldr	r2, [pc, #32]	; (80047c4 <TIM_Base_SetConfig+0xe4>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d103      	bne.n	80047b0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	691a      	ldr	r2, [r3, #16]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	615a      	str	r2, [r3, #20]
}
 80047b6:	bf00      	nop
 80047b8:	3714      	adds	r7, #20
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	40010000 	.word	0x40010000
 80047c8:	40000400 	.word	0x40000400
 80047cc:	40000800 	.word	0x40000800
 80047d0:	40000c00 	.word	0x40000c00
 80047d4:	40014000 	.word	0x40014000
 80047d8:	40014400 	.word	0x40014400
 80047dc:	40014800 	.word	0x40014800

080047e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b087      	sub	sp, #28
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6a1b      	ldr	r3, [r3, #32]
 80047f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6a1b      	ldr	r3, [r3, #32]
 80047f6:	f023 0201 	bic.w	r2, r3, #1
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	699b      	ldr	r3, [r3, #24]
 8004802:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800480a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	011b      	lsls	r3, r3, #4
 8004810:	693a      	ldr	r2, [r7, #16]
 8004812:	4313      	orrs	r3, r2
 8004814:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	f023 030a 	bic.w	r3, r3, #10
 800481c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800481e:	697a      	ldr	r2, [r7, #20]
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	4313      	orrs	r3, r2
 8004824:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	693a      	ldr	r2, [r7, #16]
 800482a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	697a      	ldr	r2, [r7, #20]
 8004830:	621a      	str	r2, [r3, #32]
}
 8004832:	bf00      	nop
 8004834:	371c      	adds	r7, #28
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr

0800483e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800483e:	b480      	push	{r7}
 8004840:	b087      	sub	sp, #28
 8004842:	af00      	add	r7, sp, #0
 8004844:	60f8      	str	r0, [r7, #12]
 8004846:	60b9      	str	r1, [r7, #8]
 8004848:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6a1b      	ldr	r3, [r3, #32]
 800484e:	f023 0210 	bic.w	r2, r3, #16
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	699b      	ldr	r3, [r3, #24]
 800485a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6a1b      	ldr	r3, [r3, #32]
 8004860:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004868:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	031b      	lsls	r3, r3, #12
 800486e:	697a      	ldr	r2, [r7, #20]
 8004870:	4313      	orrs	r3, r2
 8004872:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800487a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	011b      	lsls	r3, r3, #4
 8004880:	693a      	ldr	r2, [r7, #16]
 8004882:	4313      	orrs	r3, r2
 8004884:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	697a      	ldr	r2, [r7, #20]
 800488a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	693a      	ldr	r2, [r7, #16]
 8004890:	621a      	str	r2, [r3, #32]
}
 8004892:	bf00      	nop
 8004894:	371c      	adds	r7, #28
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr

0800489e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800489e:	b480      	push	{r7}
 80048a0:	b085      	sub	sp, #20
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
 80048a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048b6:	683a      	ldr	r2, [r7, #0]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	f043 0307 	orr.w	r3, r3, #7
 80048c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	68fa      	ldr	r2, [r7, #12]
 80048c6:	609a      	str	r2, [r3, #8]
}
 80048c8:	bf00      	nop
 80048ca:	3714      	adds	r7, #20
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b087      	sub	sp, #28
 80048d8:	af00      	add	r7, sp, #0
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	607a      	str	r2, [r7, #4]
 80048e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	021a      	lsls	r2, r3, #8
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	431a      	orrs	r2, r3
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	697a      	ldr	r2, [r7, #20]
 80048fe:	4313      	orrs	r3, r2
 8004900:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	697a      	ldr	r2, [r7, #20]
 8004906:	609a      	str	r2, [r3, #8]
}
 8004908:	bf00      	nop
 800490a:	371c      	adds	r7, #28
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004924:	2b01      	cmp	r3, #1
 8004926:	d101      	bne.n	800492c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004928:	2302      	movs	r3, #2
 800492a:	e050      	b.n	80049ce <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2202      	movs	r2, #2
 8004938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004952:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	4313      	orrs	r3, r2
 800495c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a1c      	ldr	r2, [pc, #112]	; (80049dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d018      	beq.n	80049a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004978:	d013      	beq.n	80049a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a18      	ldr	r2, [pc, #96]	; (80049e0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d00e      	beq.n	80049a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a16      	ldr	r2, [pc, #88]	; (80049e4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d009      	beq.n	80049a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a15      	ldr	r2, [pc, #84]	; (80049e8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d004      	beq.n	80049a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a13      	ldr	r2, [pc, #76]	; (80049ec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d10c      	bne.n	80049bc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	68ba      	ldr	r2, [r7, #8]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68ba      	ldr	r2, [r7, #8]
 80049ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3714      	adds	r7, #20
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	40010000 	.word	0x40010000
 80049e0:	40000400 	.word	0x40000400
 80049e4:	40000800 	.word	0x40000800
 80049e8:	40000c00 	.word	0x40000c00
 80049ec:	40014000 	.word	0x40014000

080049f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049f8:	bf00      	nop
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d101      	bne.n	8004a2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e03f      	b.n	8004aaa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d106      	bne.n	8004a44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f7fd fb78 	bl	8002134 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2224      	movs	r2, #36	; 0x24
 8004a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68da      	ldr	r2, [r3, #12]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f000 fde5 	bl	800562c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	691a      	ldr	r2, [r3, #16]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	695a      	ldr	r2, [r3, #20]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68da      	ldr	r2, [r3, #12]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2220      	movs	r2, #32
 8004a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2220      	movs	r2, #32
 8004aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3708      	adds	r7, #8
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}

08004ab2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ab2:	b580      	push	{r7, lr}
 8004ab4:	b08a      	sub	sp, #40	; 0x28
 8004ab6:	af02      	add	r7, sp, #8
 8004ab8:	60f8      	str	r0, [r7, #12]
 8004aba:	60b9      	str	r1, [r7, #8]
 8004abc:	603b      	str	r3, [r7, #0]
 8004abe:	4613      	mov	r3, r2
 8004ac0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	2b20      	cmp	r3, #32
 8004ad0:	d17c      	bne.n	8004bcc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d002      	beq.n	8004ade <HAL_UART_Transmit+0x2c>
 8004ad8:	88fb      	ldrh	r3, [r7, #6]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d101      	bne.n	8004ae2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e075      	b.n	8004bce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d101      	bne.n	8004af0 <HAL_UART_Transmit+0x3e>
 8004aec:	2302      	movs	r3, #2
 8004aee:	e06e      	b.n	8004bce <HAL_UART_Transmit+0x11c>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2200      	movs	r2, #0
 8004afc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2221      	movs	r2, #33	; 0x21
 8004b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b06:	f7fd fd95 	bl	8002634 <HAL_GetTick>
 8004b0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	88fa      	ldrh	r2, [r7, #6]
 8004b10:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	88fa      	ldrh	r2, [r7, #6]
 8004b16:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b20:	d108      	bne.n	8004b34 <HAL_UART_Transmit+0x82>
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d104      	bne.n	8004b34 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	61bb      	str	r3, [r7, #24]
 8004b32:	e003      	b.n	8004b3c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004b44:	e02a      	b.n	8004b9c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	9300      	str	r3, [sp, #0]
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	2180      	movs	r1, #128	; 0x80
 8004b50:	68f8      	ldr	r0, [r7, #12]
 8004b52:	f000 fb29 	bl	80051a8 <UART_WaitOnFlagUntilTimeout>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d001      	beq.n	8004b60 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e036      	b.n	8004bce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d10b      	bne.n	8004b7e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	881b      	ldrh	r3, [r3, #0]
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b74:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	3302      	adds	r3, #2
 8004b7a:	61bb      	str	r3, [r7, #24]
 8004b7c:	e007      	b.n	8004b8e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	781a      	ldrb	r2, [r3, #0]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	3b01      	subs	r3, #1
 8004b96:	b29a      	uxth	r2, r3
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d1cf      	bne.n	8004b46 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	9300      	str	r3, [sp, #0]
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	2200      	movs	r2, #0
 8004bae:	2140      	movs	r1, #64	; 0x40
 8004bb0:	68f8      	ldr	r0, [r7, #12]
 8004bb2:	f000 faf9 	bl	80051a8 <UART_WaitOnFlagUntilTimeout>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d001      	beq.n	8004bc0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	e006      	b.n	8004bce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2220      	movs	r2, #32
 8004bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	e000      	b.n	8004bce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004bcc:	2302      	movs	r3, #2
  }
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3720      	adds	r7, #32
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}

08004bd6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004bd6:	b580      	push	{r7, lr}
 8004bd8:	b084      	sub	sp, #16
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	60f8      	str	r0, [r7, #12]
 8004bde:	60b9      	str	r1, [r7, #8]
 8004be0:	4613      	mov	r3, r2
 8004be2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	2b20      	cmp	r3, #32
 8004bee:	d11d      	bne.n	8004c2c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d002      	beq.n	8004bfc <HAL_UART_Receive_IT+0x26>
 8004bf6:	88fb      	ldrh	r3, [r7, #6]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d101      	bne.n	8004c00 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e016      	b.n	8004c2e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d101      	bne.n	8004c0e <HAL_UART_Receive_IT+0x38>
 8004c0a:	2302      	movs	r3, #2
 8004c0c:	e00f      	b.n	8004c2e <HAL_UART_Receive_IT+0x58>
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2201      	movs	r2, #1
 8004c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004c1c:	88fb      	ldrh	r3, [r7, #6]
 8004c1e:	461a      	mov	r2, r3
 8004c20:	68b9      	ldr	r1, [r7, #8]
 8004c22:	68f8      	ldr	r0, [r7, #12]
 8004c24:	f000 fb2e 	bl	8005284 <UART_Start_Receive_IT>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	e000      	b.n	8004c2e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004c2c:	2302      	movs	r3, #2
  }
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3710      	adds	r7, #16
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
	...

08004c38 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b0ba      	sub	sp, #232	; 0xe8
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	695b      	ldr	r3, [r3, #20]
 8004c5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004c64:	2300      	movs	r3, #0
 8004c66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c6e:	f003 030f 	and.w	r3, r3, #15
 8004c72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004c76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d10f      	bne.n	8004c9e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c82:	f003 0320 	and.w	r3, r3, #32
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d009      	beq.n	8004c9e <HAL_UART_IRQHandler+0x66>
 8004c8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c8e:	f003 0320 	and.w	r3, r3, #32
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d003      	beq.n	8004c9e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 fc0d 	bl	80054b6 <UART_Receive_IT>
      return;
 8004c9c:	e256      	b.n	800514c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004c9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	f000 80de 	beq.w	8004e64 <HAL_UART_IRQHandler+0x22c>
 8004ca8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cac:	f003 0301 	and.w	r3, r3, #1
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d106      	bne.n	8004cc2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004cb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cb8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	f000 80d1 	beq.w	8004e64 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004cc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cc6:	f003 0301 	and.w	r3, r3, #1
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00b      	beq.n	8004ce6 <HAL_UART_IRQHandler+0xae>
 8004cce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d005      	beq.n	8004ce6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cde:	f043 0201 	orr.w	r2, r3, #1
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ce6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cea:	f003 0304 	and.w	r3, r3, #4
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00b      	beq.n	8004d0a <HAL_UART_IRQHandler+0xd2>
 8004cf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cf6:	f003 0301 	and.w	r3, r3, #1
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d005      	beq.n	8004d0a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d02:	f043 0202 	orr.w	r2, r3, #2
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d0e:	f003 0302 	and.w	r3, r3, #2
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00b      	beq.n	8004d2e <HAL_UART_IRQHandler+0xf6>
 8004d16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d1a:	f003 0301 	and.w	r3, r3, #1
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d005      	beq.n	8004d2e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d26:	f043 0204 	orr.w	r2, r3, #4
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004d2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d32:	f003 0308 	and.w	r3, r3, #8
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d011      	beq.n	8004d5e <HAL_UART_IRQHandler+0x126>
 8004d3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d3e:	f003 0320 	and.w	r3, r3, #32
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d105      	bne.n	8004d52 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004d46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d4a:	f003 0301 	and.w	r3, r3, #1
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d005      	beq.n	8004d5e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d56:	f043 0208 	orr.w	r2, r3, #8
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	f000 81ed 	beq.w	8005142 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d6c:	f003 0320 	and.w	r3, r3, #32
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d008      	beq.n	8004d86 <HAL_UART_IRQHandler+0x14e>
 8004d74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d78:	f003 0320 	and.w	r3, r3, #32
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d002      	beq.n	8004d86 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f000 fb98 	bl	80054b6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	695b      	ldr	r3, [r3, #20]
 8004d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d90:	2b40      	cmp	r3, #64	; 0x40
 8004d92:	bf0c      	ite	eq
 8004d94:	2301      	moveq	r3, #1
 8004d96:	2300      	movne	r3, #0
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da2:	f003 0308 	and.w	r3, r3, #8
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d103      	bne.n	8004db2 <HAL_UART_IRQHandler+0x17a>
 8004daa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d04f      	beq.n	8004e52 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 faa0 	bl	80052f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	695b      	ldr	r3, [r3, #20]
 8004dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc2:	2b40      	cmp	r3, #64	; 0x40
 8004dc4:	d141      	bne.n	8004e4a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	3314      	adds	r3, #20
 8004dcc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004dd4:	e853 3f00 	ldrex	r3, [r3]
 8004dd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004ddc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004de0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004de4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	3314      	adds	r3, #20
 8004dee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004df2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004df6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dfa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004dfe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004e02:	e841 2300 	strex	r3, r2, [r1]
 8004e06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004e0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d1d9      	bne.n	8004dc6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d013      	beq.n	8004e42 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1e:	4a7d      	ldr	r2, [pc, #500]	; (8005014 <HAL_UART_IRQHandler+0x3dc>)
 8004e20:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e26:	4618      	mov	r0, r3
 8004e28:	f7fd fd86 	bl	8002938 <HAL_DMA_Abort_IT>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d016      	beq.n	8004e60 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e3c:	4610      	mov	r0, r2
 8004e3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e40:	e00e      	b.n	8004e60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 f99a 	bl	800517c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e48:	e00a      	b.n	8004e60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 f996 	bl	800517c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e50:	e006      	b.n	8004e60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 f992 	bl	800517c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004e5e:	e170      	b.n	8005142 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e60:	bf00      	nop
    return;
 8004e62:	e16e      	b.n	8005142 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	f040 814a 	bne.w	8005102 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e72:	f003 0310 	and.w	r3, r3, #16
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	f000 8143 	beq.w	8005102 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004e7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e80:	f003 0310 	and.w	r3, r3, #16
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	f000 813c 	beq.w	8005102 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	60bb      	str	r3, [r7, #8]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	60bb      	str	r3, [r7, #8]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	60bb      	str	r3, [r7, #8]
 8004e9e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	695b      	ldr	r3, [r3, #20]
 8004ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eaa:	2b40      	cmp	r3, #64	; 0x40
 8004eac:	f040 80b4 	bne.w	8005018 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ebc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	f000 8140 	beq.w	8005146 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004eca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	f080 8139 	bcs.w	8005146 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004eda:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee0:	69db      	ldr	r3, [r3, #28]
 8004ee2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ee6:	f000 8088 	beq.w	8004ffa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	330c      	adds	r3, #12
 8004ef0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ef8:	e853 3f00 	ldrex	r3, [r3]
 8004efc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004f00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	330c      	adds	r3, #12
 8004f12:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004f16:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004f1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004f22:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004f26:	e841 2300 	strex	r3, r2, [r1]
 8004f2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004f2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1d9      	bne.n	8004eea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	3314      	adds	r3, #20
 8004f3c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f40:	e853 3f00 	ldrex	r3, [r3]
 8004f44:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004f46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f48:	f023 0301 	bic.w	r3, r3, #1
 8004f4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	3314      	adds	r3, #20
 8004f56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004f5a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004f5e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f60:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004f62:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004f66:	e841 2300 	strex	r3, r2, [r1]
 8004f6a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004f6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d1e1      	bne.n	8004f36 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	3314      	adds	r3, #20
 8004f78:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f7c:	e853 3f00 	ldrex	r3, [r3]
 8004f80:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004f82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	3314      	adds	r3, #20
 8004f92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004f96:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004f98:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f9a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004f9c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004f9e:	e841 2300 	strex	r3, r2, [r1]
 8004fa2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004fa4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d1e3      	bne.n	8004f72 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2220      	movs	r2, #32
 8004fae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	330c      	adds	r3, #12
 8004fbe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fc2:	e853 3f00 	ldrex	r3, [r3]
 8004fc6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004fc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fca:	f023 0310 	bic.w	r3, r3, #16
 8004fce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	330c      	adds	r3, #12
 8004fd8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004fdc:	65ba      	str	r2, [r7, #88]	; 0x58
 8004fde:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004fe2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004fe4:	e841 2300 	strex	r3, r2, [r1]
 8004fe8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004fea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d1e3      	bne.n	8004fb8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f7fd fc2f 	bl	8002858 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005002:	b29b      	uxth	r3, r3
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	b29b      	uxth	r3, r3
 8005008:	4619      	mov	r1, r3
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 f8c0 	bl	8005190 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005010:	e099      	b.n	8005146 <HAL_UART_IRQHandler+0x50e>
 8005012:	bf00      	nop
 8005014:	080053bf 	.word	0x080053bf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005020:	b29b      	uxth	r3, r3
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800502c:	b29b      	uxth	r3, r3
 800502e:	2b00      	cmp	r3, #0
 8005030:	f000 808b 	beq.w	800514a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005034:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005038:	2b00      	cmp	r3, #0
 800503a:	f000 8086 	beq.w	800514a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	330c      	adds	r3, #12
 8005044:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005048:	e853 3f00 	ldrex	r3, [r3]
 800504c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800504e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005050:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005054:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	330c      	adds	r3, #12
 800505e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005062:	647a      	str	r2, [r7, #68]	; 0x44
 8005064:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005066:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005068:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800506a:	e841 2300 	strex	r3, r2, [r1]
 800506e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005072:	2b00      	cmp	r3, #0
 8005074:	d1e3      	bne.n	800503e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	3314      	adds	r3, #20
 800507c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800507e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005080:	e853 3f00 	ldrex	r3, [r3]
 8005084:	623b      	str	r3, [r7, #32]
   return(result);
 8005086:	6a3b      	ldr	r3, [r7, #32]
 8005088:	f023 0301 	bic.w	r3, r3, #1
 800508c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	3314      	adds	r3, #20
 8005096:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800509a:	633a      	str	r2, [r7, #48]	; 0x30
 800509c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800509e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050a2:	e841 2300 	strex	r3, r2, [r1]
 80050a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80050a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d1e3      	bne.n	8005076 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2220      	movs	r2, #32
 80050b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	330c      	adds	r3, #12
 80050c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	e853 3f00 	ldrex	r3, [r3]
 80050ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f023 0310 	bic.w	r3, r3, #16
 80050d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	330c      	adds	r3, #12
 80050dc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80050e0:	61fa      	str	r2, [r7, #28]
 80050e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e4:	69b9      	ldr	r1, [r7, #24]
 80050e6:	69fa      	ldr	r2, [r7, #28]
 80050e8:	e841 2300 	strex	r3, r2, [r1]
 80050ec:	617b      	str	r3, [r7, #20]
   return(result);
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1e3      	bne.n	80050bc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80050f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80050f8:	4619      	mov	r1, r3
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 f848 	bl	8005190 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005100:	e023      	b.n	800514a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800510a:	2b00      	cmp	r3, #0
 800510c:	d009      	beq.n	8005122 <HAL_UART_IRQHandler+0x4ea>
 800510e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005116:	2b00      	cmp	r3, #0
 8005118:	d003      	beq.n	8005122 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 f963 	bl	80053e6 <UART_Transmit_IT>
    return;
 8005120:	e014      	b.n	800514c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00e      	beq.n	800514c <HAL_UART_IRQHandler+0x514>
 800512e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005136:	2b00      	cmp	r3, #0
 8005138:	d008      	beq.n	800514c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 f9a3 	bl	8005486 <UART_EndTransmit_IT>
    return;
 8005140:	e004      	b.n	800514c <HAL_UART_IRQHandler+0x514>
    return;
 8005142:	bf00      	nop
 8005144:	e002      	b.n	800514c <HAL_UART_IRQHandler+0x514>
      return;
 8005146:	bf00      	nop
 8005148:	e000      	b.n	800514c <HAL_UART_IRQHandler+0x514>
      return;
 800514a:	bf00      	nop
  }
}
 800514c:	37e8      	adds	r7, #232	; 0xe8
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop

08005154 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800515c:	bf00      	nop
 800515e:	370c      	adds	r7, #12
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005184:	bf00      	nop
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	460b      	mov	r3, r1
 800519a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800519c:	bf00      	nop
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b090      	sub	sp, #64	; 0x40
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	60b9      	str	r1, [r7, #8]
 80051b2:	603b      	str	r3, [r7, #0]
 80051b4:	4613      	mov	r3, r2
 80051b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051b8:	e050      	b.n	800525c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051c0:	d04c      	beq.n	800525c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80051c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d007      	beq.n	80051d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80051c8:	f7fd fa34 	bl	8002634 <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d241      	bcs.n	800525c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	330c      	adds	r3, #12
 80051de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e2:	e853 3f00 	ldrex	r3, [r3]
 80051e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80051ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	330c      	adds	r3, #12
 80051f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80051f8:	637a      	str	r2, [r7, #52]	; 0x34
 80051fa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80051fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005200:	e841 2300 	strex	r3, r2, [r1]
 8005204:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005208:	2b00      	cmp	r3, #0
 800520a:	d1e5      	bne.n	80051d8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	3314      	adds	r3, #20
 8005212:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	e853 3f00 	ldrex	r3, [r3]
 800521a:	613b      	str	r3, [r7, #16]
   return(result);
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	f023 0301 	bic.w	r3, r3, #1
 8005222:	63bb      	str	r3, [r7, #56]	; 0x38
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	3314      	adds	r3, #20
 800522a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800522c:	623a      	str	r2, [r7, #32]
 800522e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005230:	69f9      	ldr	r1, [r7, #28]
 8005232:	6a3a      	ldr	r2, [r7, #32]
 8005234:	e841 2300 	strex	r3, r2, [r1]
 8005238:	61bb      	str	r3, [r7, #24]
   return(result);
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d1e5      	bne.n	800520c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2220      	movs	r2, #32
 8005244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2220      	movs	r2, #32
 800524c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2200      	movs	r2, #0
 8005254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	e00f      	b.n	800527c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	4013      	ands	r3, r2
 8005266:	68ba      	ldr	r2, [r7, #8]
 8005268:	429a      	cmp	r2, r3
 800526a:	bf0c      	ite	eq
 800526c:	2301      	moveq	r3, #1
 800526e:	2300      	movne	r3, #0
 8005270:	b2db      	uxtb	r3, r3
 8005272:	461a      	mov	r2, r3
 8005274:	79fb      	ldrb	r3, [r7, #7]
 8005276:	429a      	cmp	r2, r3
 8005278:	d09f      	beq.n	80051ba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800527a:	2300      	movs	r3, #0
}
 800527c:	4618      	mov	r0, r3
 800527e:	3740      	adds	r7, #64	; 0x40
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005284:	b480      	push	{r7}
 8005286:	b085      	sub	sp, #20
 8005288:	af00      	add	r7, sp, #0
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	60b9      	str	r1, [r7, #8]
 800528e:	4613      	mov	r3, r2
 8005290:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	68ba      	ldr	r2, [r7, #8]
 8005296:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	88fa      	ldrh	r2, [r7, #6]
 800529c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	88fa      	ldrh	r2, [r7, #6]
 80052a2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2200      	movs	r2, #0
 80052a8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2222      	movs	r2, #34	; 0x22
 80052ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	68da      	ldr	r2, [r3, #12]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052c8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	695a      	ldr	r2, [r3, #20]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f042 0201 	orr.w	r2, r2, #1
 80052d8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68da      	ldr	r2, [r3, #12]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f042 0220 	orr.w	r2, r2, #32
 80052e8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80052ea:	2300      	movs	r3, #0
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3714      	adds	r7, #20
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b095      	sub	sp, #84	; 0x54
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	330c      	adds	r3, #12
 8005306:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800530a:	e853 3f00 	ldrex	r3, [r3]
 800530e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005312:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005316:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	330c      	adds	r3, #12
 800531e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005320:	643a      	str	r2, [r7, #64]	; 0x40
 8005322:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005324:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005326:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005328:	e841 2300 	strex	r3, r2, [r1]
 800532c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800532e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005330:	2b00      	cmp	r3, #0
 8005332:	d1e5      	bne.n	8005300 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	3314      	adds	r3, #20
 800533a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800533c:	6a3b      	ldr	r3, [r7, #32]
 800533e:	e853 3f00 	ldrex	r3, [r3]
 8005342:	61fb      	str	r3, [r7, #28]
   return(result);
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	f023 0301 	bic.w	r3, r3, #1
 800534a:	64bb      	str	r3, [r7, #72]	; 0x48
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	3314      	adds	r3, #20
 8005352:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005354:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005356:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005358:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800535a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800535c:	e841 2300 	strex	r3, r2, [r1]
 8005360:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005364:	2b00      	cmp	r3, #0
 8005366:	d1e5      	bne.n	8005334 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800536c:	2b01      	cmp	r3, #1
 800536e:	d119      	bne.n	80053a4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	330c      	adds	r3, #12
 8005376:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	e853 3f00 	ldrex	r3, [r3]
 800537e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	f023 0310 	bic.w	r3, r3, #16
 8005386:	647b      	str	r3, [r7, #68]	; 0x44
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	330c      	adds	r3, #12
 800538e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005390:	61ba      	str	r2, [r7, #24]
 8005392:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005394:	6979      	ldr	r1, [r7, #20]
 8005396:	69ba      	ldr	r2, [r7, #24]
 8005398:	e841 2300 	strex	r3, r2, [r1]
 800539c:	613b      	str	r3, [r7, #16]
   return(result);
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d1e5      	bne.n	8005370 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2220      	movs	r2, #32
 80053a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80053b2:	bf00      	nop
 80053b4:	3754      	adds	r7, #84	; 0x54
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr

080053be <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80053be:	b580      	push	{r7, lr}
 80053c0:	b084      	sub	sp, #16
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2200      	movs	r2, #0
 80053d0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053d8:	68f8      	ldr	r0, [r7, #12]
 80053da:	f7ff fecf 	bl	800517c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053de:	bf00      	nop
 80053e0:	3710      	adds	r7, #16
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}

080053e6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80053e6:	b480      	push	{r7}
 80053e8:	b085      	sub	sp, #20
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	2b21      	cmp	r3, #33	; 0x21
 80053f8:	d13e      	bne.n	8005478 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005402:	d114      	bne.n	800542e <UART_Transmit_IT+0x48>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	691b      	ldr	r3, [r3, #16]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d110      	bne.n	800542e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a1b      	ldr	r3, [r3, #32]
 8005410:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	881b      	ldrh	r3, [r3, #0]
 8005416:	461a      	mov	r2, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005420:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a1b      	ldr	r3, [r3, #32]
 8005426:	1c9a      	adds	r2, r3, #2
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	621a      	str	r2, [r3, #32]
 800542c:	e008      	b.n	8005440 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a1b      	ldr	r3, [r3, #32]
 8005432:	1c59      	adds	r1, r3, #1
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	6211      	str	r1, [r2, #32]
 8005438:	781a      	ldrb	r2, [r3, #0]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005444:	b29b      	uxth	r3, r3
 8005446:	3b01      	subs	r3, #1
 8005448:	b29b      	uxth	r3, r3
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	4619      	mov	r1, r3
 800544e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005450:	2b00      	cmp	r3, #0
 8005452:	d10f      	bne.n	8005474 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	68da      	ldr	r2, [r3, #12]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005462:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68da      	ldr	r2, [r3, #12]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005472:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005474:	2300      	movs	r3, #0
 8005476:	e000      	b.n	800547a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005478:	2302      	movs	r3, #2
  }
}
 800547a:	4618      	mov	r0, r3
 800547c:	3714      	adds	r7, #20
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr

08005486 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005486:	b580      	push	{r7, lr}
 8005488:	b082      	sub	sp, #8
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68da      	ldr	r2, [r3, #12]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800549c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2220      	movs	r2, #32
 80054a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f7ff fe54 	bl	8005154 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80054ac:	2300      	movs	r3, #0
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3708      	adds	r7, #8
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}

080054b6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80054b6:	b580      	push	{r7, lr}
 80054b8:	b08c      	sub	sp, #48	; 0x30
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	2b22      	cmp	r3, #34	; 0x22
 80054c8:	f040 80ab 	bne.w	8005622 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054d4:	d117      	bne.n	8005506 <UART_Receive_IT+0x50>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d113      	bne.n	8005506 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80054de:	2300      	movs	r3, #0
 80054e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054f4:	b29a      	uxth	r2, r3
 80054f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054fe:	1c9a      	adds	r2, r3, #2
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	629a      	str	r2, [r3, #40]	; 0x28
 8005504:	e026      	b.n	8005554 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800550a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800550c:	2300      	movs	r3, #0
 800550e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005518:	d007      	beq.n	800552a <UART_Receive_IT+0x74>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d10a      	bne.n	8005538 <UART_Receive_IT+0x82>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d106      	bne.n	8005538 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	b2da      	uxtb	r2, r3
 8005532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005534:	701a      	strb	r2, [r3, #0]
 8005536:	e008      	b.n	800554a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	b2db      	uxtb	r3, r3
 8005540:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005544:	b2da      	uxtb	r2, r3
 8005546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005548:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800554e:	1c5a      	adds	r2, r3, #1
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005558:	b29b      	uxth	r3, r3
 800555a:	3b01      	subs	r3, #1
 800555c:	b29b      	uxth	r3, r3
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	4619      	mov	r1, r3
 8005562:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005564:	2b00      	cmp	r3, #0
 8005566:	d15a      	bne.n	800561e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68da      	ldr	r2, [r3, #12]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f022 0220 	bic.w	r2, r2, #32
 8005576:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68da      	ldr	r2, [r3, #12]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005586:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	695a      	ldr	r2, [r3, #20]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f022 0201 	bic.w	r2, r2, #1
 8005596:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2220      	movs	r2, #32
 800559c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d135      	bne.n	8005614 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	330c      	adds	r3, #12
 80055b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	e853 3f00 	ldrex	r3, [r3]
 80055bc:	613b      	str	r3, [r7, #16]
   return(result);
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	f023 0310 	bic.w	r3, r3, #16
 80055c4:	627b      	str	r3, [r7, #36]	; 0x24
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	330c      	adds	r3, #12
 80055cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055ce:	623a      	str	r2, [r7, #32]
 80055d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d2:	69f9      	ldr	r1, [r7, #28]
 80055d4:	6a3a      	ldr	r2, [r7, #32]
 80055d6:	e841 2300 	strex	r3, r2, [r1]
 80055da:	61bb      	str	r3, [r7, #24]
   return(result);
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d1e5      	bne.n	80055ae <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0310 	and.w	r3, r3, #16
 80055ec:	2b10      	cmp	r3, #16
 80055ee:	d10a      	bne.n	8005606 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80055f0:	2300      	movs	r3, #0
 80055f2:	60fb      	str	r3, [r7, #12]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	60fb      	str	r3, [r7, #12]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	60fb      	str	r3, [r7, #12]
 8005604:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800560a:	4619      	mov	r1, r3
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f7ff fdbf 	bl	8005190 <HAL_UARTEx_RxEventCallback>
 8005612:	e002      	b.n	800561a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f7ff fda7 	bl	8005168 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800561a:	2300      	movs	r3, #0
 800561c:	e002      	b.n	8005624 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800561e:	2300      	movs	r3, #0
 8005620:	e000      	b.n	8005624 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005622:	2302      	movs	r3, #2
  }
}
 8005624:	4618      	mov	r0, r3
 8005626:	3730      	adds	r7, #48	; 0x30
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800562c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005630:	b09f      	sub	sp, #124	; 0x7c
 8005632:	af00      	add	r7, sp, #0
 8005634:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005636:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005640:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005642:	68d9      	ldr	r1, [r3, #12]
 8005644:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	ea40 0301 	orr.w	r3, r0, r1
 800564c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800564e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005650:	689a      	ldr	r2, [r3, #8]
 8005652:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	431a      	orrs	r2, r3
 8005658:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800565a:	695b      	ldr	r3, [r3, #20]
 800565c:	431a      	orrs	r2, r3
 800565e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005660:	69db      	ldr	r3, [r3, #28]
 8005662:	4313      	orrs	r3, r2
 8005664:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005666:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005670:	f021 010c 	bic.w	r1, r1, #12
 8005674:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800567a:	430b      	orrs	r3, r1
 800567c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800567e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	695b      	ldr	r3, [r3, #20]
 8005684:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005688:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800568a:	6999      	ldr	r1, [r3, #24]
 800568c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	ea40 0301 	orr.w	r3, r0, r1
 8005694:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005696:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	4bc5      	ldr	r3, [pc, #788]	; (80059b0 <UART_SetConfig+0x384>)
 800569c:	429a      	cmp	r2, r3
 800569e:	d004      	beq.n	80056aa <UART_SetConfig+0x7e>
 80056a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	4bc3      	ldr	r3, [pc, #780]	; (80059b4 <UART_SetConfig+0x388>)
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d103      	bne.n	80056b2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80056aa:	f7fe fd29 	bl	8004100 <HAL_RCC_GetPCLK2Freq>
 80056ae:	6778      	str	r0, [r7, #116]	; 0x74
 80056b0:	e002      	b.n	80056b8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80056b2:	f7fe fd11 	bl	80040d8 <HAL_RCC_GetPCLK1Freq>
 80056b6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056ba:	69db      	ldr	r3, [r3, #28]
 80056bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056c0:	f040 80b6 	bne.w	8005830 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80056c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056c6:	461c      	mov	r4, r3
 80056c8:	f04f 0500 	mov.w	r5, #0
 80056cc:	4622      	mov	r2, r4
 80056ce:	462b      	mov	r3, r5
 80056d0:	1891      	adds	r1, r2, r2
 80056d2:	6439      	str	r1, [r7, #64]	; 0x40
 80056d4:	415b      	adcs	r3, r3
 80056d6:	647b      	str	r3, [r7, #68]	; 0x44
 80056d8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80056dc:	1912      	adds	r2, r2, r4
 80056de:	eb45 0303 	adc.w	r3, r5, r3
 80056e2:	f04f 0000 	mov.w	r0, #0
 80056e6:	f04f 0100 	mov.w	r1, #0
 80056ea:	00d9      	lsls	r1, r3, #3
 80056ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80056f0:	00d0      	lsls	r0, r2, #3
 80056f2:	4602      	mov	r2, r0
 80056f4:	460b      	mov	r3, r1
 80056f6:	1911      	adds	r1, r2, r4
 80056f8:	6639      	str	r1, [r7, #96]	; 0x60
 80056fa:	416b      	adcs	r3, r5
 80056fc:	667b      	str	r3, [r7, #100]	; 0x64
 80056fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	461a      	mov	r2, r3
 8005704:	f04f 0300 	mov.w	r3, #0
 8005708:	1891      	adds	r1, r2, r2
 800570a:	63b9      	str	r1, [r7, #56]	; 0x38
 800570c:	415b      	adcs	r3, r3
 800570e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005710:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005714:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005718:	f7fb fa4e 	bl	8000bb8 <__aeabi_uldivmod>
 800571c:	4602      	mov	r2, r0
 800571e:	460b      	mov	r3, r1
 8005720:	4ba5      	ldr	r3, [pc, #660]	; (80059b8 <UART_SetConfig+0x38c>)
 8005722:	fba3 2302 	umull	r2, r3, r3, r2
 8005726:	095b      	lsrs	r3, r3, #5
 8005728:	011e      	lsls	r6, r3, #4
 800572a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800572c:	461c      	mov	r4, r3
 800572e:	f04f 0500 	mov.w	r5, #0
 8005732:	4622      	mov	r2, r4
 8005734:	462b      	mov	r3, r5
 8005736:	1891      	adds	r1, r2, r2
 8005738:	6339      	str	r1, [r7, #48]	; 0x30
 800573a:	415b      	adcs	r3, r3
 800573c:	637b      	str	r3, [r7, #52]	; 0x34
 800573e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005742:	1912      	adds	r2, r2, r4
 8005744:	eb45 0303 	adc.w	r3, r5, r3
 8005748:	f04f 0000 	mov.w	r0, #0
 800574c:	f04f 0100 	mov.w	r1, #0
 8005750:	00d9      	lsls	r1, r3, #3
 8005752:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005756:	00d0      	lsls	r0, r2, #3
 8005758:	4602      	mov	r2, r0
 800575a:	460b      	mov	r3, r1
 800575c:	1911      	adds	r1, r2, r4
 800575e:	65b9      	str	r1, [r7, #88]	; 0x58
 8005760:	416b      	adcs	r3, r5
 8005762:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005764:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	461a      	mov	r2, r3
 800576a:	f04f 0300 	mov.w	r3, #0
 800576e:	1891      	adds	r1, r2, r2
 8005770:	62b9      	str	r1, [r7, #40]	; 0x28
 8005772:	415b      	adcs	r3, r3
 8005774:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005776:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800577a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800577e:	f7fb fa1b 	bl	8000bb8 <__aeabi_uldivmod>
 8005782:	4602      	mov	r2, r0
 8005784:	460b      	mov	r3, r1
 8005786:	4b8c      	ldr	r3, [pc, #560]	; (80059b8 <UART_SetConfig+0x38c>)
 8005788:	fba3 1302 	umull	r1, r3, r3, r2
 800578c:	095b      	lsrs	r3, r3, #5
 800578e:	2164      	movs	r1, #100	; 0x64
 8005790:	fb01 f303 	mul.w	r3, r1, r3
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	00db      	lsls	r3, r3, #3
 8005798:	3332      	adds	r3, #50	; 0x32
 800579a:	4a87      	ldr	r2, [pc, #540]	; (80059b8 <UART_SetConfig+0x38c>)
 800579c:	fba2 2303 	umull	r2, r3, r2, r3
 80057a0:	095b      	lsrs	r3, r3, #5
 80057a2:	005b      	lsls	r3, r3, #1
 80057a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80057a8:	441e      	add	r6, r3
 80057aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057ac:	4618      	mov	r0, r3
 80057ae:	f04f 0100 	mov.w	r1, #0
 80057b2:	4602      	mov	r2, r0
 80057b4:	460b      	mov	r3, r1
 80057b6:	1894      	adds	r4, r2, r2
 80057b8:	623c      	str	r4, [r7, #32]
 80057ba:	415b      	adcs	r3, r3
 80057bc:	627b      	str	r3, [r7, #36]	; 0x24
 80057be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80057c2:	1812      	adds	r2, r2, r0
 80057c4:	eb41 0303 	adc.w	r3, r1, r3
 80057c8:	f04f 0400 	mov.w	r4, #0
 80057cc:	f04f 0500 	mov.w	r5, #0
 80057d0:	00dd      	lsls	r5, r3, #3
 80057d2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80057d6:	00d4      	lsls	r4, r2, #3
 80057d8:	4622      	mov	r2, r4
 80057da:	462b      	mov	r3, r5
 80057dc:	1814      	adds	r4, r2, r0
 80057de:	653c      	str	r4, [r7, #80]	; 0x50
 80057e0:	414b      	adcs	r3, r1
 80057e2:	657b      	str	r3, [r7, #84]	; 0x54
 80057e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	461a      	mov	r2, r3
 80057ea:	f04f 0300 	mov.w	r3, #0
 80057ee:	1891      	adds	r1, r2, r2
 80057f0:	61b9      	str	r1, [r7, #24]
 80057f2:	415b      	adcs	r3, r3
 80057f4:	61fb      	str	r3, [r7, #28]
 80057f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057fa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80057fe:	f7fb f9db 	bl	8000bb8 <__aeabi_uldivmod>
 8005802:	4602      	mov	r2, r0
 8005804:	460b      	mov	r3, r1
 8005806:	4b6c      	ldr	r3, [pc, #432]	; (80059b8 <UART_SetConfig+0x38c>)
 8005808:	fba3 1302 	umull	r1, r3, r3, r2
 800580c:	095b      	lsrs	r3, r3, #5
 800580e:	2164      	movs	r1, #100	; 0x64
 8005810:	fb01 f303 	mul.w	r3, r1, r3
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	00db      	lsls	r3, r3, #3
 8005818:	3332      	adds	r3, #50	; 0x32
 800581a:	4a67      	ldr	r2, [pc, #412]	; (80059b8 <UART_SetConfig+0x38c>)
 800581c:	fba2 2303 	umull	r2, r3, r2, r3
 8005820:	095b      	lsrs	r3, r3, #5
 8005822:	f003 0207 	and.w	r2, r3, #7
 8005826:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4432      	add	r2, r6
 800582c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800582e:	e0b9      	b.n	80059a4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005830:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005832:	461c      	mov	r4, r3
 8005834:	f04f 0500 	mov.w	r5, #0
 8005838:	4622      	mov	r2, r4
 800583a:	462b      	mov	r3, r5
 800583c:	1891      	adds	r1, r2, r2
 800583e:	6139      	str	r1, [r7, #16]
 8005840:	415b      	adcs	r3, r3
 8005842:	617b      	str	r3, [r7, #20]
 8005844:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005848:	1912      	adds	r2, r2, r4
 800584a:	eb45 0303 	adc.w	r3, r5, r3
 800584e:	f04f 0000 	mov.w	r0, #0
 8005852:	f04f 0100 	mov.w	r1, #0
 8005856:	00d9      	lsls	r1, r3, #3
 8005858:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800585c:	00d0      	lsls	r0, r2, #3
 800585e:	4602      	mov	r2, r0
 8005860:	460b      	mov	r3, r1
 8005862:	eb12 0804 	adds.w	r8, r2, r4
 8005866:	eb43 0905 	adc.w	r9, r3, r5
 800586a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	4618      	mov	r0, r3
 8005870:	f04f 0100 	mov.w	r1, #0
 8005874:	f04f 0200 	mov.w	r2, #0
 8005878:	f04f 0300 	mov.w	r3, #0
 800587c:	008b      	lsls	r3, r1, #2
 800587e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005882:	0082      	lsls	r2, r0, #2
 8005884:	4640      	mov	r0, r8
 8005886:	4649      	mov	r1, r9
 8005888:	f7fb f996 	bl	8000bb8 <__aeabi_uldivmod>
 800588c:	4602      	mov	r2, r0
 800588e:	460b      	mov	r3, r1
 8005890:	4b49      	ldr	r3, [pc, #292]	; (80059b8 <UART_SetConfig+0x38c>)
 8005892:	fba3 2302 	umull	r2, r3, r3, r2
 8005896:	095b      	lsrs	r3, r3, #5
 8005898:	011e      	lsls	r6, r3, #4
 800589a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800589c:	4618      	mov	r0, r3
 800589e:	f04f 0100 	mov.w	r1, #0
 80058a2:	4602      	mov	r2, r0
 80058a4:	460b      	mov	r3, r1
 80058a6:	1894      	adds	r4, r2, r2
 80058a8:	60bc      	str	r4, [r7, #8]
 80058aa:	415b      	adcs	r3, r3
 80058ac:	60fb      	str	r3, [r7, #12]
 80058ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80058b2:	1812      	adds	r2, r2, r0
 80058b4:	eb41 0303 	adc.w	r3, r1, r3
 80058b8:	f04f 0400 	mov.w	r4, #0
 80058bc:	f04f 0500 	mov.w	r5, #0
 80058c0:	00dd      	lsls	r5, r3, #3
 80058c2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80058c6:	00d4      	lsls	r4, r2, #3
 80058c8:	4622      	mov	r2, r4
 80058ca:	462b      	mov	r3, r5
 80058cc:	1814      	adds	r4, r2, r0
 80058ce:	64bc      	str	r4, [r7, #72]	; 0x48
 80058d0:	414b      	adcs	r3, r1
 80058d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	4618      	mov	r0, r3
 80058da:	f04f 0100 	mov.w	r1, #0
 80058de:	f04f 0200 	mov.w	r2, #0
 80058e2:	f04f 0300 	mov.w	r3, #0
 80058e6:	008b      	lsls	r3, r1, #2
 80058e8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80058ec:	0082      	lsls	r2, r0, #2
 80058ee:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80058f2:	f7fb f961 	bl	8000bb8 <__aeabi_uldivmod>
 80058f6:	4602      	mov	r2, r0
 80058f8:	460b      	mov	r3, r1
 80058fa:	4b2f      	ldr	r3, [pc, #188]	; (80059b8 <UART_SetConfig+0x38c>)
 80058fc:	fba3 1302 	umull	r1, r3, r3, r2
 8005900:	095b      	lsrs	r3, r3, #5
 8005902:	2164      	movs	r1, #100	; 0x64
 8005904:	fb01 f303 	mul.w	r3, r1, r3
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	011b      	lsls	r3, r3, #4
 800590c:	3332      	adds	r3, #50	; 0x32
 800590e:	4a2a      	ldr	r2, [pc, #168]	; (80059b8 <UART_SetConfig+0x38c>)
 8005910:	fba2 2303 	umull	r2, r3, r2, r3
 8005914:	095b      	lsrs	r3, r3, #5
 8005916:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800591a:	441e      	add	r6, r3
 800591c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800591e:	4618      	mov	r0, r3
 8005920:	f04f 0100 	mov.w	r1, #0
 8005924:	4602      	mov	r2, r0
 8005926:	460b      	mov	r3, r1
 8005928:	1894      	adds	r4, r2, r2
 800592a:	603c      	str	r4, [r7, #0]
 800592c:	415b      	adcs	r3, r3
 800592e:	607b      	str	r3, [r7, #4]
 8005930:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005934:	1812      	adds	r2, r2, r0
 8005936:	eb41 0303 	adc.w	r3, r1, r3
 800593a:	f04f 0400 	mov.w	r4, #0
 800593e:	f04f 0500 	mov.w	r5, #0
 8005942:	00dd      	lsls	r5, r3, #3
 8005944:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005948:	00d4      	lsls	r4, r2, #3
 800594a:	4622      	mov	r2, r4
 800594c:	462b      	mov	r3, r5
 800594e:	eb12 0a00 	adds.w	sl, r2, r0
 8005952:	eb43 0b01 	adc.w	fp, r3, r1
 8005956:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	4618      	mov	r0, r3
 800595c:	f04f 0100 	mov.w	r1, #0
 8005960:	f04f 0200 	mov.w	r2, #0
 8005964:	f04f 0300 	mov.w	r3, #0
 8005968:	008b      	lsls	r3, r1, #2
 800596a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800596e:	0082      	lsls	r2, r0, #2
 8005970:	4650      	mov	r0, sl
 8005972:	4659      	mov	r1, fp
 8005974:	f7fb f920 	bl	8000bb8 <__aeabi_uldivmod>
 8005978:	4602      	mov	r2, r0
 800597a:	460b      	mov	r3, r1
 800597c:	4b0e      	ldr	r3, [pc, #56]	; (80059b8 <UART_SetConfig+0x38c>)
 800597e:	fba3 1302 	umull	r1, r3, r3, r2
 8005982:	095b      	lsrs	r3, r3, #5
 8005984:	2164      	movs	r1, #100	; 0x64
 8005986:	fb01 f303 	mul.w	r3, r1, r3
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	011b      	lsls	r3, r3, #4
 800598e:	3332      	adds	r3, #50	; 0x32
 8005990:	4a09      	ldr	r2, [pc, #36]	; (80059b8 <UART_SetConfig+0x38c>)
 8005992:	fba2 2303 	umull	r2, r3, r2, r3
 8005996:	095b      	lsrs	r3, r3, #5
 8005998:	f003 020f 	and.w	r2, r3, #15
 800599c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4432      	add	r2, r6
 80059a2:	609a      	str	r2, [r3, #8]
}
 80059a4:	bf00      	nop
 80059a6:	377c      	adds	r7, #124	; 0x7c
 80059a8:	46bd      	mov	sp, r7
 80059aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059ae:	bf00      	nop
 80059b0:	40011000 	.word	0x40011000
 80059b4:	40011400 	.word	0x40011400
 80059b8:	51eb851f 	.word	0x51eb851f

080059bc <__errno>:
 80059bc:	4b01      	ldr	r3, [pc, #4]	; (80059c4 <__errno+0x8>)
 80059be:	6818      	ldr	r0, [r3, #0]
 80059c0:	4770      	bx	lr
 80059c2:	bf00      	nop
 80059c4:	20000018 	.word	0x20000018

080059c8 <__libc_init_array>:
 80059c8:	b570      	push	{r4, r5, r6, lr}
 80059ca:	4d0d      	ldr	r5, [pc, #52]	; (8005a00 <__libc_init_array+0x38>)
 80059cc:	4c0d      	ldr	r4, [pc, #52]	; (8005a04 <__libc_init_array+0x3c>)
 80059ce:	1b64      	subs	r4, r4, r5
 80059d0:	10a4      	asrs	r4, r4, #2
 80059d2:	2600      	movs	r6, #0
 80059d4:	42a6      	cmp	r6, r4
 80059d6:	d109      	bne.n	80059ec <__libc_init_array+0x24>
 80059d8:	4d0b      	ldr	r5, [pc, #44]	; (8005a08 <__libc_init_array+0x40>)
 80059da:	4c0c      	ldr	r4, [pc, #48]	; (8005a0c <__libc_init_array+0x44>)
 80059dc:	f002 ff12 	bl	8008804 <_init>
 80059e0:	1b64      	subs	r4, r4, r5
 80059e2:	10a4      	asrs	r4, r4, #2
 80059e4:	2600      	movs	r6, #0
 80059e6:	42a6      	cmp	r6, r4
 80059e8:	d105      	bne.n	80059f6 <__libc_init_array+0x2e>
 80059ea:	bd70      	pop	{r4, r5, r6, pc}
 80059ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80059f0:	4798      	blx	r3
 80059f2:	3601      	adds	r6, #1
 80059f4:	e7ee      	b.n	80059d4 <__libc_init_array+0xc>
 80059f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80059fa:	4798      	blx	r3
 80059fc:	3601      	adds	r6, #1
 80059fe:	e7f2      	b.n	80059e6 <__libc_init_array+0x1e>
 8005a00:	08008d04 	.word	0x08008d04
 8005a04:	08008d04 	.word	0x08008d04
 8005a08:	08008d04 	.word	0x08008d04
 8005a0c:	08008d08 	.word	0x08008d08

08005a10 <memset>:
 8005a10:	4402      	add	r2, r0
 8005a12:	4603      	mov	r3, r0
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d100      	bne.n	8005a1a <memset+0xa>
 8005a18:	4770      	bx	lr
 8005a1a:	f803 1b01 	strb.w	r1, [r3], #1
 8005a1e:	e7f9      	b.n	8005a14 <memset+0x4>

08005a20 <__cvt>:
 8005a20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a24:	ec55 4b10 	vmov	r4, r5, d0
 8005a28:	2d00      	cmp	r5, #0
 8005a2a:	460e      	mov	r6, r1
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	462b      	mov	r3, r5
 8005a30:	bfbb      	ittet	lt
 8005a32:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005a36:	461d      	movlt	r5, r3
 8005a38:	2300      	movge	r3, #0
 8005a3a:	232d      	movlt	r3, #45	; 0x2d
 8005a3c:	700b      	strb	r3, [r1, #0]
 8005a3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a40:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005a44:	4691      	mov	r9, r2
 8005a46:	f023 0820 	bic.w	r8, r3, #32
 8005a4a:	bfbc      	itt	lt
 8005a4c:	4622      	movlt	r2, r4
 8005a4e:	4614      	movlt	r4, r2
 8005a50:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005a54:	d005      	beq.n	8005a62 <__cvt+0x42>
 8005a56:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005a5a:	d100      	bne.n	8005a5e <__cvt+0x3e>
 8005a5c:	3601      	adds	r6, #1
 8005a5e:	2102      	movs	r1, #2
 8005a60:	e000      	b.n	8005a64 <__cvt+0x44>
 8005a62:	2103      	movs	r1, #3
 8005a64:	ab03      	add	r3, sp, #12
 8005a66:	9301      	str	r3, [sp, #4]
 8005a68:	ab02      	add	r3, sp, #8
 8005a6a:	9300      	str	r3, [sp, #0]
 8005a6c:	ec45 4b10 	vmov	d0, r4, r5
 8005a70:	4653      	mov	r3, sl
 8005a72:	4632      	mov	r2, r6
 8005a74:	f000 fd68 	bl	8006548 <_dtoa_r>
 8005a78:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005a7c:	4607      	mov	r7, r0
 8005a7e:	d102      	bne.n	8005a86 <__cvt+0x66>
 8005a80:	f019 0f01 	tst.w	r9, #1
 8005a84:	d022      	beq.n	8005acc <__cvt+0xac>
 8005a86:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005a8a:	eb07 0906 	add.w	r9, r7, r6
 8005a8e:	d110      	bne.n	8005ab2 <__cvt+0x92>
 8005a90:	783b      	ldrb	r3, [r7, #0]
 8005a92:	2b30      	cmp	r3, #48	; 0x30
 8005a94:	d10a      	bne.n	8005aac <__cvt+0x8c>
 8005a96:	2200      	movs	r2, #0
 8005a98:	2300      	movs	r3, #0
 8005a9a:	4620      	mov	r0, r4
 8005a9c:	4629      	mov	r1, r5
 8005a9e:	f7fb f81b 	bl	8000ad8 <__aeabi_dcmpeq>
 8005aa2:	b918      	cbnz	r0, 8005aac <__cvt+0x8c>
 8005aa4:	f1c6 0601 	rsb	r6, r6, #1
 8005aa8:	f8ca 6000 	str.w	r6, [sl]
 8005aac:	f8da 3000 	ldr.w	r3, [sl]
 8005ab0:	4499      	add	r9, r3
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	4620      	mov	r0, r4
 8005ab8:	4629      	mov	r1, r5
 8005aba:	f7fb f80d 	bl	8000ad8 <__aeabi_dcmpeq>
 8005abe:	b108      	cbz	r0, 8005ac4 <__cvt+0xa4>
 8005ac0:	f8cd 900c 	str.w	r9, [sp, #12]
 8005ac4:	2230      	movs	r2, #48	; 0x30
 8005ac6:	9b03      	ldr	r3, [sp, #12]
 8005ac8:	454b      	cmp	r3, r9
 8005aca:	d307      	bcc.n	8005adc <__cvt+0xbc>
 8005acc:	9b03      	ldr	r3, [sp, #12]
 8005ace:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ad0:	1bdb      	subs	r3, r3, r7
 8005ad2:	4638      	mov	r0, r7
 8005ad4:	6013      	str	r3, [r2, #0]
 8005ad6:	b004      	add	sp, #16
 8005ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005adc:	1c59      	adds	r1, r3, #1
 8005ade:	9103      	str	r1, [sp, #12]
 8005ae0:	701a      	strb	r2, [r3, #0]
 8005ae2:	e7f0      	b.n	8005ac6 <__cvt+0xa6>

08005ae4 <__exponent>:
 8005ae4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2900      	cmp	r1, #0
 8005aea:	bfb8      	it	lt
 8005aec:	4249      	neglt	r1, r1
 8005aee:	f803 2b02 	strb.w	r2, [r3], #2
 8005af2:	bfb4      	ite	lt
 8005af4:	222d      	movlt	r2, #45	; 0x2d
 8005af6:	222b      	movge	r2, #43	; 0x2b
 8005af8:	2909      	cmp	r1, #9
 8005afa:	7042      	strb	r2, [r0, #1]
 8005afc:	dd2a      	ble.n	8005b54 <__exponent+0x70>
 8005afe:	f10d 0407 	add.w	r4, sp, #7
 8005b02:	46a4      	mov	ip, r4
 8005b04:	270a      	movs	r7, #10
 8005b06:	46a6      	mov	lr, r4
 8005b08:	460a      	mov	r2, r1
 8005b0a:	fb91 f6f7 	sdiv	r6, r1, r7
 8005b0e:	fb07 1516 	mls	r5, r7, r6, r1
 8005b12:	3530      	adds	r5, #48	; 0x30
 8005b14:	2a63      	cmp	r2, #99	; 0x63
 8005b16:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8005b1a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005b1e:	4631      	mov	r1, r6
 8005b20:	dcf1      	bgt.n	8005b06 <__exponent+0x22>
 8005b22:	3130      	adds	r1, #48	; 0x30
 8005b24:	f1ae 0502 	sub.w	r5, lr, #2
 8005b28:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005b2c:	1c44      	adds	r4, r0, #1
 8005b2e:	4629      	mov	r1, r5
 8005b30:	4561      	cmp	r1, ip
 8005b32:	d30a      	bcc.n	8005b4a <__exponent+0x66>
 8005b34:	f10d 0209 	add.w	r2, sp, #9
 8005b38:	eba2 020e 	sub.w	r2, r2, lr
 8005b3c:	4565      	cmp	r5, ip
 8005b3e:	bf88      	it	hi
 8005b40:	2200      	movhi	r2, #0
 8005b42:	4413      	add	r3, r2
 8005b44:	1a18      	subs	r0, r3, r0
 8005b46:	b003      	add	sp, #12
 8005b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b4e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005b52:	e7ed      	b.n	8005b30 <__exponent+0x4c>
 8005b54:	2330      	movs	r3, #48	; 0x30
 8005b56:	3130      	adds	r1, #48	; 0x30
 8005b58:	7083      	strb	r3, [r0, #2]
 8005b5a:	70c1      	strb	r1, [r0, #3]
 8005b5c:	1d03      	adds	r3, r0, #4
 8005b5e:	e7f1      	b.n	8005b44 <__exponent+0x60>

08005b60 <_printf_float>:
 8005b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b64:	ed2d 8b02 	vpush	{d8}
 8005b68:	b08d      	sub	sp, #52	; 0x34
 8005b6a:	460c      	mov	r4, r1
 8005b6c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005b70:	4616      	mov	r6, r2
 8005b72:	461f      	mov	r7, r3
 8005b74:	4605      	mov	r5, r0
 8005b76:	f001 fae5 	bl	8007144 <_localeconv_r>
 8005b7a:	f8d0 a000 	ldr.w	sl, [r0]
 8005b7e:	4650      	mov	r0, sl
 8005b80:	f7fa fb2e 	bl	80001e0 <strlen>
 8005b84:	2300      	movs	r3, #0
 8005b86:	930a      	str	r3, [sp, #40]	; 0x28
 8005b88:	6823      	ldr	r3, [r4, #0]
 8005b8a:	9305      	str	r3, [sp, #20]
 8005b8c:	f8d8 3000 	ldr.w	r3, [r8]
 8005b90:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005b94:	3307      	adds	r3, #7
 8005b96:	f023 0307 	bic.w	r3, r3, #7
 8005b9a:	f103 0208 	add.w	r2, r3, #8
 8005b9e:	f8c8 2000 	str.w	r2, [r8]
 8005ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005baa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005bae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005bb2:	9307      	str	r3, [sp, #28]
 8005bb4:	f8cd 8018 	str.w	r8, [sp, #24]
 8005bb8:	ee08 0a10 	vmov	s16, r0
 8005bbc:	4b9f      	ldr	r3, [pc, #636]	; (8005e3c <_printf_float+0x2dc>)
 8005bbe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005bc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005bc6:	f7fa ffb9 	bl	8000b3c <__aeabi_dcmpun>
 8005bca:	bb88      	cbnz	r0, 8005c30 <_printf_float+0xd0>
 8005bcc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005bd0:	4b9a      	ldr	r3, [pc, #616]	; (8005e3c <_printf_float+0x2dc>)
 8005bd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005bd6:	f7fa ff93 	bl	8000b00 <__aeabi_dcmple>
 8005bda:	bb48      	cbnz	r0, 8005c30 <_printf_float+0xd0>
 8005bdc:	2200      	movs	r2, #0
 8005bde:	2300      	movs	r3, #0
 8005be0:	4640      	mov	r0, r8
 8005be2:	4649      	mov	r1, r9
 8005be4:	f7fa ff82 	bl	8000aec <__aeabi_dcmplt>
 8005be8:	b110      	cbz	r0, 8005bf0 <_printf_float+0x90>
 8005bea:	232d      	movs	r3, #45	; 0x2d
 8005bec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bf0:	4b93      	ldr	r3, [pc, #588]	; (8005e40 <_printf_float+0x2e0>)
 8005bf2:	4894      	ldr	r0, [pc, #592]	; (8005e44 <_printf_float+0x2e4>)
 8005bf4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005bf8:	bf94      	ite	ls
 8005bfa:	4698      	movls	r8, r3
 8005bfc:	4680      	movhi	r8, r0
 8005bfe:	2303      	movs	r3, #3
 8005c00:	6123      	str	r3, [r4, #16]
 8005c02:	9b05      	ldr	r3, [sp, #20]
 8005c04:	f023 0204 	bic.w	r2, r3, #4
 8005c08:	6022      	str	r2, [r4, #0]
 8005c0a:	f04f 0900 	mov.w	r9, #0
 8005c0e:	9700      	str	r7, [sp, #0]
 8005c10:	4633      	mov	r3, r6
 8005c12:	aa0b      	add	r2, sp, #44	; 0x2c
 8005c14:	4621      	mov	r1, r4
 8005c16:	4628      	mov	r0, r5
 8005c18:	f000 f9d8 	bl	8005fcc <_printf_common>
 8005c1c:	3001      	adds	r0, #1
 8005c1e:	f040 8090 	bne.w	8005d42 <_printf_float+0x1e2>
 8005c22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c26:	b00d      	add	sp, #52	; 0x34
 8005c28:	ecbd 8b02 	vpop	{d8}
 8005c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c30:	4642      	mov	r2, r8
 8005c32:	464b      	mov	r3, r9
 8005c34:	4640      	mov	r0, r8
 8005c36:	4649      	mov	r1, r9
 8005c38:	f7fa ff80 	bl	8000b3c <__aeabi_dcmpun>
 8005c3c:	b140      	cbz	r0, 8005c50 <_printf_float+0xf0>
 8005c3e:	464b      	mov	r3, r9
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	bfbc      	itt	lt
 8005c44:	232d      	movlt	r3, #45	; 0x2d
 8005c46:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005c4a:	487f      	ldr	r0, [pc, #508]	; (8005e48 <_printf_float+0x2e8>)
 8005c4c:	4b7f      	ldr	r3, [pc, #508]	; (8005e4c <_printf_float+0x2ec>)
 8005c4e:	e7d1      	b.n	8005bf4 <_printf_float+0x94>
 8005c50:	6863      	ldr	r3, [r4, #4]
 8005c52:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005c56:	9206      	str	r2, [sp, #24]
 8005c58:	1c5a      	adds	r2, r3, #1
 8005c5a:	d13f      	bne.n	8005cdc <_printf_float+0x17c>
 8005c5c:	2306      	movs	r3, #6
 8005c5e:	6063      	str	r3, [r4, #4]
 8005c60:	9b05      	ldr	r3, [sp, #20]
 8005c62:	6861      	ldr	r1, [r4, #4]
 8005c64:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005c68:	2300      	movs	r3, #0
 8005c6a:	9303      	str	r3, [sp, #12]
 8005c6c:	ab0a      	add	r3, sp, #40	; 0x28
 8005c6e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005c72:	ab09      	add	r3, sp, #36	; 0x24
 8005c74:	ec49 8b10 	vmov	d0, r8, r9
 8005c78:	9300      	str	r3, [sp, #0]
 8005c7a:	6022      	str	r2, [r4, #0]
 8005c7c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005c80:	4628      	mov	r0, r5
 8005c82:	f7ff fecd 	bl	8005a20 <__cvt>
 8005c86:	9b06      	ldr	r3, [sp, #24]
 8005c88:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005c8a:	2b47      	cmp	r3, #71	; 0x47
 8005c8c:	4680      	mov	r8, r0
 8005c8e:	d108      	bne.n	8005ca2 <_printf_float+0x142>
 8005c90:	1cc8      	adds	r0, r1, #3
 8005c92:	db02      	blt.n	8005c9a <_printf_float+0x13a>
 8005c94:	6863      	ldr	r3, [r4, #4]
 8005c96:	4299      	cmp	r1, r3
 8005c98:	dd41      	ble.n	8005d1e <_printf_float+0x1be>
 8005c9a:	f1ab 0b02 	sub.w	fp, fp, #2
 8005c9e:	fa5f fb8b 	uxtb.w	fp, fp
 8005ca2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005ca6:	d820      	bhi.n	8005cea <_printf_float+0x18a>
 8005ca8:	3901      	subs	r1, #1
 8005caa:	465a      	mov	r2, fp
 8005cac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005cb0:	9109      	str	r1, [sp, #36]	; 0x24
 8005cb2:	f7ff ff17 	bl	8005ae4 <__exponent>
 8005cb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005cb8:	1813      	adds	r3, r2, r0
 8005cba:	2a01      	cmp	r2, #1
 8005cbc:	4681      	mov	r9, r0
 8005cbe:	6123      	str	r3, [r4, #16]
 8005cc0:	dc02      	bgt.n	8005cc8 <_printf_float+0x168>
 8005cc2:	6822      	ldr	r2, [r4, #0]
 8005cc4:	07d2      	lsls	r2, r2, #31
 8005cc6:	d501      	bpl.n	8005ccc <_printf_float+0x16c>
 8005cc8:	3301      	adds	r3, #1
 8005cca:	6123      	str	r3, [r4, #16]
 8005ccc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d09c      	beq.n	8005c0e <_printf_float+0xae>
 8005cd4:	232d      	movs	r3, #45	; 0x2d
 8005cd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cda:	e798      	b.n	8005c0e <_printf_float+0xae>
 8005cdc:	9a06      	ldr	r2, [sp, #24]
 8005cde:	2a47      	cmp	r2, #71	; 0x47
 8005ce0:	d1be      	bne.n	8005c60 <_printf_float+0x100>
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d1bc      	bne.n	8005c60 <_printf_float+0x100>
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e7b9      	b.n	8005c5e <_printf_float+0xfe>
 8005cea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005cee:	d118      	bne.n	8005d22 <_printf_float+0x1c2>
 8005cf0:	2900      	cmp	r1, #0
 8005cf2:	6863      	ldr	r3, [r4, #4]
 8005cf4:	dd0b      	ble.n	8005d0e <_printf_float+0x1ae>
 8005cf6:	6121      	str	r1, [r4, #16]
 8005cf8:	b913      	cbnz	r3, 8005d00 <_printf_float+0x1a0>
 8005cfa:	6822      	ldr	r2, [r4, #0]
 8005cfc:	07d0      	lsls	r0, r2, #31
 8005cfe:	d502      	bpl.n	8005d06 <_printf_float+0x1a6>
 8005d00:	3301      	adds	r3, #1
 8005d02:	440b      	add	r3, r1
 8005d04:	6123      	str	r3, [r4, #16]
 8005d06:	65a1      	str	r1, [r4, #88]	; 0x58
 8005d08:	f04f 0900 	mov.w	r9, #0
 8005d0c:	e7de      	b.n	8005ccc <_printf_float+0x16c>
 8005d0e:	b913      	cbnz	r3, 8005d16 <_printf_float+0x1b6>
 8005d10:	6822      	ldr	r2, [r4, #0]
 8005d12:	07d2      	lsls	r2, r2, #31
 8005d14:	d501      	bpl.n	8005d1a <_printf_float+0x1ba>
 8005d16:	3302      	adds	r3, #2
 8005d18:	e7f4      	b.n	8005d04 <_printf_float+0x1a4>
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e7f2      	b.n	8005d04 <_printf_float+0x1a4>
 8005d1e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005d22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d24:	4299      	cmp	r1, r3
 8005d26:	db05      	blt.n	8005d34 <_printf_float+0x1d4>
 8005d28:	6823      	ldr	r3, [r4, #0]
 8005d2a:	6121      	str	r1, [r4, #16]
 8005d2c:	07d8      	lsls	r0, r3, #31
 8005d2e:	d5ea      	bpl.n	8005d06 <_printf_float+0x1a6>
 8005d30:	1c4b      	adds	r3, r1, #1
 8005d32:	e7e7      	b.n	8005d04 <_printf_float+0x1a4>
 8005d34:	2900      	cmp	r1, #0
 8005d36:	bfd4      	ite	le
 8005d38:	f1c1 0202 	rsble	r2, r1, #2
 8005d3c:	2201      	movgt	r2, #1
 8005d3e:	4413      	add	r3, r2
 8005d40:	e7e0      	b.n	8005d04 <_printf_float+0x1a4>
 8005d42:	6823      	ldr	r3, [r4, #0]
 8005d44:	055a      	lsls	r2, r3, #21
 8005d46:	d407      	bmi.n	8005d58 <_printf_float+0x1f8>
 8005d48:	6923      	ldr	r3, [r4, #16]
 8005d4a:	4642      	mov	r2, r8
 8005d4c:	4631      	mov	r1, r6
 8005d4e:	4628      	mov	r0, r5
 8005d50:	47b8      	blx	r7
 8005d52:	3001      	adds	r0, #1
 8005d54:	d12c      	bne.n	8005db0 <_printf_float+0x250>
 8005d56:	e764      	b.n	8005c22 <_printf_float+0xc2>
 8005d58:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005d5c:	f240 80e0 	bls.w	8005f20 <_printf_float+0x3c0>
 8005d60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005d64:	2200      	movs	r2, #0
 8005d66:	2300      	movs	r3, #0
 8005d68:	f7fa feb6 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d6c:	2800      	cmp	r0, #0
 8005d6e:	d034      	beq.n	8005dda <_printf_float+0x27a>
 8005d70:	4a37      	ldr	r2, [pc, #220]	; (8005e50 <_printf_float+0x2f0>)
 8005d72:	2301      	movs	r3, #1
 8005d74:	4631      	mov	r1, r6
 8005d76:	4628      	mov	r0, r5
 8005d78:	47b8      	blx	r7
 8005d7a:	3001      	adds	r0, #1
 8005d7c:	f43f af51 	beq.w	8005c22 <_printf_float+0xc2>
 8005d80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d84:	429a      	cmp	r2, r3
 8005d86:	db02      	blt.n	8005d8e <_printf_float+0x22e>
 8005d88:	6823      	ldr	r3, [r4, #0]
 8005d8a:	07d8      	lsls	r0, r3, #31
 8005d8c:	d510      	bpl.n	8005db0 <_printf_float+0x250>
 8005d8e:	ee18 3a10 	vmov	r3, s16
 8005d92:	4652      	mov	r2, sl
 8005d94:	4631      	mov	r1, r6
 8005d96:	4628      	mov	r0, r5
 8005d98:	47b8      	blx	r7
 8005d9a:	3001      	adds	r0, #1
 8005d9c:	f43f af41 	beq.w	8005c22 <_printf_float+0xc2>
 8005da0:	f04f 0800 	mov.w	r8, #0
 8005da4:	f104 091a 	add.w	r9, r4, #26
 8005da8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005daa:	3b01      	subs	r3, #1
 8005dac:	4543      	cmp	r3, r8
 8005dae:	dc09      	bgt.n	8005dc4 <_printf_float+0x264>
 8005db0:	6823      	ldr	r3, [r4, #0]
 8005db2:	079b      	lsls	r3, r3, #30
 8005db4:	f100 8105 	bmi.w	8005fc2 <_printf_float+0x462>
 8005db8:	68e0      	ldr	r0, [r4, #12]
 8005dba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005dbc:	4298      	cmp	r0, r3
 8005dbe:	bfb8      	it	lt
 8005dc0:	4618      	movlt	r0, r3
 8005dc2:	e730      	b.n	8005c26 <_printf_float+0xc6>
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	464a      	mov	r2, r9
 8005dc8:	4631      	mov	r1, r6
 8005dca:	4628      	mov	r0, r5
 8005dcc:	47b8      	blx	r7
 8005dce:	3001      	adds	r0, #1
 8005dd0:	f43f af27 	beq.w	8005c22 <_printf_float+0xc2>
 8005dd4:	f108 0801 	add.w	r8, r8, #1
 8005dd8:	e7e6      	b.n	8005da8 <_printf_float+0x248>
 8005dda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	dc39      	bgt.n	8005e54 <_printf_float+0x2f4>
 8005de0:	4a1b      	ldr	r2, [pc, #108]	; (8005e50 <_printf_float+0x2f0>)
 8005de2:	2301      	movs	r3, #1
 8005de4:	4631      	mov	r1, r6
 8005de6:	4628      	mov	r0, r5
 8005de8:	47b8      	blx	r7
 8005dea:	3001      	adds	r0, #1
 8005dec:	f43f af19 	beq.w	8005c22 <_printf_float+0xc2>
 8005df0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005df4:	4313      	orrs	r3, r2
 8005df6:	d102      	bne.n	8005dfe <_printf_float+0x29e>
 8005df8:	6823      	ldr	r3, [r4, #0]
 8005dfa:	07d9      	lsls	r1, r3, #31
 8005dfc:	d5d8      	bpl.n	8005db0 <_printf_float+0x250>
 8005dfe:	ee18 3a10 	vmov	r3, s16
 8005e02:	4652      	mov	r2, sl
 8005e04:	4631      	mov	r1, r6
 8005e06:	4628      	mov	r0, r5
 8005e08:	47b8      	blx	r7
 8005e0a:	3001      	adds	r0, #1
 8005e0c:	f43f af09 	beq.w	8005c22 <_printf_float+0xc2>
 8005e10:	f04f 0900 	mov.w	r9, #0
 8005e14:	f104 0a1a 	add.w	sl, r4, #26
 8005e18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e1a:	425b      	negs	r3, r3
 8005e1c:	454b      	cmp	r3, r9
 8005e1e:	dc01      	bgt.n	8005e24 <_printf_float+0x2c4>
 8005e20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e22:	e792      	b.n	8005d4a <_printf_float+0x1ea>
 8005e24:	2301      	movs	r3, #1
 8005e26:	4652      	mov	r2, sl
 8005e28:	4631      	mov	r1, r6
 8005e2a:	4628      	mov	r0, r5
 8005e2c:	47b8      	blx	r7
 8005e2e:	3001      	adds	r0, #1
 8005e30:	f43f aef7 	beq.w	8005c22 <_printf_float+0xc2>
 8005e34:	f109 0901 	add.w	r9, r9, #1
 8005e38:	e7ee      	b.n	8005e18 <_printf_float+0x2b8>
 8005e3a:	bf00      	nop
 8005e3c:	7fefffff 	.word	0x7fefffff
 8005e40:	080088b8 	.word	0x080088b8
 8005e44:	080088bc 	.word	0x080088bc
 8005e48:	080088c4 	.word	0x080088c4
 8005e4c:	080088c0 	.word	0x080088c0
 8005e50:	080088c8 	.word	0x080088c8
 8005e54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	bfa8      	it	ge
 8005e5c:	461a      	movge	r2, r3
 8005e5e:	2a00      	cmp	r2, #0
 8005e60:	4691      	mov	r9, r2
 8005e62:	dc37      	bgt.n	8005ed4 <_printf_float+0x374>
 8005e64:	f04f 0b00 	mov.w	fp, #0
 8005e68:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e6c:	f104 021a 	add.w	r2, r4, #26
 8005e70:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005e72:	9305      	str	r3, [sp, #20]
 8005e74:	eba3 0309 	sub.w	r3, r3, r9
 8005e78:	455b      	cmp	r3, fp
 8005e7a:	dc33      	bgt.n	8005ee4 <_printf_float+0x384>
 8005e7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e80:	429a      	cmp	r2, r3
 8005e82:	db3b      	blt.n	8005efc <_printf_float+0x39c>
 8005e84:	6823      	ldr	r3, [r4, #0]
 8005e86:	07da      	lsls	r2, r3, #31
 8005e88:	d438      	bmi.n	8005efc <_printf_float+0x39c>
 8005e8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e8c:	9b05      	ldr	r3, [sp, #20]
 8005e8e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	eba2 0901 	sub.w	r9, r2, r1
 8005e96:	4599      	cmp	r9, r3
 8005e98:	bfa8      	it	ge
 8005e9a:	4699      	movge	r9, r3
 8005e9c:	f1b9 0f00 	cmp.w	r9, #0
 8005ea0:	dc35      	bgt.n	8005f0e <_printf_float+0x3ae>
 8005ea2:	f04f 0800 	mov.w	r8, #0
 8005ea6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005eaa:	f104 0a1a 	add.w	sl, r4, #26
 8005eae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005eb2:	1a9b      	subs	r3, r3, r2
 8005eb4:	eba3 0309 	sub.w	r3, r3, r9
 8005eb8:	4543      	cmp	r3, r8
 8005eba:	f77f af79 	ble.w	8005db0 <_printf_float+0x250>
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	4652      	mov	r2, sl
 8005ec2:	4631      	mov	r1, r6
 8005ec4:	4628      	mov	r0, r5
 8005ec6:	47b8      	blx	r7
 8005ec8:	3001      	adds	r0, #1
 8005eca:	f43f aeaa 	beq.w	8005c22 <_printf_float+0xc2>
 8005ece:	f108 0801 	add.w	r8, r8, #1
 8005ed2:	e7ec      	b.n	8005eae <_printf_float+0x34e>
 8005ed4:	4613      	mov	r3, r2
 8005ed6:	4631      	mov	r1, r6
 8005ed8:	4642      	mov	r2, r8
 8005eda:	4628      	mov	r0, r5
 8005edc:	47b8      	blx	r7
 8005ede:	3001      	adds	r0, #1
 8005ee0:	d1c0      	bne.n	8005e64 <_printf_float+0x304>
 8005ee2:	e69e      	b.n	8005c22 <_printf_float+0xc2>
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	4631      	mov	r1, r6
 8005ee8:	4628      	mov	r0, r5
 8005eea:	9205      	str	r2, [sp, #20]
 8005eec:	47b8      	blx	r7
 8005eee:	3001      	adds	r0, #1
 8005ef0:	f43f ae97 	beq.w	8005c22 <_printf_float+0xc2>
 8005ef4:	9a05      	ldr	r2, [sp, #20]
 8005ef6:	f10b 0b01 	add.w	fp, fp, #1
 8005efa:	e7b9      	b.n	8005e70 <_printf_float+0x310>
 8005efc:	ee18 3a10 	vmov	r3, s16
 8005f00:	4652      	mov	r2, sl
 8005f02:	4631      	mov	r1, r6
 8005f04:	4628      	mov	r0, r5
 8005f06:	47b8      	blx	r7
 8005f08:	3001      	adds	r0, #1
 8005f0a:	d1be      	bne.n	8005e8a <_printf_float+0x32a>
 8005f0c:	e689      	b.n	8005c22 <_printf_float+0xc2>
 8005f0e:	9a05      	ldr	r2, [sp, #20]
 8005f10:	464b      	mov	r3, r9
 8005f12:	4442      	add	r2, r8
 8005f14:	4631      	mov	r1, r6
 8005f16:	4628      	mov	r0, r5
 8005f18:	47b8      	blx	r7
 8005f1a:	3001      	adds	r0, #1
 8005f1c:	d1c1      	bne.n	8005ea2 <_printf_float+0x342>
 8005f1e:	e680      	b.n	8005c22 <_printf_float+0xc2>
 8005f20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f22:	2a01      	cmp	r2, #1
 8005f24:	dc01      	bgt.n	8005f2a <_printf_float+0x3ca>
 8005f26:	07db      	lsls	r3, r3, #31
 8005f28:	d538      	bpl.n	8005f9c <_printf_float+0x43c>
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	4642      	mov	r2, r8
 8005f2e:	4631      	mov	r1, r6
 8005f30:	4628      	mov	r0, r5
 8005f32:	47b8      	blx	r7
 8005f34:	3001      	adds	r0, #1
 8005f36:	f43f ae74 	beq.w	8005c22 <_printf_float+0xc2>
 8005f3a:	ee18 3a10 	vmov	r3, s16
 8005f3e:	4652      	mov	r2, sl
 8005f40:	4631      	mov	r1, r6
 8005f42:	4628      	mov	r0, r5
 8005f44:	47b8      	blx	r7
 8005f46:	3001      	adds	r0, #1
 8005f48:	f43f ae6b 	beq.w	8005c22 <_printf_float+0xc2>
 8005f4c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005f50:	2200      	movs	r2, #0
 8005f52:	2300      	movs	r3, #0
 8005f54:	f7fa fdc0 	bl	8000ad8 <__aeabi_dcmpeq>
 8005f58:	b9d8      	cbnz	r0, 8005f92 <_printf_float+0x432>
 8005f5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f5c:	f108 0201 	add.w	r2, r8, #1
 8005f60:	3b01      	subs	r3, #1
 8005f62:	4631      	mov	r1, r6
 8005f64:	4628      	mov	r0, r5
 8005f66:	47b8      	blx	r7
 8005f68:	3001      	adds	r0, #1
 8005f6a:	d10e      	bne.n	8005f8a <_printf_float+0x42a>
 8005f6c:	e659      	b.n	8005c22 <_printf_float+0xc2>
 8005f6e:	2301      	movs	r3, #1
 8005f70:	4652      	mov	r2, sl
 8005f72:	4631      	mov	r1, r6
 8005f74:	4628      	mov	r0, r5
 8005f76:	47b8      	blx	r7
 8005f78:	3001      	adds	r0, #1
 8005f7a:	f43f ae52 	beq.w	8005c22 <_printf_float+0xc2>
 8005f7e:	f108 0801 	add.w	r8, r8, #1
 8005f82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f84:	3b01      	subs	r3, #1
 8005f86:	4543      	cmp	r3, r8
 8005f88:	dcf1      	bgt.n	8005f6e <_printf_float+0x40e>
 8005f8a:	464b      	mov	r3, r9
 8005f8c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005f90:	e6dc      	b.n	8005d4c <_printf_float+0x1ec>
 8005f92:	f04f 0800 	mov.w	r8, #0
 8005f96:	f104 0a1a 	add.w	sl, r4, #26
 8005f9a:	e7f2      	b.n	8005f82 <_printf_float+0x422>
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	4642      	mov	r2, r8
 8005fa0:	e7df      	b.n	8005f62 <_printf_float+0x402>
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	464a      	mov	r2, r9
 8005fa6:	4631      	mov	r1, r6
 8005fa8:	4628      	mov	r0, r5
 8005faa:	47b8      	blx	r7
 8005fac:	3001      	adds	r0, #1
 8005fae:	f43f ae38 	beq.w	8005c22 <_printf_float+0xc2>
 8005fb2:	f108 0801 	add.w	r8, r8, #1
 8005fb6:	68e3      	ldr	r3, [r4, #12]
 8005fb8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005fba:	1a5b      	subs	r3, r3, r1
 8005fbc:	4543      	cmp	r3, r8
 8005fbe:	dcf0      	bgt.n	8005fa2 <_printf_float+0x442>
 8005fc0:	e6fa      	b.n	8005db8 <_printf_float+0x258>
 8005fc2:	f04f 0800 	mov.w	r8, #0
 8005fc6:	f104 0919 	add.w	r9, r4, #25
 8005fca:	e7f4      	b.n	8005fb6 <_printf_float+0x456>

08005fcc <_printf_common>:
 8005fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fd0:	4616      	mov	r6, r2
 8005fd2:	4699      	mov	r9, r3
 8005fd4:	688a      	ldr	r2, [r1, #8]
 8005fd6:	690b      	ldr	r3, [r1, #16]
 8005fd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	bfb8      	it	lt
 8005fe0:	4613      	movlt	r3, r2
 8005fe2:	6033      	str	r3, [r6, #0]
 8005fe4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005fe8:	4607      	mov	r7, r0
 8005fea:	460c      	mov	r4, r1
 8005fec:	b10a      	cbz	r2, 8005ff2 <_printf_common+0x26>
 8005fee:	3301      	adds	r3, #1
 8005ff0:	6033      	str	r3, [r6, #0]
 8005ff2:	6823      	ldr	r3, [r4, #0]
 8005ff4:	0699      	lsls	r1, r3, #26
 8005ff6:	bf42      	ittt	mi
 8005ff8:	6833      	ldrmi	r3, [r6, #0]
 8005ffa:	3302      	addmi	r3, #2
 8005ffc:	6033      	strmi	r3, [r6, #0]
 8005ffe:	6825      	ldr	r5, [r4, #0]
 8006000:	f015 0506 	ands.w	r5, r5, #6
 8006004:	d106      	bne.n	8006014 <_printf_common+0x48>
 8006006:	f104 0a19 	add.w	sl, r4, #25
 800600a:	68e3      	ldr	r3, [r4, #12]
 800600c:	6832      	ldr	r2, [r6, #0]
 800600e:	1a9b      	subs	r3, r3, r2
 8006010:	42ab      	cmp	r3, r5
 8006012:	dc26      	bgt.n	8006062 <_printf_common+0x96>
 8006014:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006018:	1e13      	subs	r3, r2, #0
 800601a:	6822      	ldr	r2, [r4, #0]
 800601c:	bf18      	it	ne
 800601e:	2301      	movne	r3, #1
 8006020:	0692      	lsls	r2, r2, #26
 8006022:	d42b      	bmi.n	800607c <_printf_common+0xb0>
 8006024:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006028:	4649      	mov	r1, r9
 800602a:	4638      	mov	r0, r7
 800602c:	47c0      	blx	r8
 800602e:	3001      	adds	r0, #1
 8006030:	d01e      	beq.n	8006070 <_printf_common+0xa4>
 8006032:	6823      	ldr	r3, [r4, #0]
 8006034:	68e5      	ldr	r5, [r4, #12]
 8006036:	6832      	ldr	r2, [r6, #0]
 8006038:	f003 0306 	and.w	r3, r3, #6
 800603c:	2b04      	cmp	r3, #4
 800603e:	bf08      	it	eq
 8006040:	1aad      	subeq	r5, r5, r2
 8006042:	68a3      	ldr	r3, [r4, #8]
 8006044:	6922      	ldr	r2, [r4, #16]
 8006046:	bf0c      	ite	eq
 8006048:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800604c:	2500      	movne	r5, #0
 800604e:	4293      	cmp	r3, r2
 8006050:	bfc4      	itt	gt
 8006052:	1a9b      	subgt	r3, r3, r2
 8006054:	18ed      	addgt	r5, r5, r3
 8006056:	2600      	movs	r6, #0
 8006058:	341a      	adds	r4, #26
 800605a:	42b5      	cmp	r5, r6
 800605c:	d11a      	bne.n	8006094 <_printf_common+0xc8>
 800605e:	2000      	movs	r0, #0
 8006060:	e008      	b.n	8006074 <_printf_common+0xa8>
 8006062:	2301      	movs	r3, #1
 8006064:	4652      	mov	r2, sl
 8006066:	4649      	mov	r1, r9
 8006068:	4638      	mov	r0, r7
 800606a:	47c0      	blx	r8
 800606c:	3001      	adds	r0, #1
 800606e:	d103      	bne.n	8006078 <_printf_common+0xac>
 8006070:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006078:	3501      	adds	r5, #1
 800607a:	e7c6      	b.n	800600a <_printf_common+0x3e>
 800607c:	18e1      	adds	r1, r4, r3
 800607e:	1c5a      	adds	r2, r3, #1
 8006080:	2030      	movs	r0, #48	; 0x30
 8006082:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006086:	4422      	add	r2, r4
 8006088:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800608c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006090:	3302      	adds	r3, #2
 8006092:	e7c7      	b.n	8006024 <_printf_common+0x58>
 8006094:	2301      	movs	r3, #1
 8006096:	4622      	mov	r2, r4
 8006098:	4649      	mov	r1, r9
 800609a:	4638      	mov	r0, r7
 800609c:	47c0      	blx	r8
 800609e:	3001      	adds	r0, #1
 80060a0:	d0e6      	beq.n	8006070 <_printf_common+0xa4>
 80060a2:	3601      	adds	r6, #1
 80060a4:	e7d9      	b.n	800605a <_printf_common+0x8e>
	...

080060a8 <_printf_i>:
 80060a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060ac:	460c      	mov	r4, r1
 80060ae:	4691      	mov	r9, r2
 80060b0:	7e27      	ldrb	r7, [r4, #24]
 80060b2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80060b4:	2f78      	cmp	r7, #120	; 0x78
 80060b6:	4680      	mov	r8, r0
 80060b8:	469a      	mov	sl, r3
 80060ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060be:	d807      	bhi.n	80060d0 <_printf_i+0x28>
 80060c0:	2f62      	cmp	r7, #98	; 0x62
 80060c2:	d80a      	bhi.n	80060da <_printf_i+0x32>
 80060c4:	2f00      	cmp	r7, #0
 80060c6:	f000 80d8 	beq.w	800627a <_printf_i+0x1d2>
 80060ca:	2f58      	cmp	r7, #88	; 0x58
 80060cc:	f000 80a3 	beq.w	8006216 <_printf_i+0x16e>
 80060d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80060d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80060d8:	e03a      	b.n	8006150 <_printf_i+0xa8>
 80060da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80060de:	2b15      	cmp	r3, #21
 80060e0:	d8f6      	bhi.n	80060d0 <_printf_i+0x28>
 80060e2:	a001      	add	r0, pc, #4	; (adr r0, 80060e8 <_printf_i+0x40>)
 80060e4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80060e8:	08006141 	.word	0x08006141
 80060ec:	08006155 	.word	0x08006155
 80060f0:	080060d1 	.word	0x080060d1
 80060f4:	080060d1 	.word	0x080060d1
 80060f8:	080060d1 	.word	0x080060d1
 80060fc:	080060d1 	.word	0x080060d1
 8006100:	08006155 	.word	0x08006155
 8006104:	080060d1 	.word	0x080060d1
 8006108:	080060d1 	.word	0x080060d1
 800610c:	080060d1 	.word	0x080060d1
 8006110:	080060d1 	.word	0x080060d1
 8006114:	08006261 	.word	0x08006261
 8006118:	08006185 	.word	0x08006185
 800611c:	08006243 	.word	0x08006243
 8006120:	080060d1 	.word	0x080060d1
 8006124:	080060d1 	.word	0x080060d1
 8006128:	08006283 	.word	0x08006283
 800612c:	080060d1 	.word	0x080060d1
 8006130:	08006185 	.word	0x08006185
 8006134:	080060d1 	.word	0x080060d1
 8006138:	080060d1 	.word	0x080060d1
 800613c:	0800624b 	.word	0x0800624b
 8006140:	680b      	ldr	r3, [r1, #0]
 8006142:	1d1a      	adds	r2, r3, #4
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	600a      	str	r2, [r1, #0]
 8006148:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800614c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006150:	2301      	movs	r3, #1
 8006152:	e0a3      	b.n	800629c <_printf_i+0x1f4>
 8006154:	6825      	ldr	r5, [r4, #0]
 8006156:	6808      	ldr	r0, [r1, #0]
 8006158:	062e      	lsls	r6, r5, #24
 800615a:	f100 0304 	add.w	r3, r0, #4
 800615e:	d50a      	bpl.n	8006176 <_printf_i+0xce>
 8006160:	6805      	ldr	r5, [r0, #0]
 8006162:	600b      	str	r3, [r1, #0]
 8006164:	2d00      	cmp	r5, #0
 8006166:	da03      	bge.n	8006170 <_printf_i+0xc8>
 8006168:	232d      	movs	r3, #45	; 0x2d
 800616a:	426d      	negs	r5, r5
 800616c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006170:	485e      	ldr	r0, [pc, #376]	; (80062ec <_printf_i+0x244>)
 8006172:	230a      	movs	r3, #10
 8006174:	e019      	b.n	80061aa <_printf_i+0x102>
 8006176:	f015 0f40 	tst.w	r5, #64	; 0x40
 800617a:	6805      	ldr	r5, [r0, #0]
 800617c:	600b      	str	r3, [r1, #0]
 800617e:	bf18      	it	ne
 8006180:	b22d      	sxthne	r5, r5
 8006182:	e7ef      	b.n	8006164 <_printf_i+0xbc>
 8006184:	680b      	ldr	r3, [r1, #0]
 8006186:	6825      	ldr	r5, [r4, #0]
 8006188:	1d18      	adds	r0, r3, #4
 800618a:	6008      	str	r0, [r1, #0]
 800618c:	0628      	lsls	r0, r5, #24
 800618e:	d501      	bpl.n	8006194 <_printf_i+0xec>
 8006190:	681d      	ldr	r5, [r3, #0]
 8006192:	e002      	b.n	800619a <_printf_i+0xf2>
 8006194:	0669      	lsls	r1, r5, #25
 8006196:	d5fb      	bpl.n	8006190 <_printf_i+0xe8>
 8006198:	881d      	ldrh	r5, [r3, #0]
 800619a:	4854      	ldr	r0, [pc, #336]	; (80062ec <_printf_i+0x244>)
 800619c:	2f6f      	cmp	r7, #111	; 0x6f
 800619e:	bf0c      	ite	eq
 80061a0:	2308      	moveq	r3, #8
 80061a2:	230a      	movne	r3, #10
 80061a4:	2100      	movs	r1, #0
 80061a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80061aa:	6866      	ldr	r6, [r4, #4]
 80061ac:	60a6      	str	r6, [r4, #8]
 80061ae:	2e00      	cmp	r6, #0
 80061b0:	bfa2      	ittt	ge
 80061b2:	6821      	ldrge	r1, [r4, #0]
 80061b4:	f021 0104 	bicge.w	r1, r1, #4
 80061b8:	6021      	strge	r1, [r4, #0]
 80061ba:	b90d      	cbnz	r5, 80061c0 <_printf_i+0x118>
 80061bc:	2e00      	cmp	r6, #0
 80061be:	d04d      	beq.n	800625c <_printf_i+0x1b4>
 80061c0:	4616      	mov	r6, r2
 80061c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80061c6:	fb03 5711 	mls	r7, r3, r1, r5
 80061ca:	5dc7      	ldrb	r7, [r0, r7]
 80061cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80061d0:	462f      	mov	r7, r5
 80061d2:	42bb      	cmp	r3, r7
 80061d4:	460d      	mov	r5, r1
 80061d6:	d9f4      	bls.n	80061c2 <_printf_i+0x11a>
 80061d8:	2b08      	cmp	r3, #8
 80061da:	d10b      	bne.n	80061f4 <_printf_i+0x14c>
 80061dc:	6823      	ldr	r3, [r4, #0]
 80061de:	07df      	lsls	r7, r3, #31
 80061e0:	d508      	bpl.n	80061f4 <_printf_i+0x14c>
 80061e2:	6923      	ldr	r3, [r4, #16]
 80061e4:	6861      	ldr	r1, [r4, #4]
 80061e6:	4299      	cmp	r1, r3
 80061e8:	bfde      	ittt	le
 80061ea:	2330      	movle	r3, #48	; 0x30
 80061ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80061f0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80061f4:	1b92      	subs	r2, r2, r6
 80061f6:	6122      	str	r2, [r4, #16]
 80061f8:	f8cd a000 	str.w	sl, [sp]
 80061fc:	464b      	mov	r3, r9
 80061fe:	aa03      	add	r2, sp, #12
 8006200:	4621      	mov	r1, r4
 8006202:	4640      	mov	r0, r8
 8006204:	f7ff fee2 	bl	8005fcc <_printf_common>
 8006208:	3001      	adds	r0, #1
 800620a:	d14c      	bne.n	80062a6 <_printf_i+0x1fe>
 800620c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006210:	b004      	add	sp, #16
 8006212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006216:	4835      	ldr	r0, [pc, #212]	; (80062ec <_printf_i+0x244>)
 8006218:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800621c:	6823      	ldr	r3, [r4, #0]
 800621e:	680e      	ldr	r6, [r1, #0]
 8006220:	061f      	lsls	r7, r3, #24
 8006222:	f856 5b04 	ldr.w	r5, [r6], #4
 8006226:	600e      	str	r6, [r1, #0]
 8006228:	d514      	bpl.n	8006254 <_printf_i+0x1ac>
 800622a:	07d9      	lsls	r1, r3, #31
 800622c:	bf44      	itt	mi
 800622e:	f043 0320 	orrmi.w	r3, r3, #32
 8006232:	6023      	strmi	r3, [r4, #0]
 8006234:	b91d      	cbnz	r5, 800623e <_printf_i+0x196>
 8006236:	6823      	ldr	r3, [r4, #0]
 8006238:	f023 0320 	bic.w	r3, r3, #32
 800623c:	6023      	str	r3, [r4, #0]
 800623e:	2310      	movs	r3, #16
 8006240:	e7b0      	b.n	80061a4 <_printf_i+0xfc>
 8006242:	6823      	ldr	r3, [r4, #0]
 8006244:	f043 0320 	orr.w	r3, r3, #32
 8006248:	6023      	str	r3, [r4, #0]
 800624a:	2378      	movs	r3, #120	; 0x78
 800624c:	4828      	ldr	r0, [pc, #160]	; (80062f0 <_printf_i+0x248>)
 800624e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006252:	e7e3      	b.n	800621c <_printf_i+0x174>
 8006254:	065e      	lsls	r6, r3, #25
 8006256:	bf48      	it	mi
 8006258:	b2ad      	uxthmi	r5, r5
 800625a:	e7e6      	b.n	800622a <_printf_i+0x182>
 800625c:	4616      	mov	r6, r2
 800625e:	e7bb      	b.n	80061d8 <_printf_i+0x130>
 8006260:	680b      	ldr	r3, [r1, #0]
 8006262:	6826      	ldr	r6, [r4, #0]
 8006264:	6960      	ldr	r0, [r4, #20]
 8006266:	1d1d      	adds	r5, r3, #4
 8006268:	600d      	str	r5, [r1, #0]
 800626a:	0635      	lsls	r5, r6, #24
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	d501      	bpl.n	8006274 <_printf_i+0x1cc>
 8006270:	6018      	str	r0, [r3, #0]
 8006272:	e002      	b.n	800627a <_printf_i+0x1d2>
 8006274:	0671      	lsls	r1, r6, #25
 8006276:	d5fb      	bpl.n	8006270 <_printf_i+0x1c8>
 8006278:	8018      	strh	r0, [r3, #0]
 800627a:	2300      	movs	r3, #0
 800627c:	6123      	str	r3, [r4, #16]
 800627e:	4616      	mov	r6, r2
 8006280:	e7ba      	b.n	80061f8 <_printf_i+0x150>
 8006282:	680b      	ldr	r3, [r1, #0]
 8006284:	1d1a      	adds	r2, r3, #4
 8006286:	600a      	str	r2, [r1, #0]
 8006288:	681e      	ldr	r6, [r3, #0]
 800628a:	6862      	ldr	r2, [r4, #4]
 800628c:	2100      	movs	r1, #0
 800628e:	4630      	mov	r0, r6
 8006290:	f7f9 ffae 	bl	80001f0 <memchr>
 8006294:	b108      	cbz	r0, 800629a <_printf_i+0x1f2>
 8006296:	1b80      	subs	r0, r0, r6
 8006298:	6060      	str	r0, [r4, #4]
 800629a:	6863      	ldr	r3, [r4, #4]
 800629c:	6123      	str	r3, [r4, #16]
 800629e:	2300      	movs	r3, #0
 80062a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062a4:	e7a8      	b.n	80061f8 <_printf_i+0x150>
 80062a6:	6923      	ldr	r3, [r4, #16]
 80062a8:	4632      	mov	r2, r6
 80062aa:	4649      	mov	r1, r9
 80062ac:	4640      	mov	r0, r8
 80062ae:	47d0      	blx	sl
 80062b0:	3001      	adds	r0, #1
 80062b2:	d0ab      	beq.n	800620c <_printf_i+0x164>
 80062b4:	6823      	ldr	r3, [r4, #0]
 80062b6:	079b      	lsls	r3, r3, #30
 80062b8:	d413      	bmi.n	80062e2 <_printf_i+0x23a>
 80062ba:	68e0      	ldr	r0, [r4, #12]
 80062bc:	9b03      	ldr	r3, [sp, #12]
 80062be:	4298      	cmp	r0, r3
 80062c0:	bfb8      	it	lt
 80062c2:	4618      	movlt	r0, r3
 80062c4:	e7a4      	b.n	8006210 <_printf_i+0x168>
 80062c6:	2301      	movs	r3, #1
 80062c8:	4632      	mov	r2, r6
 80062ca:	4649      	mov	r1, r9
 80062cc:	4640      	mov	r0, r8
 80062ce:	47d0      	blx	sl
 80062d0:	3001      	adds	r0, #1
 80062d2:	d09b      	beq.n	800620c <_printf_i+0x164>
 80062d4:	3501      	adds	r5, #1
 80062d6:	68e3      	ldr	r3, [r4, #12]
 80062d8:	9903      	ldr	r1, [sp, #12]
 80062da:	1a5b      	subs	r3, r3, r1
 80062dc:	42ab      	cmp	r3, r5
 80062de:	dcf2      	bgt.n	80062c6 <_printf_i+0x21e>
 80062e0:	e7eb      	b.n	80062ba <_printf_i+0x212>
 80062e2:	2500      	movs	r5, #0
 80062e4:	f104 0619 	add.w	r6, r4, #25
 80062e8:	e7f5      	b.n	80062d6 <_printf_i+0x22e>
 80062ea:	bf00      	nop
 80062ec:	080088ca 	.word	0x080088ca
 80062f0:	080088db 	.word	0x080088db

080062f4 <rand>:
 80062f4:	4b17      	ldr	r3, [pc, #92]	; (8006354 <rand+0x60>)
 80062f6:	b510      	push	{r4, lr}
 80062f8:	681c      	ldr	r4, [r3, #0]
 80062fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80062fc:	b9b3      	cbnz	r3, 800632c <rand+0x38>
 80062fe:	2018      	movs	r0, #24
 8006300:	f000 ff24 	bl	800714c <malloc>
 8006304:	63a0      	str	r0, [r4, #56]	; 0x38
 8006306:	b928      	cbnz	r0, 8006314 <rand+0x20>
 8006308:	4602      	mov	r2, r0
 800630a:	4b13      	ldr	r3, [pc, #76]	; (8006358 <rand+0x64>)
 800630c:	4813      	ldr	r0, [pc, #76]	; (800635c <rand+0x68>)
 800630e:	214e      	movs	r1, #78	; 0x4e
 8006310:	f000 f870 	bl	80063f4 <__assert_func>
 8006314:	4a12      	ldr	r2, [pc, #72]	; (8006360 <rand+0x6c>)
 8006316:	4b13      	ldr	r3, [pc, #76]	; (8006364 <rand+0x70>)
 8006318:	e9c0 2300 	strd	r2, r3, [r0]
 800631c:	4b12      	ldr	r3, [pc, #72]	; (8006368 <rand+0x74>)
 800631e:	6083      	str	r3, [r0, #8]
 8006320:	230b      	movs	r3, #11
 8006322:	8183      	strh	r3, [r0, #12]
 8006324:	2201      	movs	r2, #1
 8006326:	2300      	movs	r3, #0
 8006328:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800632c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800632e:	480f      	ldr	r0, [pc, #60]	; (800636c <rand+0x78>)
 8006330:	690a      	ldr	r2, [r1, #16]
 8006332:	694b      	ldr	r3, [r1, #20]
 8006334:	4c0e      	ldr	r4, [pc, #56]	; (8006370 <rand+0x7c>)
 8006336:	4350      	muls	r0, r2
 8006338:	fb04 0003 	mla	r0, r4, r3, r0
 800633c:	fba2 3404 	umull	r3, r4, r2, r4
 8006340:	1c5a      	adds	r2, r3, #1
 8006342:	4404      	add	r4, r0
 8006344:	f144 0000 	adc.w	r0, r4, #0
 8006348:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800634c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006350:	bd10      	pop	{r4, pc}
 8006352:	bf00      	nop
 8006354:	20000018 	.word	0x20000018
 8006358:	080088ec 	.word	0x080088ec
 800635c:	08008903 	.word	0x08008903
 8006360:	abcd330e 	.word	0xabcd330e
 8006364:	e66d1234 	.word	0xe66d1234
 8006368:	0005deec 	.word	0x0005deec
 800636c:	5851f42d 	.word	0x5851f42d
 8006370:	4c957f2d 	.word	0x4c957f2d

08006374 <siprintf>:
 8006374:	b40e      	push	{r1, r2, r3}
 8006376:	b500      	push	{lr}
 8006378:	b09c      	sub	sp, #112	; 0x70
 800637a:	ab1d      	add	r3, sp, #116	; 0x74
 800637c:	9002      	str	r0, [sp, #8]
 800637e:	9006      	str	r0, [sp, #24]
 8006380:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006384:	4809      	ldr	r0, [pc, #36]	; (80063ac <siprintf+0x38>)
 8006386:	9107      	str	r1, [sp, #28]
 8006388:	9104      	str	r1, [sp, #16]
 800638a:	4909      	ldr	r1, [pc, #36]	; (80063b0 <siprintf+0x3c>)
 800638c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006390:	9105      	str	r1, [sp, #20]
 8006392:	6800      	ldr	r0, [r0, #0]
 8006394:	9301      	str	r3, [sp, #4]
 8006396:	a902      	add	r1, sp, #8
 8006398:	f001 fb82 	bl	8007aa0 <_svfiprintf_r>
 800639c:	9b02      	ldr	r3, [sp, #8]
 800639e:	2200      	movs	r2, #0
 80063a0:	701a      	strb	r2, [r3, #0]
 80063a2:	b01c      	add	sp, #112	; 0x70
 80063a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80063a8:	b003      	add	sp, #12
 80063aa:	4770      	bx	lr
 80063ac:	20000018 	.word	0x20000018
 80063b0:	ffff0208 	.word	0xffff0208

080063b4 <_vsiprintf_r>:
 80063b4:	b500      	push	{lr}
 80063b6:	b09b      	sub	sp, #108	; 0x6c
 80063b8:	9100      	str	r1, [sp, #0]
 80063ba:	9104      	str	r1, [sp, #16]
 80063bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80063c0:	9105      	str	r1, [sp, #20]
 80063c2:	9102      	str	r1, [sp, #8]
 80063c4:	4905      	ldr	r1, [pc, #20]	; (80063dc <_vsiprintf_r+0x28>)
 80063c6:	9103      	str	r1, [sp, #12]
 80063c8:	4669      	mov	r1, sp
 80063ca:	f001 fb69 	bl	8007aa0 <_svfiprintf_r>
 80063ce:	9b00      	ldr	r3, [sp, #0]
 80063d0:	2200      	movs	r2, #0
 80063d2:	701a      	strb	r2, [r3, #0]
 80063d4:	b01b      	add	sp, #108	; 0x6c
 80063d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80063da:	bf00      	nop
 80063dc:	ffff0208 	.word	0xffff0208

080063e0 <vsiprintf>:
 80063e0:	4613      	mov	r3, r2
 80063e2:	460a      	mov	r2, r1
 80063e4:	4601      	mov	r1, r0
 80063e6:	4802      	ldr	r0, [pc, #8]	; (80063f0 <vsiprintf+0x10>)
 80063e8:	6800      	ldr	r0, [r0, #0]
 80063ea:	f7ff bfe3 	b.w	80063b4 <_vsiprintf_r>
 80063ee:	bf00      	nop
 80063f0:	20000018 	.word	0x20000018

080063f4 <__assert_func>:
 80063f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80063f6:	4614      	mov	r4, r2
 80063f8:	461a      	mov	r2, r3
 80063fa:	4b09      	ldr	r3, [pc, #36]	; (8006420 <__assert_func+0x2c>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4605      	mov	r5, r0
 8006400:	68d8      	ldr	r0, [r3, #12]
 8006402:	b14c      	cbz	r4, 8006418 <__assert_func+0x24>
 8006404:	4b07      	ldr	r3, [pc, #28]	; (8006424 <__assert_func+0x30>)
 8006406:	9100      	str	r1, [sp, #0]
 8006408:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800640c:	4906      	ldr	r1, [pc, #24]	; (8006428 <__assert_func+0x34>)
 800640e:	462b      	mov	r3, r5
 8006410:	f000 fe86 	bl	8007120 <fiprintf>
 8006414:	f001 fe6e 	bl	80080f4 <abort>
 8006418:	4b04      	ldr	r3, [pc, #16]	; (800642c <__assert_func+0x38>)
 800641a:	461c      	mov	r4, r3
 800641c:	e7f3      	b.n	8006406 <__assert_func+0x12>
 800641e:	bf00      	nop
 8006420:	20000018 	.word	0x20000018
 8006424:	08008962 	.word	0x08008962
 8006428:	0800896f 	.word	0x0800896f
 800642c:	0800899d 	.word	0x0800899d

08006430 <quorem>:
 8006430:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006434:	6903      	ldr	r3, [r0, #16]
 8006436:	690c      	ldr	r4, [r1, #16]
 8006438:	42a3      	cmp	r3, r4
 800643a:	4607      	mov	r7, r0
 800643c:	f2c0 8081 	blt.w	8006542 <quorem+0x112>
 8006440:	3c01      	subs	r4, #1
 8006442:	f101 0814 	add.w	r8, r1, #20
 8006446:	f100 0514 	add.w	r5, r0, #20
 800644a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800644e:	9301      	str	r3, [sp, #4]
 8006450:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006454:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006458:	3301      	adds	r3, #1
 800645a:	429a      	cmp	r2, r3
 800645c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006460:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006464:	fbb2 f6f3 	udiv	r6, r2, r3
 8006468:	d331      	bcc.n	80064ce <quorem+0x9e>
 800646a:	f04f 0e00 	mov.w	lr, #0
 800646e:	4640      	mov	r0, r8
 8006470:	46ac      	mov	ip, r5
 8006472:	46f2      	mov	sl, lr
 8006474:	f850 2b04 	ldr.w	r2, [r0], #4
 8006478:	b293      	uxth	r3, r2
 800647a:	fb06 e303 	mla	r3, r6, r3, lr
 800647e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006482:	b29b      	uxth	r3, r3
 8006484:	ebaa 0303 	sub.w	r3, sl, r3
 8006488:	0c12      	lsrs	r2, r2, #16
 800648a:	f8dc a000 	ldr.w	sl, [ip]
 800648e:	fb06 e202 	mla	r2, r6, r2, lr
 8006492:	fa13 f38a 	uxtah	r3, r3, sl
 8006496:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800649a:	fa1f fa82 	uxth.w	sl, r2
 800649e:	f8dc 2000 	ldr.w	r2, [ip]
 80064a2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80064a6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80064b0:	4581      	cmp	r9, r0
 80064b2:	f84c 3b04 	str.w	r3, [ip], #4
 80064b6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80064ba:	d2db      	bcs.n	8006474 <quorem+0x44>
 80064bc:	f855 300b 	ldr.w	r3, [r5, fp]
 80064c0:	b92b      	cbnz	r3, 80064ce <quorem+0x9e>
 80064c2:	9b01      	ldr	r3, [sp, #4]
 80064c4:	3b04      	subs	r3, #4
 80064c6:	429d      	cmp	r5, r3
 80064c8:	461a      	mov	r2, r3
 80064ca:	d32e      	bcc.n	800652a <quorem+0xfa>
 80064cc:	613c      	str	r4, [r7, #16]
 80064ce:	4638      	mov	r0, r7
 80064d0:	f001 f8d0 	bl	8007674 <__mcmp>
 80064d4:	2800      	cmp	r0, #0
 80064d6:	db24      	blt.n	8006522 <quorem+0xf2>
 80064d8:	3601      	adds	r6, #1
 80064da:	4628      	mov	r0, r5
 80064dc:	f04f 0c00 	mov.w	ip, #0
 80064e0:	f858 2b04 	ldr.w	r2, [r8], #4
 80064e4:	f8d0 e000 	ldr.w	lr, [r0]
 80064e8:	b293      	uxth	r3, r2
 80064ea:	ebac 0303 	sub.w	r3, ip, r3
 80064ee:	0c12      	lsrs	r2, r2, #16
 80064f0:	fa13 f38e 	uxtah	r3, r3, lr
 80064f4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80064f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006502:	45c1      	cmp	r9, r8
 8006504:	f840 3b04 	str.w	r3, [r0], #4
 8006508:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800650c:	d2e8      	bcs.n	80064e0 <quorem+0xb0>
 800650e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006512:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006516:	b922      	cbnz	r2, 8006522 <quorem+0xf2>
 8006518:	3b04      	subs	r3, #4
 800651a:	429d      	cmp	r5, r3
 800651c:	461a      	mov	r2, r3
 800651e:	d30a      	bcc.n	8006536 <quorem+0x106>
 8006520:	613c      	str	r4, [r7, #16]
 8006522:	4630      	mov	r0, r6
 8006524:	b003      	add	sp, #12
 8006526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800652a:	6812      	ldr	r2, [r2, #0]
 800652c:	3b04      	subs	r3, #4
 800652e:	2a00      	cmp	r2, #0
 8006530:	d1cc      	bne.n	80064cc <quorem+0x9c>
 8006532:	3c01      	subs	r4, #1
 8006534:	e7c7      	b.n	80064c6 <quorem+0x96>
 8006536:	6812      	ldr	r2, [r2, #0]
 8006538:	3b04      	subs	r3, #4
 800653a:	2a00      	cmp	r2, #0
 800653c:	d1f0      	bne.n	8006520 <quorem+0xf0>
 800653e:	3c01      	subs	r4, #1
 8006540:	e7eb      	b.n	800651a <quorem+0xea>
 8006542:	2000      	movs	r0, #0
 8006544:	e7ee      	b.n	8006524 <quorem+0xf4>
	...

08006548 <_dtoa_r>:
 8006548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800654c:	ed2d 8b02 	vpush	{d8}
 8006550:	ec57 6b10 	vmov	r6, r7, d0
 8006554:	b095      	sub	sp, #84	; 0x54
 8006556:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006558:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800655c:	9105      	str	r1, [sp, #20]
 800655e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006562:	4604      	mov	r4, r0
 8006564:	9209      	str	r2, [sp, #36]	; 0x24
 8006566:	930f      	str	r3, [sp, #60]	; 0x3c
 8006568:	b975      	cbnz	r5, 8006588 <_dtoa_r+0x40>
 800656a:	2010      	movs	r0, #16
 800656c:	f000 fdee 	bl	800714c <malloc>
 8006570:	4602      	mov	r2, r0
 8006572:	6260      	str	r0, [r4, #36]	; 0x24
 8006574:	b920      	cbnz	r0, 8006580 <_dtoa_r+0x38>
 8006576:	4bb2      	ldr	r3, [pc, #712]	; (8006840 <_dtoa_r+0x2f8>)
 8006578:	21ea      	movs	r1, #234	; 0xea
 800657a:	48b2      	ldr	r0, [pc, #712]	; (8006844 <_dtoa_r+0x2fc>)
 800657c:	f7ff ff3a 	bl	80063f4 <__assert_func>
 8006580:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006584:	6005      	str	r5, [r0, #0]
 8006586:	60c5      	str	r5, [r0, #12]
 8006588:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800658a:	6819      	ldr	r1, [r3, #0]
 800658c:	b151      	cbz	r1, 80065a4 <_dtoa_r+0x5c>
 800658e:	685a      	ldr	r2, [r3, #4]
 8006590:	604a      	str	r2, [r1, #4]
 8006592:	2301      	movs	r3, #1
 8006594:	4093      	lsls	r3, r2
 8006596:	608b      	str	r3, [r1, #8]
 8006598:	4620      	mov	r0, r4
 800659a:	f000 fe2d 	bl	80071f8 <_Bfree>
 800659e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065a0:	2200      	movs	r2, #0
 80065a2:	601a      	str	r2, [r3, #0]
 80065a4:	1e3b      	subs	r3, r7, #0
 80065a6:	bfb9      	ittee	lt
 80065a8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80065ac:	9303      	strlt	r3, [sp, #12]
 80065ae:	2300      	movge	r3, #0
 80065b0:	f8c8 3000 	strge.w	r3, [r8]
 80065b4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80065b8:	4ba3      	ldr	r3, [pc, #652]	; (8006848 <_dtoa_r+0x300>)
 80065ba:	bfbc      	itt	lt
 80065bc:	2201      	movlt	r2, #1
 80065be:	f8c8 2000 	strlt.w	r2, [r8]
 80065c2:	ea33 0309 	bics.w	r3, r3, r9
 80065c6:	d11b      	bne.n	8006600 <_dtoa_r+0xb8>
 80065c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80065ca:	f242 730f 	movw	r3, #9999	; 0x270f
 80065ce:	6013      	str	r3, [r2, #0]
 80065d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80065d4:	4333      	orrs	r3, r6
 80065d6:	f000 857a 	beq.w	80070ce <_dtoa_r+0xb86>
 80065da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065dc:	b963      	cbnz	r3, 80065f8 <_dtoa_r+0xb0>
 80065de:	4b9b      	ldr	r3, [pc, #620]	; (800684c <_dtoa_r+0x304>)
 80065e0:	e024      	b.n	800662c <_dtoa_r+0xe4>
 80065e2:	4b9b      	ldr	r3, [pc, #620]	; (8006850 <_dtoa_r+0x308>)
 80065e4:	9300      	str	r3, [sp, #0]
 80065e6:	3308      	adds	r3, #8
 80065e8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80065ea:	6013      	str	r3, [r2, #0]
 80065ec:	9800      	ldr	r0, [sp, #0]
 80065ee:	b015      	add	sp, #84	; 0x54
 80065f0:	ecbd 8b02 	vpop	{d8}
 80065f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065f8:	4b94      	ldr	r3, [pc, #592]	; (800684c <_dtoa_r+0x304>)
 80065fa:	9300      	str	r3, [sp, #0]
 80065fc:	3303      	adds	r3, #3
 80065fe:	e7f3      	b.n	80065e8 <_dtoa_r+0xa0>
 8006600:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006604:	2200      	movs	r2, #0
 8006606:	ec51 0b17 	vmov	r0, r1, d7
 800660a:	2300      	movs	r3, #0
 800660c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006610:	f7fa fa62 	bl	8000ad8 <__aeabi_dcmpeq>
 8006614:	4680      	mov	r8, r0
 8006616:	b158      	cbz	r0, 8006630 <_dtoa_r+0xe8>
 8006618:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800661a:	2301      	movs	r3, #1
 800661c:	6013      	str	r3, [r2, #0]
 800661e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006620:	2b00      	cmp	r3, #0
 8006622:	f000 8551 	beq.w	80070c8 <_dtoa_r+0xb80>
 8006626:	488b      	ldr	r0, [pc, #556]	; (8006854 <_dtoa_r+0x30c>)
 8006628:	6018      	str	r0, [r3, #0]
 800662a:	1e43      	subs	r3, r0, #1
 800662c:	9300      	str	r3, [sp, #0]
 800662e:	e7dd      	b.n	80065ec <_dtoa_r+0xa4>
 8006630:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006634:	aa12      	add	r2, sp, #72	; 0x48
 8006636:	a913      	add	r1, sp, #76	; 0x4c
 8006638:	4620      	mov	r0, r4
 800663a:	f001 f8bf 	bl	80077bc <__d2b>
 800663e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006642:	4683      	mov	fp, r0
 8006644:	2d00      	cmp	r5, #0
 8006646:	d07c      	beq.n	8006742 <_dtoa_r+0x1fa>
 8006648:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800664a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800664e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006652:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006656:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800665a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800665e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006662:	4b7d      	ldr	r3, [pc, #500]	; (8006858 <_dtoa_r+0x310>)
 8006664:	2200      	movs	r2, #0
 8006666:	4630      	mov	r0, r6
 8006668:	4639      	mov	r1, r7
 800666a:	f7f9 fe15 	bl	8000298 <__aeabi_dsub>
 800666e:	a36e      	add	r3, pc, #440	; (adr r3, 8006828 <_dtoa_r+0x2e0>)
 8006670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006674:	f7f9 ffc8 	bl	8000608 <__aeabi_dmul>
 8006678:	a36d      	add	r3, pc, #436	; (adr r3, 8006830 <_dtoa_r+0x2e8>)
 800667a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800667e:	f7f9 fe0d 	bl	800029c <__adddf3>
 8006682:	4606      	mov	r6, r0
 8006684:	4628      	mov	r0, r5
 8006686:	460f      	mov	r7, r1
 8006688:	f7f9 ff54 	bl	8000534 <__aeabi_i2d>
 800668c:	a36a      	add	r3, pc, #424	; (adr r3, 8006838 <_dtoa_r+0x2f0>)
 800668e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006692:	f7f9 ffb9 	bl	8000608 <__aeabi_dmul>
 8006696:	4602      	mov	r2, r0
 8006698:	460b      	mov	r3, r1
 800669a:	4630      	mov	r0, r6
 800669c:	4639      	mov	r1, r7
 800669e:	f7f9 fdfd 	bl	800029c <__adddf3>
 80066a2:	4606      	mov	r6, r0
 80066a4:	460f      	mov	r7, r1
 80066a6:	f7fa fa5f 	bl	8000b68 <__aeabi_d2iz>
 80066aa:	2200      	movs	r2, #0
 80066ac:	4682      	mov	sl, r0
 80066ae:	2300      	movs	r3, #0
 80066b0:	4630      	mov	r0, r6
 80066b2:	4639      	mov	r1, r7
 80066b4:	f7fa fa1a 	bl	8000aec <__aeabi_dcmplt>
 80066b8:	b148      	cbz	r0, 80066ce <_dtoa_r+0x186>
 80066ba:	4650      	mov	r0, sl
 80066bc:	f7f9 ff3a 	bl	8000534 <__aeabi_i2d>
 80066c0:	4632      	mov	r2, r6
 80066c2:	463b      	mov	r3, r7
 80066c4:	f7fa fa08 	bl	8000ad8 <__aeabi_dcmpeq>
 80066c8:	b908      	cbnz	r0, 80066ce <_dtoa_r+0x186>
 80066ca:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80066ce:	f1ba 0f16 	cmp.w	sl, #22
 80066d2:	d854      	bhi.n	800677e <_dtoa_r+0x236>
 80066d4:	4b61      	ldr	r3, [pc, #388]	; (800685c <_dtoa_r+0x314>)
 80066d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80066da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80066e2:	f7fa fa03 	bl	8000aec <__aeabi_dcmplt>
 80066e6:	2800      	cmp	r0, #0
 80066e8:	d04b      	beq.n	8006782 <_dtoa_r+0x23a>
 80066ea:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80066ee:	2300      	movs	r3, #0
 80066f0:	930e      	str	r3, [sp, #56]	; 0x38
 80066f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80066f4:	1b5d      	subs	r5, r3, r5
 80066f6:	1e6b      	subs	r3, r5, #1
 80066f8:	9304      	str	r3, [sp, #16]
 80066fa:	bf43      	ittte	mi
 80066fc:	2300      	movmi	r3, #0
 80066fe:	f1c5 0801 	rsbmi	r8, r5, #1
 8006702:	9304      	strmi	r3, [sp, #16]
 8006704:	f04f 0800 	movpl.w	r8, #0
 8006708:	f1ba 0f00 	cmp.w	sl, #0
 800670c:	db3b      	blt.n	8006786 <_dtoa_r+0x23e>
 800670e:	9b04      	ldr	r3, [sp, #16]
 8006710:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8006714:	4453      	add	r3, sl
 8006716:	9304      	str	r3, [sp, #16]
 8006718:	2300      	movs	r3, #0
 800671a:	9306      	str	r3, [sp, #24]
 800671c:	9b05      	ldr	r3, [sp, #20]
 800671e:	2b09      	cmp	r3, #9
 8006720:	d869      	bhi.n	80067f6 <_dtoa_r+0x2ae>
 8006722:	2b05      	cmp	r3, #5
 8006724:	bfc4      	itt	gt
 8006726:	3b04      	subgt	r3, #4
 8006728:	9305      	strgt	r3, [sp, #20]
 800672a:	9b05      	ldr	r3, [sp, #20]
 800672c:	f1a3 0302 	sub.w	r3, r3, #2
 8006730:	bfcc      	ite	gt
 8006732:	2500      	movgt	r5, #0
 8006734:	2501      	movle	r5, #1
 8006736:	2b03      	cmp	r3, #3
 8006738:	d869      	bhi.n	800680e <_dtoa_r+0x2c6>
 800673a:	e8df f003 	tbb	[pc, r3]
 800673e:	4e2c      	.short	0x4e2c
 8006740:	5a4c      	.short	0x5a4c
 8006742:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006746:	441d      	add	r5, r3
 8006748:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800674c:	2b20      	cmp	r3, #32
 800674e:	bfc1      	itttt	gt
 8006750:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006754:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006758:	fa09 f303 	lslgt.w	r3, r9, r3
 800675c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006760:	bfda      	itte	le
 8006762:	f1c3 0320 	rsble	r3, r3, #32
 8006766:	fa06 f003 	lslle.w	r0, r6, r3
 800676a:	4318      	orrgt	r0, r3
 800676c:	f7f9 fed2 	bl	8000514 <__aeabi_ui2d>
 8006770:	2301      	movs	r3, #1
 8006772:	4606      	mov	r6, r0
 8006774:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006778:	3d01      	subs	r5, #1
 800677a:	9310      	str	r3, [sp, #64]	; 0x40
 800677c:	e771      	b.n	8006662 <_dtoa_r+0x11a>
 800677e:	2301      	movs	r3, #1
 8006780:	e7b6      	b.n	80066f0 <_dtoa_r+0x1a8>
 8006782:	900e      	str	r0, [sp, #56]	; 0x38
 8006784:	e7b5      	b.n	80066f2 <_dtoa_r+0x1aa>
 8006786:	f1ca 0300 	rsb	r3, sl, #0
 800678a:	9306      	str	r3, [sp, #24]
 800678c:	2300      	movs	r3, #0
 800678e:	eba8 080a 	sub.w	r8, r8, sl
 8006792:	930d      	str	r3, [sp, #52]	; 0x34
 8006794:	e7c2      	b.n	800671c <_dtoa_r+0x1d4>
 8006796:	2300      	movs	r3, #0
 8006798:	9308      	str	r3, [sp, #32]
 800679a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800679c:	2b00      	cmp	r3, #0
 800679e:	dc39      	bgt.n	8006814 <_dtoa_r+0x2cc>
 80067a0:	f04f 0901 	mov.w	r9, #1
 80067a4:	f8cd 9004 	str.w	r9, [sp, #4]
 80067a8:	464b      	mov	r3, r9
 80067aa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80067ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80067b0:	2200      	movs	r2, #0
 80067b2:	6042      	str	r2, [r0, #4]
 80067b4:	2204      	movs	r2, #4
 80067b6:	f102 0614 	add.w	r6, r2, #20
 80067ba:	429e      	cmp	r6, r3
 80067bc:	6841      	ldr	r1, [r0, #4]
 80067be:	d92f      	bls.n	8006820 <_dtoa_r+0x2d8>
 80067c0:	4620      	mov	r0, r4
 80067c2:	f000 fcd9 	bl	8007178 <_Balloc>
 80067c6:	9000      	str	r0, [sp, #0]
 80067c8:	2800      	cmp	r0, #0
 80067ca:	d14b      	bne.n	8006864 <_dtoa_r+0x31c>
 80067cc:	4b24      	ldr	r3, [pc, #144]	; (8006860 <_dtoa_r+0x318>)
 80067ce:	4602      	mov	r2, r0
 80067d0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80067d4:	e6d1      	b.n	800657a <_dtoa_r+0x32>
 80067d6:	2301      	movs	r3, #1
 80067d8:	e7de      	b.n	8006798 <_dtoa_r+0x250>
 80067da:	2300      	movs	r3, #0
 80067dc:	9308      	str	r3, [sp, #32]
 80067de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067e0:	eb0a 0903 	add.w	r9, sl, r3
 80067e4:	f109 0301 	add.w	r3, r9, #1
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	9301      	str	r3, [sp, #4]
 80067ec:	bfb8      	it	lt
 80067ee:	2301      	movlt	r3, #1
 80067f0:	e7dd      	b.n	80067ae <_dtoa_r+0x266>
 80067f2:	2301      	movs	r3, #1
 80067f4:	e7f2      	b.n	80067dc <_dtoa_r+0x294>
 80067f6:	2501      	movs	r5, #1
 80067f8:	2300      	movs	r3, #0
 80067fa:	9305      	str	r3, [sp, #20]
 80067fc:	9508      	str	r5, [sp, #32]
 80067fe:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8006802:	2200      	movs	r2, #0
 8006804:	f8cd 9004 	str.w	r9, [sp, #4]
 8006808:	2312      	movs	r3, #18
 800680a:	9209      	str	r2, [sp, #36]	; 0x24
 800680c:	e7cf      	b.n	80067ae <_dtoa_r+0x266>
 800680e:	2301      	movs	r3, #1
 8006810:	9308      	str	r3, [sp, #32]
 8006812:	e7f4      	b.n	80067fe <_dtoa_r+0x2b6>
 8006814:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006818:	f8cd 9004 	str.w	r9, [sp, #4]
 800681c:	464b      	mov	r3, r9
 800681e:	e7c6      	b.n	80067ae <_dtoa_r+0x266>
 8006820:	3101      	adds	r1, #1
 8006822:	6041      	str	r1, [r0, #4]
 8006824:	0052      	lsls	r2, r2, #1
 8006826:	e7c6      	b.n	80067b6 <_dtoa_r+0x26e>
 8006828:	636f4361 	.word	0x636f4361
 800682c:	3fd287a7 	.word	0x3fd287a7
 8006830:	8b60c8b3 	.word	0x8b60c8b3
 8006834:	3fc68a28 	.word	0x3fc68a28
 8006838:	509f79fb 	.word	0x509f79fb
 800683c:	3fd34413 	.word	0x3fd34413
 8006840:	080088ec 	.word	0x080088ec
 8006844:	080089ab 	.word	0x080089ab
 8006848:	7ff00000 	.word	0x7ff00000
 800684c:	080089a7 	.word	0x080089a7
 8006850:	0800899e 	.word	0x0800899e
 8006854:	080088c9 	.word	0x080088c9
 8006858:	3ff80000 	.word	0x3ff80000
 800685c:	08008aa8 	.word	0x08008aa8
 8006860:	08008a0a 	.word	0x08008a0a
 8006864:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006866:	9a00      	ldr	r2, [sp, #0]
 8006868:	601a      	str	r2, [r3, #0]
 800686a:	9b01      	ldr	r3, [sp, #4]
 800686c:	2b0e      	cmp	r3, #14
 800686e:	f200 80ad 	bhi.w	80069cc <_dtoa_r+0x484>
 8006872:	2d00      	cmp	r5, #0
 8006874:	f000 80aa 	beq.w	80069cc <_dtoa_r+0x484>
 8006878:	f1ba 0f00 	cmp.w	sl, #0
 800687c:	dd36      	ble.n	80068ec <_dtoa_r+0x3a4>
 800687e:	4ac3      	ldr	r2, [pc, #780]	; (8006b8c <_dtoa_r+0x644>)
 8006880:	f00a 030f 	and.w	r3, sl, #15
 8006884:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006888:	ed93 7b00 	vldr	d7, [r3]
 800688c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006890:	ea4f 172a 	mov.w	r7, sl, asr #4
 8006894:	eeb0 8a47 	vmov.f32	s16, s14
 8006898:	eef0 8a67 	vmov.f32	s17, s15
 800689c:	d016      	beq.n	80068cc <_dtoa_r+0x384>
 800689e:	4bbc      	ldr	r3, [pc, #752]	; (8006b90 <_dtoa_r+0x648>)
 80068a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80068a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80068a8:	f7f9 ffd8 	bl	800085c <__aeabi_ddiv>
 80068ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068b0:	f007 070f 	and.w	r7, r7, #15
 80068b4:	2503      	movs	r5, #3
 80068b6:	4eb6      	ldr	r6, [pc, #728]	; (8006b90 <_dtoa_r+0x648>)
 80068b8:	b957      	cbnz	r7, 80068d0 <_dtoa_r+0x388>
 80068ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068be:	ec53 2b18 	vmov	r2, r3, d8
 80068c2:	f7f9 ffcb 	bl	800085c <__aeabi_ddiv>
 80068c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068ca:	e029      	b.n	8006920 <_dtoa_r+0x3d8>
 80068cc:	2502      	movs	r5, #2
 80068ce:	e7f2      	b.n	80068b6 <_dtoa_r+0x36e>
 80068d0:	07f9      	lsls	r1, r7, #31
 80068d2:	d508      	bpl.n	80068e6 <_dtoa_r+0x39e>
 80068d4:	ec51 0b18 	vmov	r0, r1, d8
 80068d8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80068dc:	f7f9 fe94 	bl	8000608 <__aeabi_dmul>
 80068e0:	ec41 0b18 	vmov	d8, r0, r1
 80068e4:	3501      	adds	r5, #1
 80068e6:	107f      	asrs	r7, r7, #1
 80068e8:	3608      	adds	r6, #8
 80068ea:	e7e5      	b.n	80068b8 <_dtoa_r+0x370>
 80068ec:	f000 80a6 	beq.w	8006a3c <_dtoa_r+0x4f4>
 80068f0:	f1ca 0600 	rsb	r6, sl, #0
 80068f4:	4ba5      	ldr	r3, [pc, #660]	; (8006b8c <_dtoa_r+0x644>)
 80068f6:	4fa6      	ldr	r7, [pc, #664]	; (8006b90 <_dtoa_r+0x648>)
 80068f8:	f006 020f 	and.w	r2, r6, #15
 80068fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006904:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006908:	f7f9 fe7e 	bl	8000608 <__aeabi_dmul>
 800690c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006910:	1136      	asrs	r6, r6, #4
 8006912:	2300      	movs	r3, #0
 8006914:	2502      	movs	r5, #2
 8006916:	2e00      	cmp	r6, #0
 8006918:	f040 8085 	bne.w	8006a26 <_dtoa_r+0x4de>
 800691c:	2b00      	cmp	r3, #0
 800691e:	d1d2      	bne.n	80068c6 <_dtoa_r+0x37e>
 8006920:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006922:	2b00      	cmp	r3, #0
 8006924:	f000 808c 	beq.w	8006a40 <_dtoa_r+0x4f8>
 8006928:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800692c:	4b99      	ldr	r3, [pc, #612]	; (8006b94 <_dtoa_r+0x64c>)
 800692e:	2200      	movs	r2, #0
 8006930:	4630      	mov	r0, r6
 8006932:	4639      	mov	r1, r7
 8006934:	f7fa f8da 	bl	8000aec <__aeabi_dcmplt>
 8006938:	2800      	cmp	r0, #0
 800693a:	f000 8081 	beq.w	8006a40 <_dtoa_r+0x4f8>
 800693e:	9b01      	ldr	r3, [sp, #4]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d07d      	beq.n	8006a40 <_dtoa_r+0x4f8>
 8006944:	f1b9 0f00 	cmp.w	r9, #0
 8006948:	dd3c      	ble.n	80069c4 <_dtoa_r+0x47c>
 800694a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800694e:	9307      	str	r3, [sp, #28]
 8006950:	2200      	movs	r2, #0
 8006952:	4b91      	ldr	r3, [pc, #580]	; (8006b98 <_dtoa_r+0x650>)
 8006954:	4630      	mov	r0, r6
 8006956:	4639      	mov	r1, r7
 8006958:	f7f9 fe56 	bl	8000608 <__aeabi_dmul>
 800695c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006960:	3501      	adds	r5, #1
 8006962:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8006966:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800696a:	4628      	mov	r0, r5
 800696c:	f7f9 fde2 	bl	8000534 <__aeabi_i2d>
 8006970:	4632      	mov	r2, r6
 8006972:	463b      	mov	r3, r7
 8006974:	f7f9 fe48 	bl	8000608 <__aeabi_dmul>
 8006978:	4b88      	ldr	r3, [pc, #544]	; (8006b9c <_dtoa_r+0x654>)
 800697a:	2200      	movs	r2, #0
 800697c:	f7f9 fc8e 	bl	800029c <__adddf3>
 8006980:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006984:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006988:	9303      	str	r3, [sp, #12]
 800698a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800698c:	2b00      	cmp	r3, #0
 800698e:	d15c      	bne.n	8006a4a <_dtoa_r+0x502>
 8006990:	4b83      	ldr	r3, [pc, #524]	; (8006ba0 <_dtoa_r+0x658>)
 8006992:	2200      	movs	r2, #0
 8006994:	4630      	mov	r0, r6
 8006996:	4639      	mov	r1, r7
 8006998:	f7f9 fc7e 	bl	8000298 <__aeabi_dsub>
 800699c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80069a0:	4606      	mov	r6, r0
 80069a2:	460f      	mov	r7, r1
 80069a4:	f7fa f8c0 	bl	8000b28 <__aeabi_dcmpgt>
 80069a8:	2800      	cmp	r0, #0
 80069aa:	f040 8296 	bne.w	8006eda <_dtoa_r+0x992>
 80069ae:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80069b2:	4630      	mov	r0, r6
 80069b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80069b8:	4639      	mov	r1, r7
 80069ba:	f7fa f897 	bl	8000aec <__aeabi_dcmplt>
 80069be:	2800      	cmp	r0, #0
 80069c0:	f040 8288 	bne.w	8006ed4 <_dtoa_r+0x98c>
 80069c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80069c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80069cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	f2c0 8158 	blt.w	8006c84 <_dtoa_r+0x73c>
 80069d4:	f1ba 0f0e 	cmp.w	sl, #14
 80069d8:	f300 8154 	bgt.w	8006c84 <_dtoa_r+0x73c>
 80069dc:	4b6b      	ldr	r3, [pc, #428]	; (8006b8c <_dtoa_r+0x644>)
 80069de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80069e2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80069e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	f280 80e3 	bge.w	8006bb4 <_dtoa_r+0x66c>
 80069ee:	9b01      	ldr	r3, [sp, #4]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	f300 80df 	bgt.w	8006bb4 <_dtoa_r+0x66c>
 80069f6:	f040 826d 	bne.w	8006ed4 <_dtoa_r+0x98c>
 80069fa:	4b69      	ldr	r3, [pc, #420]	; (8006ba0 <_dtoa_r+0x658>)
 80069fc:	2200      	movs	r2, #0
 80069fe:	4640      	mov	r0, r8
 8006a00:	4649      	mov	r1, r9
 8006a02:	f7f9 fe01 	bl	8000608 <__aeabi_dmul>
 8006a06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a0a:	f7fa f883 	bl	8000b14 <__aeabi_dcmpge>
 8006a0e:	9e01      	ldr	r6, [sp, #4]
 8006a10:	4637      	mov	r7, r6
 8006a12:	2800      	cmp	r0, #0
 8006a14:	f040 8243 	bne.w	8006e9e <_dtoa_r+0x956>
 8006a18:	9d00      	ldr	r5, [sp, #0]
 8006a1a:	2331      	movs	r3, #49	; 0x31
 8006a1c:	f805 3b01 	strb.w	r3, [r5], #1
 8006a20:	f10a 0a01 	add.w	sl, sl, #1
 8006a24:	e23f      	b.n	8006ea6 <_dtoa_r+0x95e>
 8006a26:	07f2      	lsls	r2, r6, #31
 8006a28:	d505      	bpl.n	8006a36 <_dtoa_r+0x4ee>
 8006a2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a2e:	f7f9 fdeb 	bl	8000608 <__aeabi_dmul>
 8006a32:	3501      	adds	r5, #1
 8006a34:	2301      	movs	r3, #1
 8006a36:	1076      	asrs	r6, r6, #1
 8006a38:	3708      	adds	r7, #8
 8006a3a:	e76c      	b.n	8006916 <_dtoa_r+0x3ce>
 8006a3c:	2502      	movs	r5, #2
 8006a3e:	e76f      	b.n	8006920 <_dtoa_r+0x3d8>
 8006a40:	9b01      	ldr	r3, [sp, #4]
 8006a42:	f8cd a01c 	str.w	sl, [sp, #28]
 8006a46:	930c      	str	r3, [sp, #48]	; 0x30
 8006a48:	e78d      	b.n	8006966 <_dtoa_r+0x41e>
 8006a4a:	9900      	ldr	r1, [sp, #0]
 8006a4c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006a4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006a50:	4b4e      	ldr	r3, [pc, #312]	; (8006b8c <_dtoa_r+0x644>)
 8006a52:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006a56:	4401      	add	r1, r0
 8006a58:	9102      	str	r1, [sp, #8]
 8006a5a:	9908      	ldr	r1, [sp, #32]
 8006a5c:	eeb0 8a47 	vmov.f32	s16, s14
 8006a60:	eef0 8a67 	vmov.f32	s17, s15
 8006a64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a68:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006a6c:	2900      	cmp	r1, #0
 8006a6e:	d045      	beq.n	8006afc <_dtoa_r+0x5b4>
 8006a70:	494c      	ldr	r1, [pc, #304]	; (8006ba4 <_dtoa_r+0x65c>)
 8006a72:	2000      	movs	r0, #0
 8006a74:	f7f9 fef2 	bl	800085c <__aeabi_ddiv>
 8006a78:	ec53 2b18 	vmov	r2, r3, d8
 8006a7c:	f7f9 fc0c 	bl	8000298 <__aeabi_dsub>
 8006a80:	9d00      	ldr	r5, [sp, #0]
 8006a82:	ec41 0b18 	vmov	d8, r0, r1
 8006a86:	4639      	mov	r1, r7
 8006a88:	4630      	mov	r0, r6
 8006a8a:	f7fa f86d 	bl	8000b68 <__aeabi_d2iz>
 8006a8e:	900c      	str	r0, [sp, #48]	; 0x30
 8006a90:	f7f9 fd50 	bl	8000534 <__aeabi_i2d>
 8006a94:	4602      	mov	r2, r0
 8006a96:	460b      	mov	r3, r1
 8006a98:	4630      	mov	r0, r6
 8006a9a:	4639      	mov	r1, r7
 8006a9c:	f7f9 fbfc 	bl	8000298 <__aeabi_dsub>
 8006aa0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006aa2:	3330      	adds	r3, #48	; 0x30
 8006aa4:	f805 3b01 	strb.w	r3, [r5], #1
 8006aa8:	ec53 2b18 	vmov	r2, r3, d8
 8006aac:	4606      	mov	r6, r0
 8006aae:	460f      	mov	r7, r1
 8006ab0:	f7fa f81c 	bl	8000aec <__aeabi_dcmplt>
 8006ab4:	2800      	cmp	r0, #0
 8006ab6:	d165      	bne.n	8006b84 <_dtoa_r+0x63c>
 8006ab8:	4632      	mov	r2, r6
 8006aba:	463b      	mov	r3, r7
 8006abc:	4935      	ldr	r1, [pc, #212]	; (8006b94 <_dtoa_r+0x64c>)
 8006abe:	2000      	movs	r0, #0
 8006ac0:	f7f9 fbea 	bl	8000298 <__aeabi_dsub>
 8006ac4:	ec53 2b18 	vmov	r2, r3, d8
 8006ac8:	f7fa f810 	bl	8000aec <__aeabi_dcmplt>
 8006acc:	2800      	cmp	r0, #0
 8006ace:	f040 80b9 	bne.w	8006c44 <_dtoa_r+0x6fc>
 8006ad2:	9b02      	ldr	r3, [sp, #8]
 8006ad4:	429d      	cmp	r5, r3
 8006ad6:	f43f af75 	beq.w	80069c4 <_dtoa_r+0x47c>
 8006ada:	4b2f      	ldr	r3, [pc, #188]	; (8006b98 <_dtoa_r+0x650>)
 8006adc:	ec51 0b18 	vmov	r0, r1, d8
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f7f9 fd91 	bl	8000608 <__aeabi_dmul>
 8006ae6:	4b2c      	ldr	r3, [pc, #176]	; (8006b98 <_dtoa_r+0x650>)
 8006ae8:	ec41 0b18 	vmov	d8, r0, r1
 8006aec:	2200      	movs	r2, #0
 8006aee:	4630      	mov	r0, r6
 8006af0:	4639      	mov	r1, r7
 8006af2:	f7f9 fd89 	bl	8000608 <__aeabi_dmul>
 8006af6:	4606      	mov	r6, r0
 8006af8:	460f      	mov	r7, r1
 8006afa:	e7c4      	b.n	8006a86 <_dtoa_r+0x53e>
 8006afc:	ec51 0b17 	vmov	r0, r1, d7
 8006b00:	f7f9 fd82 	bl	8000608 <__aeabi_dmul>
 8006b04:	9b02      	ldr	r3, [sp, #8]
 8006b06:	9d00      	ldr	r5, [sp, #0]
 8006b08:	930c      	str	r3, [sp, #48]	; 0x30
 8006b0a:	ec41 0b18 	vmov	d8, r0, r1
 8006b0e:	4639      	mov	r1, r7
 8006b10:	4630      	mov	r0, r6
 8006b12:	f7fa f829 	bl	8000b68 <__aeabi_d2iz>
 8006b16:	9011      	str	r0, [sp, #68]	; 0x44
 8006b18:	f7f9 fd0c 	bl	8000534 <__aeabi_i2d>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	460b      	mov	r3, r1
 8006b20:	4630      	mov	r0, r6
 8006b22:	4639      	mov	r1, r7
 8006b24:	f7f9 fbb8 	bl	8000298 <__aeabi_dsub>
 8006b28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006b2a:	3330      	adds	r3, #48	; 0x30
 8006b2c:	f805 3b01 	strb.w	r3, [r5], #1
 8006b30:	9b02      	ldr	r3, [sp, #8]
 8006b32:	429d      	cmp	r5, r3
 8006b34:	4606      	mov	r6, r0
 8006b36:	460f      	mov	r7, r1
 8006b38:	f04f 0200 	mov.w	r2, #0
 8006b3c:	d134      	bne.n	8006ba8 <_dtoa_r+0x660>
 8006b3e:	4b19      	ldr	r3, [pc, #100]	; (8006ba4 <_dtoa_r+0x65c>)
 8006b40:	ec51 0b18 	vmov	r0, r1, d8
 8006b44:	f7f9 fbaa 	bl	800029c <__adddf3>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	460b      	mov	r3, r1
 8006b4c:	4630      	mov	r0, r6
 8006b4e:	4639      	mov	r1, r7
 8006b50:	f7f9 ffea 	bl	8000b28 <__aeabi_dcmpgt>
 8006b54:	2800      	cmp	r0, #0
 8006b56:	d175      	bne.n	8006c44 <_dtoa_r+0x6fc>
 8006b58:	ec53 2b18 	vmov	r2, r3, d8
 8006b5c:	4911      	ldr	r1, [pc, #68]	; (8006ba4 <_dtoa_r+0x65c>)
 8006b5e:	2000      	movs	r0, #0
 8006b60:	f7f9 fb9a 	bl	8000298 <__aeabi_dsub>
 8006b64:	4602      	mov	r2, r0
 8006b66:	460b      	mov	r3, r1
 8006b68:	4630      	mov	r0, r6
 8006b6a:	4639      	mov	r1, r7
 8006b6c:	f7f9 ffbe 	bl	8000aec <__aeabi_dcmplt>
 8006b70:	2800      	cmp	r0, #0
 8006b72:	f43f af27 	beq.w	80069c4 <_dtoa_r+0x47c>
 8006b76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006b78:	1e6b      	subs	r3, r5, #1
 8006b7a:	930c      	str	r3, [sp, #48]	; 0x30
 8006b7c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006b80:	2b30      	cmp	r3, #48	; 0x30
 8006b82:	d0f8      	beq.n	8006b76 <_dtoa_r+0x62e>
 8006b84:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006b88:	e04a      	b.n	8006c20 <_dtoa_r+0x6d8>
 8006b8a:	bf00      	nop
 8006b8c:	08008aa8 	.word	0x08008aa8
 8006b90:	08008a80 	.word	0x08008a80
 8006b94:	3ff00000 	.word	0x3ff00000
 8006b98:	40240000 	.word	0x40240000
 8006b9c:	401c0000 	.word	0x401c0000
 8006ba0:	40140000 	.word	0x40140000
 8006ba4:	3fe00000 	.word	0x3fe00000
 8006ba8:	4baf      	ldr	r3, [pc, #700]	; (8006e68 <_dtoa_r+0x920>)
 8006baa:	f7f9 fd2d 	bl	8000608 <__aeabi_dmul>
 8006bae:	4606      	mov	r6, r0
 8006bb0:	460f      	mov	r7, r1
 8006bb2:	e7ac      	b.n	8006b0e <_dtoa_r+0x5c6>
 8006bb4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006bb8:	9d00      	ldr	r5, [sp, #0]
 8006bba:	4642      	mov	r2, r8
 8006bbc:	464b      	mov	r3, r9
 8006bbe:	4630      	mov	r0, r6
 8006bc0:	4639      	mov	r1, r7
 8006bc2:	f7f9 fe4b 	bl	800085c <__aeabi_ddiv>
 8006bc6:	f7f9 ffcf 	bl	8000b68 <__aeabi_d2iz>
 8006bca:	9002      	str	r0, [sp, #8]
 8006bcc:	f7f9 fcb2 	bl	8000534 <__aeabi_i2d>
 8006bd0:	4642      	mov	r2, r8
 8006bd2:	464b      	mov	r3, r9
 8006bd4:	f7f9 fd18 	bl	8000608 <__aeabi_dmul>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	460b      	mov	r3, r1
 8006bdc:	4630      	mov	r0, r6
 8006bde:	4639      	mov	r1, r7
 8006be0:	f7f9 fb5a 	bl	8000298 <__aeabi_dsub>
 8006be4:	9e02      	ldr	r6, [sp, #8]
 8006be6:	9f01      	ldr	r7, [sp, #4]
 8006be8:	3630      	adds	r6, #48	; 0x30
 8006bea:	f805 6b01 	strb.w	r6, [r5], #1
 8006bee:	9e00      	ldr	r6, [sp, #0]
 8006bf0:	1bae      	subs	r6, r5, r6
 8006bf2:	42b7      	cmp	r7, r6
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	460b      	mov	r3, r1
 8006bf8:	d137      	bne.n	8006c6a <_dtoa_r+0x722>
 8006bfa:	f7f9 fb4f 	bl	800029c <__adddf3>
 8006bfe:	4642      	mov	r2, r8
 8006c00:	464b      	mov	r3, r9
 8006c02:	4606      	mov	r6, r0
 8006c04:	460f      	mov	r7, r1
 8006c06:	f7f9 ff8f 	bl	8000b28 <__aeabi_dcmpgt>
 8006c0a:	b9c8      	cbnz	r0, 8006c40 <_dtoa_r+0x6f8>
 8006c0c:	4642      	mov	r2, r8
 8006c0e:	464b      	mov	r3, r9
 8006c10:	4630      	mov	r0, r6
 8006c12:	4639      	mov	r1, r7
 8006c14:	f7f9 ff60 	bl	8000ad8 <__aeabi_dcmpeq>
 8006c18:	b110      	cbz	r0, 8006c20 <_dtoa_r+0x6d8>
 8006c1a:	9b02      	ldr	r3, [sp, #8]
 8006c1c:	07d9      	lsls	r1, r3, #31
 8006c1e:	d40f      	bmi.n	8006c40 <_dtoa_r+0x6f8>
 8006c20:	4620      	mov	r0, r4
 8006c22:	4659      	mov	r1, fp
 8006c24:	f000 fae8 	bl	80071f8 <_Bfree>
 8006c28:	2300      	movs	r3, #0
 8006c2a:	702b      	strb	r3, [r5, #0]
 8006c2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006c2e:	f10a 0001 	add.w	r0, sl, #1
 8006c32:	6018      	str	r0, [r3, #0]
 8006c34:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	f43f acd8 	beq.w	80065ec <_dtoa_r+0xa4>
 8006c3c:	601d      	str	r5, [r3, #0]
 8006c3e:	e4d5      	b.n	80065ec <_dtoa_r+0xa4>
 8006c40:	f8cd a01c 	str.w	sl, [sp, #28]
 8006c44:	462b      	mov	r3, r5
 8006c46:	461d      	mov	r5, r3
 8006c48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c4c:	2a39      	cmp	r2, #57	; 0x39
 8006c4e:	d108      	bne.n	8006c62 <_dtoa_r+0x71a>
 8006c50:	9a00      	ldr	r2, [sp, #0]
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d1f7      	bne.n	8006c46 <_dtoa_r+0x6fe>
 8006c56:	9a07      	ldr	r2, [sp, #28]
 8006c58:	9900      	ldr	r1, [sp, #0]
 8006c5a:	3201      	adds	r2, #1
 8006c5c:	9207      	str	r2, [sp, #28]
 8006c5e:	2230      	movs	r2, #48	; 0x30
 8006c60:	700a      	strb	r2, [r1, #0]
 8006c62:	781a      	ldrb	r2, [r3, #0]
 8006c64:	3201      	adds	r2, #1
 8006c66:	701a      	strb	r2, [r3, #0]
 8006c68:	e78c      	b.n	8006b84 <_dtoa_r+0x63c>
 8006c6a:	4b7f      	ldr	r3, [pc, #508]	; (8006e68 <_dtoa_r+0x920>)
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f7f9 fccb 	bl	8000608 <__aeabi_dmul>
 8006c72:	2200      	movs	r2, #0
 8006c74:	2300      	movs	r3, #0
 8006c76:	4606      	mov	r6, r0
 8006c78:	460f      	mov	r7, r1
 8006c7a:	f7f9 ff2d 	bl	8000ad8 <__aeabi_dcmpeq>
 8006c7e:	2800      	cmp	r0, #0
 8006c80:	d09b      	beq.n	8006bba <_dtoa_r+0x672>
 8006c82:	e7cd      	b.n	8006c20 <_dtoa_r+0x6d8>
 8006c84:	9a08      	ldr	r2, [sp, #32]
 8006c86:	2a00      	cmp	r2, #0
 8006c88:	f000 80c4 	beq.w	8006e14 <_dtoa_r+0x8cc>
 8006c8c:	9a05      	ldr	r2, [sp, #20]
 8006c8e:	2a01      	cmp	r2, #1
 8006c90:	f300 80a8 	bgt.w	8006de4 <_dtoa_r+0x89c>
 8006c94:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006c96:	2a00      	cmp	r2, #0
 8006c98:	f000 80a0 	beq.w	8006ddc <_dtoa_r+0x894>
 8006c9c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006ca0:	9e06      	ldr	r6, [sp, #24]
 8006ca2:	4645      	mov	r5, r8
 8006ca4:	9a04      	ldr	r2, [sp, #16]
 8006ca6:	2101      	movs	r1, #1
 8006ca8:	441a      	add	r2, r3
 8006caa:	4620      	mov	r0, r4
 8006cac:	4498      	add	r8, r3
 8006cae:	9204      	str	r2, [sp, #16]
 8006cb0:	f000 fb5e 	bl	8007370 <__i2b>
 8006cb4:	4607      	mov	r7, r0
 8006cb6:	2d00      	cmp	r5, #0
 8006cb8:	dd0b      	ble.n	8006cd2 <_dtoa_r+0x78a>
 8006cba:	9b04      	ldr	r3, [sp, #16]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	dd08      	ble.n	8006cd2 <_dtoa_r+0x78a>
 8006cc0:	42ab      	cmp	r3, r5
 8006cc2:	9a04      	ldr	r2, [sp, #16]
 8006cc4:	bfa8      	it	ge
 8006cc6:	462b      	movge	r3, r5
 8006cc8:	eba8 0803 	sub.w	r8, r8, r3
 8006ccc:	1aed      	subs	r5, r5, r3
 8006cce:	1ad3      	subs	r3, r2, r3
 8006cd0:	9304      	str	r3, [sp, #16]
 8006cd2:	9b06      	ldr	r3, [sp, #24]
 8006cd4:	b1fb      	cbz	r3, 8006d16 <_dtoa_r+0x7ce>
 8006cd6:	9b08      	ldr	r3, [sp, #32]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	f000 809f 	beq.w	8006e1c <_dtoa_r+0x8d4>
 8006cde:	2e00      	cmp	r6, #0
 8006ce0:	dd11      	ble.n	8006d06 <_dtoa_r+0x7be>
 8006ce2:	4639      	mov	r1, r7
 8006ce4:	4632      	mov	r2, r6
 8006ce6:	4620      	mov	r0, r4
 8006ce8:	f000 fbfe 	bl	80074e8 <__pow5mult>
 8006cec:	465a      	mov	r2, fp
 8006cee:	4601      	mov	r1, r0
 8006cf0:	4607      	mov	r7, r0
 8006cf2:	4620      	mov	r0, r4
 8006cf4:	f000 fb52 	bl	800739c <__multiply>
 8006cf8:	4659      	mov	r1, fp
 8006cfa:	9007      	str	r0, [sp, #28]
 8006cfc:	4620      	mov	r0, r4
 8006cfe:	f000 fa7b 	bl	80071f8 <_Bfree>
 8006d02:	9b07      	ldr	r3, [sp, #28]
 8006d04:	469b      	mov	fp, r3
 8006d06:	9b06      	ldr	r3, [sp, #24]
 8006d08:	1b9a      	subs	r2, r3, r6
 8006d0a:	d004      	beq.n	8006d16 <_dtoa_r+0x7ce>
 8006d0c:	4659      	mov	r1, fp
 8006d0e:	4620      	mov	r0, r4
 8006d10:	f000 fbea 	bl	80074e8 <__pow5mult>
 8006d14:	4683      	mov	fp, r0
 8006d16:	2101      	movs	r1, #1
 8006d18:	4620      	mov	r0, r4
 8006d1a:	f000 fb29 	bl	8007370 <__i2b>
 8006d1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	4606      	mov	r6, r0
 8006d24:	dd7c      	ble.n	8006e20 <_dtoa_r+0x8d8>
 8006d26:	461a      	mov	r2, r3
 8006d28:	4601      	mov	r1, r0
 8006d2a:	4620      	mov	r0, r4
 8006d2c:	f000 fbdc 	bl	80074e8 <__pow5mult>
 8006d30:	9b05      	ldr	r3, [sp, #20]
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	4606      	mov	r6, r0
 8006d36:	dd76      	ble.n	8006e26 <_dtoa_r+0x8de>
 8006d38:	2300      	movs	r3, #0
 8006d3a:	9306      	str	r3, [sp, #24]
 8006d3c:	6933      	ldr	r3, [r6, #16]
 8006d3e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006d42:	6918      	ldr	r0, [r3, #16]
 8006d44:	f000 fac4 	bl	80072d0 <__hi0bits>
 8006d48:	f1c0 0020 	rsb	r0, r0, #32
 8006d4c:	9b04      	ldr	r3, [sp, #16]
 8006d4e:	4418      	add	r0, r3
 8006d50:	f010 001f 	ands.w	r0, r0, #31
 8006d54:	f000 8086 	beq.w	8006e64 <_dtoa_r+0x91c>
 8006d58:	f1c0 0320 	rsb	r3, r0, #32
 8006d5c:	2b04      	cmp	r3, #4
 8006d5e:	dd7f      	ble.n	8006e60 <_dtoa_r+0x918>
 8006d60:	f1c0 001c 	rsb	r0, r0, #28
 8006d64:	9b04      	ldr	r3, [sp, #16]
 8006d66:	4403      	add	r3, r0
 8006d68:	4480      	add	r8, r0
 8006d6a:	4405      	add	r5, r0
 8006d6c:	9304      	str	r3, [sp, #16]
 8006d6e:	f1b8 0f00 	cmp.w	r8, #0
 8006d72:	dd05      	ble.n	8006d80 <_dtoa_r+0x838>
 8006d74:	4659      	mov	r1, fp
 8006d76:	4642      	mov	r2, r8
 8006d78:	4620      	mov	r0, r4
 8006d7a:	f000 fc0f 	bl	800759c <__lshift>
 8006d7e:	4683      	mov	fp, r0
 8006d80:	9b04      	ldr	r3, [sp, #16]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	dd05      	ble.n	8006d92 <_dtoa_r+0x84a>
 8006d86:	4631      	mov	r1, r6
 8006d88:	461a      	mov	r2, r3
 8006d8a:	4620      	mov	r0, r4
 8006d8c:	f000 fc06 	bl	800759c <__lshift>
 8006d90:	4606      	mov	r6, r0
 8006d92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d069      	beq.n	8006e6c <_dtoa_r+0x924>
 8006d98:	4631      	mov	r1, r6
 8006d9a:	4658      	mov	r0, fp
 8006d9c:	f000 fc6a 	bl	8007674 <__mcmp>
 8006da0:	2800      	cmp	r0, #0
 8006da2:	da63      	bge.n	8006e6c <_dtoa_r+0x924>
 8006da4:	2300      	movs	r3, #0
 8006da6:	4659      	mov	r1, fp
 8006da8:	220a      	movs	r2, #10
 8006daa:	4620      	mov	r0, r4
 8006dac:	f000 fa46 	bl	800723c <__multadd>
 8006db0:	9b08      	ldr	r3, [sp, #32]
 8006db2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006db6:	4683      	mov	fp, r0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	f000 818f 	beq.w	80070dc <_dtoa_r+0xb94>
 8006dbe:	4639      	mov	r1, r7
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	220a      	movs	r2, #10
 8006dc4:	4620      	mov	r0, r4
 8006dc6:	f000 fa39 	bl	800723c <__multadd>
 8006dca:	f1b9 0f00 	cmp.w	r9, #0
 8006dce:	4607      	mov	r7, r0
 8006dd0:	f300 808e 	bgt.w	8006ef0 <_dtoa_r+0x9a8>
 8006dd4:	9b05      	ldr	r3, [sp, #20]
 8006dd6:	2b02      	cmp	r3, #2
 8006dd8:	dc50      	bgt.n	8006e7c <_dtoa_r+0x934>
 8006dda:	e089      	b.n	8006ef0 <_dtoa_r+0x9a8>
 8006ddc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006dde:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006de2:	e75d      	b.n	8006ca0 <_dtoa_r+0x758>
 8006de4:	9b01      	ldr	r3, [sp, #4]
 8006de6:	1e5e      	subs	r6, r3, #1
 8006de8:	9b06      	ldr	r3, [sp, #24]
 8006dea:	42b3      	cmp	r3, r6
 8006dec:	bfbf      	itttt	lt
 8006dee:	9b06      	ldrlt	r3, [sp, #24]
 8006df0:	9606      	strlt	r6, [sp, #24]
 8006df2:	1af2      	sublt	r2, r6, r3
 8006df4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006df6:	bfb6      	itet	lt
 8006df8:	189b      	addlt	r3, r3, r2
 8006dfa:	1b9e      	subge	r6, r3, r6
 8006dfc:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006dfe:	9b01      	ldr	r3, [sp, #4]
 8006e00:	bfb8      	it	lt
 8006e02:	2600      	movlt	r6, #0
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	bfb5      	itete	lt
 8006e08:	eba8 0503 	sublt.w	r5, r8, r3
 8006e0c:	9b01      	ldrge	r3, [sp, #4]
 8006e0e:	2300      	movlt	r3, #0
 8006e10:	4645      	movge	r5, r8
 8006e12:	e747      	b.n	8006ca4 <_dtoa_r+0x75c>
 8006e14:	9e06      	ldr	r6, [sp, #24]
 8006e16:	9f08      	ldr	r7, [sp, #32]
 8006e18:	4645      	mov	r5, r8
 8006e1a:	e74c      	b.n	8006cb6 <_dtoa_r+0x76e>
 8006e1c:	9a06      	ldr	r2, [sp, #24]
 8006e1e:	e775      	b.n	8006d0c <_dtoa_r+0x7c4>
 8006e20:	9b05      	ldr	r3, [sp, #20]
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	dc18      	bgt.n	8006e58 <_dtoa_r+0x910>
 8006e26:	9b02      	ldr	r3, [sp, #8]
 8006e28:	b9b3      	cbnz	r3, 8006e58 <_dtoa_r+0x910>
 8006e2a:	9b03      	ldr	r3, [sp, #12]
 8006e2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e30:	b9a3      	cbnz	r3, 8006e5c <_dtoa_r+0x914>
 8006e32:	9b03      	ldr	r3, [sp, #12]
 8006e34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e38:	0d1b      	lsrs	r3, r3, #20
 8006e3a:	051b      	lsls	r3, r3, #20
 8006e3c:	b12b      	cbz	r3, 8006e4a <_dtoa_r+0x902>
 8006e3e:	9b04      	ldr	r3, [sp, #16]
 8006e40:	3301      	adds	r3, #1
 8006e42:	9304      	str	r3, [sp, #16]
 8006e44:	f108 0801 	add.w	r8, r8, #1
 8006e48:	2301      	movs	r3, #1
 8006e4a:	9306      	str	r3, [sp, #24]
 8006e4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	f47f af74 	bne.w	8006d3c <_dtoa_r+0x7f4>
 8006e54:	2001      	movs	r0, #1
 8006e56:	e779      	b.n	8006d4c <_dtoa_r+0x804>
 8006e58:	2300      	movs	r3, #0
 8006e5a:	e7f6      	b.n	8006e4a <_dtoa_r+0x902>
 8006e5c:	9b02      	ldr	r3, [sp, #8]
 8006e5e:	e7f4      	b.n	8006e4a <_dtoa_r+0x902>
 8006e60:	d085      	beq.n	8006d6e <_dtoa_r+0x826>
 8006e62:	4618      	mov	r0, r3
 8006e64:	301c      	adds	r0, #28
 8006e66:	e77d      	b.n	8006d64 <_dtoa_r+0x81c>
 8006e68:	40240000 	.word	0x40240000
 8006e6c:	9b01      	ldr	r3, [sp, #4]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	dc38      	bgt.n	8006ee4 <_dtoa_r+0x99c>
 8006e72:	9b05      	ldr	r3, [sp, #20]
 8006e74:	2b02      	cmp	r3, #2
 8006e76:	dd35      	ble.n	8006ee4 <_dtoa_r+0x99c>
 8006e78:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006e7c:	f1b9 0f00 	cmp.w	r9, #0
 8006e80:	d10d      	bne.n	8006e9e <_dtoa_r+0x956>
 8006e82:	4631      	mov	r1, r6
 8006e84:	464b      	mov	r3, r9
 8006e86:	2205      	movs	r2, #5
 8006e88:	4620      	mov	r0, r4
 8006e8a:	f000 f9d7 	bl	800723c <__multadd>
 8006e8e:	4601      	mov	r1, r0
 8006e90:	4606      	mov	r6, r0
 8006e92:	4658      	mov	r0, fp
 8006e94:	f000 fbee 	bl	8007674 <__mcmp>
 8006e98:	2800      	cmp	r0, #0
 8006e9a:	f73f adbd 	bgt.w	8006a18 <_dtoa_r+0x4d0>
 8006e9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ea0:	9d00      	ldr	r5, [sp, #0]
 8006ea2:	ea6f 0a03 	mvn.w	sl, r3
 8006ea6:	f04f 0800 	mov.w	r8, #0
 8006eaa:	4631      	mov	r1, r6
 8006eac:	4620      	mov	r0, r4
 8006eae:	f000 f9a3 	bl	80071f8 <_Bfree>
 8006eb2:	2f00      	cmp	r7, #0
 8006eb4:	f43f aeb4 	beq.w	8006c20 <_dtoa_r+0x6d8>
 8006eb8:	f1b8 0f00 	cmp.w	r8, #0
 8006ebc:	d005      	beq.n	8006eca <_dtoa_r+0x982>
 8006ebe:	45b8      	cmp	r8, r7
 8006ec0:	d003      	beq.n	8006eca <_dtoa_r+0x982>
 8006ec2:	4641      	mov	r1, r8
 8006ec4:	4620      	mov	r0, r4
 8006ec6:	f000 f997 	bl	80071f8 <_Bfree>
 8006eca:	4639      	mov	r1, r7
 8006ecc:	4620      	mov	r0, r4
 8006ece:	f000 f993 	bl	80071f8 <_Bfree>
 8006ed2:	e6a5      	b.n	8006c20 <_dtoa_r+0x6d8>
 8006ed4:	2600      	movs	r6, #0
 8006ed6:	4637      	mov	r7, r6
 8006ed8:	e7e1      	b.n	8006e9e <_dtoa_r+0x956>
 8006eda:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006edc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006ee0:	4637      	mov	r7, r6
 8006ee2:	e599      	b.n	8006a18 <_dtoa_r+0x4d0>
 8006ee4:	9b08      	ldr	r3, [sp, #32]
 8006ee6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	f000 80fd 	beq.w	80070ea <_dtoa_r+0xba2>
 8006ef0:	2d00      	cmp	r5, #0
 8006ef2:	dd05      	ble.n	8006f00 <_dtoa_r+0x9b8>
 8006ef4:	4639      	mov	r1, r7
 8006ef6:	462a      	mov	r2, r5
 8006ef8:	4620      	mov	r0, r4
 8006efa:	f000 fb4f 	bl	800759c <__lshift>
 8006efe:	4607      	mov	r7, r0
 8006f00:	9b06      	ldr	r3, [sp, #24]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d05c      	beq.n	8006fc0 <_dtoa_r+0xa78>
 8006f06:	6879      	ldr	r1, [r7, #4]
 8006f08:	4620      	mov	r0, r4
 8006f0a:	f000 f935 	bl	8007178 <_Balloc>
 8006f0e:	4605      	mov	r5, r0
 8006f10:	b928      	cbnz	r0, 8006f1e <_dtoa_r+0x9d6>
 8006f12:	4b80      	ldr	r3, [pc, #512]	; (8007114 <_dtoa_r+0xbcc>)
 8006f14:	4602      	mov	r2, r0
 8006f16:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006f1a:	f7ff bb2e 	b.w	800657a <_dtoa_r+0x32>
 8006f1e:	693a      	ldr	r2, [r7, #16]
 8006f20:	3202      	adds	r2, #2
 8006f22:	0092      	lsls	r2, r2, #2
 8006f24:	f107 010c 	add.w	r1, r7, #12
 8006f28:	300c      	adds	r0, #12
 8006f2a:	f000 f917 	bl	800715c <memcpy>
 8006f2e:	2201      	movs	r2, #1
 8006f30:	4629      	mov	r1, r5
 8006f32:	4620      	mov	r0, r4
 8006f34:	f000 fb32 	bl	800759c <__lshift>
 8006f38:	9b00      	ldr	r3, [sp, #0]
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	9301      	str	r3, [sp, #4]
 8006f3e:	9b00      	ldr	r3, [sp, #0]
 8006f40:	444b      	add	r3, r9
 8006f42:	9307      	str	r3, [sp, #28]
 8006f44:	9b02      	ldr	r3, [sp, #8]
 8006f46:	f003 0301 	and.w	r3, r3, #1
 8006f4a:	46b8      	mov	r8, r7
 8006f4c:	9306      	str	r3, [sp, #24]
 8006f4e:	4607      	mov	r7, r0
 8006f50:	9b01      	ldr	r3, [sp, #4]
 8006f52:	4631      	mov	r1, r6
 8006f54:	3b01      	subs	r3, #1
 8006f56:	4658      	mov	r0, fp
 8006f58:	9302      	str	r3, [sp, #8]
 8006f5a:	f7ff fa69 	bl	8006430 <quorem>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	3330      	adds	r3, #48	; 0x30
 8006f62:	9004      	str	r0, [sp, #16]
 8006f64:	4641      	mov	r1, r8
 8006f66:	4658      	mov	r0, fp
 8006f68:	9308      	str	r3, [sp, #32]
 8006f6a:	f000 fb83 	bl	8007674 <__mcmp>
 8006f6e:	463a      	mov	r2, r7
 8006f70:	4681      	mov	r9, r0
 8006f72:	4631      	mov	r1, r6
 8006f74:	4620      	mov	r0, r4
 8006f76:	f000 fb99 	bl	80076ac <__mdiff>
 8006f7a:	68c2      	ldr	r2, [r0, #12]
 8006f7c:	9b08      	ldr	r3, [sp, #32]
 8006f7e:	4605      	mov	r5, r0
 8006f80:	bb02      	cbnz	r2, 8006fc4 <_dtoa_r+0xa7c>
 8006f82:	4601      	mov	r1, r0
 8006f84:	4658      	mov	r0, fp
 8006f86:	f000 fb75 	bl	8007674 <__mcmp>
 8006f8a:	9b08      	ldr	r3, [sp, #32]
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	4629      	mov	r1, r5
 8006f90:	4620      	mov	r0, r4
 8006f92:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8006f96:	f000 f92f 	bl	80071f8 <_Bfree>
 8006f9a:	9b05      	ldr	r3, [sp, #20]
 8006f9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f9e:	9d01      	ldr	r5, [sp, #4]
 8006fa0:	ea43 0102 	orr.w	r1, r3, r2
 8006fa4:	9b06      	ldr	r3, [sp, #24]
 8006fa6:	430b      	orrs	r3, r1
 8006fa8:	9b08      	ldr	r3, [sp, #32]
 8006faa:	d10d      	bne.n	8006fc8 <_dtoa_r+0xa80>
 8006fac:	2b39      	cmp	r3, #57	; 0x39
 8006fae:	d029      	beq.n	8007004 <_dtoa_r+0xabc>
 8006fb0:	f1b9 0f00 	cmp.w	r9, #0
 8006fb4:	dd01      	ble.n	8006fba <_dtoa_r+0xa72>
 8006fb6:	9b04      	ldr	r3, [sp, #16]
 8006fb8:	3331      	adds	r3, #49	; 0x31
 8006fba:	9a02      	ldr	r2, [sp, #8]
 8006fbc:	7013      	strb	r3, [r2, #0]
 8006fbe:	e774      	b.n	8006eaa <_dtoa_r+0x962>
 8006fc0:	4638      	mov	r0, r7
 8006fc2:	e7b9      	b.n	8006f38 <_dtoa_r+0x9f0>
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	e7e2      	b.n	8006f8e <_dtoa_r+0xa46>
 8006fc8:	f1b9 0f00 	cmp.w	r9, #0
 8006fcc:	db06      	blt.n	8006fdc <_dtoa_r+0xa94>
 8006fce:	9905      	ldr	r1, [sp, #20]
 8006fd0:	ea41 0909 	orr.w	r9, r1, r9
 8006fd4:	9906      	ldr	r1, [sp, #24]
 8006fd6:	ea59 0101 	orrs.w	r1, r9, r1
 8006fda:	d120      	bne.n	800701e <_dtoa_r+0xad6>
 8006fdc:	2a00      	cmp	r2, #0
 8006fde:	ddec      	ble.n	8006fba <_dtoa_r+0xa72>
 8006fe0:	4659      	mov	r1, fp
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	4620      	mov	r0, r4
 8006fe6:	9301      	str	r3, [sp, #4]
 8006fe8:	f000 fad8 	bl	800759c <__lshift>
 8006fec:	4631      	mov	r1, r6
 8006fee:	4683      	mov	fp, r0
 8006ff0:	f000 fb40 	bl	8007674 <__mcmp>
 8006ff4:	2800      	cmp	r0, #0
 8006ff6:	9b01      	ldr	r3, [sp, #4]
 8006ff8:	dc02      	bgt.n	8007000 <_dtoa_r+0xab8>
 8006ffa:	d1de      	bne.n	8006fba <_dtoa_r+0xa72>
 8006ffc:	07da      	lsls	r2, r3, #31
 8006ffe:	d5dc      	bpl.n	8006fba <_dtoa_r+0xa72>
 8007000:	2b39      	cmp	r3, #57	; 0x39
 8007002:	d1d8      	bne.n	8006fb6 <_dtoa_r+0xa6e>
 8007004:	9a02      	ldr	r2, [sp, #8]
 8007006:	2339      	movs	r3, #57	; 0x39
 8007008:	7013      	strb	r3, [r2, #0]
 800700a:	462b      	mov	r3, r5
 800700c:	461d      	mov	r5, r3
 800700e:	3b01      	subs	r3, #1
 8007010:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007014:	2a39      	cmp	r2, #57	; 0x39
 8007016:	d050      	beq.n	80070ba <_dtoa_r+0xb72>
 8007018:	3201      	adds	r2, #1
 800701a:	701a      	strb	r2, [r3, #0]
 800701c:	e745      	b.n	8006eaa <_dtoa_r+0x962>
 800701e:	2a00      	cmp	r2, #0
 8007020:	dd03      	ble.n	800702a <_dtoa_r+0xae2>
 8007022:	2b39      	cmp	r3, #57	; 0x39
 8007024:	d0ee      	beq.n	8007004 <_dtoa_r+0xabc>
 8007026:	3301      	adds	r3, #1
 8007028:	e7c7      	b.n	8006fba <_dtoa_r+0xa72>
 800702a:	9a01      	ldr	r2, [sp, #4]
 800702c:	9907      	ldr	r1, [sp, #28]
 800702e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007032:	428a      	cmp	r2, r1
 8007034:	d02a      	beq.n	800708c <_dtoa_r+0xb44>
 8007036:	4659      	mov	r1, fp
 8007038:	2300      	movs	r3, #0
 800703a:	220a      	movs	r2, #10
 800703c:	4620      	mov	r0, r4
 800703e:	f000 f8fd 	bl	800723c <__multadd>
 8007042:	45b8      	cmp	r8, r7
 8007044:	4683      	mov	fp, r0
 8007046:	f04f 0300 	mov.w	r3, #0
 800704a:	f04f 020a 	mov.w	r2, #10
 800704e:	4641      	mov	r1, r8
 8007050:	4620      	mov	r0, r4
 8007052:	d107      	bne.n	8007064 <_dtoa_r+0xb1c>
 8007054:	f000 f8f2 	bl	800723c <__multadd>
 8007058:	4680      	mov	r8, r0
 800705a:	4607      	mov	r7, r0
 800705c:	9b01      	ldr	r3, [sp, #4]
 800705e:	3301      	adds	r3, #1
 8007060:	9301      	str	r3, [sp, #4]
 8007062:	e775      	b.n	8006f50 <_dtoa_r+0xa08>
 8007064:	f000 f8ea 	bl	800723c <__multadd>
 8007068:	4639      	mov	r1, r7
 800706a:	4680      	mov	r8, r0
 800706c:	2300      	movs	r3, #0
 800706e:	220a      	movs	r2, #10
 8007070:	4620      	mov	r0, r4
 8007072:	f000 f8e3 	bl	800723c <__multadd>
 8007076:	4607      	mov	r7, r0
 8007078:	e7f0      	b.n	800705c <_dtoa_r+0xb14>
 800707a:	f1b9 0f00 	cmp.w	r9, #0
 800707e:	9a00      	ldr	r2, [sp, #0]
 8007080:	bfcc      	ite	gt
 8007082:	464d      	movgt	r5, r9
 8007084:	2501      	movle	r5, #1
 8007086:	4415      	add	r5, r2
 8007088:	f04f 0800 	mov.w	r8, #0
 800708c:	4659      	mov	r1, fp
 800708e:	2201      	movs	r2, #1
 8007090:	4620      	mov	r0, r4
 8007092:	9301      	str	r3, [sp, #4]
 8007094:	f000 fa82 	bl	800759c <__lshift>
 8007098:	4631      	mov	r1, r6
 800709a:	4683      	mov	fp, r0
 800709c:	f000 faea 	bl	8007674 <__mcmp>
 80070a0:	2800      	cmp	r0, #0
 80070a2:	dcb2      	bgt.n	800700a <_dtoa_r+0xac2>
 80070a4:	d102      	bne.n	80070ac <_dtoa_r+0xb64>
 80070a6:	9b01      	ldr	r3, [sp, #4]
 80070a8:	07db      	lsls	r3, r3, #31
 80070aa:	d4ae      	bmi.n	800700a <_dtoa_r+0xac2>
 80070ac:	462b      	mov	r3, r5
 80070ae:	461d      	mov	r5, r3
 80070b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80070b4:	2a30      	cmp	r2, #48	; 0x30
 80070b6:	d0fa      	beq.n	80070ae <_dtoa_r+0xb66>
 80070b8:	e6f7      	b.n	8006eaa <_dtoa_r+0x962>
 80070ba:	9a00      	ldr	r2, [sp, #0]
 80070bc:	429a      	cmp	r2, r3
 80070be:	d1a5      	bne.n	800700c <_dtoa_r+0xac4>
 80070c0:	f10a 0a01 	add.w	sl, sl, #1
 80070c4:	2331      	movs	r3, #49	; 0x31
 80070c6:	e779      	b.n	8006fbc <_dtoa_r+0xa74>
 80070c8:	4b13      	ldr	r3, [pc, #76]	; (8007118 <_dtoa_r+0xbd0>)
 80070ca:	f7ff baaf 	b.w	800662c <_dtoa_r+0xe4>
 80070ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	f47f aa86 	bne.w	80065e2 <_dtoa_r+0x9a>
 80070d6:	4b11      	ldr	r3, [pc, #68]	; (800711c <_dtoa_r+0xbd4>)
 80070d8:	f7ff baa8 	b.w	800662c <_dtoa_r+0xe4>
 80070dc:	f1b9 0f00 	cmp.w	r9, #0
 80070e0:	dc03      	bgt.n	80070ea <_dtoa_r+0xba2>
 80070e2:	9b05      	ldr	r3, [sp, #20]
 80070e4:	2b02      	cmp	r3, #2
 80070e6:	f73f aec9 	bgt.w	8006e7c <_dtoa_r+0x934>
 80070ea:	9d00      	ldr	r5, [sp, #0]
 80070ec:	4631      	mov	r1, r6
 80070ee:	4658      	mov	r0, fp
 80070f0:	f7ff f99e 	bl	8006430 <quorem>
 80070f4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80070f8:	f805 3b01 	strb.w	r3, [r5], #1
 80070fc:	9a00      	ldr	r2, [sp, #0]
 80070fe:	1aaa      	subs	r2, r5, r2
 8007100:	4591      	cmp	r9, r2
 8007102:	ddba      	ble.n	800707a <_dtoa_r+0xb32>
 8007104:	4659      	mov	r1, fp
 8007106:	2300      	movs	r3, #0
 8007108:	220a      	movs	r2, #10
 800710a:	4620      	mov	r0, r4
 800710c:	f000 f896 	bl	800723c <__multadd>
 8007110:	4683      	mov	fp, r0
 8007112:	e7eb      	b.n	80070ec <_dtoa_r+0xba4>
 8007114:	08008a0a 	.word	0x08008a0a
 8007118:	080088c8 	.word	0x080088c8
 800711c:	0800899e 	.word	0x0800899e

08007120 <fiprintf>:
 8007120:	b40e      	push	{r1, r2, r3}
 8007122:	b503      	push	{r0, r1, lr}
 8007124:	4601      	mov	r1, r0
 8007126:	ab03      	add	r3, sp, #12
 8007128:	4805      	ldr	r0, [pc, #20]	; (8007140 <fiprintf+0x20>)
 800712a:	f853 2b04 	ldr.w	r2, [r3], #4
 800712e:	6800      	ldr	r0, [r0, #0]
 8007130:	9301      	str	r3, [sp, #4]
 8007132:	f000 fddf 	bl	8007cf4 <_vfiprintf_r>
 8007136:	b002      	add	sp, #8
 8007138:	f85d eb04 	ldr.w	lr, [sp], #4
 800713c:	b003      	add	sp, #12
 800713e:	4770      	bx	lr
 8007140:	20000018 	.word	0x20000018

08007144 <_localeconv_r>:
 8007144:	4800      	ldr	r0, [pc, #0]	; (8007148 <_localeconv_r+0x4>)
 8007146:	4770      	bx	lr
 8007148:	2000016c 	.word	0x2000016c

0800714c <malloc>:
 800714c:	4b02      	ldr	r3, [pc, #8]	; (8007158 <malloc+0xc>)
 800714e:	4601      	mov	r1, r0
 8007150:	6818      	ldr	r0, [r3, #0]
 8007152:	f000 bbef 	b.w	8007934 <_malloc_r>
 8007156:	bf00      	nop
 8007158:	20000018 	.word	0x20000018

0800715c <memcpy>:
 800715c:	440a      	add	r2, r1
 800715e:	4291      	cmp	r1, r2
 8007160:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007164:	d100      	bne.n	8007168 <memcpy+0xc>
 8007166:	4770      	bx	lr
 8007168:	b510      	push	{r4, lr}
 800716a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800716e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007172:	4291      	cmp	r1, r2
 8007174:	d1f9      	bne.n	800716a <memcpy+0xe>
 8007176:	bd10      	pop	{r4, pc}

08007178 <_Balloc>:
 8007178:	b570      	push	{r4, r5, r6, lr}
 800717a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800717c:	4604      	mov	r4, r0
 800717e:	460d      	mov	r5, r1
 8007180:	b976      	cbnz	r6, 80071a0 <_Balloc+0x28>
 8007182:	2010      	movs	r0, #16
 8007184:	f7ff ffe2 	bl	800714c <malloc>
 8007188:	4602      	mov	r2, r0
 800718a:	6260      	str	r0, [r4, #36]	; 0x24
 800718c:	b920      	cbnz	r0, 8007198 <_Balloc+0x20>
 800718e:	4b18      	ldr	r3, [pc, #96]	; (80071f0 <_Balloc+0x78>)
 8007190:	4818      	ldr	r0, [pc, #96]	; (80071f4 <_Balloc+0x7c>)
 8007192:	2166      	movs	r1, #102	; 0x66
 8007194:	f7ff f92e 	bl	80063f4 <__assert_func>
 8007198:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800719c:	6006      	str	r6, [r0, #0]
 800719e:	60c6      	str	r6, [r0, #12]
 80071a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80071a2:	68f3      	ldr	r3, [r6, #12]
 80071a4:	b183      	cbz	r3, 80071c8 <_Balloc+0x50>
 80071a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071a8:	68db      	ldr	r3, [r3, #12]
 80071aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80071ae:	b9b8      	cbnz	r0, 80071e0 <_Balloc+0x68>
 80071b0:	2101      	movs	r1, #1
 80071b2:	fa01 f605 	lsl.w	r6, r1, r5
 80071b6:	1d72      	adds	r2, r6, #5
 80071b8:	0092      	lsls	r2, r2, #2
 80071ba:	4620      	mov	r0, r4
 80071bc:	f000 fb5a 	bl	8007874 <_calloc_r>
 80071c0:	b160      	cbz	r0, 80071dc <_Balloc+0x64>
 80071c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80071c6:	e00e      	b.n	80071e6 <_Balloc+0x6e>
 80071c8:	2221      	movs	r2, #33	; 0x21
 80071ca:	2104      	movs	r1, #4
 80071cc:	4620      	mov	r0, r4
 80071ce:	f000 fb51 	bl	8007874 <_calloc_r>
 80071d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071d4:	60f0      	str	r0, [r6, #12]
 80071d6:	68db      	ldr	r3, [r3, #12]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d1e4      	bne.n	80071a6 <_Balloc+0x2e>
 80071dc:	2000      	movs	r0, #0
 80071de:	bd70      	pop	{r4, r5, r6, pc}
 80071e0:	6802      	ldr	r2, [r0, #0]
 80071e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80071e6:	2300      	movs	r3, #0
 80071e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80071ec:	e7f7      	b.n	80071de <_Balloc+0x66>
 80071ee:	bf00      	nop
 80071f0:	080088ec 	.word	0x080088ec
 80071f4:	08008a1b 	.word	0x08008a1b

080071f8 <_Bfree>:
 80071f8:	b570      	push	{r4, r5, r6, lr}
 80071fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80071fc:	4605      	mov	r5, r0
 80071fe:	460c      	mov	r4, r1
 8007200:	b976      	cbnz	r6, 8007220 <_Bfree+0x28>
 8007202:	2010      	movs	r0, #16
 8007204:	f7ff ffa2 	bl	800714c <malloc>
 8007208:	4602      	mov	r2, r0
 800720a:	6268      	str	r0, [r5, #36]	; 0x24
 800720c:	b920      	cbnz	r0, 8007218 <_Bfree+0x20>
 800720e:	4b09      	ldr	r3, [pc, #36]	; (8007234 <_Bfree+0x3c>)
 8007210:	4809      	ldr	r0, [pc, #36]	; (8007238 <_Bfree+0x40>)
 8007212:	218a      	movs	r1, #138	; 0x8a
 8007214:	f7ff f8ee 	bl	80063f4 <__assert_func>
 8007218:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800721c:	6006      	str	r6, [r0, #0]
 800721e:	60c6      	str	r6, [r0, #12]
 8007220:	b13c      	cbz	r4, 8007232 <_Bfree+0x3a>
 8007222:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007224:	6862      	ldr	r2, [r4, #4]
 8007226:	68db      	ldr	r3, [r3, #12]
 8007228:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800722c:	6021      	str	r1, [r4, #0]
 800722e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007232:	bd70      	pop	{r4, r5, r6, pc}
 8007234:	080088ec 	.word	0x080088ec
 8007238:	08008a1b 	.word	0x08008a1b

0800723c <__multadd>:
 800723c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007240:	690e      	ldr	r6, [r1, #16]
 8007242:	4607      	mov	r7, r0
 8007244:	4698      	mov	r8, r3
 8007246:	460c      	mov	r4, r1
 8007248:	f101 0014 	add.w	r0, r1, #20
 800724c:	2300      	movs	r3, #0
 800724e:	6805      	ldr	r5, [r0, #0]
 8007250:	b2a9      	uxth	r1, r5
 8007252:	fb02 8101 	mla	r1, r2, r1, r8
 8007256:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800725a:	0c2d      	lsrs	r5, r5, #16
 800725c:	fb02 c505 	mla	r5, r2, r5, ip
 8007260:	b289      	uxth	r1, r1
 8007262:	3301      	adds	r3, #1
 8007264:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007268:	429e      	cmp	r6, r3
 800726a:	f840 1b04 	str.w	r1, [r0], #4
 800726e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007272:	dcec      	bgt.n	800724e <__multadd+0x12>
 8007274:	f1b8 0f00 	cmp.w	r8, #0
 8007278:	d022      	beq.n	80072c0 <__multadd+0x84>
 800727a:	68a3      	ldr	r3, [r4, #8]
 800727c:	42b3      	cmp	r3, r6
 800727e:	dc19      	bgt.n	80072b4 <__multadd+0x78>
 8007280:	6861      	ldr	r1, [r4, #4]
 8007282:	4638      	mov	r0, r7
 8007284:	3101      	adds	r1, #1
 8007286:	f7ff ff77 	bl	8007178 <_Balloc>
 800728a:	4605      	mov	r5, r0
 800728c:	b928      	cbnz	r0, 800729a <__multadd+0x5e>
 800728e:	4602      	mov	r2, r0
 8007290:	4b0d      	ldr	r3, [pc, #52]	; (80072c8 <__multadd+0x8c>)
 8007292:	480e      	ldr	r0, [pc, #56]	; (80072cc <__multadd+0x90>)
 8007294:	21b5      	movs	r1, #181	; 0xb5
 8007296:	f7ff f8ad 	bl	80063f4 <__assert_func>
 800729a:	6922      	ldr	r2, [r4, #16]
 800729c:	3202      	adds	r2, #2
 800729e:	f104 010c 	add.w	r1, r4, #12
 80072a2:	0092      	lsls	r2, r2, #2
 80072a4:	300c      	adds	r0, #12
 80072a6:	f7ff ff59 	bl	800715c <memcpy>
 80072aa:	4621      	mov	r1, r4
 80072ac:	4638      	mov	r0, r7
 80072ae:	f7ff ffa3 	bl	80071f8 <_Bfree>
 80072b2:	462c      	mov	r4, r5
 80072b4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80072b8:	3601      	adds	r6, #1
 80072ba:	f8c3 8014 	str.w	r8, [r3, #20]
 80072be:	6126      	str	r6, [r4, #16]
 80072c0:	4620      	mov	r0, r4
 80072c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072c6:	bf00      	nop
 80072c8:	08008a0a 	.word	0x08008a0a
 80072cc:	08008a1b 	.word	0x08008a1b

080072d0 <__hi0bits>:
 80072d0:	0c03      	lsrs	r3, r0, #16
 80072d2:	041b      	lsls	r3, r3, #16
 80072d4:	b9d3      	cbnz	r3, 800730c <__hi0bits+0x3c>
 80072d6:	0400      	lsls	r0, r0, #16
 80072d8:	2310      	movs	r3, #16
 80072da:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80072de:	bf04      	itt	eq
 80072e0:	0200      	lsleq	r0, r0, #8
 80072e2:	3308      	addeq	r3, #8
 80072e4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80072e8:	bf04      	itt	eq
 80072ea:	0100      	lsleq	r0, r0, #4
 80072ec:	3304      	addeq	r3, #4
 80072ee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80072f2:	bf04      	itt	eq
 80072f4:	0080      	lsleq	r0, r0, #2
 80072f6:	3302      	addeq	r3, #2
 80072f8:	2800      	cmp	r0, #0
 80072fa:	db05      	blt.n	8007308 <__hi0bits+0x38>
 80072fc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007300:	f103 0301 	add.w	r3, r3, #1
 8007304:	bf08      	it	eq
 8007306:	2320      	moveq	r3, #32
 8007308:	4618      	mov	r0, r3
 800730a:	4770      	bx	lr
 800730c:	2300      	movs	r3, #0
 800730e:	e7e4      	b.n	80072da <__hi0bits+0xa>

08007310 <__lo0bits>:
 8007310:	6803      	ldr	r3, [r0, #0]
 8007312:	f013 0207 	ands.w	r2, r3, #7
 8007316:	4601      	mov	r1, r0
 8007318:	d00b      	beq.n	8007332 <__lo0bits+0x22>
 800731a:	07da      	lsls	r2, r3, #31
 800731c:	d424      	bmi.n	8007368 <__lo0bits+0x58>
 800731e:	0798      	lsls	r0, r3, #30
 8007320:	bf49      	itett	mi
 8007322:	085b      	lsrmi	r3, r3, #1
 8007324:	089b      	lsrpl	r3, r3, #2
 8007326:	2001      	movmi	r0, #1
 8007328:	600b      	strmi	r3, [r1, #0]
 800732a:	bf5c      	itt	pl
 800732c:	600b      	strpl	r3, [r1, #0]
 800732e:	2002      	movpl	r0, #2
 8007330:	4770      	bx	lr
 8007332:	b298      	uxth	r0, r3
 8007334:	b9b0      	cbnz	r0, 8007364 <__lo0bits+0x54>
 8007336:	0c1b      	lsrs	r3, r3, #16
 8007338:	2010      	movs	r0, #16
 800733a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800733e:	bf04      	itt	eq
 8007340:	0a1b      	lsreq	r3, r3, #8
 8007342:	3008      	addeq	r0, #8
 8007344:	071a      	lsls	r2, r3, #28
 8007346:	bf04      	itt	eq
 8007348:	091b      	lsreq	r3, r3, #4
 800734a:	3004      	addeq	r0, #4
 800734c:	079a      	lsls	r2, r3, #30
 800734e:	bf04      	itt	eq
 8007350:	089b      	lsreq	r3, r3, #2
 8007352:	3002      	addeq	r0, #2
 8007354:	07da      	lsls	r2, r3, #31
 8007356:	d403      	bmi.n	8007360 <__lo0bits+0x50>
 8007358:	085b      	lsrs	r3, r3, #1
 800735a:	f100 0001 	add.w	r0, r0, #1
 800735e:	d005      	beq.n	800736c <__lo0bits+0x5c>
 8007360:	600b      	str	r3, [r1, #0]
 8007362:	4770      	bx	lr
 8007364:	4610      	mov	r0, r2
 8007366:	e7e8      	b.n	800733a <__lo0bits+0x2a>
 8007368:	2000      	movs	r0, #0
 800736a:	4770      	bx	lr
 800736c:	2020      	movs	r0, #32
 800736e:	4770      	bx	lr

08007370 <__i2b>:
 8007370:	b510      	push	{r4, lr}
 8007372:	460c      	mov	r4, r1
 8007374:	2101      	movs	r1, #1
 8007376:	f7ff feff 	bl	8007178 <_Balloc>
 800737a:	4602      	mov	r2, r0
 800737c:	b928      	cbnz	r0, 800738a <__i2b+0x1a>
 800737e:	4b05      	ldr	r3, [pc, #20]	; (8007394 <__i2b+0x24>)
 8007380:	4805      	ldr	r0, [pc, #20]	; (8007398 <__i2b+0x28>)
 8007382:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007386:	f7ff f835 	bl	80063f4 <__assert_func>
 800738a:	2301      	movs	r3, #1
 800738c:	6144      	str	r4, [r0, #20]
 800738e:	6103      	str	r3, [r0, #16]
 8007390:	bd10      	pop	{r4, pc}
 8007392:	bf00      	nop
 8007394:	08008a0a 	.word	0x08008a0a
 8007398:	08008a1b 	.word	0x08008a1b

0800739c <__multiply>:
 800739c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073a0:	4614      	mov	r4, r2
 80073a2:	690a      	ldr	r2, [r1, #16]
 80073a4:	6923      	ldr	r3, [r4, #16]
 80073a6:	429a      	cmp	r2, r3
 80073a8:	bfb8      	it	lt
 80073aa:	460b      	movlt	r3, r1
 80073ac:	460d      	mov	r5, r1
 80073ae:	bfbc      	itt	lt
 80073b0:	4625      	movlt	r5, r4
 80073b2:	461c      	movlt	r4, r3
 80073b4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80073b8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80073bc:	68ab      	ldr	r3, [r5, #8]
 80073be:	6869      	ldr	r1, [r5, #4]
 80073c0:	eb0a 0709 	add.w	r7, sl, r9
 80073c4:	42bb      	cmp	r3, r7
 80073c6:	b085      	sub	sp, #20
 80073c8:	bfb8      	it	lt
 80073ca:	3101      	addlt	r1, #1
 80073cc:	f7ff fed4 	bl	8007178 <_Balloc>
 80073d0:	b930      	cbnz	r0, 80073e0 <__multiply+0x44>
 80073d2:	4602      	mov	r2, r0
 80073d4:	4b42      	ldr	r3, [pc, #264]	; (80074e0 <__multiply+0x144>)
 80073d6:	4843      	ldr	r0, [pc, #268]	; (80074e4 <__multiply+0x148>)
 80073d8:	f240 115d 	movw	r1, #349	; 0x15d
 80073dc:	f7ff f80a 	bl	80063f4 <__assert_func>
 80073e0:	f100 0614 	add.w	r6, r0, #20
 80073e4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80073e8:	4633      	mov	r3, r6
 80073ea:	2200      	movs	r2, #0
 80073ec:	4543      	cmp	r3, r8
 80073ee:	d31e      	bcc.n	800742e <__multiply+0x92>
 80073f0:	f105 0c14 	add.w	ip, r5, #20
 80073f4:	f104 0314 	add.w	r3, r4, #20
 80073f8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80073fc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007400:	9202      	str	r2, [sp, #8]
 8007402:	ebac 0205 	sub.w	r2, ip, r5
 8007406:	3a15      	subs	r2, #21
 8007408:	f022 0203 	bic.w	r2, r2, #3
 800740c:	3204      	adds	r2, #4
 800740e:	f105 0115 	add.w	r1, r5, #21
 8007412:	458c      	cmp	ip, r1
 8007414:	bf38      	it	cc
 8007416:	2204      	movcc	r2, #4
 8007418:	9201      	str	r2, [sp, #4]
 800741a:	9a02      	ldr	r2, [sp, #8]
 800741c:	9303      	str	r3, [sp, #12]
 800741e:	429a      	cmp	r2, r3
 8007420:	d808      	bhi.n	8007434 <__multiply+0x98>
 8007422:	2f00      	cmp	r7, #0
 8007424:	dc55      	bgt.n	80074d2 <__multiply+0x136>
 8007426:	6107      	str	r7, [r0, #16]
 8007428:	b005      	add	sp, #20
 800742a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800742e:	f843 2b04 	str.w	r2, [r3], #4
 8007432:	e7db      	b.n	80073ec <__multiply+0x50>
 8007434:	f8b3 a000 	ldrh.w	sl, [r3]
 8007438:	f1ba 0f00 	cmp.w	sl, #0
 800743c:	d020      	beq.n	8007480 <__multiply+0xe4>
 800743e:	f105 0e14 	add.w	lr, r5, #20
 8007442:	46b1      	mov	r9, r6
 8007444:	2200      	movs	r2, #0
 8007446:	f85e 4b04 	ldr.w	r4, [lr], #4
 800744a:	f8d9 b000 	ldr.w	fp, [r9]
 800744e:	b2a1      	uxth	r1, r4
 8007450:	fa1f fb8b 	uxth.w	fp, fp
 8007454:	fb0a b101 	mla	r1, sl, r1, fp
 8007458:	4411      	add	r1, r2
 800745a:	f8d9 2000 	ldr.w	r2, [r9]
 800745e:	0c24      	lsrs	r4, r4, #16
 8007460:	0c12      	lsrs	r2, r2, #16
 8007462:	fb0a 2404 	mla	r4, sl, r4, r2
 8007466:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800746a:	b289      	uxth	r1, r1
 800746c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007470:	45f4      	cmp	ip, lr
 8007472:	f849 1b04 	str.w	r1, [r9], #4
 8007476:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800747a:	d8e4      	bhi.n	8007446 <__multiply+0xaa>
 800747c:	9901      	ldr	r1, [sp, #4]
 800747e:	5072      	str	r2, [r6, r1]
 8007480:	9a03      	ldr	r2, [sp, #12]
 8007482:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007486:	3304      	adds	r3, #4
 8007488:	f1b9 0f00 	cmp.w	r9, #0
 800748c:	d01f      	beq.n	80074ce <__multiply+0x132>
 800748e:	6834      	ldr	r4, [r6, #0]
 8007490:	f105 0114 	add.w	r1, r5, #20
 8007494:	46b6      	mov	lr, r6
 8007496:	f04f 0a00 	mov.w	sl, #0
 800749a:	880a      	ldrh	r2, [r1, #0]
 800749c:	f8be b002 	ldrh.w	fp, [lr, #2]
 80074a0:	fb09 b202 	mla	r2, r9, r2, fp
 80074a4:	4492      	add	sl, r2
 80074a6:	b2a4      	uxth	r4, r4
 80074a8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80074ac:	f84e 4b04 	str.w	r4, [lr], #4
 80074b0:	f851 4b04 	ldr.w	r4, [r1], #4
 80074b4:	f8be 2000 	ldrh.w	r2, [lr]
 80074b8:	0c24      	lsrs	r4, r4, #16
 80074ba:	fb09 2404 	mla	r4, r9, r4, r2
 80074be:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80074c2:	458c      	cmp	ip, r1
 80074c4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80074c8:	d8e7      	bhi.n	800749a <__multiply+0xfe>
 80074ca:	9a01      	ldr	r2, [sp, #4]
 80074cc:	50b4      	str	r4, [r6, r2]
 80074ce:	3604      	adds	r6, #4
 80074d0:	e7a3      	b.n	800741a <__multiply+0x7e>
 80074d2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d1a5      	bne.n	8007426 <__multiply+0x8a>
 80074da:	3f01      	subs	r7, #1
 80074dc:	e7a1      	b.n	8007422 <__multiply+0x86>
 80074de:	bf00      	nop
 80074e0:	08008a0a 	.word	0x08008a0a
 80074e4:	08008a1b 	.word	0x08008a1b

080074e8 <__pow5mult>:
 80074e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074ec:	4615      	mov	r5, r2
 80074ee:	f012 0203 	ands.w	r2, r2, #3
 80074f2:	4606      	mov	r6, r0
 80074f4:	460f      	mov	r7, r1
 80074f6:	d007      	beq.n	8007508 <__pow5mult+0x20>
 80074f8:	4c25      	ldr	r4, [pc, #148]	; (8007590 <__pow5mult+0xa8>)
 80074fa:	3a01      	subs	r2, #1
 80074fc:	2300      	movs	r3, #0
 80074fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007502:	f7ff fe9b 	bl	800723c <__multadd>
 8007506:	4607      	mov	r7, r0
 8007508:	10ad      	asrs	r5, r5, #2
 800750a:	d03d      	beq.n	8007588 <__pow5mult+0xa0>
 800750c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800750e:	b97c      	cbnz	r4, 8007530 <__pow5mult+0x48>
 8007510:	2010      	movs	r0, #16
 8007512:	f7ff fe1b 	bl	800714c <malloc>
 8007516:	4602      	mov	r2, r0
 8007518:	6270      	str	r0, [r6, #36]	; 0x24
 800751a:	b928      	cbnz	r0, 8007528 <__pow5mult+0x40>
 800751c:	4b1d      	ldr	r3, [pc, #116]	; (8007594 <__pow5mult+0xac>)
 800751e:	481e      	ldr	r0, [pc, #120]	; (8007598 <__pow5mult+0xb0>)
 8007520:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007524:	f7fe ff66 	bl	80063f4 <__assert_func>
 8007528:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800752c:	6004      	str	r4, [r0, #0]
 800752e:	60c4      	str	r4, [r0, #12]
 8007530:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007534:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007538:	b94c      	cbnz	r4, 800754e <__pow5mult+0x66>
 800753a:	f240 2171 	movw	r1, #625	; 0x271
 800753e:	4630      	mov	r0, r6
 8007540:	f7ff ff16 	bl	8007370 <__i2b>
 8007544:	2300      	movs	r3, #0
 8007546:	f8c8 0008 	str.w	r0, [r8, #8]
 800754a:	4604      	mov	r4, r0
 800754c:	6003      	str	r3, [r0, #0]
 800754e:	f04f 0900 	mov.w	r9, #0
 8007552:	07eb      	lsls	r3, r5, #31
 8007554:	d50a      	bpl.n	800756c <__pow5mult+0x84>
 8007556:	4639      	mov	r1, r7
 8007558:	4622      	mov	r2, r4
 800755a:	4630      	mov	r0, r6
 800755c:	f7ff ff1e 	bl	800739c <__multiply>
 8007560:	4639      	mov	r1, r7
 8007562:	4680      	mov	r8, r0
 8007564:	4630      	mov	r0, r6
 8007566:	f7ff fe47 	bl	80071f8 <_Bfree>
 800756a:	4647      	mov	r7, r8
 800756c:	106d      	asrs	r5, r5, #1
 800756e:	d00b      	beq.n	8007588 <__pow5mult+0xa0>
 8007570:	6820      	ldr	r0, [r4, #0]
 8007572:	b938      	cbnz	r0, 8007584 <__pow5mult+0x9c>
 8007574:	4622      	mov	r2, r4
 8007576:	4621      	mov	r1, r4
 8007578:	4630      	mov	r0, r6
 800757a:	f7ff ff0f 	bl	800739c <__multiply>
 800757e:	6020      	str	r0, [r4, #0]
 8007580:	f8c0 9000 	str.w	r9, [r0]
 8007584:	4604      	mov	r4, r0
 8007586:	e7e4      	b.n	8007552 <__pow5mult+0x6a>
 8007588:	4638      	mov	r0, r7
 800758a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800758e:	bf00      	nop
 8007590:	08008b70 	.word	0x08008b70
 8007594:	080088ec 	.word	0x080088ec
 8007598:	08008a1b 	.word	0x08008a1b

0800759c <__lshift>:
 800759c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075a0:	460c      	mov	r4, r1
 80075a2:	6849      	ldr	r1, [r1, #4]
 80075a4:	6923      	ldr	r3, [r4, #16]
 80075a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80075aa:	68a3      	ldr	r3, [r4, #8]
 80075ac:	4607      	mov	r7, r0
 80075ae:	4691      	mov	r9, r2
 80075b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80075b4:	f108 0601 	add.w	r6, r8, #1
 80075b8:	42b3      	cmp	r3, r6
 80075ba:	db0b      	blt.n	80075d4 <__lshift+0x38>
 80075bc:	4638      	mov	r0, r7
 80075be:	f7ff fddb 	bl	8007178 <_Balloc>
 80075c2:	4605      	mov	r5, r0
 80075c4:	b948      	cbnz	r0, 80075da <__lshift+0x3e>
 80075c6:	4602      	mov	r2, r0
 80075c8:	4b28      	ldr	r3, [pc, #160]	; (800766c <__lshift+0xd0>)
 80075ca:	4829      	ldr	r0, [pc, #164]	; (8007670 <__lshift+0xd4>)
 80075cc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80075d0:	f7fe ff10 	bl	80063f4 <__assert_func>
 80075d4:	3101      	adds	r1, #1
 80075d6:	005b      	lsls	r3, r3, #1
 80075d8:	e7ee      	b.n	80075b8 <__lshift+0x1c>
 80075da:	2300      	movs	r3, #0
 80075dc:	f100 0114 	add.w	r1, r0, #20
 80075e0:	f100 0210 	add.w	r2, r0, #16
 80075e4:	4618      	mov	r0, r3
 80075e6:	4553      	cmp	r3, sl
 80075e8:	db33      	blt.n	8007652 <__lshift+0xb6>
 80075ea:	6920      	ldr	r0, [r4, #16]
 80075ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80075f0:	f104 0314 	add.w	r3, r4, #20
 80075f4:	f019 091f 	ands.w	r9, r9, #31
 80075f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80075fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007600:	d02b      	beq.n	800765a <__lshift+0xbe>
 8007602:	f1c9 0e20 	rsb	lr, r9, #32
 8007606:	468a      	mov	sl, r1
 8007608:	2200      	movs	r2, #0
 800760a:	6818      	ldr	r0, [r3, #0]
 800760c:	fa00 f009 	lsl.w	r0, r0, r9
 8007610:	4302      	orrs	r2, r0
 8007612:	f84a 2b04 	str.w	r2, [sl], #4
 8007616:	f853 2b04 	ldr.w	r2, [r3], #4
 800761a:	459c      	cmp	ip, r3
 800761c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007620:	d8f3      	bhi.n	800760a <__lshift+0x6e>
 8007622:	ebac 0304 	sub.w	r3, ip, r4
 8007626:	3b15      	subs	r3, #21
 8007628:	f023 0303 	bic.w	r3, r3, #3
 800762c:	3304      	adds	r3, #4
 800762e:	f104 0015 	add.w	r0, r4, #21
 8007632:	4584      	cmp	ip, r0
 8007634:	bf38      	it	cc
 8007636:	2304      	movcc	r3, #4
 8007638:	50ca      	str	r2, [r1, r3]
 800763a:	b10a      	cbz	r2, 8007640 <__lshift+0xa4>
 800763c:	f108 0602 	add.w	r6, r8, #2
 8007640:	3e01      	subs	r6, #1
 8007642:	4638      	mov	r0, r7
 8007644:	612e      	str	r6, [r5, #16]
 8007646:	4621      	mov	r1, r4
 8007648:	f7ff fdd6 	bl	80071f8 <_Bfree>
 800764c:	4628      	mov	r0, r5
 800764e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007652:	f842 0f04 	str.w	r0, [r2, #4]!
 8007656:	3301      	adds	r3, #1
 8007658:	e7c5      	b.n	80075e6 <__lshift+0x4a>
 800765a:	3904      	subs	r1, #4
 800765c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007660:	f841 2f04 	str.w	r2, [r1, #4]!
 8007664:	459c      	cmp	ip, r3
 8007666:	d8f9      	bhi.n	800765c <__lshift+0xc0>
 8007668:	e7ea      	b.n	8007640 <__lshift+0xa4>
 800766a:	bf00      	nop
 800766c:	08008a0a 	.word	0x08008a0a
 8007670:	08008a1b 	.word	0x08008a1b

08007674 <__mcmp>:
 8007674:	b530      	push	{r4, r5, lr}
 8007676:	6902      	ldr	r2, [r0, #16]
 8007678:	690c      	ldr	r4, [r1, #16]
 800767a:	1b12      	subs	r2, r2, r4
 800767c:	d10e      	bne.n	800769c <__mcmp+0x28>
 800767e:	f100 0314 	add.w	r3, r0, #20
 8007682:	3114      	adds	r1, #20
 8007684:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007688:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800768c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007690:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007694:	42a5      	cmp	r5, r4
 8007696:	d003      	beq.n	80076a0 <__mcmp+0x2c>
 8007698:	d305      	bcc.n	80076a6 <__mcmp+0x32>
 800769a:	2201      	movs	r2, #1
 800769c:	4610      	mov	r0, r2
 800769e:	bd30      	pop	{r4, r5, pc}
 80076a0:	4283      	cmp	r3, r0
 80076a2:	d3f3      	bcc.n	800768c <__mcmp+0x18>
 80076a4:	e7fa      	b.n	800769c <__mcmp+0x28>
 80076a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80076aa:	e7f7      	b.n	800769c <__mcmp+0x28>

080076ac <__mdiff>:
 80076ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076b0:	460c      	mov	r4, r1
 80076b2:	4606      	mov	r6, r0
 80076b4:	4611      	mov	r1, r2
 80076b6:	4620      	mov	r0, r4
 80076b8:	4617      	mov	r7, r2
 80076ba:	f7ff ffdb 	bl	8007674 <__mcmp>
 80076be:	1e05      	subs	r5, r0, #0
 80076c0:	d110      	bne.n	80076e4 <__mdiff+0x38>
 80076c2:	4629      	mov	r1, r5
 80076c4:	4630      	mov	r0, r6
 80076c6:	f7ff fd57 	bl	8007178 <_Balloc>
 80076ca:	b930      	cbnz	r0, 80076da <__mdiff+0x2e>
 80076cc:	4b39      	ldr	r3, [pc, #228]	; (80077b4 <__mdiff+0x108>)
 80076ce:	4602      	mov	r2, r0
 80076d0:	f240 2132 	movw	r1, #562	; 0x232
 80076d4:	4838      	ldr	r0, [pc, #224]	; (80077b8 <__mdiff+0x10c>)
 80076d6:	f7fe fe8d 	bl	80063f4 <__assert_func>
 80076da:	2301      	movs	r3, #1
 80076dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80076e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076e4:	bfa4      	itt	ge
 80076e6:	463b      	movge	r3, r7
 80076e8:	4627      	movge	r7, r4
 80076ea:	4630      	mov	r0, r6
 80076ec:	6879      	ldr	r1, [r7, #4]
 80076ee:	bfa6      	itte	ge
 80076f0:	461c      	movge	r4, r3
 80076f2:	2500      	movge	r5, #0
 80076f4:	2501      	movlt	r5, #1
 80076f6:	f7ff fd3f 	bl	8007178 <_Balloc>
 80076fa:	b920      	cbnz	r0, 8007706 <__mdiff+0x5a>
 80076fc:	4b2d      	ldr	r3, [pc, #180]	; (80077b4 <__mdiff+0x108>)
 80076fe:	4602      	mov	r2, r0
 8007700:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007704:	e7e6      	b.n	80076d4 <__mdiff+0x28>
 8007706:	693e      	ldr	r6, [r7, #16]
 8007708:	60c5      	str	r5, [r0, #12]
 800770a:	6925      	ldr	r5, [r4, #16]
 800770c:	f107 0114 	add.w	r1, r7, #20
 8007710:	f104 0914 	add.w	r9, r4, #20
 8007714:	f100 0e14 	add.w	lr, r0, #20
 8007718:	f107 0210 	add.w	r2, r7, #16
 800771c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007720:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007724:	46f2      	mov	sl, lr
 8007726:	2700      	movs	r7, #0
 8007728:	f859 3b04 	ldr.w	r3, [r9], #4
 800772c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007730:	fa1f f883 	uxth.w	r8, r3
 8007734:	fa17 f78b 	uxtah	r7, r7, fp
 8007738:	0c1b      	lsrs	r3, r3, #16
 800773a:	eba7 0808 	sub.w	r8, r7, r8
 800773e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007742:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007746:	fa1f f888 	uxth.w	r8, r8
 800774a:	141f      	asrs	r7, r3, #16
 800774c:	454d      	cmp	r5, r9
 800774e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007752:	f84a 3b04 	str.w	r3, [sl], #4
 8007756:	d8e7      	bhi.n	8007728 <__mdiff+0x7c>
 8007758:	1b2b      	subs	r3, r5, r4
 800775a:	3b15      	subs	r3, #21
 800775c:	f023 0303 	bic.w	r3, r3, #3
 8007760:	3304      	adds	r3, #4
 8007762:	3415      	adds	r4, #21
 8007764:	42a5      	cmp	r5, r4
 8007766:	bf38      	it	cc
 8007768:	2304      	movcc	r3, #4
 800776a:	4419      	add	r1, r3
 800776c:	4473      	add	r3, lr
 800776e:	469e      	mov	lr, r3
 8007770:	460d      	mov	r5, r1
 8007772:	4565      	cmp	r5, ip
 8007774:	d30e      	bcc.n	8007794 <__mdiff+0xe8>
 8007776:	f10c 0203 	add.w	r2, ip, #3
 800777a:	1a52      	subs	r2, r2, r1
 800777c:	f022 0203 	bic.w	r2, r2, #3
 8007780:	3903      	subs	r1, #3
 8007782:	458c      	cmp	ip, r1
 8007784:	bf38      	it	cc
 8007786:	2200      	movcc	r2, #0
 8007788:	441a      	add	r2, r3
 800778a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800778e:	b17b      	cbz	r3, 80077b0 <__mdiff+0x104>
 8007790:	6106      	str	r6, [r0, #16]
 8007792:	e7a5      	b.n	80076e0 <__mdiff+0x34>
 8007794:	f855 8b04 	ldr.w	r8, [r5], #4
 8007798:	fa17 f488 	uxtah	r4, r7, r8
 800779c:	1422      	asrs	r2, r4, #16
 800779e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80077a2:	b2a4      	uxth	r4, r4
 80077a4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80077a8:	f84e 4b04 	str.w	r4, [lr], #4
 80077ac:	1417      	asrs	r7, r2, #16
 80077ae:	e7e0      	b.n	8007772 <__mdiff+0xc6>
 80077b0:	3e01      	subs	r6, #1
 80077b2:	e7ea      	b.n	800778a <__mdiff+0xde>
 80077b4:	08008a0a 	.word	0x08008a0a
 80077b8:	08008a1b 	.word	0x08008a1b

080077bc <__d2b>:
 80077bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80077c0:	4689      	mov	r9, r1
 80077c2:	2101      	movs	r1, #1
 80077c4:	ec57 6b10 	vmov	r6, r7, d0
 80077c8:	4690      	mov	r8, r2
 80077ca:	f7ff fcd5 	bl	8007178 <_Balloc>
 80077ce:	4604      	mov	r4, r0
 80077d0:	b930      	cbnz	r0, 80077e0 <__d2b+0x24>
 80077d2:	4602      	mov	r2, r0
 80077d4:	4b25      	ldr	r3, [pc, #148]	; (800786c <__d2b+0xb0>)
 80077d6:	4826      	ldr	r0, [pc, #152]	; (8007870 <__d2b+0xb4>)
 80077d8:	f240 310a 	movw	r1, #778	; 0x30a
 80077dc:	f7fe fe0a 	bl	80063f4 <__assert_func>
 80077e0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80077e4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80077e8:	bb35      	cbnz	r5, 8007838 <__d2b+0x7c>
 80077ea:	2e00      	cmp	r6, #0
 80077ec:	9301      	str	r3, [sp, #4]
 80077ee:	d028      	beq.n	8007842 <__d2b+0x86>
 80077f0:	4668      	mov	r0, sp
 80077f2:	9600      	str	r6, [sp, #0]
 80077f4:	f7ff fd8c 	bl	8007310 <__lo0bits>
 80077f8:	9900      	ldr	r1, [sp, #0]
 80077fa:	b300      	cbz	r0, 800783e <__d2b+0x82>
 80077fc:	9a01      	ldr	r2, [sp, #4]
 80077fe:	f1c0 0320 	rsb	r3, r0, #32
 8007802:	fa02 f303 	lsl.w	r3, r2, r3
 8007806:	430b      	orrs	r3, r1
 8007808:	40c2      	lsrs	r2, r0
 800780a:	6163      	str	r3, [r4, #20]
 800780c:	9201      	str	r2, [sp, #4]
 800780e:	9b01      	ldr	r3, [sp, #4]
 8007810:	61a3      	str	r3, [r4, #24]
 8007812:	2b00      	cmp	r3, #0
 8007814:	bf14      	ite	ne
 8007816:	2202      	movne	r2, #2
 8007818:	2201      	moveq	r2, #1
 800781a:	6122      	str	r2, [r4, #16]
 800781c:	b1d5      	cbz	r5, 8007854 <__d2b+0x98>
 800781e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007822:	4405      	add	r5, r0
 8007824:	f8c9 5000 	str.w	r5, [r9]
 8007828:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800782c:	f8c8 0000 	str.w	r0, [r8]
 8007830:	4620      	mov	r0, r4
 8007832:	b003      	add	sp, #12
 8007834:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007838:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800783c:	e7d5      	b.n	80077ea <__d2b+0x2e>
 800783e:	6161      	str	r1, [r4, #20]
 8007840:	e7e5      	b.n	800780e <__d2b+0x52>
 8007842:	a801      	add	r0, sp, #4
 8007844:	f7ff fd64 	bl	8007310 <__lo0bits>
 8007848:	9b01      	ldr	r3, [sp, #4]
 800784a:	6163      	str	r3, [r4, #20]
 800784c:	2201      	movs	r2, #1
 800784e:	6122      	str	r2, [r4, #16]
 8007850:	3020      	adds	r0, #32
 8007852:	e7e3      	b.n	800781c <__d2b+0x60>
 8007854:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007858:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800785c:	f8c9 0000 	str.w	r0, [r9]
 8007860:	6918      	ldr	r0, [r3, #16]
 8007862:	f7ff fd35 	bl	80072d0 <__hi0bits>
 8007866:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800786a:	e7df      	b.n	800782c <__d2b+0x70>
 800786c:	08008a0a 	.word	0x08008a0a
 8007870:	08008a1b 	.word	0x08008a1b

08007874 <_calloc_r>:
 8007874:	b513      	push	{r0, r1, r4, lr}
 8007876:	434a      	muls	r2, r1
 8007878:	4611      	mov	r1, r2
 800787a:	9201      	str	r2, [sp, #4]
 800787c:	f000 f85a 	bl	8007934 <_malloc_r>
 8007880:	4604      	mov	r4, r0
 8007882:	b118      	cbz	r0, 800788c <_calloc_r+0x18>
 8007884:	9a01      	ldr	r2, [sp, #4]
 8007886:	2100      	movs	r1, #0
 8007888:	f7fe f8c2 	bl	8005a10 <memset>
 800788c:	4620      	mov	r0, r4
 800788e:	b002      	add	sp, #8
 8007890:	bd10      	pop	{r4, pc}
	...

08007894 <_free_r>:
 8007894:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007896:	2900      	cmp	r1, #0
 8007898:	d048      	beq.n	800792c <_free_r+0x98>
 800789a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800789e:	9001      	str	r0, [sp, #4]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	f1a1 0404 	sub.w	r4, r1, #4
 80078a6:	bfb8      	it	lt
 80078a8:	18e4      	addlt	r4, r4, r3
 80078aa:	f000 fe75 	bl	8008598 <__malloc_lock>
 80078ae:	4a20      	ldr	r2, [pc, #128]	; (8007930 <_free_r+0x9c>)
 80078b0:	9801      	ldr	r0, [sp, #4]
 80078b2:	6813      	ldr	r3, [r2, #0]
 80078b4:	4615      	mov	r5, r2
 80078b6:	b933      	cbnz	r3, 80078c6 <_free_r+0x32>
 80078b8:	6063      	str	r3, [r4, #4]
 80078ba:	6014      	str	r4, [r2, #0]
 80078bc:	b003      	add	sp, #12
 80078be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80078c2:	f000 be6f 	b.w	80085a4 <__malloc_unlock>
 80078c6:	42a3      	cmp	r3, r4
 80078c8:	d90b      	bls.n	80078e2 <_free_r+0x4e>
 80078ca:	6821      	ldr	r1, [r4, #0]
 80078cc:	1862      	adds	r2, r4, r1
 80078ce:	4293      	cmp	r3, r2
 80078d0:	bf04      	itt	eq
 80078d2:	681a      	ldreq	r2, [r3, #0]
 80078d4:	685b      	ldreq	r3, [r3, #4]
 80078d6:	6063      	str	r3, [r4, #4]
 80078d8:	bf04      	itt	eq
 80078da:	1852      	addeq	r2, r2, r1
 80078dc:	6022      	streq	r2, [r4, #0]
 80078de:	602c      	str	r4, [r5, #0]
 80078e0:	e7ec      	b.n	80078bc <_free_r+0x28>
 80078e2:	461a      	mov	r2, r3
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	b10b      	cbz	r3, 80078ec <_free_r+0x58>
 80078e8:	42a3      	cmp	r3, r4
 80078ea:	d9fa      	bls.n	80078e2 <_free_r+0x4e>
 80078ec:	6811      	ldr	r1, [r2, #0]
 80078ee:	1855      	adds	r5, r2, r1
 80078f0:	42a5      	cmp	r5, r4
 80078f2:	d10b      	bne.n	800790c <_free_r+0x78>
 80078f4:	6824      	ldr	r4, [r4, #0]
 80078f6:	4421      	add	r1, r4
 80078f8:	1854      	adds	r4, r2, r1
 80078fa:	42a3      	cmp	r3, r4
 80078fc:	6011      	str	r1, [r2, #0]
 80078fe:	d1dd      	bne.n	80078bc <_free_r+0x28>
 8007900:	681c      	ldr	r4, [r3, #0]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	6053      	str	r3, [r2, #4]
 8007906:	4421      	add	r1, r4
 8007908:	6011      	str	r1, [r2, #0]
 800790a:	e7d7      	b.n	80078bc <_free_r+0x28>
 800790c:	d902      	bls.n	8007914 <_free_r+0x80>
 800790e:	230c      	movs	r3, #12
 8007910:	6003      	str	r3, [r0, #0]
 8007912:	e7d3      	b.n	80078bc <_free_r+0x28>
 8007914:	6825      	ldr	r5, [r4, #0]
 8007916:	1961      	adds	r1, r4, r5
 8007918:	428b      	cmp	r3, r1
 800791a:	bf04      	itt	eq
 800791c:	6819      	ldreq	r1, [r3, #0]
 800791e:	685b      	ldreq	r3, [r3, #4]
 8007920:	6063      	str	r3, [r4, #4]
 8007922:	bf04      	itt	eq
 8007924:	1949      	addeq	r1, r1, r5
 8007926:	6021      	streq	r1, [r4, #0]
 8007928:	6054      	str	r4, [r2, #4]
 800792a:	e7c7      	b.n	80078bc <_free_r+0x28>
 800792c:	b003      	add	sp, #12
 800792e:	bd30      	pop	{r4, r5, pc}
 8007930:	20000234 	.word	0x20000234

08007934 <_malloc_r>:
 8007934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007936:	1ccd      	adds	r5, r1, #3
 8007938:	f025 0503 	bic.w	r5, r5, #3
 800793c:	3508      	adds	r5, #8
 800793e:	2d0c      	cmp	r5, #12
 8007940:	bf38      	it	cc
 8007942:	250c      	movcc	r5, #12
 8007944:	2d00      	cmp	r5, #0
 8007946:	4606      	mov	r6, r0
 8007948:	db01      	blt.n	800794e <_malloc_r+0x1a>
 800794a:	42a9      	cmp	r1, r5
 800794c:	d903      	bls.n	8007956 <_malloc_r+0x22>
 800794e:	230c      	movs	r3, #12
 8007950:	6033      	str	r3, [r6, #0]
 8007952:	2000      	movs	r0, #0
 8007954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007956:	f000 fe1f 	bl	8008598 <__malloc_lock>
 800795a:	4921      	ldr	r1, [pc, #132]	; (80079e0 <_malloc_r+0xac>)
 800795c:	680a      	ldr	r2, [r1, #0]
 800795e:	4614      	mov	r4, r2
 8007960:	b99c      	cbnz	r4, 800798a <_malloc_r+0x56>
 8007962:	4f20      	ldr	r7, [pc, #128]	; (80079e4 <_malloc_r+0xb0>)
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	b923      	cbnz	r3, 8007972 <_malloc_r+0x3e>
 8007968:	4621      	mov	r1, r4
 800796a:	4630      	mov	r0, r6
 800796c:	f000 faf2 	bl	8007f54 <_sbrk_r>
 8007970:	6038      	str	r0, [r7, #0]
 8007972:	4629      	mov	r1, r5
 8007974:	4630      	mov	r0, r6
 8007976:	f000 faed 	bl	8007f54 <_sbrk_r>
 800797a:	1c43      	adds	r3, r0, #1
 800797c:	d123      	bne.n	80079c6 <_malloc_r+0x92>
 800797e:	230c      	movs	r3, #12
 8007980:	6033      	str	r3, [r6, #0]
 8007982:	4630      	mov	r0, r6
 8007984:	f000 fe0e 	bl	80085a4 <__malloc_unlock>
 8007988:	e7e3      	b.n	8007952 <_malloc_r+0x1e>
 800798a:	6823      	ldr	r3, [r4, #0]
 800798c:	1b5b      	subs	r3, r3, r5
 800798e:	d417      	bmi.n	80079c0 <_malloc_r+0x8c>
 8007990:	2b0b      	cmp	r3, #11
 8007992:	d903      	bls.n	800799c <_malloc_r+0x68>
 8007994:	6023      	str	r3, [r4, #0]
 8007996:	441c      	add	r4, r3
 8007998:	6025      	str	r5, [r4, #0]
 800799a:	e004      	b.n	80079a6 <_malloc_r+0x72>
 800799c:	6863      	ldr	r3, [r4, #4]
 800799e:	42a2      	cmp	r2, r4
 80079a0:	bf0c      	ite	eq
 80079a2:	600b      	streq	r3, [r1, #0]
 80079a4:	6053      	strne	r3, [r2, #4]
 80079a6:	4630      	mov	r0, r6
 80079a8:	f000 fdfc 	bl	80085a4 <__malloc_unlock>
 80079ac:	f104 000b 	add.w	r0, r4, #11
 80079b0:	1d23      	adds	r3, r4, #4
 80079b2:	f020 0007 	bic.w	r0, r0, #7
 80079b6:	1ac2      	subs	r2, r0, r3
 80079b8:	d0cc      	beq.n	8007954 <_malloc_r+0x20>
 80079ba:	1a1b      	subs	r3, r3, r0
 80079bc:	50a3      	str	r3, [r4, r2]
 80079be:	e7c9      	b.n	8007954 <_malloc_r+0x20>
 80079c0:	4622      	mov	r2, r4
 80079c2:	6864      	ldr	r4, [r4, #4]
 80079c4:	e7cc      	b.n	8007960 <_malloc_r+0x2c>
 80079c6:	1cc4      	adds	r4, r0, #3
 80079c8:	f024 0403 	bic.w	r4, r4, #3
 80079cc:	42a0      	cmp	r0, r4
 80079ce:	d0e3      	beq.n	8007998 <_malloc_r+0x64>
 80079d0:	1a21      	subs	r1, r4, r0
 80079d2:	4630      	mov	r0, r6
 80079d4:	f000 fabe 	bl	8007f54 <_sbrk_r>
 80079d8:	3001      	adds	r0, #1
 80079da:	d1dd      	bne.n	8007998 <_malloc_r+0x64>
 80079dc:	e7cf      	b.n	800797e <_malloc_r+0x4a>
 80079de:	bf00      	nop
 80079e0:	20000234 	.word	0x20000234
 80079e4:	20000238 	.word	0x20000238

080079e8 <__ssputs_r>:
 80079e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079ec:	688e      	ldr	r6, [r1, #8]
 80079ee:	429e      	cmp	r6, r3
 80079f0:	4682      	mov	sl, r0
 80079f2:	460c      	mov	r4, r1
 80079f4:	4690      	mov	r8, r2
 80079f6:	461f      	mov	r7, r3
 80079f8:	d838      	bhi.n	8007a6c <__ssputs_r+0x84>
 80079fa:	898a      	ldrh	r2, [r1, #12]
 80079fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007a00:	d032      	beq.n	8007a68 <__ssputs_r+0x80>
 8007a02:	6825      	ldr	r5, [r4, #0]
 8007a04:	6909      	ldr	r1, [r1, #16]
 8007a06:	eba5 0901 	sub.w	r9, r5, r1
 8007a0a:	6965      	ldr	r5, [r4, #20]
 8007a0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007a14:	3301      	adds	r3, #1
 8007a16:	444b      	add	r3, r9
 8007a18:	106d      	asrs	r5, r5, #1
 8007a1a:	429d      	cmp	r5, r3
 8007a1c:	bf38      	it	cc
 8007a1e:	461d      	movcc	r5, r3
 8007a20:	0553      	lsls	r3, r2, #21
 8007a22:	d531      	bpl.n	8007a88 <__ssputs_r+0xa0>
 8007a24:	4629      	mov	r1, r5
 8007a26:	f7ff ff85 	bl	8007934 <_malloc_r>
 8007a2a:	4606      	mov	r6, r0
 8007a2c:	b950      	cbnz	r0, 8007a44 <__ssputs_r+0x5c>
 8007a2e:	230c      	movs	r3, #12
 8007a30:	f8ca 3000 	str.w	r3, [sl]
 8007a34:	89a3      	ldrh	r3, [r4, #12]
 8007a36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a3a:	81a3      	strh	r3, [r4, #12]
 8007a3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a44:	6921      	ldr	r1, [r4, #16]
 8007a46:	464a      	mov	r2, r9
 8007a48:	f7ff fb88 	bl	800715c <memcpy>
 8007a4c:	89a3      	ldrh	r3, [r4, #12]
 8007a4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007a52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a56:	81a3      	strh	r3, [r4, #12]
 8007a58:	6126      	str	r6, [r4, #16]
 8007a5a:	6165      	str	r5, [r4, #20]
 8007a5c:	444e      	add	r6, r9
 8007a5e:	eba5 0509 	sub.w	r5, r5, r9
 8007a62:	6026      	str	r6, [r4, #0]
 8007a64:	60a5      	str	r5, [r4, #8]
 8007a66:	463e      	mov	r6, r7
 8007a68:	42be      	cmp	r6, r7
 8007a6a:	d900      	bls.n	8007a6e <__ssputs_r+0x86>
 8007a6c:	463e      	mov	r6, r7
 8007a6e:	4632      	mov	r2, r6
 8007a70:	6820      	ldr	r0, [r4, #0]
 8007a72:	4641      	mov	r1, r8
 8007a74:	f000 fd76 	bl	8008564 <memmove>
 8007a78:	68a3      	ldr	r3, [r4, #8]
 8007a7a:	6822      	ldr	r2, [r4, #0]
 8007a7c:	1b9b      	subs	r3, r3, r6
 8007a7e:	4432      	add	r2, r6
 8007a80:	60a3      	str	r3, [r4, #8]
 8007a82:	6022      	str	r2, [r4, #0]
 8007a84:	2000      	movs	r0, #0
 8007a86:	e7db      	b.n	8007a40 <__ssputs_r+0x58>
 8007a88:	462a      	mov	r2, r5
 8007a8a:	f000 fd91 	bl	80085b0 <_realloc_r>
 8007a8e:	4606      	mov	r6, r0
 8007a90:	2800      	cmp	r0, #0
 8007a92:	d1e1      	bne.n	8007a58 <__ssputs_r+0x70>
 8007a94:	6921      	ldr	r1, [r4, #16]
 8007a96:	4650      	mov	r0, sl
 8007a98:	f7ff fefc 	bl	8007894 <_free_r>
 8007a9c:	e7c7      	b.n	8007a2e <__ssputs_r+0x46>
	...

08007aa0 <_svfiprintf_r>:
 8007aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aa4:	4698      	mov	r8, r3
 8007aa6:	898b      	ldrh	r3, [r1, #12]
 8007aa8:	061b      	lsls	r3, r3, #24
 8007aaa:	b09d      	sub	sp, #116	; 0x74
 8007aac:	4607      	mov	r7, r0
 8007aae:	460d      	mov	r5, r1
 8007ab0:	4614      	mov	r4, r2
 8007ab2:	d50e      	bpl.n	8007ad2 <_svfiprintf_r+0x32>
 8007ab4:	690b      	ldr	r3, [r1, #16]
 8007ab6:	b963      	cbnz	r3, 8007ad2 <_svfiprintf_r+0x32>
 8007ab8:	2140      	movs	r1, #64	; 0x40
 8007aba:	f7ff ff3b 	bl	8007934 <_malloc_r>
 8007abe:	6028      	str	r0, [r5, #0]
 8007ac0:	6128      	str	r0, [r5, #16]
 8007ac2:	b920      	cbnz	r0, 8007ace <_svfiprintf_r+0x2e>
 8007ac4:	230c      	movs	r3, #12
 8007ac6:	603b      	str	r3, [r7, #0]
 8007ac8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007acc:	e0d1      	b.n	8007c72 <_svfiprintf_r+0x1d2>
 8007ace:	2340      	movs	r3, #64	; 0x40
 8007ad0:	616b      	str	r3, [r5, #20]
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	9309      	str	r3, [sp, #36]	; 0x24
 8007ad6:	2320      	movs	r3, #32
 8007ad8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007adc:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ae0:	2330      	movs	r3, #48	; 0x30
 8007ae2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007c8c <_svfiprintf_r+0x1ec>
 8007ae6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007aea:	f04f 0901 	mov.w	r9, #1
 8007aee:	4623      	mov	r3, r4
 8007af0:	469a      	mov	sl, r3
 8007af2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007af6:	b10a      	cbz	r2, 8007afc <_svfiprintf_r+0x5c>
 8007af8:	2a25      	cmp	r2, #37	; 0x25
 8007afa:	d1f9      	bne.n	8007af0 <_svfiprintf_r+0x50>
 8007afc:	ebba 0b04 	subs.w	fp, sl, r4
 8007b00:	d00b      	beq.n	8007b1a <_svfiprintf_r+0x7a>
 8007b02:	465b      	mov	r3, fp
 8007b04:	4622      	mov	r2, r4
 8007b06:	4629      	mov	r1, r5
 8007b08:	4638      	mov	r0, r7
 8007b0a:	f7ff ff6d 	bl	80079e8 <__ssputs_r>
 8007b0e:	3001      	adds	r0, #1
 8007b10:	f000 80aa 	beq.w	8007c68 <_svfiprintf_r+0x1c8>
 8007b14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b16:	445a      	add	r2, fp
 8007b18:	9209      	str	r2, [sp, #36]	; 0x24
 8007b1a:	f89a 3000 	ldrb.w	r3, [sl]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	f000 80a2 	beq.w	8007c68 <_svfiprintf_r+0x1c8>
 8007b24:	2300      	movs	r3, #0
 8007b26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b2e:	f10a 0a01 	add.w	sl, sl, #1
 8007b32:	9304      	str	r3, [sp, #16]
 8007b34:	9307      	str	r3, [sp, #28]
 8007b36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b3a:	931a      	str	r3, [sp, #104]	; 0x68
 8007b3c:	4654      	mov	r4, sl
 8007b3e:	2205      	movs	r2, #5
 8007b40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b44:	4851      	ldr	r0, [pc, #324]	; (8007c8c <_svfiprintf_r+0x1ec>)
 8007b46:	f7f8 fb53 	bl	80001f0 <memchr>
 8007b4a:	9a04      	ldr	r2, [sp, #16]
 8007b4c:	b9d8      	cbnz	r0, 8007b86 <_svfiprintf_r+0xe6>
 8007b4e:	06d0      	lsls	r0, r2, #27
 8007b50:	bf44      	itt	mi
 8007b52:	2320      	movmi	r3, #32
 8007b54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b58:	0711      	lsls	r1, r2, #28
 8007b5a:	bf44      	itt	mi
 8007b5c:	232b      	movmi	r3, #43	; 0x2b
 8007b5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b62:	f89a 3000 	ldrb.w	r3, [sl]
 8007b66:	2b2a      	cmp	r3, #42	; 0x2a
 8007b68:	d015      	beq.n	8007b96 <_svfiprintf_r+0xf6>
 8007b6a:	9a07      	ldr	r2, [sp, #28]
 8007b6c:	4654      	mov	r4, sl
 8007b6e:	2000      	movs	r0, #0
 8007b70:	f04f 0c0a 	mov.w	ip, #10
 8007b74:	4621      	mov	r1, r4
 8007b76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b7a:	3b30      	subs	r3, #48	; 0x30
 8007b7c:	2b09      	cmp	r3, #9
 8007b7e:	d94e      	bls.n	8007c1e <_svfiprintf_r+0x17e>
 8007b80:	b1b0      	cbz	r0, 8007bb0 <_svfiprintf_r+0x110>
 8007b82:	9207      	str	r2, [sp, #28]
 8007b84:	e014      	b.n	8007bb0 <_svfiprintf_r+0x110>
 8007b86:	eba0 0308 	sub.w	r3, r0, r8
 8007b8a:	fa09 f303 	lsl.w	r3, r9, r3
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	9304      	str	r3, [sp, #16]
 8007b92:	46a2      	mov	sl, r4
 8007b94:	e7d2      	b.n	8007b3c <_svfiprintf_r+0x9c>
 8007b96:	9b03      	ldr	r3, [sp, #12]
 8007b98:	1d19      	adds	r1, r3, #4
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	9103      	str	r1, [sp, #12]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	bfbb      	ittet	lt
 8007ba2:	425b      	neglt	r3, r3
 8007ba4:	f042 0202 	orrlt.w	r2, r2, #2
 8007ba8:	9307      	strge	r3, [sp, #28]
 8007baa:	9307      	strlt	r3, [sp, #28]
 8007bac:	bfb8      	it	lt
 8007bae:	9204      	strlt	r2, [sp, #16]
 8007bb0:	7823      	ldrb	r3, [r4, #0]
 8007bb2:	2b2e      	cmp	r3, #46	; 0x2e
 8007bb4:	d10c      	bne.n	8007bd0 <_svfiprintf_r+0x130>
 8007bb6:	7863      	ldrb	r3, [r4, #1]
 8007bb8:	2b2a      	cmp	r3, #42	; 0x2a
 8007bba:	d135      	bne.n	8007c28 <_svfiprintf_r+0x188>
 8007bbc:	9b03      	ldr	r3, [sp, #12]
 8007bbe:	1d1a      	adds	r2, r3, #4
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	9203      	str	r2, [sp, #12]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	bfb8      	it	lt
 8007bc8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007bcc:	3402      	adds	r4, #2
 8007bce:	9305      	str	r3, [sp, #20]
 8007bd0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007c9c <_svfiprintf_r+0x1fc>
 8007bd4:	7821      	ldrb	r1, [r4, #0]
 8007bd6:	2203      	movs	r2, #3
 8007bd8:	4650      	mov	r0, sl
 8007bda:	f7f8 fb09 	bl	80001f0 <memchr>
 8007bde:	b140      	cbz	r0, 8007bf2 <_svfiprintf_r+0x152>
 8007be0:	2340      	movs	r3, #64	; 0x40
 8007be2:	eba0 000a 	sub.w	r0, r0, sl
 8007be6:	fa03 f000 	lsl.w	r0, r3, r0
 8007bea:	9b04      	ldr	r3, [sp, #16]
 8007bec:	4303      	orrs	r3, r0
 8007bee:	3401      	adds	r4, #1
 8007bf0:	9304      	str	r3, [sp, #16]
 8007bf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bf6:	4826      	ldr	r0, [pc, #152]	; (8007c90 <_svfiprintf_r+0x1f0>)
 8007bf8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007bfc:	2206      	movs	r2, #6
 8007bfe:	f7f8 faf7 	bl	80001f0 <memchr>
 8007c02:	2800      	cmp	r0, #0
 8007c04:	d038      	beq.n	8007c78 <_svfiprintf_r+0x1d8>
 8007c06:	4b23      	ldr	r3, [pc, #140]	; (8007c94 <_svfiprintf_r+0x1f4>)
 8007c08:	bb1b      	cbnz	r3, 8007c52 <_svfiprintf_r+0x1b2>
 8007c0a:	9b03      	ldr	r3, [sp, #12]
 8007c0c:	3307      	adds	r3, #7
 8007c0e:	f023 0307 	bic.w	r3, r3, #7
 8007c12:	3308      	adds	r3, #8
 8007c14:	9303      	str	r3, [sp, #12]
 8007c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c18:	4433      	add	r3, r6
 8007c1a:	9309      	str	r3, [sp, #36]	; 0x24
 8007c1c:	e767      	b.n	8007aee <_svfiprintf_r+0x4e>
 8007c1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c22:	460c      	mov	r4, r1
 8007c24:	2001      	movs	r0, #1
 8007c26:	e7a5      	b.n	8007b74 <_svfiprintf_r+0xd4>
 8007c28:	2300      	movs	r3, #0
 8007c2a:	3401      	adds	r4, #1
 8007c2c:	9305      	str	r3, [sp, #20]
 8007c2e:	4619      	mov	r1, r3
 8007c30:	f04f 0c0a 	mov.w	ip, #10
 8007c34:	4620      	mov	r0, r4
 8007c36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c3a:	3a30      	subs	r2, #48	; 0x30
 8007c3c:	2a09      	cmp	r2, #9
 8007c3e:	d903      	bls.n	8007c48 <_svfiprintf_r+0x1a8>
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d0c5      	beq.n	8007bd0 <_svfiprintf_r+0x130>
 8007c44:	9105      	str	r1, [sp, #20]
 8007c46:	e7c3      	b.n	8007bd0 <_svfiprintf_r+0x130>
 8007c48:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c4c:	4604      	mov	r4, r0
 8007c4e:	2301      	movs	r3, #1
 8007c50:	e7f0      	b.n	8007c34 <_svfiprintf_r+0x194>
 8007c52:	ab03      	add	r3, sp, #12
 8007c54:	9300      	str	r3, [sp, #0]
 8007c56:	462a      	mov	r2, r5
 8007c58:	4b0f      	ldr	r3, [pc, #60]	; (8007c98 <_svfiprintf_r+0x1f8>)
 8007c5a:	a904      	add	r1, sp, #16
 8007c5c:	4638      	mov	r0, r7
 8007c5e:	f7fd ff7f 	bl	8005b60 <_printf_float>
 8007c62:	1c42      	adds	r2, r0, #1
 8007c64:	4606      	mov	r6, r0
 8007c66:	d1d6      	bne.n	8007c16 <_svfiprintf_r+0x176>
 8007c68:	89ab      	ldrh	r3, [r5, #12]
 8007c6a:	065b      	lsls	r3, r3, #25
 8007c6c:	f53f af2c 	bmi.w	8007ac8 <_svfiprintf_r+0x28>
 8007c70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c72:	b01d      	add	sp, #116	; 0x74
 8007c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c78:	ab03      	add	r3, sp, #12
 8007c7a:	9300      	str	r3, [sp, #0]
 8007c7c:	462a      	mov	r2, r5
 8007c7e:	4b06      	ldr	r3, [pc, #24]	; (8007c98 <_svfiprintf_r+0x1f8>)
 8007c80:	a904      	add	r1, sp, #16
 8007c82:	4638      	mov	r0, r7
 8007c84:	f7fe fa10 	bl	80060a8 <_printf_i>
 8007c88:	e7eb      	b.n	8007c62 <_svfiprintf_r+0x1c2>
 8007c8a:	bf00      	nop
 8007c8c:	08008b7c 	.word	0x08008b7c
 8007c90:	08008b86 	.word	0x08008b86
 8007c94:	08005b61 	.word	0x08005b61
 8007c98:	080079e9 	.word	0x080079e9
 8007c9c:	08008b82 	.word	0x08008b82

08007ca0 <__sfputc_r>:
 8007ca0:	6893      	ldr	r3, [r2, #8]
 8007ca2:	3b01      	subs	r3, #1
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	b410      	push	{r4}
 8007ca8:	6093      	str	r3, [r2, #8]
 8007caa:	da08      	bge.n	8007cbe <__sfputc_r+0x1e>
 8007cac:	6994      	ldr	r4, [r2, #24]
 8007cae:	42a3      	cmp	r3, r4
 8007cb0:	db01      	blt.n	8007cb6 <__sfputc_r+0x16>
 8007cb2:	290a      	cmp	r1, #10
 8007cb4:	d103      	bne.n	8007cbe <__sfputc_r+0x1e>
 8007cb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007cba:	f000 b95b 	b.w	8007f74 <__swbuf_r>
 8007cbe:	6813      	ldr	r3, [r2, #0]
 8007cc0:	1c58      	adds	r0, r3, #1
 8007cc2:	6010      	str	r0, [r2, #0]
 8007cc4:	7019      	strb	r1, [r3, #0]
 8007cc6:	4608      	mov	r0, r1
 8007cc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ccc:	4770      	bx	lr

08007cce <__sfputs_r>:
 8007cce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cd0:	4606      	mov	r6, r0
 8007cd2:	460f      	mov	r7, r1
 8007cd4:	4614      	mov	r4, r2
 8007cd6:	18d5      	adds	r5, r2, r3
 8007cd8:	42ac      	cmp	r4, r5
 8007cda:	d101      	bne.n	8007ce0 <__sfputs_r+0x12>
 8007cdc:	2000      	movs	r0, #0
 8007cde:	e007      	b.n	8007cf0 <__sfputs_r+0x22>
 8007ce0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ce4:	463a      	mov	r2, r7
 8007ce6:	4630      	mov	r0, r6
 8007ce8:	f7ff ffda 	bl	8007ca0 <__sfputc_r>
 8007cec:	1c43      	adds	r3, r0, #1
 8007cee:	d1f3      	bne.n	8007cd8 <__sfputs_r+0xa>
 8007cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007cf4 <_vfiprintf_r>:
 8007cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cf8:	460d      	mov	r5, r1
 8007cfa:	b09d      	sub	sp, #116	; 0x74
 8007cfc:	4614      	mov	r4, r2
 8007cfe:	4698      	mov	r8, r3
 8007d00:	4606      	mov	r6, r0
 8007d02:	b118      	cbz	r0, 8007d0c <_vfiprintf_r+0x18>
 8007d04:	6983      	ldr	r3, [r0, #24]
 8007d06:	b90b      	cbnz	r3, 8007d0c <_vfiprintf_r+0x18>
 8007d08:	f000 fb16 	bl	8008338 <__sinit>
 8007d0c:	4b89      	ldr	r3, [pc, #548]	; (8007f34 <_vfiprintf_r+0x240>)
 8007d0e:	429d      	cmp	r5, r3
 8007d10:	d11b      	bne.n	8007d4a <_vfiprintf_r+0x56>
 8007d12:	6875      	ldr	r5, [r6, #4]
 8007d14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d16:	07d9      	lsls	r1, r3, #31
 8007d18:	d405      	bmi.n	8007d26 <_vfiprintf_r+0x32>
 8007d1a:	89ab      	ldrh	r3, [r5, #12]
 8007d1c:	059a      	lsls	r2, r3, #22
 8007d1e:	d402      	bmi.n	8007d26 <_vfiprintf_r+0x32>
 8007d20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d22:	f000 fba7 	bl	8008474 <__retarget_lock_acquire_recursive>
 8007d26:	89ab      	ldrh	r3, [r5, #12]
 8007d28:	071b      	lsls	r3, r3, #28
 8007d2a:	d501      	bpl.n	8007d30 <_vfiprintf_r+0x3c>
 8007d2c:	692b      	ldr	r3, [r5, #16]
 8007d2e:	b9eb      	cbnz	r3, 8007d6c <_vfiprintf_r+0x78>
 8007d30:	4629      	mov	r1, r5
 8007d32:	4630      	mov	r0, r6
 8007d34:	f000 f970 	bl	8008018 <__swsetup_r>
 8007d38:	b1c0      	cbz	r0, 8007d6c <_vfiprintf_r+0x78>
 8007d3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d3c:	07dc      	lsls	r4, r3, #31
 8007d3e:	d50e      	bpl.n	8007d5e <_vfiprintf_r+0x6a>
 8007d40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d44:	b01d      	add	sp, #116	; 0x74
 8007d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d4a:	4b7b      	ldr	r3, [pc, #492]	; (8007f38 <_vfiprintf_r+0x244>)
 8007d4c:	429d      	cmp	r5, r3
 8007d4e:	d101      	bne.n	8007d54 <_vfiprintf_r+0x60>
 8007d50:	68b5      	ldr	r5, [r6, #8]
 8007d52:	e7df      	b.n	8007d14 <_vfiprintf_r+0x20>
 8007d54:	4b79      	ldr	r3, [pc, #484]	; (8007f3c <_vfiprintf_r+0x248>)
 8007d56:	429d      	cmp	r5, r3
 8007d58:	bf08      	it	eq
 8007d5a:	68f5      	ldreq	r5, [r6, #12]
 8007d5c:	e7da      	b.n	8007d14 <_vfiprintf_r+0x20>
 8007d5e:	89ab      	ldrh	r3, [r5, #12]
 8007d60:	0598      	lsls	r0, r3, #22
 8007d62:	d4ed      	bmi.n	8007d40 <_vfiprintf_r+0x4c>
 8007d64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d66:	f000 fb86 	bl	8008476 <__retarget_lock_release_recursive>
 8007d6a:	e7e9      	b.n	8007d40 <_vfiprintf_r+0x4c>
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	9309      	str	r3, [sp, #36]	; 0x24
 8007d70:	2320      	movs	r3, #32
 8007d72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d76:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d7a:	2330      	movs	r3, #48	; 0x30
 8007d7c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007f40 <_vfiprintf_r+0x24c>
 8007d80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d84:	f04f 0901 	mov.w	r9, #1
 8007d88:	4623      	mov	r3, r4
 8007d8a:	469a      	mov	sl, r3
 8007d8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d90:	b10a      	cbz	r2, 8007d96 <_vfiprintf_r+0xa2>
 8007d92:	2a25      	cmp	r2, #37	; 0x25
 8007d94:	d1f9      	bne.n	8007d8a <_vfiprintf_r+0x96>
 8007d96:	ebba 0b04 	subs.w	fp, sl, r4
 8007d9a:	d00b      	beq.n	8007db4 <_vfiprintf_r+0xc0>
 8007d9c:	465b      	mov	r3, fp
 8007d9e:	4622      	mov	r2, r4
 8007da0:	4629      	mov	r1, r5
 8007da2:	4630      	mov	r0, r6
 8007da4:	f7ff ff93 	bl	8007cce <__sfputs_r>
 8007da8:	3001      	adds	r0, #1
 8007daa:	f000 80aa 	beq.w	8007f02 <_vfiprintf_r+0x20e>
 8007dae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007db0:	445a      	add	r2, fp
 8007db2:	9209      	str	r2, [sp, #36]	; 0x24
 8007db4:	f89a 3000 	ldrb.w	r3, [sl]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	f000 80a2 	beq.w	8007f02 <_vfiprintf_r+0x20e>
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007dc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007dc8:	f10a 0a01 	add.w	sl, sl, #1
 8007dcc:	9304      	str	r3, [sp, #16]
 8007dce:	9307      	str	r3, [sp, #28]
 8007dd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007dd4:	931a      	str	r3, [sp, #104]	; 0x68
 8007dd6:	4654      	mov	r4, sl
 8007dd8:	2205      	movs	r2, #5
 8007dda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dde:	4858      	ldr	r0, [pc, #352]	; (8007f40 <_vfiprintf_r+0x24c>)
 8007de0:	f7f8 fa06 	bl	80001f0 <memchr>
 8007de4:	9a04      	ldr	r2, [sp, #16]
 8007de6:	b9d8      	cbnz	r0, 8007e20 <_vfiprintf_r+0x12c>
 8007de8:	06d1      	lsls	r1, r2, #27
 8007dea:	bf44      	itt	mi
 8007dec:	2320      	movmi	r3, #32
 8007dee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007df2:	0713      	lsls	r3, r2, #28
 8007df4:	bf44      	itt	mi
 8007df6:	232b      	movmi	r3, #43	; 0x2b
 8007df8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007dfc:	f89a 3000 	ldrb.w	r3, [sl]
 8007e00:	2b2a      	cmp	r3, #42	; 0x2a
 8007e02:	d015      	beq.n	8007e30 <_vfiprintf_r+0x13c>
 8007e04:	9a07      	ldr	r2, [sp, #28]
 8007e06:	4654      	mov	r4, sl
 8007e08:	2000      	movs	r0, #0
 8007e0a:	f04f 0c0a 	mov.w	ip, #10
 8007e0e:	4621      	mov	r1, r4
 8007e10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e14:	3b30      	subs	r3, #48	; 0x30
 8007e16:	2b09      	cmp	r3, #9
 8007e18:	d94e      	bls.n	8007eb8 <_vfiprintf_r+0x1c4>
 8007e1a:	b1b0      	cbz	r0, 8007e4a <_vfiprintf_r+0x156>
 8007e1c:	9207      	str	r2, [sp, #28]
 8007e1e:	e014      	b.n	8007e4a <_vfiprintf_r+0x156>
 8007e20:	eba0 0308 	sub.w	r3, r0, r8
 8007e24:	fa09 f303 	lsl.w	r3, r9, r3
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	9304      	str	r3, [sp, #16]
 8007e2c:	46a2      	mov	sl, r4
 8007e2e:	e7d2      	b.n	8007dd6 <_vfiprintf_r+0xe2>
 8007e30:	9b03      	ldr	r3, [sp, #12]
 8007e32:	1d19      	adds	r1, r3, #4
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	9103      	str	r1, [sp, #12]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	bfbb      	ittet	lt
 8007e3c:	425b      	neglt	r3, r3
 8007e3e:	f042 0202 	orrlt.w	r2, r2, #2
 8007e42:	9307      	strge	r3, [sp, #28]
 8007e44:	9307      	strlt	r3, [sp, #28]
 8007e46:	bfb8      	it	lt
 8007e48:	9204      	strlt	r2, [sp, #16]
 8007e4a:	7823      	ldrb	r3, [r4, #0]
 8007e4c:	2b2e      	cmp	r3, #46	; 0x2e
 8007e4e:	d10c      	bne.n	8007e6a <_vfiprintf_r+0x176>
 8007e50:	7863      	ldrb	r3, [r4, #1]
 8007e52:	2b2a      	cmp	r3, #42	; 0x2a
 8007e54:	d135      	bne.n	8007ec2 <_vfiprintf_r+0x1ce>
 8007e56:	9b03      	ldr	r3, [sp, #12]
 8007e58:	1d1a      	adds	r2, r3, #4
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	9203      	str	r2, [sp, #12]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	bfb8      	it	lt
 8007e62:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007e66:	3402      	adds	r4, #2
 8007e68:	9305      	str	r3, [sp, #20]
 8007e6a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007f50 <_vfiprintf_r+0x25c>
 8007e6e:	7821      	ldrb	r1, [r4, #0]
 8007e70:	2203      	movs	r2, #3
 8007e72:	4650      	mov	r0, sl
 8007e74:	f7f8 f9bc 	bl	80001f0 <memchr>
 8007e78:	b140      	cbz	r0, 8007e8c <_vfiprintf_r+0x198>
 8007e7a:	2340      	movs	r3, #64	; 0x40
 8007e7c:	eba0 000a 	sub.w	r0, r0, sl
 8007e80:	fa03 f000 	lsl.w	r0, r3, r0
 8007e84:	9b04      	ldr	r3, [sp, #16]
 8007e86:	4303      	orrs	r3, r0
 8007e88:	3401      	adds	r4, #1
 8007e8a:	9304      	str	r3, [sp, #16]
 8007e8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e90:	482c      	ldr	r0, [pc, #176]	; (8007f44 <_vfiprintf_r+0x250>)
 8007e92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e96:	2206      	movs	r2, #6
 8007e98:	f7f8 f9aa 	bl	80001f0 <memchr>
 8007e9c:	2800      	cmp	r0, #0
 8007e9e:	d03f      	beq.n	8007f20 <_vfiprintf_r+0x22c>
 8007ea0:	4b29      	ldr	r3, [pc, #164]	; (8007f48 <_vfiprintf_r+0x254>)
 8007ea2:	bb1b      	cbnz	r3, 8007eec <_vfiprintf_r+0x1f8>
 8007ea4:	9b03      	ldr	r3, [sp, #12]
 8007ea6:	3307      	adds	r3, #7
 8007ea8:	f023 0307 	bic.w	r3, r3, #7
 8007eac:	3308      	adds	r3, #8
 8007eae:	9303      	str	r3, [sp, #12]
 8007eb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eb2:	443b      	add	r3, r7
 8007eb4:	9309      	str	r3, [sp, #36]	; 0x24
 8007eb6:	e767      	b.n	8007d88 <_vfiprintf_r+0x94>
 8007eb8:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ebc:	460c      	mov	r4, r1
 8007ebe:	2001      	movs	r0, #1
 8007ec0:	e7a5      	b.n	8007e0e <_vfiprintf_r+0x11a>
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	3401      	adds	r4, #1
 8007ec6:	9305      	str	r3, [sp, #20]
 8007ec8:	4619      	mov	r1, r3
 8007eca:	f04f 0c0a 	mov.w	ip, #10
 8007ece:	4620      	mov	r0, r4
 8007ed0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ed4:	3a30      	subs	r2, #48	; 0x30
 8007ed6:	2a09      	cmp	r2, #9
 8007ed8:	d903      	bls.n	8007ee2 <_vfiprintf_r+0x1ee>
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d0c5      	beq.n	8007e6a <_vfiprintf_r+0x176>
 8007ede:	9105      	str	r1, [sp, #20]
 8007ee0:	e7c3      	b.n	8007e6a <_vfiprintf_r+0x176>
 8007ee2:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ee6:	4604      	mov	r4, r0
 8007ee8:	2301      	movs	r3, #1
 8007eea:	e7f0      	b.n	8007ece <_vfiprintf_r+0x1da>
 8007eec:	ab03      	add	r3, sp, #12
 8007eee:	9300      	str	r3, [sp, #0]
 8007ef0:	462a      	mov	r2, r5
 8007ef2:	4b16      	ldr	r3, [pc, #88]	; (8007f4c <_vfiprintf_r+0x258>)
 8007ef4:	a904      	add	r1, sp, #16
 8007ef6:	4630      	mov	r0, r6
 8007ef8:	f7fd fe32 	bl	8005b60 <_printf_float>
 8007efc:	4607      	mov	r7, r0
 8007efe:	1c78      	adds	r0, r7, #1
 8007f00:	d1d6      	bne.n	8007eb0 <_vfiprintf_r+0x1bc>
 8007f02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f04:	07d9      	lsls	r1, r3, #31
 8007f06:	d405      	bmi.n	8007f14 <_vfiprintf_r+0x220>
 8007f08:	89ab      	ldrh	r3, [r5, #12]
 8007f0a:	059a      	lsls	r2, r3, #22
 8007f0c:	d402      	bmi.n	8007f14 <_vfiprintf_r+0x220>
 8007f0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f10:	f000 fab1 	bl	8008476 <__retarget_lock_release_recursive>
 8007f14:	89ab      	ldrh	r3, [r5, #12]
 8007f16:	065b      	lsls	r3, r3, #25
 8007f18:	f53f af12 	bmi.w	8007d40 <_vfiprintf_r+0x4c>
 8007f1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f1e:	e711      	b.n	8007d44 <_vfiprintf_r+0x50>
 8007f20:	ab03      	add	r3, sp, #12
 8007f22:	9300      	str	r3, [sp, #0]
 8007f24:	462a      	mov	r2, r5
 8007f26:	4b09      	ldr	r3, [pc, #36]	; (8007f4c <_vfiprintf_r+0x258>)
 8007f28:	a904      	add	r1, sp, #16
 8007f2a:	4630      	mov	r0, r6
 8007f2c:	f7fe f8bc 	bl	80060a8 <_printf_i>
 8007f30:	e7e4      	b.n	8007efc <_vfiprintf_r+0x208>
 8007f32:	bf00      	nop
 8007f34:	08008bb0 	.word	0x08008bb0
 8007f38:	08008bd0 	.word	0x08008bd0
 8007f3c:	08008b90 	.word	0x08008b90
 8007f40:	08008b7c 	.word	0x08008b7c
 8007f44:	08008b86 	.word	0x08008b86
 8007f48:	08005b61 	.word	0x08005b61
 8007f4c:	08007ccf 	.word	0x08007ccf
 8007f50:	08008b82 	.word	0x08008b82

08007f54 <_sbrk_r>:
 8007f54:	b538      	push	{r3, r4, r5, lr}
 8007f56:	4d06      	ldr	r5, [pc, #24]	; (8007f70 <_sbrk_r+0x1c>)
 8007f58:	2300      	movs	r3, #0
 8007f5a:	4604      	mov	r4, r0
 8007f5c:	4608      	mov	r0, r1
 8007f5e:	602b      	str	r3, [r5, #0]
 8007f60:	f7fa fac0 	bl	80024e4 <_sbrk>
 8007f64:	1c43      	adds	r3, r0, #1
 8007f66:	d102      	bne.n	8007f6e <_sbrk_r+0x1a>
 8007f68:	682b      	ldr	r3, [r5, #0]
 8007f6a:	b103      	cbz	r3, 8007f6e <_sbrk_r+0x1a>
 8007f6c:	6023      	str	r3, [r4, #0]
 8007f6e:	bd38      	pop	{r3, r4, r5, pc}
 8007f70:	200004a8 	.word	0x200004a8

08007f74 <__swbuf_r>:
 8007f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f76:	460e      	mov	r6, r1
 8007f78:	4614      	mov	r4, r2
 8007f7a:	4605      	mov	r5, r0
 8007f7c:	b118      	cbz	r0, 8007f86 <__swbuf_r+0x12>
 8007f7e:	6983      	ldr	r3, [r0, #24]
 8007f80:	b90b      	cbnz	r3, 8007f86 <__swbuf_r+0x12>
 8007f82:	f000 f9d9 	bl	8008338 <__sinit>
 8007f86:	4b21      	ldr	r3, [pc, #132]	; (800800c <__swbuf_r+0x98>)
 8007f88:	429c      	cmp	r4, r3
 8007f8a:	d12b      	bne.n	8007fe4 <__swbuf_r+0x70>
 8007f8c:	686c      	ldr	r4, [r5, #4]
 8007f8e:	69a3      	ldr	r3, [r4, #24]
 8007f90:	60a3      	str	r3, [r4, #8]
 8007f92:	89a3      	ldrh	r3, [r4, #12]
 8007f94:	071a      	lsls	r2, r3, #28
 8007f96:	d52f      	bpl.n	8007ff8 <__swbuf_r+0x84>
 8007f98:	6923      	ldr	r3, [r4, #16]
 8007f9a:	b36b      	cbz	r3, 8007ff8 <__swbuf_r+0x84>
 8007f9c:	6923      	ldr	r3, [r4, #16]
 8007f9e:	6820      	ldr	r0, [r4, #0]
 8007fa0:	1ac0      	subs	r0, r0, r3
 8007fa2:	6963      	ldr	r3, [r4, #20]
 8007fa4:	b2f6      	uxtb	r6, r6
 8007fa6:	4283      	cmp	r3, r0
 8007fa8:	4637      	mov	r7, r6
 8007faa:	dc04      	bgt.n	8007fb6 <__swbuf_r+0x42>
 8007fac:	4621      	mov	r1, r4
 8007fae:	4628      	mov	r0, r5
 8007fb0:	f000 f92e 	bl	8008210 <_fflush_r>
 8007fb4:	bb30      	cbnz	r0, 8008004 <__swbuf_r+0x90>
 8007fb6:	68a3      	ldr	r3, [r4, #8]
 8007fb8:	3b01      	subs	r3, #1
 8007fba:	60a3      	str	r3, [r4, #8]
 8007fbc:	6823      	ldr	r3, [r4, #0]
 8007fbe:	1c5a      	adds	r2, r3, #1
 8007fc0:	6022      	str	r2, [r4, #0]
 8007fc2:	701e      	strb	r6, [r3, #0]
 8007fc4:	6963      	ldr	r3, [r4, #20]
 8007fc6:	3001      	adds	r0, #1
 8007fc8:	4283      	cmp	r3, r0
 8007fca:	d004      	beq.n	8007fd6 <__swbuf_r+0x62>
 8007fcc:	89a3      	ldrh	r3, [r4, #12]
 8007fce:	07db      	lsls	r3, r3, #31
 8007fd0:	d506      	bpl.n	8007fe0 <__swbuf_r+0x6c>
 8007fd2:	2e0a      	cmp	r6, #10
 8007fd4:	d104      	bne.n	8007fe0 <__swbuf_r+0x6c>
 8007fd6:	4621      	mov	r1, r4
 8007fd8:	4628      	mov	r0, r5
 8007fda:	f000 f919 	bl	8008210 <_fflush_r>
 8007fde:	b988      	cbnz	r0, 8008004 <__swbuf_r+0x90>
 8007fe0:	4638      	mov	r0, r7
 8007fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fe4:	4b0a      	ldr	r3, [pc, #40]	; (8008010 <__swbuf_r+0x9c>)
 8007fe6:	429c      	cmp	r4, r3
 8007fe8:	d101      	bne.n	8007fee <__swbuf_r+0x7a>
 8007fea:	68ac      	ldr	r4, [r5, #8]
 8007fec:	e7cf      	b.n	8007f8e <__swbuf_r+0x1a>
 8007fee:	4b09      	ldr	r3, [pc, #36]	; (8008014 <__swbuf_r+0xa0>)
 8007ff0:	429c      	cmp	r4, r3
 8007ff2:	bf08      	it	eq
 8007ff4:	68ec      	ldreq	r4, [r5, #12]
 8007ff6:	e7ca      	b.n	8007f8e <__swbuf_r+0x1a>
 8007ff8:	4621      	mov	r1, r4
 8007ffa:	4628      	mov	r0, r5
 8007ffc:	f000 f80c 	bl	8008018 <__swsetup_r>
 8008000:	2800      	cmp	r0, #0
 8008002:	d0cb      	beq.n	8007f9c <__swbuf_r+0x28>
 8008004:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008008:	e7ea      	b.n	8007fe0 <__swbuf_r+0x6c>
 800800a:	bf00      	nop
 800800c:	08008bb0 	.word	0x08008bb0
 8008010:	08008bd0 	.word	0x08008bd0
 8008014:	08008b90 	.word	0x08008b90

08008018 <__swsetup_r>:
 8008018:	4b32      	ldr	r3, [pc, #200]	; (80080e4 <__swsetup_r+0xcc>)
 800801a:	b570      	push	{r4, r5, r6, lr}
 800801c:	681d      	ldr	r5, [r3, #0]
 800801e:	4606      	mov	r6, r0
 8008020:	460c      	mov	r4, r1
 8008022:	b125      	cbz	r5, 800802e <__swsetup_r+0x16>
 8008024:	69ab      	ldr	r3, [r5, #24]
 8008026:	b913      	cbnz	r3, 800802e <__swsetup_r+0x16>
 8008028:	4628      	mov	r0, r5
 800802a:	f000 f985 	bl	8008338 <__sinit>
 800802e:	4b2e      	ldr	r3, [pc, #184]	; (80080e8 <__swsetup_r+0xd0>)
 8008030:	429c      	cmp	r4, r3
 8008032:	d10f      	bne.n	8008054 <__swsetup_r+0x3c>
 8008034:	686c      	ldr	r4, [r5, #4]
 8008036:	89a3      	ldrh	r3, [r4, #12]
 8008038:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800803c:	0719      	lsls	r1, r3, #28
 800803e:	d42c      	bmi.n	800809a <__swsetup_r+0x82>
 8008040:	06dd      	lsls	r5, r3, #27
 8008042:	d411      	bmi.n	8008068 <__swsetup_r+0x50>
 8008044:	2309      	movs	r3, #9
 8008046:	6033      	str	r3, [r6, #0]
 8008048:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800804c:	81a3      	strh	r3, [r4, #12]
 800804e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008052:	e03e      	b.n	80080d2 <__swsetup_r+0xba>
 8008054:	4b25      	ldr	r3, [pc, #148]	; (80080ec <__swsetup_r+0xd4>)
 8008056:	429c      	cmp	r4, r3
 8008058:	d101      	bne.n	800805e <__swsetup_r+0x46>
 800805a:	68ac      	ldr	r4, [r5, #8]
 800805c:	e7eb      	b.n	8008036 <__swsetup_r+0x1e>
 800805e:	4b24      	ldr	r3, [pc, #144]	; (80080f0 <__swsetup_r+0xd8>)
 8008060:	429c      	cmp	r4, r3
 8008062:	bf08      	it	eq
 8008064:	68ec      	ldreq	r4, [r5, #12]
 8008066:	e7e6      	b.n	8008036 <__swsetup_r+0x1e>
 8008068:	0758      	lsls	r0, r3, #29
 800806a:	d512      	bpl.n	8008092 <__swsetup_r+0x7a>
 800806c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800806e:	b141      	cbz	r1, 8008082 <__swsetup_r+0x6a>
 8008070:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008074:	4299      	cmp	r1, r3
 8008076:	d002      	beq.n	800807e <__swsetup_r+0x66>
 8008078:	4630      	mov	r0, r6
 800807a:	f7ff fc0b 	bl	8007894 <_free_r>
 800807e:	2300      	movs	r3, #0
 8008080:	6363      	str	r3, [r4, #52]	; 0x34
 8008082:	89a3      	ldrh	r3, [r4, #12]
 8008084:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008088:	81a3      	strh	r3, [r4, #12]
 800808a:	2300      	movs	r3, #0
 800808c:	6063      	str	r3, [r4, #4]
 800808e:	6923      	ldr	r3, [r4, #16]
 8008090:	6023      	str	r3, [r4, #0]
 8008092:	89a3      	ldrh	r3, [r4, #12]
 8008094:	f043 0308 	orr.w	r3, r3, #8
 8008098:	81a3      	strh	r3, [r4, #12]
 800809a:	6923      	ldr	r3, [r4, #16]
 800809c:	b94b      	cbnz	r3, 80080b2 <__swsetup_r+0x9a>
 800809e:	89a3      	ldrh	r3, [r4, #12]
 80080a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80080a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080a8:	d003      	beq.n	80080b2 <__swsetup_r+0x9a>
 80080aa:	4621      	mov	r1, r4
 80080ac:	4630      	mov	r0, r6
 80080ae:	f000 fa07 	bl	80084c0 <__smakebuf_r>
 80080b2:	89a0      	ldrh	r0, [r4, #12]
 80080b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80080b8:	f010 0301 	ands.w	r3, r0, #1
 80080bc:	d00a      	beq.n	80080d4 <__swsetup_r+0xbc>
 80080be:	2300      	movs	r3, #0
 80080c0:	60a3      	str	r3, [r4, #8]
 80080c2:	6963      	ldr	r3, [r4, #20]
 80080c4:	425b      	negs	r3, r3
 80080c6:	61a3      	str	r3, [r4, #24]
 80080c8:	6923      	ldr	r3, [r4, #16]
 80080ca:	b943      	cbnz	r3, 80080de <__swsetup_r+0xc6>
 80080cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80080d0:	d1ba      	bne.n	8008048 <__swsetup_r+0x30>
 80080d2:	bd70      	pop	{r4, r5, r6, pc}
 80080d4:	0781      	lsls	r1, r0, #30
 80080d6:	bf58      	it	pl
 80080d8:	6963      	ldrpl	r3, [r4, #20]
 80080da:	60a3      	str	r3, [r4, #8]
 80080dc:	e7f4      	b.n	80080c8 <__swsetup_r+0xb0>
 80080de:	2000      	movs	r0, #0
 80080e0:	e7f7      	b.n	80080d2 <__swsetup_r+0xba>
 80080e2:	bf00      	nop
 80080e4:	20000018 	.word	0x20000018
 80080e8:	08008bb0 	.word	0x08008bb0
 80080ec:	08008bd0 	.word	0x08008bd0
 80080f0:	08008b90 	.word	0x08008b90

080080f4 <abort>:
 80080f4:	b508      	push	{r3, lr}
 80080f6:	2006      	movs	r0, #6
 80080f8:	f000 faa8 	bl	800864c <raise>
 80080fc:	2001      	movs	r0, #1
 80080fe:	f7fa f979 	bl	80023f4 <_exit>
	...

08008104 <__sflush_r>:
 8008104:	898a      	ldrh	r2, [r1, #12]
 8008106:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800810a:	4605      	mov	r5, r0
 800810c:	0710      	lsls	r0, r2, #28
 800810e:	460c      	mov	r4, r1
 8008110:	d458      	bmi.n	80081c4 <__sflush_r+0xc0>
 8008112:	684b      	ldr	r3, [r1, #4]
 8008114:	2b00      	cmp	r3, #0
 8008116:	dc05      	bgt.n	8008124 <__sflush_r+0x20>
 8008118:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800811a:	2b00      	cmp	r3, #0
 800811c:	dc02      	bgt.n	8008124 <__sflush_r+0x20>
 800811e:	2000      	movs	r0, #0
 8008120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008124:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008126:	2e00      	cmp	r6, #0
 8008128:	d0f9      	beq.n	800811e <__sflush_r+0x1a>
 800812a:	2300      	movs	r3, #0
 800812c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008130:	682f      	ldr	r7, [r5, #0]
 8008132:	602b      	str	r3, [r5, #0]
 8008134:	d032      	beq.n	800819c <__sflush_r+0x98>
 8008136:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008138:	89a3      	ldrh	r3, [r4, #12]
 800813a:	075a      	lsls	r2, r3, #29
 800813c:	d505      	bpl.n	800814a <__sflush_r+0x46>
 800813e:	6863      	ldr	r3, [r4, #4]
 8008140:	1ac0      	subs	r0, r0, r3
 8008142:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008144:	b10b      	cbz	r3, 800814a <__sflush_r+0x46>
 8008146:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008148:	1ac0      	subs	r0, r0, r3
 800814a:	2300      	movs	r3, #0
 800814c:	4602      	mov	r2, r0
 800814e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008150:	6a21      	ldr	r1, [r4, #32]
 8008152:	4628      	mov	r0, r5
 8008154:	47b0      	blx	r6
 8008156:	1c43      	adds	r3, r0, #1
 8008158:	89a3      	ldrh	r3, [r4, #12]
 800815a:	d106      	bne.n	800816a <__sflush_r+0x66>
 800815c:	6829      	ldr	r1, [r5, #0]
 800815e:	291d      	cmp	r1, #29
 8008160:	d82c      	bhi.n	80081bc <__sflush_r+0xb8>
 8008162:	4a2a      	ldr	r2, [pc, #168]	; (800820c <__sflush_r+0x108>)
 8008164:	40ca      	lsrs	r2, r1
 8008166:	07d6      	lsls	r6, r2, #31
 8008168:	d528      	bpl.n	80081bc <__sflush_r+0xb8>
 800816a:	2200      	movs	r2, #0
 800816c:	6062      	str	r2, [r4, #4]
 800816e:	04d9      	lsls	r1, r3, #19
 8008170:	6922      	ldr	r2, [r4, #16]
 8008172:	6022      	str	r2, [r4, #0]
 8008174:	d504      	bpl.n	8008180 <__sflush_r+0x7c>
 8008176:	1c42      	adds	r2, r0, #1
 8008178:	d101      	bne.n	800817e <__sflush_r+0x7a>
 800817a:	682b      	ldr	r3, [r5, #0]
 800817c:	b903      	cbnz	r3, 8008180 <__sflush_r+0x7c>
 800817e:	6560      	str	r0, [r4, #84]	; 0x54
 8008180:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008182:	602f      	str	r7, [r5, #0]
 8008184:	2900      	cmp	r1, #0
 8008186:	d0ca      	beq.n	800811e <__sflush_r+0x1a>
 8008188:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800818c:	4299      	cmp	r1, r3
 800818e:	d002      	beq.n	8008196 <__sflush_r+0x92>
 8008190:	4628      	mov	r0, r5
 8008192:	f7ff fb7f 	bl	8007894 <_free_r>
 8008196:	2000      	movs	r0, #0
 8008198:	6360      	str	r0, [r4, #52]	; 0x34
 800819a:	e7c1      	b.n	8008120 <__sflush_r+0x1c>
 800819c:	6a21      	ldr	r1, [r4, #32]
 800819e:	2301      	movs	r3, #1
 80081a0:	4628      	mov	r0, r5
 80081a2:	47b0      	blx	r6
 80081a4:	1c41      	adds	r1, r0, #1
 80081a6:	d1c7      	bne.n	8008138 <__sflush_r+0x34>
 80081a8:	682b      	ldr	r3, [r5, #0]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d0c4      	beq.n	8008138 <__sflush_r+0x34>
 80081ae:	2b1d      	cmp	r3, #29
 80081b0:	d001      	beq.n	80081b6 <__sflush_r+0xb2>
 80081b2:	2b16      	cmp	r3, #22
 80081b4:	d101      	bne.n	80081ba <__sflush_r+0xb6>
 80081b6:	602f      	str	r7, [r5, #0]
 80081b8:	e7b1      	b.n	800811e <__sflush_r+0x1a>
 80081ba:	89a3      	ldrh	r3, [r4, #12]
 80081bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081c0:	81a3      	strh	r3, [r4, #12]
 80081c2:	e7ad      	b.n	8008120 <__sflush_r+0x1c>
 80081c4:	690f      	ldr	r7, [r1, #16]
 80081c6:	2f00      	cmp	r7, #0
 80081c8:	d0a9      	beq.n	800811e <__sflush_r+0x1a>
 80081ca:	0793      	lsls	r3, r2, #30
 80081cc:	680e      	ldr	r6, [r1, #0]
 80081ce:	bf08      	it	eq
 80081d0:	694b      	ldreq	r3, [r1, #20]
 80081d2:	600f      	str	r7, [r1, #0]
 80081d4:	bf18      	it	ne
 80081d6:	2300      	movne	r3, #0
 80081d8:	eba6 0807 	sub.w	r8, r6, r7
 80081dc:	608b      	str	r3, [r1, #8]
 80081de:	f1b8 0f00 	cmp.w	r8, #0
 80081e2:	dd9c      	ble.n	800811e <__sflush_r+0x1a>
 80081e4:	6a21      	ldr	r1, [r4, #32]
 80081e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80081e8:	4643      	mov	r3, r8
 80081ea:	463a      	mov	r2, r7
 80081ec:	4628      	mov	r0, r5
 80081ee:	47b0      	blx	r6
 80081f0:	2800      	cmp	r0, #0
 80081f2:	dc06      	bgt.n	8008202 <__sflush_r+0xfe>
 80081f4:	89a3      	ldrh	r3, [r4, #12]
 80081f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081fa:	81a3      	strh	r3, [r4, #12]
 80081fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008200:	e78e      	b.n	8008120 <__sflush_r+0x1c>
 8008202:	4407      	add	r7, r0
 8008204:	eba8 0800 	sub.w	r8, r8, r0
 8008208:	e7e9      	b.n	80081de <__sflush_r+0xda>
 800820a:	bf00      	nop
 800820c:	20400001 	.word	0x20400001

08008210 <_fflush_r>:
 8008210:	b538      	push	{r3, r4, r5, lr}
 8008212:	690b      	ldr	r3, [r1, #16]
 8008214:	4605      	mov	r5, r0
 8008216:	460c      	mov	r4, r1
 8008218:	b913      	cbnz	r3, 8008220 <_fflush_r+0x10>
 800821a:	2500      	movs	r5, #0
 800821c:	4628      	mov	r0, r5
 800821e:	bd38      	pop	{r3, r4, r5, pc}
 8008220:	b118      	cbz	r0, 800822a <_fflush_r+0x1a>
 8008222:	6983      	ldr	r3, [r0, #24]
 8008224:	b90b      	cbnz	r3, 800822a <_fflush_r+0x1a>
 8008226:	f000 f887 	bl	8008338 <__sinit>
 800822a:	4b14      	ldr	r3, [pc, #80]	; (800827c <_fflush_r+0x6c>)
 800822c:	429c      	cmp	r4, r3
 800822e:	d11b      	bne.n	8008268 <_fflush_r+0x58>
 8008230:	686c      	ldr	r4, [r5, #4]
 8008232:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d0ef      	beq.n	800821a <_fflush_r+0xa>
 800823a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800823c:	07d0      	lsls	r0, r2, #31
 800823e:	d404      	bmi.n	800824a <_fflush_r+0x3a>
 8008240:	0599      	lsls	r1, r3, #22
 8008242:	d402      	bmi.n	800824a <_fflush_r+0x3a>
 8008244:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008246:	f000 f915 	bl	8008474 <__retarget_lock_acquire_recursive>
 800824a:	4628      	mov	r0, r5
 800824c:	4621      	mov	r1, r4
 800824e:	f7ff ff59 	bl	8008104 <__sflush_r>
 8008252:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008254:	07da      	lsls	r2, r3, #31
 8008256:	4605      	mov	r5, r0
 8008258:	d4e0      	bmi.n	800821c <_fflush_r+0xc>
 800825a:	89a3      	ldrh	r3, [r4, #12]
 800825c:	059b      	lsls	r3, r3, #22
 800825e:	d4dd      	bmi.n	800821c <_fflush_r+0xc>
 8008260:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008262:	f000 f908 	bl	8008476 <__retarget_lock_release_recursive>
 8008266:	e7d9      	b.n	800821c <_fflush_r+0xc>
 8008268:	4b05      	ldr	r3, [pc, #20]	; (8008280 <_fflush_r+0x70>)
 800826a:	429c      	cmp	r4, r3
 800826c:	d101      	bne.n	8008272 <_fflush_r+0x62>
 800826e:	68ac      	ldr	r4, [r5, #8]
 8008270:	e7df      	b.n	8008232 <_fflush_r+0x22>
 8008272:	4b04      	ldr	r3, [pc, #16]	; (8008284 <_fflush_r+0x74>)
 8008274:	429c      	cmp	r4, r3
 8008276:	bf08      	it	eq
 8008278:	68ec      	ldreq	r4, [r5, #12]
 800827a:	e7da      	b.n	8008232 <_fflush_r+0x22>
 800827c:	08008bb0 	.word	0x08008bb0
 8008280:	08008bd0 	.word	0x08008bd0
 8008284:	08008b90 	.word	0x08008b90

08008288 <std>:
 8008288:	2300      	movs	r3, #0
 800828a:	b510      	push	{r4, lr}
 800828c:	4604      	mov	r4, r0
 800828e:	e9c0 3300 	strd	r3, r3, [r0]
 8008292:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008296:	6083      	str	r3, [r0, #8]
 8008298:	8181      	strh	r1, [r0, #12]
 800829a:	6643      	str	r3, [r0, #100]	; 0x64
 800829c:	81c2      	strh	r2, [r0, #14]
 800829e:	6183      	str	r3, [r0, #24]
 80082a0:	4619      	mov	r1, r3
 80082a2:	2208      	movs	r2, #8
 80082a4:	305c      	adds	r0, #92	; 0x5c
 80082a6:	f7fd fbb3 	bl	8005a10 <memset>
 80082aa:	4b05      	ldr	r3, [pc, #20]	; (80082c0 <std+0x38>)
 80082ac:	6263      	str	r3, [r4, #36]	; 0x24
 80082ae:	4b05      	ldr	r3, [pc, #20]	; (80082c4 <std+0x3c>)
 80082b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80082b2:	4b05      	ldr	r3, [pc, #20]	; (80082c8 <std+0x40>)
 80082b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80082b6:	4b05      	ldr	r3, [pc, #20]	; (80082cc <std+0x44>)
 80082b8:	6224      	str	r4, [r4, #32]
 80082ba:	6323      	str	r3, [r4, #48]	; 0x30
 80082bc:	bd10      	pop	{r4, pc}
 80082be:	bf00      	nop
 80082c0:	08008685 	.word	0x08008685
 80082c4:	080086a7 	.word	0x080086a7
 80082c8:	080086df 	.word	0x080086df
 80082cc:	08008703 	.word	0x08008703

080082d0 <_cleanup_r>:
 80082d0:	4901      	ldr	r1, [pc, #4]	; (80082d8 <_cleanup_r+0x8>)
 80082d2:	f000 b8af 	b.w	8008434 <_fwalk_reent>
 80082d6:	bf00      	nop
 80082d8:	08008211 	.word	0x08008211

080082dc <__sfmoreglue>:
 80082dc:	b570      	push	{r4, r5, r6, lr}
 80082de:	1e4a      	subs	r2, r1, #1
 80082e0:	2568      	movs	r5, #104	; 0x68
 80082e2:	4355      	muls	r5, r2
 80082e4:	460e      	mov	r6, r1
 80082e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80082ea:	f7ff fb23 	bl	8007934 <_malloc_r>
 80082ee:	4604      	mov	r4, r0
 80082f0:	b140      	cbz	r0, 8008304 <__sfmoreglue+0x28>
 80082f2:	2100      	movs	r1, #0
 80082f4:	e9c0 1600 	strd	r1, r6, [r0]
 80082f8:	300c      	adds	r0, #12
 80082fa:	60a0      	str	r0, [r4, #8]
 80082fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008300:	f7fd fb86 	bl	8005a10 <memset>
 8008304:	4620      	mov	r0, r4
 8008306:	bd70      	pop	{r4, r5, r6, pc}

08008308 <__sfp_lock_acquire>:
 8008308:	4801      	ldr	r0, [pc, #4]	; (8008310 <__sfp_lock_acquire+0x8>)
 800830a:	f000 b8b3 	b.w	8008474 <__retarget_lock_acquire_recursive>
 800830e:	bf00      	nop
 8008310:	200004a4 	.word	0x200004a4

08008314 <__sfp_lock_release>:
 8008314:	4801      	ldr	r0, [pc, #4]	; (800831c <__sfp_lock_release+0x8>)
 8008316:	f000 b8ae 	b.w	8008476 <__retarget_lock_release_recursive>
 800831a:	bf00      	nop
 800831c:	200004a4 	.word	0x200004a4

08008320 <__sinit_lock_acquire>:
 8008320:	4801      	ldr	r0, [pc, #4]	; (8008328 <__sinit_lock_acquire+0x8>)
 8008322:	f000 b8a7 	b.w	8008474 <__retarget_lock_acquire_recursive>
 8008326:	bf00      	nop
 8008328:	2000049f 	.word	0x2000049f

0800832c <__sinit_lock_release>:
 800832c:	4801      	ldr	r0, [pc, #4]	; (8008334 <__sinit_lock_release+0x8>)
 800832e:	f000 b8a2 	b.w	8008476 <__retarget_lock_release_recursive>
 8008332:	bf00      	nop
 8008334:	2000049f 	.word	0x2000049f

08008338 <__sinit>:
 8008338:	b510      	push	{r4, lr}
 800833a:	4604      	mov	r4, r0
 800833c:	f7ff fff0 	bl	8008320 <__sinit_lock_acquire>
 8008340:	69a3      	ldr	r3, [r4, #24]
 8008342:	b11b      	cbz	r3, 800834c <__sinit+0x14>
 8008344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008348:	f7ff bff0 	b.w	800832c <__sinit_lock_release>
 800834c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008350:	6523      	str	r3, [r4, #80]	; 0x50
 8008352:	4b13      	ldr	r3, [pc, #76]	; (80083a0 <__sinit+0x68>)
 8008354:	4a13      	ldr	r2, [pc, #76]	; (80083a4 <__sinit+0x6c>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	62a2      	str	r2, [r4, #40]	; 0x28
 800835a:	42a3      	cmp	r3, r4
 800835c:	bf04      	itt	eq
 800835e:	2301      	moveq	r3, #1
 8008360:	61a3      	streq	r3, [r4, #24]
 8008362:	4620      	mov	r0, r4
 8008364:	f000 f820 	bl	80083a8 <__sfp>
 8008368:	6060      	str	r0, [r4, #4]
 800836a:	4620      	mov	r0, r4
 800836c:	f000 f81c 	bl	80083a8 <__sfp>
 8008370:	60a0      	str	r0, [r4, #8]
 8008372:	4620      	mov	r0, r4
 8008374:	f000 f818 	bl	80083a8 <__sfp>
 8008378:	2200      	movs	r2, #0
 800837a:	60e0      	str	r0, [r4, #12]
 800837c:	2104      	movs	r1, #4
 800837e:	6860      	ldr	r0, [r4, #4]
 8008380:	f7ff ff82 	bl	8008288 <std>
 8008384:	68a0      	ldr	r0, [r4, #8]
 8008386:	2201      	movs	r2, #1
 8008388:	2109      	movs	r1, #9
 800838a:	f7ff ff7d 	bl	8008288 <std>
 800838e:	68e0      	ldr	r0, [r4, #12]
 8008390:	2202      	movs	r2, #2
 8008392:	2112      	movs	r1, #18
 8008394:	f7ff ff78 	bl	8008288 <std>
 8008398:	2301      	movs	r3, #1
 800839a:	61a3      	str	r3, [r4, #24]
 800839c:	e7d2      	b.n	8008344 <__sinit+0xc>
 800839e:	bf00      	nop
 80083a0:	080088b4 	.word	0x080088b4
 80083a4:	080082d1 	.word	0x080082d1

080083a8 <__sfp>:
 80083a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083aa:	4607      	mov	r7, r0
 80083ac:	f7ff ffac 	bl	8008308 <__sfp_lock_acquire>
 80083b0:	4b1e      	ldr	r3, [pc, #120]	; (800842c <__sfp+0x84>)
 80083b2:	681e      	ldr	r6, [r3, #0]
 80083b4:	69b3      	ldr	r3, [r6, #24]
 80083b6:	b913      	cbnz	r3, 80083be <__sfp+0x16>
 80083b8:	4630      	mov	r0, r6
 80083ba:	f7ff ffbd 	bl	8008338 <__sinit>
 80083be:	3648      	adds	r6, #72	; 0x48
 80083c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80083c4:	3b01      	subs	r3, #1
 80083c6:	d503      	bpl.n	80083d0 <__sfp+0x28>
 80083c8:	6833      	ldr	r3, [r6, #0]
 80083ca:	b30b      	cbz	r3, 8008410 <__sfp+0x68>
 80083cc:	6836      	ldr	r6, [r6, #0]
 80083ce:	e7f7      	b.n	80083c0 <__sfp+0x18>
 80083d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80083d4:	b9d5      	cbnz	r5, 800840c <__sfp+0x64>
 80083d6:	4b16      	ldr	r3, [pc, #88]	; (8008430 <__sfp+0x88>)
 80083d8:	60e3      	str	r3, [r4, #12]
 80083da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80083de:	6665      	str	r5, [r4, #100]	; 0x64
 80083e0:	f000 f847 	bl	8008472 <__retarget_lock_init_recursive>
 80083e4:	f7ff ff96 	bl	8008314 <__sfp_lock_release>
 80083e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80083ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80083f0:	6025      	str	r5, [r4, #0]
 80083f2:	61a5      	str	r5, [r4, #24]
 80083f4:	2208      	movs	r2, #8
 80083f6:	4629      	mov	r1, r5
 80083f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80083fc:	f7fd fb08 	bl	8005a10 <memset>
 8008400:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008404:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008408:	4620      	mov	r0, r4
 800840a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800840c:	3468      	adds	r4, #104	; 0x68
 800840e:	e7d9      	b.n	80083c4 <__sfp+0x1c>
 8008410:	2104      	movs	r1, #4
 8008412:	4638      	mov	r0, r7
 8008414:	f7ff ff62 	bl	80082dc <__sfmoreglue>
 8008418:	4604      	mov	r4, r0
 800841a:	6030      	str	r0, [r6, #0]
 800841c:	2800      	cmp	r0, #0
 800841e:	d1d5      	bne.n	80083cc <__sfp+0x24>
 8008420:	f7ff ff78 	bl	8008314 <__sfp_lock_release>
 8008424:	230c      	movs	r3, #12
 8008426:	603b      	str	r3, [r7, #0]
 8008428:	e7ee      	b.n	8008408 <__sfp+0x60>
 800842a:	bf00      	nop
 800842c:	080088b4 	.word	0x080088b4
 8008430:	ffff0001 	.word	0xffff0001

08008434 <_fwalk_reent>:
 8008434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008438:	4606      	mov	r6, r0
 800843a:	4688      	mov	r8, r1
 800843c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008440:	2700      	movs	r7, #0
 8008442:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008446:	f1b9 0901 	subs.w	r9, r9, #1
 800844a:	d505      	bpl.n	8008458 <_fwalk_reent+0x24>
 800844c:	6824      	ldr	r4, [r4, #0]
 800844e:	2c00      	cmp	r4, #0
 8008450:	d1f7      	bne.n	8008442 <_fwalk_reent+0xe>
 8008452:	4638      	mov	r0, r7
 8008454:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008458:	89ab      	ldrh	r3, [r5, #12]
 800845a:	2b01      	cmp	r3, #1
 800845c:	d907      	bls.n	800846e <_fwalk_reent+0x3a>
 800845e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008462:	3301      	adds	r3, #1
 8008464:	d003      	beq.n	800846e <_fwalk_reent+0x3a>
 8008466:	4629      	mov	r1, r5
 8008468:	4630      	mov	r0, r6
 800846a:	47c0      	blx	r8
 800846c:	4307      	orrs	r7, r0
 800846e:	3568      	adds	r5, #104	; 0x68
 8008470:	e7e9      	b.n	8008446 <_fwalk_reent+0x12>

08008472 <__retarget_lock_init_recursive>:
 8008472:	4770      	bx	lr

08008474 <__retarget_lock_acquire_recursive>:
 8008474:	4770      	bx	lr

08008476 <__retarget_lock_release_recursive>:
 8008476:	4770      	bx	lr

08008478 <__swhatbuf_r>:
 8008478:	b570      	push	{r4, r5, r6, lr}
 800847a:	460e      	mov	r6, r1
 800847c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008480:	2900      	cmp	r1, #0
 8008482:	b096      	sub	sp, #88	; 0x58
 8008484:	4614      	mov	r4, r2
 8008486:	461d      	mov	r5, r3
 8008488:	da07      	bge.n	800849a <__swhatbuf_r+0x22>
 800848a:	2300      	movs	r3, #0
 800848c:	602b      	str	r3, [r5, #0]
 800848e:	89b3      	ldrh	r3, [r6, #12]
 8008490:	061a      	lsls	r2, r3, #24
 8008492:	d410      	bmi.n	80084b6 <__swhatbuf_r+0x3e>
 8008494:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008498:	e00e      	b.n	80084b8 <__swhatbuf_r+0x40>
 800849a:	466a      	mov	r2, sp
 800849c:	f000 f964 	bl	8008768 <_fstat_r>
 80084a0:	2800      	cmp	r0, #0
 80084a2:	dbf2      	blt.n	800848a <__swhatbuf_r+0x12>
 80084a4:	9a01      	ldr	r2, [sp, #4]
 80084a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80084aa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80084ae:	425a      	negs	r2, r3
 80084b0:	415a      	adcs	r2, r3
 80084b2:	602a      	str	r2, [r5, #0]
 80084b4:	e7ee      	b.n	8008494 <__swhatbuf_r+0x1c>
 80084b6:	2340      	movs	r3, #64	; 0x40
 80084b8:	2000      	movs	r0, #0
 80084ba:	6023      	str	r3, [r4, #0]
 80084bc:	b016      	add	sp, #88	; 0x58
 80084be:	bd70      	pop	{r4, r5, r6, pc}

080084c0 <__smakebuf_r>:
 80084c0:	898b      	ldrh	r3, [r1, #12]
 80084c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80084c4:	079d      	lsls	r5, r3, #30
 80084c6:	4606      	mov	r6, r0
 80084c8:	460c      	mov	r4, r1
 80084ca:	d507      	bpl.n	80084dc <__smakebuf_r+0x1c>
 80084cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80084d0:	6023      	str	r3, [r4, #0]
 80084d2:	6123      	str	r3, [r4, #16]
 80084d4:	2301      	movs	r3, #1
 80084d6:	6163      	str	r3, [r4, #20]
 80084d8:	b002      	add	sp, #8
 80084da:	bd70      	pop	{r4, r5, r6, pc}
 80084dc:	ab01      	add	r3, sp, #4
 80084de:	466a      	mov	r2, sp
 80084e0:	f7ff ffca 	bl	8008478 <__swhatbuf_r>
 80084e4:	9900      	ldr	r1, [sp, #0]
 80084e6:	4605      	mov	r5, r0
 80084e8:	4630      	mov	r0, r6
 80084ea:	f7ff fa23 	bl	8007934 <_malloc_r>
 80084ee:	b948      	cbnz	r0, 8008504 <__smakebuf_r+0x44>
 80084f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084f4:	059a      	lsls	r2, r3, #22
 80084f6:	d4ef      	bmi.n	80084d8 <__smakebuf_r+0x18>
 80084f8:	f023 0303 	bic.w	r3, r3, #3
 80084fc:	f043 0302 	orr.w	r3, r3, #2
 8008500:	81a3      	strh	r3, [r4, #12]
 8008502:	e7e3      	b.n	80084cc <__smakebuf_r+0xc>
 8008504:	4b0d      	ldr	r3, [pc, #52]	; (800853c <__smakebuf_r+0x7c>)
 8008506:	62b3      	str	r3, [r6, #40]	; 0x28
 8008508:	89a3      	ldrh	r3, [r4, #12]
 800850a:	6020      	str	r0, [r4, #0]
 800850c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008510:	81a3      	strh	r3, [r4, #12]
 8008512:	9b00      	ldr	r3, [sp, #0]
 8008514:	6163      	str	r3, [r4, #20]
 8008516:	9b01      	ldr	r3, [sp, #4]
 8008518:	6120      	str	r0, [r4, #16]
 800851a:	b15b      	cbz	r3, 8008534 <__smakebuf_r+0x74>
 800851c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008520:	4630      	mov	r0, r6
 8008522:	f000 f933 	bl	800878c <_isatty_r>
 8008526:	b128      	cbz	r0, 8008534 <__smakebuf_r+0x74>
 8008528:	89a3      	ldrh	r3, [r4, #12]
 800852a:	f023 0303 	bic.w	r3, r3, #3
 800852e:	f043 0301 	orr.w	r3, r3, #1
 8008532:	81a3      	strh	r3, [r4, #12]
 8008534:	89a0      	ldrh	r0, [r4, #12]
 8008536:	4305      	orrs	r5, r0
 8008538:	81a5      	strh	r5, [r4, #12]
 800853a:	e7cd      	b.n	80084d8 <__smakebuf_r+0x18>
 800853c:	080082d1 	.word	0x080082d1

08008540 <__ascii_mbtowc>:
 8008540:	b082      	sub	sp, #8
 8008542:	b901      	cbnz	r1, 8008546 <__ascii_mbtowc+0x6>
 8008544:	a901      	add	r1, sp, #4
 8008546:	b142      	cbz	r2, 800855a <__ascii_mbtowc+0x1a>
 8008548:	b14b      	cbz	r3, 800855e <__ascii_mbtowc+0x1e>
 800854a:	7813      	ldrb	r3, [r2, #0]
 800854c:	600b      	str	r3, [r1, #0]
 800854e:	7812      	ldrb	r2, [r2, #0]
 8008550:	1e10      	subs	r0, r2, #0
 8008552:	bf18      	it	ne
 8008554:	2001      	movne	r0, #1
 8008556:	b002      	add	sp, #8
 8008558:	4770      	bx	lr
 800855a:	4610      	mov	r0, r2
 800855c:	e7fb      	b.n	8008556 <__ascii_mbtowc+0x16>
 800855e:	f06f 0001 	mvn.w	r0, #1
 8008562:	e7f8      	b.n	8008556 <__ascii_mbtowc+0x16>

08008564 <memmove>:
 8008564:	4288      	cmp	r0, r1
 8008566:	b510      	push	{r4, lr}
 8008568:	eb01 0402 	add.w	r4, r1, r2
 800856c:	d902      	bls.n	8008574 <memmove+0x10>
 800856e:	4284      	cmp	r4, r0
 8008570:	4623      	mov	r3, r4
 8008572:	d807      	bhi.n	8008584 <memmove+0x20>
 8008574:	1e43      	subs	r3, r0, #1
 8008576:	42a1      	cmp	r1, r4
 8008578:	d008      	beq.n	800858c <memmove+0x28>
 800857a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800857e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008582:	e7f8      	b.n	8008576 <memmove+0x12>
 8008584:	4402      	add	r2, r0
 8008586:	4601      	mov	r1, r0
 8008588:	428a      	cmp	r2, r1
 800858a:	d100      	bne.n	800858e <memmove+0x2a>
 800858c:	bd10      	pop	{r4, pc}
 800858e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008592:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008596:	e7f7      	b.n	8008588 <memmove+0x24>

08008598 <__malloc_lock>:
 8008598:	4801      	ldr	r0, [pc, #4]	; (80085a0 <__malloc_lock+0x8>)
 800859a:	f7ff bf6b 	b.w	8008474 <__retarget_lock_acquire_recursive>
 800859e:	bf00      	nop
 80085a0:	200004a0 	.word	0x200004a0

080085a4 <__malloc_unlock>:
 80085a4:	4801      	ldr	r0, [pc, #4]	; (80085ac <__malloc_unlock+0x8>)
 80085a6:	f7ff bf66 	b.w	8008476 <__retarget_lock_release_recursive>
 80085aa:	bf00      	nop
 80085ac:	200004a0 	.word	0x200004a0

080085b0 <_realloc_r>:
 80085b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085b2:	4607      	mov	r7, r0
 80085b4:	4614      	mov	r4, r2
 80085b6:	460e      	mov	r6, r1
 80085b8:	b921      	cbnz	r1, 80085c4 <_realloc_r+0x14>
 80085ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80085be:	4611      	mov	r1, r2
 80085c0:	f7ff b9b8 	b.w	8007934 <_malloc_r>
 80085c4:	b922      	cbnz	r2, 80085d0 <_realloc_r+0x20>
 80085c6:	f7ff f965 	bl	8007894 <_free_r>
 80085ca:	4625      	mov	r5, r4
 80085cc:	4628      	mov	r0, r5
 80085ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085d0:	f000 f8fe 	bl	80087d0 <_malloc_usable_size_r>
 80085d4:	42a0      	cmp	r0, r4
 80085d6:	d20f      	bcs.n	80085f8 <_realloc_r+0x48>
 80085d8:	4621      	mov	r1, r4
 80085da:	4638      	mov	r0, r7
 80085dc:	f7ff f9aa 	bl	8007934 <_malloc_r>
 80085e0:	4605      	mov	r5, r0
 80085e2:	2800      	cmp	r0, #0
 80085e4:	d0f2      	beq.n	80085cc <_realloc_r+0x1c>
 80085e6:	4631      	mov	r1, r6
 80085e8:	4622      	mov	r2, r4
 80085ea:	f7fe fdb7 	bl	800715c <memcpy>
 80085ee:	4631      	mov	r1, r6
 80085f0:	4638      	mov	r0, r7
 80085f2:	f7ff f94f 	bl	8007894 <_free_r>
 80085f6:	e7e9      	b.n	80085cc <_realloc_r+0x1c>
 80085f8:	4635      	mov	r5, r6
 80085fa:	e7e7      	b.n	80085cc <_realloc_r+0x1c>

080085fc <_raise_r>:
 80085fc:	291f      	cmp	r1, #31
 80085fe:	b538      	push	{r3, r4, r5, lr}
 8008600:	4604      	mov	r4, r0
 8008602:	460d      	mov	r5, r1
 8008604:	d904      	bls.n	8008610 <_raise_r+0x14>
 8008606:	2316      	movs	r3, #22
 8008608:	6003      	str	r3, [r0, #0]
 800860a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800860e:	bd38      	pop	{r3, r4, r5, pc}
 8008610:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008612:	b112      	cbz	r2, 800861a <_raise_r+0x1e>
 8008614:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008618:	b94b      	cbnz	r3, 800862e <_raise_r+0x32>
 800861a:	4620      	mov	r0, r4
 800861c:	f000 f830 	bl	8008680 <_getpid_r>
 8008620:	462a      	mov	r2, r5
 8008622:	4601      	mov	r1, r0
 8008624:	4620      	mov	r0, r4
 8008626:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800862a:	f000 b817 	b.w	800865c <_kill_r>
 800862e:	2b01      	cmp	r3, #1
 8008630:	d00a      	beq.n	8008648 <_raise_r+0x4c>
 8008632:	1c59      	adds	r1, r3, #1
 8008634:	d103      	bne.n	800863e <_raise_r+0x42>
 8008636:	2316      	movs	r3, #22
 8008638:	6003      	str	r3, [r0, #0]
 800863a:	2001      	movs	r0, #1
 800863c:	e7e7      	b.n	800860e <_raise_r+0x12>
 800863e:	2400      	movs	r4, #0
 8008640:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008644:	4628      	mov	r0, r5
 8008646:	4798      	blx	r3
 8008648:	2000      	movs	r0, #0
 800864a:	e7e0      	b.n	800860e <_raise_r+0x12>

0800864c <raise>:
 800864c:	4b02      	ldr	r3, [pc, #8]	; (8008658 <raise+0xc>)
 800864e:	4601      	mov	r1, r0
 8008650:	6818      	ldr	r0, [r3, #0]
 8008652:	f7ff bfd3 	b.w	80085fc <_raise_r>
 8008656:	bf00      	nop
 8008658:	20000018 	.word	0x20000018

0800865c <_kill_r>:
 800865c:	b538      	push	{r3, r4, r5, lr}
 800865e:	4d07      	ldr	r5, [pc, #28]	; (800867c <_kill_r+0x20>)
 8008660:	2300      	movs	r3, #0
 8008662:	4604      	mov	r4, r0
 8008664:	4608      	mov	r0, r1
 8008666:	4611      	mov	r1, r2
 8008668:	602b      	str	r3, [r5, #0]
 800866a:	f7f9 feb3 	bl	80023d4 <_kill>
 800866e:	1c43      	adds	r3, r0, #1
 8008670:	d102      	bne.n	8008678 <_kill_r+0x1c>
 8008672:	682b      	ldr	r3, [r5, #0]
 8008674:	b103      	cbz	r3, 8008678 <_kill_r+0x1c>
 8008676:	6023      	str	r3, [r4, #0]
 8008678:	bd38      	pop	{r3, r4, r5, pc}
 800867a:	bf00      	nop
 800867c:	200004a8 	.word	0x200004a8

08008680 <_getpid_r>:
 8008680:	f7f9 bea0 	b.w	80023c4 <_getpid>

08008684 <__sread>:
 8008684:	b510      	push	{r4, lr}
 8008686:	460c      	mov	r4, r1
 8008688:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800868c:	f000 f8a8 	bl	80087e0 <_read_r>
 8008690:	2800      	cmp	r0, #0
 8008692:	bfab      	itete	ge
 8008694:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008696:	89a3      	ldrhlt	r3, [r4, #12]
 8008698:	181b      	addge	r3, r3, r0
 800869a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800869e:	bfac      	ite	ge
 80086a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80086a2:	81a3      	strhlt	r3, [r4, #12]
 80086a4:	bd10      	pop	{r4, pc}

080086a6 <__swrite>:
 80086a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086aa:	461f      	mov	r7, r3
 80086ac:	898b      	ldrh	r3, [r1, #12]
 80086ae:	05db      	lsls	r3, r3, #23
 80086b0:	4605      	mov	r5, r0
 80086b2:	460c      	mov	r4, r1
 80086b4:	4616      	mov	r6, r2
 80086b6:	d505      	bpl.n	80086c4 <__swrite+0x1e>
 80086b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086bc:	2302      	movs	r3, #2
 80086be:	2200      	movs	r2, #0
 80086c0:	f000 f874 	bl	80087ac <_lseek_r>
 80086c4:	89a3      	ldrh	r3, [r4, #12]
 80086c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80086ce:	81a3      	strh	r3, [r4, #12]
 80086d0:	4632      	mov	r2, r6
 80086d2:	463b      	mov	r3, r7
 80086d4:	4628      	mov	r0, r5
 80086d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086da:	f000 b823 	b.w	8008724 <_write_r>

080086de <__sseek>:
 80086de:	b510      	push	{r4, lr}
 80086e0:	460c      	mov	r4, r1
 80086e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086e6:	f000 f861 	bl	80087ac <_lseek_r>
 80086ea:	1c43      	adds	r3, r0, #1
 80086ec:	89a3      	ldrh	r3, [r4, #12]
 80086ee:	bf15      	itete	ne
 80086f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80086f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80086f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80086fa:	81a3      	strheq	r3, [r4, #12]
 80086fc:	bf18      	it	ne
 80086fe:	81a3      	strhne	r3, [r4, #12]
 8008700:	bd10      	pop	{r4, pc}

08008702 <__sclose>:
 8008702:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008706:	f000 b81f 	b.w	8008748 <_close_r>

0800870a <__ascii_wctomb>:
 800870a:	b149      	cbz	r1, 8008720 <__ascii_wctomb+0x16>
 800870c:	2aff      	cmp	r2, #255	; 0xff
 800870e:	bf85      	ittet	hi
 8008710:	238a      	movhi	r3, #138	; 0x8a
 8008712:	6003      	strhi	r3, [r0, #0]
 8008714:	700a      	strbls	r2, [r1, #0]
 8008716:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800871a:	bf98      	it	ls
 800871c:	2001      	movls	r0, #1
 800871e:	4770      	bx	lr
 8008720:	4608      	mov	r0, r1
 8008722:	4770      	bx	lr

08008724 <_write_r>:
 8008724:	b538      	push	{r3, r4, r5, lr}
 8008726:	4d07      	ldr	r5, [pc, #28]	; (8008744 <_write_r+0x20>)
 8008728:	4604      	mov	r4, r0
 800872a:	4608      	mov	r0, r1
 800872c:	4611      	mov	r1, r2
 800872e:	2200      	movs	r2, #0
 8008730:	602a      	str	r2, [r5, #0]
 8008732:	461a      	mov	r2, r3
 8008734:	f7f9 fe85 	bl	8002442 <_write>
 8008738:	1c43      	adds	r3, r0, #1
 800873a:	d102      	bne.n	8008742 <_write_r+0x1e>
 800873c:	682b      	ldr	r3, [r5, #0]
 800873e:	b103      	cbz	r3, 8008742 <_write_r+0x1e>
 8008740:	6023      	str	r3, [r4, #0]
 8008742:	bd38      	pop	{r3, r4, r5, pc}
 8008744:	200004a8 	.word	0x200004a8

08008748 <_close_r>:
 8008748:	b538      	push	{r3, r4, r5, lr}
 800874a:	4d06      	ldr	r5, [pc, #24]	; (8008764 <_close_r+0x1c>)
 800874c:	2300      	movs	r3, #0
 800874e:	4604      	mov	r4, r0
 8008750:	4608      	mov	r0, r1
 8008752:	602b      	str	r3, [r5, #0]
 8008754:	f7f9 fe91 	bl	800247a <_close>
 8008758:	1c43      	adds	r3, r0, #1
 800875a:	d102      	bne.n	8008762 <_close_r+0x1a>
 800875c:	682b      	ldr	r3, [r5, #0]
 800875e:	b103      	cbz	r3, 8008762 <_close_r+0x1a>
 8008760:	6023      	str	r3, [r4, #0]
 8008762:	bd38      	pop	{r3, r4, r5, pc}
 8008764:	200004a8 	.word	0x200004a8

08008768 <_fstat_r>:
 8008768:	b538      	push	{r3, r4, r5, lr}
 800876a:	4d07      	ldr	r5, [pc, #28]	; (8008788 <_fstat_r+0x20>)
 800876c:	2300      	movs	r3, #0
 800876e:	4604      	mov	r4, r0
 8008770:	4608      	mov	r0, r1
 8008772:	4611      	mov	r1, r2
 8008774:	602b      	str	r3, [r5, #0]
 8008776:	f7f9 fe8c 	bl	8002492 <_fstat>
 800877a:	1c43      	adds	r3, r0, #1
 800877c:	d102      	bne.n	8008784 <_fstat_r+0x1c>
 800877e:	682b      	ldr	r3, [r5, #0]
 8008780:	b103      	cbz	r3, 8008784 <_fstat_r+0x1c>
 8008782:	6023      	str	r3, [r4, #0]
 8008784:	bd38      	pop	{r3, r4, r5, pc}
 8008786:	bf00      	nop
 8008788:	200004a8 	.word	0x200004a8

0800878c <_isatty_r>:
 800878c:	b538      	push	{r3, r4, r5, lr}
 800878e:	4d06      	ldr	r5, [pc, #24]	; (80087a8 <_isatty_r+0x1c>)
 8008790:	2300      	movs	r3, #0
 8008792:	4604      	mov	r4, r0
 8008794:	4608      	mov	r0, r1
 8008796:	602b      	str	r3, [r5, #0]
 8008798:	f7f9 fe8b 	bl	80024b2 <_isatty>
 800879c:	1c43      	adds	r3, r0, #1
 800879e:	d102      	bne.n	80087a6 <_isatty_r+0x1a>
 80087a0:	682b      	ldr	r3, [r5, #0]
 80087a2:	b103      	cbz	r3, 80087a6 <_isatty_r+0x1a>
 80087a4:	6023      	str	r3, [r4, #0]
 80087a6:	bd38      	pop	{r3, r4, r5, pc}
 80087a8:	200004a8 	.word	0x200004a8

080087ac <_lseek_r>:
 80087ac:	b538      	push	{r3, r4, r5, lr}
 80087ae:	4d07      	ldr	r5, [pc, #28]	; (80087cc <_lseek_r+0x20>)
 80087b0:	4604      	mov	r4, r0
 80087b2:	4608      	mov	r0, r1
 80087b4:	4611      	mov	r1, r2
 80087b6:	2200      	movs	r2, #0
 80087b8:	602a      	str	r2, [r5, #0]
 80087ba:	461a      	mov	r2, r3
 80087bc:	f7f9 fe84 	bl	80024c8 <_lseek>
 80087c0:	1c43      	adds	r3, r0, #1
 80087c2:	d102      	bne.n	80087ca <_lseek_r+0x1e>
 80087c4:	682b      	ldr	r3, [r5, #0]
 80087c6:	b103      	cbz	r3, 80087ca <_lseek_r+0x1e>
 80087c8:	6023      	str	r3, [r4, #0]
 80087ca:	bd38      	pop	{r3, r4, r5, pc}
 80087cc:	200004a8 	.word	0x200004a8

080087d0 <_malloc_usable_size_r>:
 80087d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087d4:	1f18      	subs	r0, r3, #4
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	bfbc      	itt	lt
 80087da:	580b      	ldrlt	r3, [r1, r0]
 80087dc:	18c0      	addlt	r0, r0, r3
 80087de:	4770      	bx	lr

080087e0 <_read_r>:
 80087e0:	b538      	push	{r3, r4, r5, lr}
 80087e2:	4d07      	ldr	r5, [pc, #28]	; (8008800 <_read_r+0x20>)
 80087e4:	4604      	mov	r4, r0
 80087e6:	4608      	mov	r0, r1
 80087e8:	4611      	mov	r1, r2
 80087ea:	2200      	movs	r2, #0
 80087ec:	602a      	str	r2, [r5, #0]
 80087ee:	461a      	mov	r2, r3
 80087f0:	f7f9 fe0a 	bl	8002408 <_read>
 80087f4:	1c43      	adds	r3, r0, #1
 80087f6:	d102      	bne.n	80087fe <_read_r+0x1e>
 80087f8:	682b      	ldr	r3, [r5, #0]
 80087fa:	b103      	cbz	r3, 80087fe <_read_r+0x1e>
 80087fc:	6023      	str	r3, [r4, #0]
 80087fe:	bd38      	pop	{r3, r4, r5, pc}
 8008800:	200004a8 	.word	0x200004a8

08008804 <_init>:
 8008804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008806:	bf00      	nop
 8008808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800880a:	bc08      	pop	{r3}
 800880c:	469e      	mov	lr, r3
 800880e:	4770      	bx	lr

08008810 <_fini>:
 8008810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008812:	bf00      	nop
 8008814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008816:	bc08      	pop	{r3}
 8008818:	469e      	mov	lr, r3
 800881a:	4770      	bx	lr
