
STM32NUCLEO-F401RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a74  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  08008c18  08008c18  00018c18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009064  08009064  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  08009064  08009064  00019064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800906c  0800906c  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800906c  0800906c  0001906c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009070  08009070  00019070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08009074  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  200001f8  0800926c  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000450  0800926c  00020450  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001436c  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026de  00000000  00000000  00034594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a8  00000000  00000000  00036c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe8  00000000  00000000  00037d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f3b  00000000  00000000  00038d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013906  00000000  00000000  00050c43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091f00  00000000  00000000  00064549  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f6449  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000586c  00000000  00000000  000f649c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008bfc 	.word	0x08008bfc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	08008bfc 	.word	0x08008bfc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bcc:	f000 b96e 	b.w	8000eac <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468c      	mov	ip, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f040 8083 	bne.w	8000cfe <__udivmoddi4+0x116>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d947      	bls.n	8000c8e <__udivmoddi4+0xa6>
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	b142      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	f1c2 0020 	rsb	r0, r2, #32
 8000c08:	fa24 f000 	lsr.w	r0, r4, r0
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	4097      	lsls	r7, r2
 8000c10:	ea40 0c01 	orr.w	ip, r0, r1
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c20:	fa1f fe87 	uxth.w	lr, r7
 8000c24:	fb08 c116 	mls	r1, r8, r6, ip
 8000c28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c3a:	f080 8119 	bcs.w	8000e70 <__udivmoddi4+0x288>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8116 	bls.w	8000e70 <__udivmoddi4+0x288>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	443b      	add	r3, r7
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c50:	fb08 3310 	mls	r3, r8, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	193c      	adds	r4, r7, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c66:	f080 8105 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	f240 8102 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c70:	3802      	subs	r0, #2
 8000c72:	443c      	add	r4, r7
 8000c74:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c78:	eba4 040e 	sub.w	r4, r4, lr
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	b11d      	cbz	r5, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c5 4300 	strd	r4, r3, [r5]
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	b902      	cbnz	r2, 8000c92 <__udivmoddi4+0xaa>
 8000c90:	deff      	udf	#255	; 0xff
 8000c92:	fab2 f282 	clz	r2, r2
 8000c96:	2a00      	cmp	r2, #0
 8000c98:	d150      	bne.n	8000d3c <__udivmoddi4+0x154>
 8000c9a:	1bcb      	subs	r3, r1, r7
 8000c9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca0:	fa1f f887 	uxth.w	r8, r7
 8000ca4:	2601      	movs	r6, #1
 8000ca6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000caa:	0c21      	lsrs	r1, r4, #16
 8000cac:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000cbc:	1879      	adds	r1, r7, r1
 8000cbe:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0xe2>
 8000cc4:	428b      	cmp	r3, r1
 8000cc6:	f200 80e9 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000cca:	4684      	mov	ip, r0
 8000ccc:	1ac9      	subs	r1, r1, r3
 8000cce:	b2a3      	uxth	r3, r4
 8000cd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cd8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cdc:	fb08 f800 	mul.w	r8, r8, r0
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x10c>
 8000ce4:	193c      	adds	r4, r7, r4
 8000ce6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x10a>
 8000cec:	45a0      	cmp	r8, r4
 8000cee:	f200 80d9 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	eba4 0408 	sub.w	r4, r4, r8
 8000cf8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cfc:	e7bf      	b.n	8000c7e <__udivmoddi4+0x96>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x12e>
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	f000 80b1 	beq.w	8000e6a <__udivmoddi4+0x282>
 8000d08:	2600      	movs	r6, #0
 8000d0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0e:	4630      	mov	r0, r6
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f683 	clz	r6, r3
 8000d1a:	2e00      	cmp	r6, #0
 8000d1c:	d14a      	bne.n	8000db4 <__udivmoddi4+0x1cc>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0x140>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80b8 	bhi.w	8000e98 <__udivmoddi4+0x2b0>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	468c      	mov	ip, r1
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	d0a8      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000d36:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d3a:	e7a5      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000d3c:	f1c2 0320 	rsb	r3, r2, #32
 8000d40:	fa20 f603 	lsr.w	r6, r0, r3
 8000d44:	4097      	lsls	r7, r2
 8000d46:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4e:	40d9      	lsrs	r1, r3
 8000d50:	4330      	orrs	r0, r6
 8000d52:	0c03      	lsrs	r3, r0, #16
 8000d54:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d58:	fa1f f887 	uxth.w	r8, r7
 8000d5c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb06 f108 	mul.w	r1, r6, r8
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x19c>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d76:	f080 808d 	bcs.w	8000e94 <__udivmoddi4+0x2ac>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 808a 	bls.w	8000e94 <__udivmoddi4+0x2ac>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b281      	uxth	r1, r0
 8000d88:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb00 f308 	mul.w	r3, r0, r8
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x1c4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000da2:	d273      	bcs.n	8000e8c <__udivmoddi4+0x2a4>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	d971      	bls.n	8000e8c <__udivmoddi4+0x2a4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	4439      	add	r1, r7
 8000dac:	1acb      	subs	r3, r1, r3
 8000dae:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000db2:	e778      	b.n	8000ca6 <__udivmoddi4+0xbe>
 8000db4:	f1c6 0c20 	rsb	ip, r6, #32
 8000db8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dbc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dc0:	431c      	orrs	r4, r3
 8000dc2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dc6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dca:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dce:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	0c3b      	lsrs	r3, r7, #16
 8000dd6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dda:	fa1f f884 	uxth.w	r8, r4
 8000dde:	fb0e 1119 	mls	r1, lr, r9, r1
 8000de2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000de6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dea:	458a      	cmp	sl, r1
 8000dec:	fa02 f206 	lsl.w	r2, r2, r6
 8000df0:	fa00 f306 	lsl.w	r3, r0, r6
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x220>
 8000df6:	1861      	adds	r1, r4, r1
 8000df8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000dfc:	d248      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000dfe:	458a      	cmp	sl, r1
 8000e00:	d946      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4421      	add	r1, r4
 8000e08:	eba1 010a 	sub.w	r1, r1, sl
 8000e0c:	b2bf      	uxth	r7, r7
 8000e0e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e12:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e16:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e1a:	fb00 f808 	mul.w	r8, r0, r8
 8000e1e:	45b8      	cmp	r8, r7
 8000e20:	d907      	bls.n	8000e32 <__udivmoddi4+0x24a>
 8000e22:	19e7      	adds	r7, r4, r7
 8000e24:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e28:	d22e      	bcs.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2a:	45b8      	cmp	r8, r7
 8000e2c:	d92c      	bls.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4427      	add	r7, r4
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	eba7 0708 	sub.w	r7, r7, r8
 8000e3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3e:	454f      	cmp	r7, r9
 8000e40:	46c6      	mov	lr, r8
 8000e42:	4649      	mov	r1, r9
 8000e44:	d31a      	bcc.n	8000e7c <__udivmoddi4+0x294>
 8000e46:	d017      	beq.n	8000e78 <__udivmoddi4+0x290>
 8000e48:	b15d      	cbz	r5, 8000e62 <__udivmoddi4+0x27a>
 8000e4a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e4e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e52:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e56:	40f2      	lsrs	r2, r6
 8000e58:	ea4c 0202 	orr.w	r2, ip, r2
 8000e5c:	40f7      	lsrs	r7, r6
 8000e5e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e62:	2600      	movs	r6, #0
 8000e64:	4631      	mov	r1, r6
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e70b      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e9      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6fd      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e78:	4543      	cmp	r3, r8
 8000e7a:	d2e5      	bcs.n	8000e48 <__udivmoddi4+0x260>
 8000e7c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e80:	eb69 0104 	sbc.w	r1, r9, r4
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7df      	b.n	8000e48 <__udivmoddi4+0x260>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e7d2      	b.n	8000e32 <__udivmoddi4+0x24a>
 8000e8c:	4660      	mov	r0, ip
 8000e8e:	e78d      	b.n	8000dac <__udivmoddi4+0x1c4>
 8000e90:	4681      	mov	r9, r0
 8000e92:	e7b9      	b.n	8000e08 <__udivmoddi4+0x220>
 8000e94:	4666      	mov	r6, ip
 8000e96:	e775      	b.n	8000d84 <__udivmoddi4+0x19c>
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e74a      	b.n	8000d32 <__udivmoddi4+0x14a>
 8000e9c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea0:	4439      	add	r1, r7
 8000ea2:	e713      	b.n	8000ccc <__udivmoddi4+0xe4>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	443c      	add	r4, r7
 8000ea8:	e724      	b.n	8000cf4 <__udivmoddi4+0x10c>
 8000eaa:	bf00      	nop

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <goToOutput>:
#define lineDown() 		HAL_GPIO_WritePin(sensor->DHT_Port, sensor->DHT_Pin, GPIO_PIN_RESET)
#define lineUp()		HAL_GPIO_WritePin(sensor->DHT_Port, sensor->DHT_Pin, GPIO_PIN_SET)
#define getLine()		(HAL_GPIO_ReadPin(sensor->DHT_Port, sensor->DHT_Pin) == GPIO_PIN_SET)
#define Delay(d)		HAL_Delay(d)

static void goToOutput(DHT_sensor *sensor) {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b088      	sub	sp, #32
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	f107 030c 	add.w	r3, r7, #12
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]

  //По умолчанию на линии высокий уровень
  lineUp();
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6818      	ldr	r0, [r3, #0]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	889b      	ldrh	r3, [r3, #4]
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	f001 fe6c 	bl	8002bb0 <HAL_GPIO_WritePin>

  //Настройка порта на выход 
  GPIO_InitStruct.Pin = sensor->DHT_Pin;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	889b      	ldrh	r3, [r3, #4]
 8000edc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; 	//Открытый сток
 8000ede:	2311      	movs	r3, #17
 8000ee0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	617b      	str	r3, [r7, #20]
//	  GPIO_InitStruct.Pull = GPIO_PULLUP;						//Подтяжка к питанию
//  } else {
//	  GPIO_InitStruct.Pull = GPIO_NOPULL;						//Без подтяжки
//  }

  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; //Высокая скорость работы порта
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f107 020c 	add.w	r2, r7, #12
 8000ef2:	4611      	mov	r1, r2
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f001 fcbf 	bl	8002878 <HAL_GPIO_Init>
}
 8000efa:	bf00      	nop
 8000efc:	3720      	adds	r7, #32
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <goToInput>:

static void goToInput(DHT_sensor *sensor) {
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b088      	sub	sp, #32
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0a:	f107 030c 	add.w	r3, r7, #12
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	605a      	str	r2, [r3, #4]
 8000f14:	609a      	str	r2, [r3, #8]
 8000f16:	60da      	str	r2, [r3, #12]
 8000f18:	611a      	str	r2, [r3, #16]

  //Настройка порта на вход 
  GPIO_InitStruct.Pin = sensor->DHT_Pin;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	889b      	ldrh	r3, [r3, #4]
 8000f1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f20:	2300      	movs	r3, #0
 8000f22:	613b      	str	r3, [r7, #16]

  GPIO_InitStruct.Pull = GPIO_PULLUP;						//Подтяжка к питанию
 8000f24:	2301      	movs	r3, #1
 8000f26:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f107 020c 	add.w	r2, r7, #12
 8000f30:	4611      	mov	r1, r2
 8000f32:	4618      	mov	r0, r3
 8000f34:	f001 fca0 	bl	8002878 <HAL_GPIO_Init>
}
 8000f38:	bf00      	nop
 8000f3a:	3720      	adds	r7, #32
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <DHT_getData>:

DHT_data DHT_getData(DHT_sensor *sensor) {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08e      	sub	sp, #56	; 0x38
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
	DHT_data data = {0.0f, 0.0f};
 8000f48:	f04f 0300 	mov.w	r3, #0
 8000f4c:	61bb      	str	r3, [r7, #24]
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	61fb      	str	r3, [r7, #28]
	
	#if DHT_POLLING_CONTROL == 1
	/* Ограничение по частоте опроса датчика */
	//Определение интервала опроса в зависимости от датчика
	uint16_t pollingInterval;
	if (sensor->type == DHT11) {
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	799b      	ldrb	r3, [r3, #6]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d103      	bne.n	8000f64 <DHT_getData+0x24>
		pollingInterval = DHT_POLLING_INTERVAL_DHT11;
 8000f5c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000f60:	86fb      	strh	r3, [r7, #54]	; 0x36
 8000f62:	e002      	b.n	8000f6a <DHT_getData+0x2a>
	} else {
		pollingInterval = DHT_POLLING_INTERVAL_DHT22;
 8000f64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f68:	86fb      	strh	r3, [r7, #54]	; 0x36
	}

	//Если частота превышена, то возврат последнего удачного значения
	if (HAL_GetTick()-sensor->lastPollingTime < pollingInterval) {
 8000f6a:	f001 fae1 	bl	8002530 <HAL_GetTick>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	1ad2      	subs	r2, r2, r3
 8000f76:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d20e      	bcs.n	8000f9a <DHT_getData+0x5a>
		data.hum = sensor->lastHum;
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	691b      	ldr	r3, [r3, #16]
 8000f80:	61bb      	str	r3, [r7, #24]
		data.temp = sensor->lastTemp;
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	61fb      	str	r3, [r7, #28]
		return data;
 8000f88:	f107 0320 	add.w	r3, r7, #32
 8000f8c:	f107 0218 	add.w	r2, r7, #24
 8000f90:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f94:	e883 0003 	stmia.w	r3, {r0, r1}
 8000f98:	e141      	b.n	800121e <DHT_getData+0x2de>
	}
	sensor->lastPollingTime = HAL_GetTick();
 8000f9a:	f001 fac9 	bl	8002530 <HAL_GetTick>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	609a      	str	r2, [r3, #8]
	#endif

	/* Запрос данных у датчика */
	//Перевод пина "на выход"
	goToOutput(sensor);
 8000fa4:	68f8      	ldr	r0, [r7, #12]
 8000fa6:	f7ff ff83 	bl	8000eb0 <goToOutput>
	//Опускание линии данных на 15 мс
	lineDown();
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	6818      	ldr	r0, [r3, #0]
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	889b      	ldrh	r3, [r3, #4]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	f001 fdfb 	bl	8002bb0 <HAL_GPIO_WritePin>
	Delay(15);
 8000fba:	200f      	movs	r0, #15
 8000fbc:	f001 fac4 	bl	8002548 <HAL_Delay>
	//Подъём линии, перевод порта "на вход"
	lineUp();
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	6818      	ldr	r0, [r3, #0]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	889b      	ldrh	r3, [r3, #4]
 8000fc8:	2201      	movs	r2, #1
 8000fca:	4619      	mov	r1, r3
 8000fcc:	f001 fdf0 	bl	8002bb0 <HAL_GPIO_WritePin>
	goToInput(sensor);
 8000fd0:	68f8      	ldr	r0, [r7, #12]
 8000fd2:	f7ff ff96 	bl	8000f02 <goToInput>
	
	/* Ожидание ответа от датчика */
	uint16_t timeout = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	86bb      	strh	r3, [r7, #52]	; 0x34
	//Ожидание спада
	while(getLine()) {
 8000fda:	e010      	b.n	8000ffe <DHT_getData+0xbe>
		timeout++;
 8000fdc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000fde:	3301      	adds	r3, #1
 8000fe0:	86bb      	strh	r3, [r7, #52]	; 0x34
		if (timeout > DHT_TIMEOUT) return data;
 8000fe2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000fe4:	f242 7210 	movw	r2, #10000	; 0x2710
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d908      	bls.n	8000ffe <DHT_getData+0xbe>
 8000fec:	f107 0320 	add.w	r3, r7, #32
 8000ff0:	f107 0218 	add.w	r2, r7, #24
 8000ff4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ff8:	e883 0003 	stmia.w	r3, {r0, r1}
 8000ffc:	e10f      	b.n	800121e <DHT_getData+0x2de>
	while(getLine()) {
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	889b      	ldrh	r3, [r3, #4]
 8001006:	4619      	mov	r1, r3
 8001008:	4610      	mov	r0, r2
 800100a:	f001 fdb9 	bl	8002b80 <HAL_GPIO_ReadPin>
 800100e:	4603      	mov	r3, r0
 8001010:	2b01      	cmp	r3, #1
 8001012:	d0e3      	beq.n	8000fdc <DHT_getData+0x9c>
	}
	timeout = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	86bb      	strh	r3, [r7, #52]	; 0x34
	//Ожидание подъёма
	while(!getLine()) {
 8001018:	e010      	b.n	800103c <DHT_getData+0xfc>
		timeout++;
 800101a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800101c:	3301      	adds	r3, #1
 800101e:	86bb      	strh	r3, [r7, #52]	; 0x34
		if (timeout > DHT_TIMEOUT) return data;
 8001020:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001022:	f242 7210 	movw	r2, #10000	; 0x2710
 8001026:	4293      	cmp	r3, r2
 8001028:	d908      	bls.n	800103c <DHT_getData+0xfc>
 800102a:	f107 0320 	add.w	r3, r7, #32
 800102e:	f107 0218 	add.w	r2, r7, #24
 8001032:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001036:	e883 0003 	stmia.w	r3, {r0, r1}
 800103a:	e0f0      	b.n	800121e <DHT_getData+0x2de>
	while(!getLine()) {
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	889b      	ldrh	r3, [r3, #4]
 8001044:	4619      	mov	r1, r3
 8001046:	4610      	mov	r0, r2
 8001048:	f001 fd9a 	bl	8002b80 <HAL_GPIO_ReadPin>
 800104c:	4603      	mov	r3, r0
 800104e:	2b01      	cmp	r3, #1
 8001050:	d1e3      	bne.n	800101a <DHT_getData+0xda>
	}
	timeout = 0;
 8001052:	2300      	movs	r3, #0
 8001054:	86bb      	strh	r3, [r7, #52]	; 0x34
	//Ожидание спада
	while(getLine()) {
 8001056:	e010      	b.n	800107a <DHT_getData+0x13a>
		timeout++;
 8001058:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800105a:	3301      	adds	r3, #1
 800105c:	86bb      	strh	r3, [r7, #52]	; 0x34
		if (timeout > DHT_TIMEOUT) return data;
 800105e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001060:	f242 7210 	movw	r2, #10000	; 0x2710
 8001064:	4293      	cmp	r3, r2
 8001066:	d908      	bls.n	800107a <DHT_getData+0x13a>
 8001068:	f107 0320 	add.w	r3, r7, #32
 800106c:	f107 0218 	add.w	r2, r7, #24
 8001070:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001074:	e883 0003 	stmia.w	r3, {r0, r1}
 8001078:	e0d1      	b.n	800121e <DHT_getData+0x2de>
	while(getLine()) {
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	889b      	ldrh	r3, [r3, #4]
 8001082:	4619      	mov	r1, r3
 8001084:	4610      	mov	r0, r2
 8001086:	f001 fd7b 	bl	8002b80 <HAL_GPIO_ReadPin>
 800108a:	4603      	mov	r3, r0
 800108c:	2b01      	cmp	r3, #1
 800108e:	d0e3      	beq.n	8001058 <DHT_getData+0x118>
	}
	
	/* Чтение ответа от датчика */
	uint8_t rawData[5] = {0,0,0,0,0};
 8001090:	4a69      	ldr	r2, [pc, #420]	; (8001238 <DHT_getData+0x2f8>)
 8001092:	f107 0310 	add.w	r3, r7, #16
 8001096:	e892 0003 	ldmia.w	r2, {r0, r1}
 800109a:	6018      	str	r0, [r3, #0]
 800109c:	3304      	adds	r3, #4
 800109e:	7019      	strb	r1, [r3, #0]
	for(uint8_t a = 0; a < 5; a++) {
 80010a0:	2300      	movs	r3, #0
 80010a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80010a6:	e051      	b.n	800114c <DHT_getData+0x20c>
		for(uint8_t b = 7; b != 255; b--) {
 80010a8:	2307      	movs	r3, #7
 80010aa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80010ae:	e044      	b.n	800113a <DHT_getData+0x1fa>
			uint32_t hT = 0, lT = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010b4:	2300      	movs	r3, #0
 80010b6:	62bb      	str	r3, [r7, #40]	; 0x28
			//Пока линия в низком уровне, инкремент переменной lT
			while(!getLine()) lT++;
 80010b8:	e002      	b.n	80010c0 <DHT_getData+0x180>
 80010ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010bc:	3301      	adds	r3, #1
 80010be:	62bb      	str	r3, [r7, #40]	; 0x28
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	889b      	ldrh	r3, [r3, #4]
 80010c8:	4619      	mov	r1, r3
 80010ca:	4610      	mov	r0, r2
 80010cc:	f001 fd58 	bl	8002b80 <HAL_GPIO_ReadPin>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d1f1      	bne.n	80010ba <DHT_getData+0x17a>
			//Пока линия в высоком уровне, инкремент переменной hT
			timeout = 0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	86bb      	strh	r3, [r7, #52]	; 0x34
			while(getLine()) hT++;
 80010da:	e002      	b.n	80010e2 <DHT_getData+0x1a2>
 80010dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010de:	3301      	adds	r3, #1
 80010e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	889b      	ldrh	r3, [r3, #4]
 80010ea:	4619      	mov	r1, r3
 80010ec:	4610      	mov	r0, r2
 80010ee:	f001 fd47 	bl	8002b80 <HAL_GPIO_ReadPin>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d0f1      	beq.n	80010dc <DHT_getData+0x19c>
			//Если hT больше lT, то пришла единица
			if(hT > lT) rawData[a] |= (1<<b);
 80010f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d917      	bls.n	8001130 <DHT_getData+0x1f0>
 8001100:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001104:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001108:	4413      	add	r3, r2
 800110a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800110e:	b25a      	sxtb	r2, r3
 8001110:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001114:	2101      	movs	r1, #1
 8001116:	fa01 f303 	lsl.w	r3, r1, r3
 800111a:	b25b      	sxtb	r3, r3
 800111c:	4313      	orrs	r3, r2
 800111e:	b25a      	sxtb	r2, r3
 8001120:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001124:	b2d2      	uxtb	r2, r2
 8001126:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800112a:	440b      	add	r3, r1
 800112c:	f803 2c28 	strb.w	r2, [r3, #-40]
		for(uint8_t b = 7; b != 255; b--) {
 8001130:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001134:	3b01      	subs	r3, #1
 8001136:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800113a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800113e:	2bff      	cmp	r3, #255	; 0xff
 8001140:	d1b6      	bne.n	80010b0 <DHT_getData+0x170>
	for(uint8_t a = 0; a < 5; a++) {
 8001142:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001146:	3301      	adds	r3, #1
 8001148:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800114c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001150:	2b04      	cmp	r3, #4
 8001152:	d9a9      	bls.n	80010a8 <DHT_getData+0x168>
		}
	}
	/* Проверка целостности данных */
	if((uint8_t)(rawData[0] + rawData[1] + rawData[2] + rawData[3]) == rawData[4]) {
 8001154:	7c3a      	ldrb	r2, [r7, #16]
 8001156:	7c7b      	ldrb	r3, [r7, #17]
 8001158:	4413      	add	r3, r2
 800115a:	b2da      	uxtb	r2, r3
 800115c:	7cbb      	ldrb	r3, [r7, #18]
 800115e:	4413      	add	r3, r2
 8001160:	b2da      	uxtb	r2, r3
 8001162:	7cfb      	ldrb	r3, [r7, #19]
 8001164:	4413      	add	r3, r2
 8001166:	b2da      	uxtb	r2, r3
 8001168:	7d3b      	ldrb	r3, [r7, #20]
 800116a:	429a      	cmp	r2, r3
 800116c:	d149      	bne.n	8001202 <DHT_getData+0x2c2>
		//Если контрольная сумма совпадает, то конвертация и возврат полученных значений
		if (sensor->type == DHT22) {
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	799b      	ldrb	r3, [r3, #6]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d133      	bne.n	80011de <DHT_getData+0x29e>
			data.hum = (float)(((uint16_t)rawData[0]<<8) | rawData[1])*0.1f;
 8001176:	7c3b      	ldrb	r3, [r7, #16]
 8001178:	021b      	lsls	r3, r3, #8
 800117a:	7c7a      	ldrb	r2, [r7, #17]
 800117c:	4313      	orrs	r3, r2
 800117e:	ee07 3a90 	vmov	s15, r3
 8001182:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001186:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800123c <DHT_getData+0x2fc>
 800118a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800118e:	edc7 7a06 	vstr	s15, [r7, #24]
			//Проверка на отрицательность температуры
			if(!(rawData[2] & (1<<7))) {
 8001192:	7cbb      	ldrb	r3, [r7, #18]
 8001194:	b25b      	sxtb	r3, r3
 8001196:	2b00      	cmp	r3, #0
 8001198:	db0e      	blt.n	80011b8 <DHT_getData+0x278>
				data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*0.1f;
 800119a:	7cbb      	ldrb	r3, [r7, #18]
 800119c:	021b      	lsls	r3, r3, #8
 800119e:	7cfa      	ldrb	r2, [r7, #19]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	ee07 3a90 	vmov	s15, r3
 80011a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011aa:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800123c <DHT_getData+0x2fc>
 80011ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011b2:	edc7 7a07 	vstr	s15, [r7, #28]
 80011b6:	e012      	b.n	80011de <DHT_getData+0x29e>
			}	else {
				rawData[2] &= ~(1<<7);
 80011b8:	7cbb      	ldrb	r3, [r7, #18]
 80011ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	74bb      	strb	r3, [r7, #18]
				data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*-0.1f;
 80011c2:	7cbb      	ldrb	r3, [r7, #18]
 80011c4:	021b      	lsls	r3, r3, #8
 80011c6:	7cfa      	ldrb	r2, [r7, #19]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	ee07 3a90 	vmov	s15, r3
 80011ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011d2:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001240 <DHT_getData+0x300>
 80011d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011da:	edc7 7a07 	vstr	s15, [r7, #28]
			}
		}
		if (sensor->type == DHT11) {
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	799b      	ldrb	r3, [r3, #6]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d10d      	bne.n	8001202 <DHT_getData+0x2c2>
			data.hum = (float)rawData[0];
 80011e6:	7c3b      	ldrb	r3, [r7, #16]
 80011e8:	ee07 3a90 	vmov	s15, r3
 80011ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011f0:	edc7 7a06 	vstr	s15, [r7, #24]
			data.temp = (float)rawData[2];;
 80011f4:	7cbb      	ldrb	r3, [r7, #18]
 80011f6:	ee07 3a90 	vmov	s15, r3
 80011fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011fe:	edc7 7a07 	vstr	s15, [r7, #28]
		}
	}
	
	#if DHT_POLLING_CONTROL == 1
	sensor->lastHum = data.hum;
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	611a      	str	r2, [r3, #16]
	sensor->lastTemp = data.temp;
 8001208:	69fa      	ldr	r2, [r7, #28]
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	60da      	str	r2, [r3, #12]
	#endif

	return data;	
 800120e:	f107 0320 	add.w	r3, r7, #32
 8001212:	f107 0218 	add.w	r2, r7, #24
 8001216:	e892 0003 	ldmia.w	r2, {r0, r1}
 800121a:	e883 0003 	stmia.w	r3, {r0, r1}
 800121e:	6a3a      	ldr	r2, [r7, #32]
 8001220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001222:	ee07 2a10 	vmov	s14, r2
 8001226:	ee07 3a90 	vmov	s15, r3
}
 800122a:	eeb0 0a47 	vmov.f32	s0, s14
 800122e:	eef0 0a67 	vmov.f32	s1, s15
 8001232:	3738      	adds	r7, #56	; 0x38
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	08008c18 	.word	0x08008c18
 800123c:	3dcccccd 	.word	0x3dcccccd
 8001240:	bdcccccd 	.word	0xbdcccccd

08001244 <lcd16x2_i2c_sendCommand>:
#define LCD_I2C_SLAVE_ADDRESS_0  0x4E
#define LCD_I2C_SLAVE_ADDRESS_1  0x7E

/* Private functions */
static void lcd16x2_i2c_sendCommand(uint8_t command)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af02      	add	r7, sp, #8
 800124a:	4603      	mov	r3, r0
 800124c:	71fb      	strb	r3, [r7, #7]
  const uint8_t command_0_3 = (0xF0 & (command<<4));
 800124e:	79fb      	ldrb	r3, [r7, #7]
 8001250:	011b      	lsls	r3, r3, #4
 8001252:	73fb      	strb	r3, [r7, #15]
  const uint8_t command_4_7 = (0xF0 & command);
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	f023 030f 	bic.w	r3, r3, #15
 800125a:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 800125c:	7bbb      	ldrb	r3, [r7, #14]
 800125e:	f043 030c 	orr.w	r3, r3, #12
 8001262:	b2db      	uxtb	r3, r3
 8001264:	723b      	strb	r3, [r7, #8]
 8001266:	7bbb      	ldrb	r3, [r7, #14]
 8001268:	f043 0308 	orr.w	r3, r3, #8
 800126c:	b2db      	uxtb	r3, r3
 800126e:	727b      	strb	r3, [r7, #9]
 8001270:	7bfb      	ldrb	r3, [r7, #15]
 8001272:	f043 030c 	orr.w	r3, r3, #12
 8001276:	b2db      	uxtb	r3, r3
 8001278:	72bb      	strb	r3, [r7, #10]
 800127a:	7bfb      	ldrb	r3, [r7, #15]
 800127c:	f043 0308 	orr.w	r3, r3, #8
 8001280:	b2db      	uxtb	r3, r3
 8001282:	72fb      	strb	r3, [r7, #11]
      command_4_7 | LCD_EN | LCD_BK_LIGHT,
      command_4_7 | LCD_BK_LIGHT,
      command_0_3 | LCD_EN | LCD_BK_LIGHT,
      command_0_3 | LCD_BK_LIGHT,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 8001284:	4b07      	ldr	r3, [pc, #28]	; (80012a4 <lcd16x2_i2c_sendCommand+0x60>)
 8001286:	6818      	ldr	r0, [r3, #0]
 8001288:	4b07      	ldr	r3, [pc, #28]	; (80012a8 <lcd16x2_i2c_sendCommand+0x64>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	b299      	uxth	r1, r3
 800128e:	f107 0208 	add.w	r2, r7, #8
 8001292:	23c8      	movs	r3, #200	; 0xc8
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	2304      	movs	r3, #4
 8001298:	f001 fe26 	bl	8002ee8 <HAL_I2C_Master_Transmit>
}
 800129c:	bf00      	nop
 800129e:	3710      	adds	r7, #16
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20000214 	.word	0x20000214
 80012a8:	20000218 	.word	0x20000218

080012ac <lcd16x2_i2c_sendData>:

static void lcd16x2_i2c_sendData(uint8_t data)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af02      	add	r7, sp, #8
 80012b2:	4603      	mov	r3, r0
 80012b4:	71fb      	strb	r3, [r7, #7]
  const uint8_t data_0_3 = (0xF0 & (data<<4));
 80012b6:	79fb      	ldrb	r3, [r7, #7]
 80012b8:	011b      	lsls	r3, r3, #4
 80012ba:	73fb      	strb	r3, [r7, #15]
  const uint8_t data_4_7 = (0xF0 & data);
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	f023 030f 	bic.w	r3, r3, #15
 80012c2:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 80012c4:	7bbb      	ldrb	r3, [r7, #14]
 80012c6:	f043 030d 	orr.w	r3, r3, #13
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	723b      	strb	r3, [r7, #8]
 80012ce:	7bbb      	ldrb	r3, [r7, #14]
 80012d0:	f043 0309 	orr.w	r3, r3, #9
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	727b      	strb	r3, [r7, #9]
 80012d8:	7bfb      	ldrb	r3, [r7, #15]
 80012da:	f043 030d 	orr.w	r3, r3, #13
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	72bb      	strb	r3, [r7, #10]
 80012e2:	7bfb      	ldrb	r3, [r7, #15]
 80012e4:	f043 0309 	orr.w	r3, r3, #9
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	72fb      	strb	r3, [r7, #11]
      data_4_7 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_4_7 | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_BK_LIGHT | LCD_RS,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 80012ec:	4b07      	ldr	r3, [pc, #28]	; (800130c <lcd16x2_i2c_sendData+0x60>)
 80012ee:	6818      	ldr	r0, [r3, #0]
 80012f0:	4b07      	ldr	r3, [pc, #28]	; (8001310 <lcd16x2_i2c_sendData+0x64>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	b299      	uxth	r1, r3
 80012f6:	f107 0208 	add.w	r2, r7, #8
 80012fa:	23c8      	movs	r3, #200	; 0xc8
 80012fc:	9300      	str	r3, [sp, #0]
 80012fe:	2304      	movs	r3, #4
 8001300:	f001 fdf2 	bl	8002ee8 <HAL_I2C_Master_Transmit>
}
 8001304:	bf00      	nop
 8001306:	3710      	adds	r7, #16
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20000214 	.word	0x20000214
 8001310:	20000218 	.word	0x20000218

08001314 <lcd16x2_i2c_init>:
/**
 * @brief Initialise LCD16x2
 * @param[in] *pI2cHandle - pointer to HAL I2C handle
 */
bool lcd16x2_i2c_init(I2C_HandleTypeDef *pI2cHandle)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  HAL_Delay(50);
 800131c:	2032      	movs	r0, #50	; 0x32
 800131e:	f001 f913 	bl	8002548 <HAL_Delay>
  lcd16x2_i2cHandle = pI2cHandle;
 8001322:	4a30      	ldr	r2, [pc, #192]	; (80013e4 <lcd16x2_i2c_init+0xd0>)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6013      	str	r3, [r2, #0]
  if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_0, 5, 500) != HAL_OK)
 8001328:	4b2e      	ldr	r3, [pc, #184]	; (80013e4 <lcd16x2_i2c_init+0xd0>)
 800132a:	6818      	ldr	r0, [r3, #0]
 800132c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001330:	2205      	movs	r2, #5
 8001332:	214e      	movs	r1, #78	; 0x4e
 8001334:	f001 fed6 	bl	80030e4 <HAL_I2C_IsDeviceReady>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d010      	beq.n	8001360 <lcd16x2_i2c_init+0x4c>
  {
    if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_1, 5, 500) != HAL_OK)
 800133e:	4b29      	ldr	r3, [pc, #164]	; (80013e4 <lcd16x2_i2c_init+0xd0>)
 8001340:	6818      	ldr	r0, [r3, #0]
 8001342:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001346:	2205      	movs	r2, #5
 8001348:	217e      	movs	r1, #126	; 0x7e
 800134a:	f001 fecb 	bl	80030e4 <HAL_I2C_IsDeviceReady>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <lcd16x2_i2c_init+0x44>
    {
      return false;
 8001354:	2300      	movs	r3, #0
 8001356:	e040      	b.n	80013da <lcd16x2_i2c_init+0xc6>
    }
    else
    {
      LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_1;
 8001358:	4b23      	ldr	r3, [pc, #140]	; (80013e8 <lcd16x2_i2c_init+0xd4>)
 800135a:	227e      	movs	r2, #126	; 0x7e
 800135c:	701a      	strb	r2, [r3, #0]
 800135e:	e002      	b.n	8001366 <lcd16x2_i2c_init+0x52>
    }
  }
  else
  {
    LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_0;
 8001360:	4b21      	ldr	r3, [pc, #132]	; (80013e8 <lcd16x2_i2c_init+0xd4>)
 8001362:	224e      	movs	r2, #78	; 0x4e
 8001364:	701a      	strb	r2, [r3, #0]
  }
  //Initialise LCD for 4-bit operation
  //1. Wait at least 15ms
  HAL_Delay(45);
 8001366:	202d      	movs	r0, #45	; 0x2d
 8001368:	f001 f8ee 	bl	8002548 <HAL_Delay>
  //2. Attentions sequence
  lcd16x2_i2c_sendCommand(0x30);
 800136c:	2030      	movs	r0, #48	; 0x30
 800136e:	f7ff ff69 	bl	8001244 <lcd16x2_i2c_sendCommand>
  HAL_Delay(5);
 8001372:	2005      	movs	r0, #5
 8001374:	f001 f8e8 	bl	8002548 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 8001378:	2030      	movs	r0, #48	; 0x30
 800137a:	f7ff ff63 	bl	8001244 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 800137e:	2001      	movs	r0, #1
 8001380:	f001 f8e2 	bl	8002548 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 8001384:	2030      	movs	r0, #48	; 0x30
 8001386:	f7ff ff5d 	bl	8001244 <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 800138a:	2008      	movs	r0, #8
 800138c:	f001 f8dc 	bl	8002548 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x20);
 8001390:	2020      	movs	r0, #32
 8001392:	f7ff ff57 	bl	8001244 <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 8001396:	2008      	movs	r0, #8
 8001398:	f001 f8d6 	bl	8002548 <HAL_Delay>

  lcd16x2_i2c_sendCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 800139c:	2028      	movs	r0, #40	; 0x28
 800139e:	f7ff ff51 	bl	8001244 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 80013a2:	2001      	movs	r0, #1
 80013a4:	f001 f8d0 	bl	8002548 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL);
 80013a8:	2008      	movs	r0, #8
 80013aa:	f7ff ff4b 	bl	8001244 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 80013ae:	2001      	movs	r0, #1
 80013b0:	f001 f8ca 	bl	8002548 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_CLEARDISPLAY);
 80013b4:	2001      	movs	r0, #1
 80013b6:	f7ff ff45 	bl	8001244 <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 80013ba:	2003      	movs	r0, #3
 80013bc:	f001 f8c4 	bl	8002548 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x04 | LCD_ENTRY_ID);
 80013c0:	2006      	movs	r0, #6
 80013c2:	f7ff ff3f 	bl	8001244 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 80013c6:	2001      	movs	r0, #1
 80013c8:	f001 f8be 	bl	8002548 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_D);
 80013cc:	200c      	movs	r0, #12
 80013ce:	f7ff ff39 	bl	8001244 <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 80013d2:	2003      	movs	r0, #3
 80013d4:	f001 f8b8 	bl	8002548 <HAL_Delay>

  return true;
 80013d8:	2301      	movs	r3, #1
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000214 	.word	0x20000214
 80013e8:	20000218 	.word	0x20000218

080013ec <lcd16x2_i2c_setCursor>:
 * @brief Set cursor position
 * @param[in] row - 0 or 1 for line1 or line2
 * @param[in] col - 0 - 15 (16 columns LCD)
 */
void lcd16x2_i2c_setCursor(uint8_t row, uint8_t col)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	460a      	mov	r2, r1
 80013f6:	71fb      	strb	r3, [r7, #7]
 80013f8:	4613      	mov	r3, r2
 80013fa:	71bb      	strb	r3, [r7, #6]
  uint8_t maskData;
  maskData = (col)&0x0F;
 80013fc:	79bb      	ldrb	r3, [r7, #6]
 80013fe:	f003 030f 	and.w	r3, r3, #15
 8001402:	73fb      	strb	r3, [r7, #15]
  if(row==0)
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d108      	bne.n	800141c <lcd16x2_i2c_setCursor+0x30>
  {
    maskData |= (0x80);
 800140a:	7bfb      	ldrb	r3, [r7, #15]
 800140c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001410:	73fb      	strb	r3, [r7, #15]
    lcd16x2_i2c_sendCommand(maskData);
 8001412:	7bfb      	ldrb	r3, [r7, #15]
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff ff15 	bl	8001244 <lcd16x2_i2c_sendCommand>
  else
  {
    maskData |= (0xc0);
    lcd16x2_i2c_sendCommand(maskData);
  }
}
 800141a:	e007      	b.n	800142c <lcd16x2_i2c_setCursor+0x40>
    maskData |= (0xc0);
 800141c:	7bfb      	ldrb	r3, [r7, #15]
 800141e:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001422:	73fb      	strb	r3, [r7, #15]
    lcd16x2_i2c_sendCommand(maskData);
 8001424:	7bfb      	ldrb	r3, [r7, #15]
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff ff0c 	bl	8001244 <lcd16x2_i2c_sendCommand>
}
 800142c:	bf00      	nop
 800142e:	3710      	adds	r7, #16
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <lcd16x2_i2c_clear>:

/**
 * @brief Display clear
 */
void lcd16x2_i2c_clear(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  lcd16x2_i2c_sendCommand(LCD_CLEARDISPLAY);
 8001438:	2001      	movs	r0, #1
 800143a:	f7ff ff03 	bl	8001244 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 800143e:	2001      	movs	r0, #1
 8001440:	f001 f882 	bl	8002548 <HAL_Delay>
}
 8001444:	bf00      	nop
 8001446:	bd80      	pop	{r7, pc}

08001448 <lcd16x2_i2c_printf>:

/**
 * @brief Print to display
 */
void lcd16x2_i2c_printf(const char* str, ...)
{
 8001448:	b40f      	push	{r0, r1, r2, r3}
 800144a:	b590      	push	{r4, r7, lr}
 800144c:	b089      	sub	sp, #36	; 0x24
 800144e:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;
  va_start(args, str);
 8001450:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001454:	607b      	str	r3, [r7, #4]
  vsprintf(stringArray, str, args);
 8001456:	f107 0308 	add.w	r3, r7, #8
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800145e:	4618      	mov	r0, r3
 8001460:	f005 f9b8 	bl	80067d4 <vsiprintf>
  va_end(args);
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8001464:	2300      	movs	r3, #0
 8001466:	77fb      	strb	r3, [r7, #31]
 8001468:	e00b      	b.n	8001482 <lcd16x2_i2c_printf+0x3a>
  {
    lcd16x2_i2c_sendData((uint8_t)stringArray[i]);
 800146a:	7ffb      	ldrb	r3, [r7, #31]
 800146c:	f107 0220 	add.w	r2, r7, #32
 8001470:	4413      	add	r3, r2
 8001472:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff ff18 	bl	80012ac <lcd16x2_i2c_sendData>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 800147c:	7ffb      	ldrb	r3, [r7, #31]
 800147e:	3301      	adds	r3, #1
 8001480:	77fb      	strb	r3, [r7, #31]
 8001482:	7ffc      	ldrb	r4, [r7, #31]
 8001484:	f107 0308 	add.w	r3, r7, #8
 8001488:	4618      	mov	r0, r3
 800148a:	f7fe fea9 	bl	80001e0 <strlen>
 800148e:	4603      	mov	r3, r0
 8001490:	429c      	cmp	r4, r3
 8001492:	d202      	bcs.n	800149a <lcd16x2_i2c_printf+0x52>
 8001494:	7ffb      	ldrb	r3, [r7, #31]
 8001496:	2b0f      	cmp	r3, #15
 8001498:	d9e7      	bls.n	800146a <lcd16x2_i2c_printf+0x22>
  }
}
 800149a:	bf00      	nop
 800149c:	3724      	adds	r7, #36	; 0x24
 800149e:	46bd      	mov	sp, r7
 80014a0:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80014a4:	b004      	add	sp, #16
 80014a6:	4770      	bx	lr

080014a8 <Seg_Off>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim);
void Seg_Off(void){
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOA, A_Pin|B_Pin|C_Pin|D_Pin|E_Pin|F_Pin|G_Pin, 0); //세그먼트 구성 핀 모두 끄기
 80014ac:	2200      	movs	r2, #0
 80014ae:	f44f 61fe 	mov.w	r1, #2032	; 0x7f0
 80014b2:	4805      	ldr	r0, [pc, #20]	; (80014c8 <Seg_Off+0x20>)
 80014b4:	f001 fb7c 	bl	8002bb0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, Dig1_Pin|Dig2_Pin|Dig3_Pin|Dig4_Pin, 1); //세그먼트 Dgit핀 모두 끄기
 80014b8:	2201      	movs	r2, #1
 80014ba:	210f      	movs	r1, #15
 80014bc:	4803      	ldr	r0, [pc, #12]	; (80014cc <Seg_Off+0x24>)
 80014be:	f001 fb77 	bl	8002bb0 <HAL_GPIO_WritePin>

}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40020000 	.word	0x40020000
 80014cc:	40020400 	.word	0x40020400

080014d0 <Segment>:

int segdig = 0;//세그먼트 출력 자릿수 저장을 위한 전역변수
void Segment() {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b08a      	sub	sp, #40	; 0x28
 80014d4:	af00      	add	r7, sp, #0
	unsigned char List_Of_Segment_Info[10] = { 0xC0, 0xF9, 0xA4, 0xB0, 0x99,
 80014d6:	4a43      	ldr	r2, [pc, #268]	; (80015e4 <Segment+0x114>)
 80014d8:	f107 031c 	add.w	r3, r7, #28
 80014dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80014de:	c303      	stmia	r3!, {r0, r1}
 80014e0:	801a      	strh	r2, [r3, #0]
	 		  0x92, 0x82, 0xD8, 0x80, 0x98 };
	int addr[4];
	Seg_Off(); // 모든 세그먼트 끄기
 80014e2:	f7ff ffe1 	bl	80014a8 <Seg_Off>

	addr[0] = Seg_Out / 1000;
 80014e6:	4b40      	ldr	r3, [pc, #256]	; (80015e8 <Segment+0x118>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a40      	ldr	r2, [pc, #256]	; (80015ec <Segment+0x11c>)
 80014ec:	fb82 1203 	smull	r1, r2, r2, r3
 80014f0:	1192      	asrs	r2, r2, #6
 80014f2:	17db      	asrs	r3, r3, #31
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	60fb      	str	r3, [r7, #12]
	addr[1] = Seg_Out % 1000 / 100;
 80014f8:	4b3b      	ldr	r3, [pc, #236]	; (80015e8 <Segment+0x118>)
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	4b3b      	ldr	r3, [pc, #236]	; (80015ec <Segment+0x11c>)
 80014fe:	fb83 1302 	smull	r1, r3, r3, r2
 8001502:	1199      	asrs	r1, r3, #6
 8001504:	17d3      	asrs	r3, r2, #31
 8001506:	1acb      	subs	r3, r1, r3
 8001508:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800150c:	fb01 f303 	mul.w	r3, r1, r3
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	4a37      	ldr	r2, [pc, #220]	; (80015f0 <Segment+0x120>)
 8001514:	fb82 1203 	smull	r1, r2, r2, r3
 8001518:	1152      	asrs	r2, r2, #5
 800151a:	17db      	asrs	r3, r3, #31
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	613b      	str	r3, [r7, #16]
	addr[2] = Seg_Out % 100 / 10;
 8001520:	4b31      	ldr	r3, [pc, #196]	; (80015e8 <Segment+0x118>)
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	4b32      	ldr	r3, [pc, #200]	; (80015f0 <Segment+0x120>)
 8001526:	fb83 1302 	smull	r1, r3, r3, r2
 800152a:	1159      	asrs	r1, r3, #5
 800152c:	17d3      	asrs	r3, r2, #31
 800152e:	1acb      	subs	r3, r1, r3
 8001530:	2164      	movs	r1, #100	; 0x64
 8001532:	fb01 f303 	mul.w	r3, r1, r3
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	4a2e      	ldr	r2, [pc, #184]	; (80015f4 <Segment+0x124>)
 800153a:	fb82 1203 	smull	r1, r2, r2, r3
 800153e:	1092      	asrs	r2, r2, #2
 8001540:	17db      	asrs	r3, r3, #31
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	617b      	str	r3, [r7, #20]
	addr[3] = Seg_Out % 10;
 8001546:	4b28      	ldr	r3, [pc, #160]	; (80015e8 <Segment+0x118>)
 8001548:	6819      	ldr	r1, [r3, #0]
 800154a:	4b2a      	ldr	r3, [pc, #168]	; (80015f4 <Segment+0x124>)
 800154c:	fb83 2301 	smull	r2, r3, r3, r1
 8001550:	109a      	asrs	r2, r3, #2
 8001552:	17cb      	asrs	r3, r1, #31
 8001554:	1ad2      	subs	r2, r2, r3
 8001556:	4613      	mov	r3, r2
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	4413      	add	r3, r2
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	1aca      	subs	r2, r1, r3
 8001560:	61ba      	str	r2, [r7, #24]

	uint16_t i[4] = {1,2,4,8}; //세그먼트 Dgit 조정
 8001562:	4a25      	ldr	r2, [pc, #148]	; (80015f8 <Segment+0x128>)
 8001564:	1d3b      	adds	r3, r7, #4
 8001566:	e892 0003 	ldmia.w	r2, {r0, r1}
 800156a:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_GPIO_WritePin(GPIOB, i[segdig], 0);
 800156e:	4b23      	ldr	r3, [pc, #140]	; (80015fc <Segment+0x12c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001578:	4413      	add	r3, r2
 800157a:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800157e:	2200      	movs	r2, #0
 8001580:	4619      	mov	r1, r3
 8001582:	481f      	ldr	r0, [pc, #124]	; (8001600 <Segment+0x130>)
 8001584:	f001 fb14 	bl	8002bb0 <HAL_GPIO_WritePin>

	uint16_t j = 0;//출력 핀과 입력 값의 비트연산을 위한 변수
 8001588:	2300      	movs	r3, #0
 800158a:	84fb      	strh	r3, [r7, #38]	; 0x26

	j |= (~(List_Of_Segment_Info[addr[segdig]]&0xFF))<<4; //PA4 부터로 옮기고시프 4로 변경
 800158c:	4b1b      	ldr	r3, [pc, #108]	; (80015fc <Segment+0x12c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001596:	4413      	add	r3, r2
 8001598:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800159c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80015a0:	4413      	add	r3, r2
 80015a2:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80015a6:	43db      	mvns	r3, r3
 80015a8:	011b      	lsls	r3, r3, #4
 80015aa:	b21a      	sxth	r2, r3
 80015ac:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80015b0:	4313      	orrs	r3, r2
 80015b2:	b21b      	sxth	r3, r3
 80015b4:	84fb      	strh	r3, [r7, #38]	; 0x26
	HAL_GPIO_WritePin(GPIOA, j, 1);
 80015b6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015b8:	2201      	movs	r2, #1
 80015ba:	4619      	mov	r1, r3
 80015bc:	4811      	ldr	r0, [pc, #68]	; (8001604 <Segment+0x134>)
 80015be:	f001 faf7 	bl	8002bb0 <HAL_GPIO_WritePin>

	segdig++;
 80015c2:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <Segment+0x12c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	3301      	adds	r3, #1
 80015c8:	4a0c      	ldr	r2, [pc, #48]	; (80015fc <Segment+0x12c>)
 80015ca:	6013      	str	r3, [r2, #0]
	if (segdig == 4){
 80015cc:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <Segment+0x12c>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2b04      	cmp	r3, #4
 80015d2:	d102      	bne.n	80015da <Segment+0x10a>
		segdig = 0;
 80015d4:	4b09      	ldr	r3, [pc, #36]	; (80015fc <Segment+0x12c>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
	}

}
 80015da:	bf00      	nop
 80015dc:	3728      	adds	r7, #40	; 0x28
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	08008c20 	.word	0x08008c20
 80015e8:	20000004 	.word	0x20000004
 80015ec:	10624dd3 	.word	0x10624dd3
 80015f0:	51eb851f 	.word	0x51eb851f
 80015f4:	66666667 	.word	0x66666667
 80015f8:	08008c2c 	.word	0x08008c2c
 80015fc:	20000230 	.word	0x20000230
 8001600:	40020400 	.word	0x40020400
 8001604:	40020000 	.word	0x40020000

08001608 <check_CO2>:


void check_CO2(){
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
	int CO2_Cycle = 0;
 800160e:	2300      	movs	r3, #0
 8001610:	60fb      	str	r3, [r7, #12]
	int gap = 0;
 8001612:	2300      	movs	r3, #0
 8001614:	60bb      	str	r3, [r7, #8]
	float Fgap = 0;
 8001616:	f04f 0300 	mov.w	r3, #0
 800161a:	607b      	str	r3, [r7, #4]

	TH =  CO2_Falling_Time - CO2_Rising_Time;
 800161c:	4b39      	ldr	r3, [pc, #228]	; (8001704 <check_CO2+0xfc>)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	4b39      	ldr	r3, [pc, #228]	; (8001708 <check_CO2+0x100>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	4a39      	ldr	r2, [pc, #228]	; (800170c <check_CO2+0x104>)
 8001628:	6013      	str	r3, [r2, #0]
	TL = CO2_ReRising_Time - CO2_Falling_Time;
 800162a:	4b39      	ldr	r3, [pc, #228]	; (8001710 <check_CO2+0x108>)
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	4b35      	ldr	r3, [pc, #212]	; (8001704 <check_CO2+0xfc>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	4a37      	ldr	r2, [pc, #220]	; (8001714 <check_CO2+0x10c>)
 8001636:	6013      	str	r3, [r2, #0]


	CO2_Cycle = TH+TL;
 8001638:	4b34      	ldr	r3, [pc, #208]	; (800170c <check_CO2+0x104>)
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	4b35      	ldr	r3, [pc, #212]	; (8001714 <check_CO2+0x10c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4413      	add	r3, r2
 8001642:	60fb      	str	r3, [r7, #12]
	gap = CO2_Cycle - 1004;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 800164a:	60bb      	str	r3, [r7, #8]
	Fgap = ((float)gap / 1004);
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	ee07 3a90 	vmov	s15, r3
 8001652:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001656:	eddf 6a30 	vldr	s13, [pc, #192]	; 8001718 <check_CO2+0x110>
 800165a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800165e:	edc7 7a01 	vstr	s15, [r7, #4]

	TL = TL + (TL*Fgap);
 8001662:	4b2c      	ldr	r3, [pc, #176]	; (8001714 <check_CO2+0x10c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	ee07 3a90 	vmov	s15, r3
 800166a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800166e:	4b29      	ldr	r3, [pc, #164]	; (8001714 <check_CO2+0x10c>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	ee07 3a90 	vmov	s15, r3
 8001676:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800167a:	edd7 7a01 	vldr	s15, [r7, #4]
 800167e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001682:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001686:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800168a:	ee17 2a90 	vmov	r2, s15
 800168e:	4b21      	ldr	r3, [pc, #132]	; (8001714 <check_CO2+0x10c>)
 8001690:	601a      	str	r2, [r3, #0]
	TH = TH + (TH*Fgap);
 8001692:	4b1e      	ldr	r3, [pc, #120]	; (800170c <check_CO2+0x104>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	ee07 3a90 	vmov	s15, r3
 800169a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800169e:	4b1b      	ldr	r3, [pc, #108]	; (800170c <check_CO2+0x104>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	ee07 3a90 	vmov	s15, r3
 80016a6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80016aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80016ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016ba:	ee17 2a90 	vmov	r2, s15
 80016be:	4b13      	ldr	r3, [pc, #76]	; (800170c <check_CO2+0x104>)
 80016c0:	601a      	str	r2, [r3, #0]



	C = 2000*(TH-2)/(TH+TL-4);
 80016c2:	4b12      	ldr	r3, [pc, #72]	; (800170c <check_CO2+0x104>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	3b02      	subs	r3, #2
 80016c8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80016cc:	fb02 f203 	mul.w	r2, r2, r3
 80016d0:	4b0e      	ldr	r3, [pc, #56]	; (800170c <check_CO2+0x104>)
 80016d2:	6819      	ldr	r1, [r3, #0]
 80016d4:	4b0f      	ldr	r3, [pc, #60]	; (8001714 <check_CO2+0x10c>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	440b      	add	r3, r1
 80016da:	3b04      	subs	r3, #4
 80016dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80016e0:	4a0e      	ldr	r2, [pc, #56]	; (800171c <check_CO2+0x114>)
 80016e2:	6013      	str	r3, [r2, #0]

	CO2_Rising_Time = 0;
 80016e4:	4b08      	ldr	r3, [pc, #32]	; (8001708 <check_CO2+0x100>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
	CO2_Falling_Time  = 0;
 80016ea:	4b06      	ldr	r3, [pc, #24]	; (8001704 <check_CO2+0xfc>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
	CO2_ReRising_Time = 0;
 80016f0:	4b07      	ldr	r3, [pc, #28]	; (8001710 <check_CO2+0x108>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]



}
 80016f6:	bf00      	nop
 80016f8:	3714      	adds	r7, #20
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	200002dc 	.word	0x200002dc
 8001708:	20000344 	.word	0x20000344
 800170c:	20000360 	.word	0x20000360
 8001710:	200003f0 	.word	0x200003f0
 8001714:	20000348 	.word	0x20000348
 8001718:	447b0000 	.word	0x447b0000
 800171c:	200002f8 	.word	0x200002f8

08001720 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001722:	b091      	sub	sp, #68	; 0x44
 8001724:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001726:	f000 fecd 	bl	80024c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800172a:	f000 f8d1 	bl	80018d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800172e:	f000 fa39 	bl	8001ba4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001732:	f000 f94b 	bl	80019cc <MX_I2C1_Init>
  MX_TIM10_Init();
 8001736:	f000 f9c3 	bl	8001ac0 <MX_TIM10_Init>
  MX_TIM11_Init();
 800173a:	f000 f9e5 	bl	8001b08 <MX_TIM11_Init>
  MX_USART2_UART_Init();
 800173e:	f000 fa07 	bl	8001b50 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001742:	f000 f971 	bl	8001a28 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001746:	f000 f92d 	bl	80019a4 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800174a:	484c      	ldr	r0, [pc, #304]	; (800187c <main+0x15c>)
 800174c:	f003 f812 	bl	8004774 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim10);
 8001750:	484b      	ldr	r0, [pc, #300]	; (8001880 <main+0x160>)
 8001752:	f003 f80f 	bl	8004774 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);
 8001756:	484b      	ldr	r0, [pc, #300]	; (8001884 <main+0x164>)
 8001758:	f003 f80c 	bl	8004774 <HAL_TIM_Base_Start_IT>
  if(lcd16x2_i2c_init(&hi2c1)){
 800175c:	484a      	ldr	r0, [pc, #296]	; (8001888 <main+0x168>)
 800175e:	f7ff fdd9 	bl	8001314 <lcd16x2_i2c_init>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d005      	beq.n	8001774 <main+0x54>
 	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 1);
 8001768:	2201      	movs	r2, #1
 800176a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800176e:	4847      	ldr	r0, [pc, #284]	; (800188c <main+0x16c>)
 8001770:	f001 fa1e 	bl	8002bb0 <HAL_GPIO_WritePin>
  }
  lcd16x2_i2c_clear();
 8001774:	f7ff fe5e 	bl	8001434 <lcd16x2_i2c_clear>
  lcd16x2_i2c_clear();
 8001778:	f7ff fe5c 	bl	8001434 <lcd16x2_i2c_clear>
  lcd16x2_i2c_clear();
 800177c:	f7ff fe5a 	bl	8001434 <lcd16x2_i2c_clear>
  rising_check = 1;
 8001780:	4b43      	ldr	r3, [pc, #268]	; (8001890 <main+0x170>)
 8001782:	2201      	movs	r2, #1
 8001784:	701a      	strb	r2, [r3, #0]
//	  printf("While Start %d\n\r", checkms);




	  if (CO2_Rising_Time < CO2_Falling_Time && CO2_Falling_Time < CO2_ReRising_Time){
 8001786:	4b43      	ldr	r3, [pc, #268]	; (8001894 <main+0x174>)
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	4b43      	ldr	r3, [pc, #268]	; (8001898 <main+0x178>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	429a      	cmp	r2, r3
 8001790:	da07      	bge.n	80017a2 <main+0x82>
 8001792:	4b41      	ldr	r3, [pc, #260]	; (8001898 <main+0x178>)
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	4b41      	ldr	r3, [pc, #260]	; (800189c <main+0x17c>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	429a      	cmp	r2, r3
 800179c:	da01      	bge.n	80017a2 <main+0x82>
		  check_CO2();
 800179e:	f7ff ff33 	bl	8001608 <check_CO2>
	  }

	  if (ms > 1){
 80017a2:	4b3f      	ldr	r3, [pc, #252]	; (80018a0 <main+0x180>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d904      	bls.n	80017b4 <main+0x94>
	  		  Segment();//3ms마다 세븐세그먼트를 출력
 80017aa:	f7ff fe91 	bl	80014d0 <Segment>
	  		  ms = 0;
 80017ae:	4b3c      	ldr	r3, [pc, #240]	; (80018a0 <main+0x180>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	701a      	strb	r2, [r3, #0]
	  	  }



	  DHT_data d = DHT_getData(&bedRoom);
 80017b4:	483b      	ldr	r0, [pc, #236]	; (80018a4 <main+0x184>)
 80017b6:	f7ff fbc3 	bl	8000f40 <DHT_getData>
 80017ba:	eeb0 7a40 	vmov.f32	s14, s0
 80017be:	eef0 7a60 	vmov.f32	s15, s1
 80017c2:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 80017c6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
//	  char msg[40];
//	  sprintf(msg, "\fTemp %2.1f°C, Hum %2.1f%%\n\r", d.temp, d.hum);
//	  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 0xFF);


	  if (lcd > 2){
 80017ca:	4b37      	ldr	r3, [pc, #220]	; (80018a8 <main+0x188>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d929      	bls.n	8001826 <main+0x106>
		  sprintf(Line1, "T: %2.1f  D: %d", d.temp, 123);
 80017d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7fe febf 	bl	8000558 <__aeabi_f2d>
 80017da:	4602      	mov	r2, r0
 80017dc:	460b      	mov	r3, r1
 80017de:	217b      	movs	r1, #123	; 0x7b
 80017e0:	9100      	str	r1, [sp, #0]
 80017e2:	4932      	ldr	r1, [pc, #200]	; (80018ac <main+0x18c>)
 80017e4:	4832      	ldr	r0, [pc, #200]	; (80018b0 <main+0x190>)
 80017e6:	f004 ffbf 	bl	8006768 <siprintf>
		  sprintf(Line2, "H: %2.1f  C: %d", d.hum, C);
 80017ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7fe feb3 	bl	8000558 <__aeabi_f2d>
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	492f      	ldr	r1, [pc, #188]	; (80018b4 <main+0x194>)
 80017f8:	6809      	ldr	r1, [r1, #0]
 80017fa:	9100      	str	r1, [sp, #0]
 80017fc:	492e      	ldr	r1, [pc, #184]	; (80018b8 <main+0x198>)
 80017fe:	482f      	ldr	r0, [pc, #188]	; (80018bc <main+0x19c>)
 8001800:	f004 ffb2 	bl	8006768 <siprintf>
//		  lcd16x2_i2c_clear();
		  lcd16x2_i2c_setCursor(0,0);
 8001804:	2100      	movs	r1, #0
 8001806:	2000      	movs	r0, #0
 8001808:	f7ff fdf0 	bl	80013ec <lcd16x2_i2c_setCursor>
		  lcd16x2_i2c_printf(Line1);
 800180c:	4828      	ldr	r0, [pc, #160]	; (80018b0 <main+0x190>)
 800180e:	f7ff fe1b 	bl	8001448 <lcd16x2_i2c_printf>
		  lcd16x2_i2c_setCursor(1,0);
 8001812:	2100      	movs	r1, #0
 8001814:	2001      	movs	r0, #1
 8001816:	f7ff fde9 	bl	80013ec <lcd16x2_i2c_setCursor>
		  lcd16x2_i2c_printf(Line2);
 800181a:	4828      	ldr	r0, [pc, #160]	; (80018bc <main+0x19c>)
 800181c:	f7ff fe14 	bl	8001448 <lcd16x2_i2c_printf>
		  lcd = 0;
 8001820:	4b21      	ldr	r3, [pc, #132]	; (80018a8 <main+0x188>)
 8001822:	2200      	movs	r2, #0
 8001824:	701a      	strb	r2, [r3, #0]
	  }


	  if(Uart_Loop_Time >= 10){
 8001826:	4b26      	ldr	r3, [pc, #152]	; (80018c0 <main+0x1a0>)
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	2b09      	cmp	r3, #9
 800182c:	d9ab      	bls.n	8001786 <main+0x66>
		  	  char msg[40];
		  	  sprintf(msg, "W:%d,T:%2.1f,H:%2.1f\n\r", Seg_Out,d.temp, d.hum);
 800182e:	4b25      	ldr	r3, [pc, #148]	; (80018c4 <main+0x1a4>)
 8001830:	681e      	ldr	r6, [r3, #0]
 8001832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001834:	4618      	mov	r0, r3
 8001836:	f7fe fe8f 	bl	8000558 <__aeabi_f2d>
 800183a:	4604      	mov	r4, r0
 800183c:	460d      	mov	r5, r1
 800183e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001840:	4618      	mov	r0, r3
 8001842:	f7fe fe89 	bl	8000558 <__aeabi_f2d>
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
 800184a:	4638      	mov	r0, r7
 800184c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001850:	e9cd 4500 	strd	r4, r5, [sp]
 8001854:	4632      	mov	r2, r6
 8001856:	491c      	ldr	r1, [pc, #112]	; (80018c8 <main+0x1a8>)
 8001858:	f004 ff86 	bl	8006768 <siprintf>
		  	  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 0xFF);
 800185c:	463b      	mov	r3, r7
 800185e:	4618      	mov	r0, r3
 8001860:	f7fe fcbe 	bl	80001e0 <strlen>
 8001864:	4603      	mov	r3, r0
 8001866:	b29a      	uxth	r2, r3
 8001868:	4639      	mov	r1, r7
 800186a:	23ff      	movs	r3, #255	; 0xff
 800186c:	4817      	ldr	r0, [pc, #92]	; (80018cc <main+0x1ac>)
 800186e:	f003 fbc4 	bl	8004ffa <HAL_UART_Transmit>
		  	  Uart_Loop_Time = 0;
 8001872:	4b13      	ldr	r3, [pc, #76]	; (80018c0 <main+0x1a0>)
 8001874:	2200      	movs	r2, #0
 8001876:	701a      	strb	r2, [r3, #0]
  {
 8001878:	e785      	b.n	8001786 <main+0x66>
 800187a:	bf00      	nop
 800187c:	20000364 	.word	0x20000364
 8001880:	20000294 	.word	0x20000294
 8001884:	200002fc 	.word	0x200002fc
 8001888:	20000240 	.word	0x20000240
 800188c:	40020800 	.word	0x40020800
 8001890:	20000219 	.word	0x20000219
 8001894:	20000344 	.word	0x20000344
 8001898:	200002dc 	.word	0x200002dc
 800189c:	200003f0 	.word	0x200003f0
 80018a0:	20000220 	.word	0x20000220
 80018a4:	20000008 	.word	0x20000008
 80018a8:	20000000 	.word	0x20000000
 80018ac:	08008c34 	.word	0x08008c34
 80018b0:	2000034c 	.word	0x2000034c
 80018b4:	200002f8 	.word	0x200002f8
 80018b8:	08008c44 	.word	0x08008c44
 80018bc:	200002e4 	.word	0x200002e4
 80018c0:	2000021d 	.word	0x2000021d
 80018c4:	20000004 	.word	0x20000004
 80018c8:	08008c54 	.word	0x08008c54
 80018cc:	200003ac 	.word	0x200003ac

080018d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b094      	sub	sp, #80	; 0x50
 80018d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018d6:	f107 0320 	add.w	r3, r7, #32
 80018da:	2230      	movs	r2, #48	; 0x30
 80018dc:	2100      	movs	r1, #0
 80018de:	4618      	mov	r0, r3
 80018e0:	f004 fad0 	bl	8005e84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018e4:	f107 030c 	add.w	r3, r7, #12
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	60da      	str	r2, [r3, #12]
 80018f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018f4:	2300      	movs	r3, #0
 80018f6:	60bb      	str	r3, [r7, #8]
 80018f8:	4b28      	ldr	r3, [pc, #160]	; (800199c <SystemClock_Config+0xcc>)
 80018fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fc:	4a27      	ldr	r2, [pc, #156]	; (800199c <SystemClock_Config+0xcc>)
 80018fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001902:	6413      	str	r3, [r2, #64]	; 0x40
 8001904:	4b25      	ldr	r3, [pc, #148]	; (800199c <SystemClock_Config+0xcc>)
 8001906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800190c:	60bb      	str	r3, [r7, #8]
 800190e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001910:	2300      	movs	r3, #0
 8001912:	607b      	str	r3, [r7, #4]
 8001914:	4b22      	ldr	r3, [pc, #136]	; (80019a0 <SystemClock_Config+0xd0>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800191c:	4a20      	ldr	r2, [pc, #128]	; (80019a0 <SystemClock_Config+0xd0>)
 800191e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001922:	6013      	str	r3, [r2, #0]
 8001924:	4b1e      	ldr	r3, [pc, #120]	; (80019a0 <SystemClock_Config+0xd0>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800192c:	607b      	str	r3, [r7, #4]
 800192e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001930:	2302      	movs	r3, #2
 8001932:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001934:	2301      	movs	r3, #1
 8001936:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001938:	2310      	movs	r3, #16
 800193a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800193c:	2302      	movs	r3, #2
 800193e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001940:	2300      	movs	r3, #0
 8001942:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001944:	2308      	movs	r3, #8
 8001946:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001948:	2354      	movs	r3, #84	; 0x54
 800194a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800194c:	2302      	movs	r3, #2
 800194e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001950:	2307      	movs	r3, #7
 8001952:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001954:	f107 0320 	add.w	r3, r7, #32
 8001958:	4618      	mov	r0, r3
 800195a:	f002 fa15 	bl	8003d88 <HAL_RCC_OscConfig>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001964:	f000 fab0 	bl	8001ec8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001968:	230f      	movs	r3, #15
 800196a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800196c:	2302      	movs	r3, #2
 800196e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001970:	2300      	movs	r3, #0
 8001972:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001974:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001978:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800197a:	2300      	movs	r3, #0
 800197c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800197e:	f107 030c 	add.w	r3, r7, #12
 8001982:	2102      	movs	r1, #2
 8001984:	4618      	mov	r0, r3
 8001986:	f002 fc77 	bl	8004278 <HAL_RCC_ClockConfig>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001990:	f000 fa9a 	bl	8001ec8 <Error_Handler>
  }
}
 8001994:	bf00      	nop
 8001996:	3750      	adds	r7, #80	; 0x50
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40023800 	.word	0x40023800
 80019a0:	40007000 	.word	0x40007000

080019a4 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* TIM1_TRG_COM_TIM11_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80019a8:	2200      	movs	r2, #0
 80019aa:	2100      	movs	r1, #0
 80019ac:	201a      	movs	r0, #26
 80019ae:	f000 fea7 	bl	8002700 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80019b2:	201a      	movs	r0, #26
 80019b4:	f000 fec0 	bl	8002738 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80019b8:	2200      	movs	r2, #0
 80019ba:	2100      	movs	r1, #0
 80019bc:	2028      	movs	r0, #40	; 0x28
 80019be:	f000 fe9f 	bl	8002700 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80019c2:	2028      	movs	r0, #40	; 0x28
 80019c4:	f000 feb8 	bl	8002738 <HAL_NVIC_EnableIRQ>
}
 80019c8:	bf00      	nop
 80019ca:	bd80      	pop	{r7, pc}

080019cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019d0:	4b12      	ldr	r3, [pc, #72]	; (8001a1c <MX_I2C1_Init+0x50>)
 80019d2:	4a13      	ldr	r2, [pc, #76]	; (8001a20 <MX_I2C1_Init+0x54>)
 80019d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80019d6:	4b11      	ldr	r3, [pc, #68]	; (8001a1c <MX_I2C1_Init+0x50>)
 80019d8:	4a12      	ldr	r2, [pc, #72]	; (8001a24 <MX_I2C1_Init+0x58>)
 80019da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019dc:	4b0f      	ldr	r3, [pc, #60]	; (8001a1c <MX_I2C1_Init+0x50>)
 80019de:	2200      	movs	r2, #0
 80019e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80019e2:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <MX_I2C1_Init+0x50>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019e8:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <MX_I2C1_Init+0x50>)
 80019ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019f0:	4b0a      	ldr	r3, [pc, #40]	; (8001a1c <MX_I2C1_Init+0x50>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80019f6:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <MX_I2C1_Init+0x50>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019fc:	4b07      	ldr	r3, [pc, #28]	; (8001a1c <MX_I2C1_Init+0x50>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a02:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <MX_I2C1_Init+0x50>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a08:	4804      	ldr	r0, [pc, #16]	; (8001a1c <MX_I2C1_Init+0x50>)
 8001a0a:	f001 f929 	bl	8002c60 <HAL_I2C_Init>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a14:	f000 fa58 	bl	8001ec8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a18:	bf00      	nop
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	20000240 	.word	0x20000240
 8001a20:	40005400 	.word	0x40005400
 8001a24:	000186a0 	.word	0x000186a0

08001a28 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a2e:	f107 0308 	add.w	r3, r7, #8
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	605a      	str	r2, [r3, #4]
 8001a38:	609a      	str	r2, [r3, #8]
 8001a3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a3c:	463b      	mov	r3, r7
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a44:	4b1d      	ldr	r3, [pc, #116]	; (8001abc <MX_TIM2_Init+0x94>)
 8001a46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a4a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8001a4c:	4b1b      	ldr	r3, [pc, #108]	; (8001abc <MX_TIM2_Init+0x94>)
 8001a4e:	2253      	movs	r2, #83	; 0x53
 8001a50:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a52:	4b1a      	ldr	r3, [pc, #104]	; (8001abc <MX_TIM2_Init+0x94>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 8001a58:	4b18      	ldr	r3, [pc, #96]	; (8001abc <MX_TIM2_Init+0x94>)
 8001a5a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001a5e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a60:	4b16      	ldr	r3, [pc, #88]	; (8001abc <MX_TIM2_Init+0x94>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a66:	4b15      	ldr	r3, [pc, #84]	; (8001abc <MX_TIM2_Init+0x94>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a6c:	4813      	ldr	r0, [pc, #76]	; (8001abc <MX_TIM2_Init+0x94>)
 8001a6e:	f002 fe31 	bl	80046d4 <HAL_TIM_Base_Init>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001a78:	f000 fa26 	bl	8001ec8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a80:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a82:	f107 0308 	add.w	r3, r7, #8
 8001a86:	4619      	mov	r1, r3
 8001a88:	480c      	ldr	r0, [pc, #48]	; (8001abc <MX_TIM2_Init+0x94>)
 8001a8a:	f002 ffdd 	bl	8004a48 <HAL_TIM_ConfigClockSource>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001a94:	f000 fa18 	bl	8001ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001aa0:	463b      	mov	r3, r7
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	4805      	ldr	r0, [pc, #20]	; (8001abc <MX_TIM2_Init+0x94>)
 8001aa6:	f003 f9d9 	bl	8004e5c <HAL_TIMEx_MasterConfigSynchronization>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001ab0:	f000 fa0a 	bl	8001ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ab4:	bf00      	nop
 8001ab6:	3718      	adds	r7, #24
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	20000364 	.word	0x20000364

08001ac0 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001ac4:	4b0e      	ldr	r3, [pc, #56]	; (8001b00 <MX_TIM10_Init+0x40>)
 8001ac6:	4a0f      	ldr	r2, [pc, #60]	; (8001b04 <MX_TIM10_Init+0x44>)
 8001ac8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 10000-1;
 8001aca:	4b0d      	ldr	r3, [pc, #52]	; (8001b00 <MX_TIM10_Init+0x40>)
 8001acc:	f242 720f 	movw	r2, #9999	; 0x270f
 8001ad0:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ad2:	4b0b      	ldr	r3, [pc, #44]	; (8001b00 <MX_TIM10_Init+0x40>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 8400-1;
 8001ad8:	4b09      	ldr	r3, [pc, #36]	; (8001b00 <MX_TIM10_Init+0x40>)
 8001ada:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001ade:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ae0:	4b07      	ldr	r3, [pc, #28]	; (8001b00 <MX_TIM10_Init+0x40>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ae6:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <MX_TIM10_Init+0x40>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001aec:	4804      	ldr	r0, [pc, #16]	; (8001b00 <MX_TIM10_Init+0x40>)
 8001aee:	f002 fdf1 	bl	80046d4 <HAL_TIM_Base_Init>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8001af8:	f000 f9e6 	bl	8001ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001afc:	bf00      	nop
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	20000294 	.word	0x20000294
 8001b04:	40014400 	.word	0x40014400

08001b08 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001b0c:	4b0e      	ldr	r3, [pc, #56]	; (8001b48 <MX_TIM11_Init+0x40>)
 8001b0e:	4a0f      	ldr	r2, [pc, #60]	; (8001b4c <MX_TIM11_Init+0x44>)
 8001b10:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 100-1;
 8001b12:	4b0d      	ldr	r3, [pc, #52]	; (8001b48 <MX_TIM11_Init+0x40>)
 8001b14:	2263      	movs	r2, #99	; 0x63
 8001b16:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b18:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <MX_TIM11_Init+0x40>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 840-1;
 8001b1e:	4b0a      	ldr	r3, [pc, #40]	; (8001b48 <MX_TIM11_Init+0x40>)
 8001b20:	f240 3247 	movw	r2, #839	; 0x347
 8001b24:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b26:	4b08      	ldr	r3, [pc, #32]	; (8001b48 <MX_TIM11_Init+0x40>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b2c:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <MX_TIM11_Init+0x40>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001b32:	4805      	ldr	r0, [pc, #20]	; (8001b48 <MX_TIM11_Init+0x40>)
 8001b34:	f002 fdce 	bl	80046d4 <HAL_TIM_Base_Init>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001b3e:	f000 f9c3 	bl	8001ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	200002fc 	.word	0x200002fc
 8001b4c:	40014800 	.word	0x40014800

08001b50 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b54:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <MX_USART2_UART_Init+0x4c>)
 8001b56:	4a12      	ldr	r2, [pc, #72]	; (8001ba0 <MX_USART2_UART_Init+0x50>)
 8001b58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b5a:	4b10      	ldr	r3, [pc, #64]	; (8001b9c <MX_USART2_UART_Init+0x4c>)
 8001b5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b62:	4b0e      	ldr	r3, [pc, #56]	; (8001b9c <MX_USART2_UART_Init+0x4c>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b68:	4b0c      	ldr	r3, [pc, #48]	; (8001b9c <MX_USART2_UART_Init+0x4c>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b6e:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <MX_USART2_UART_Init+0x4c>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b74:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <MX_USART2_UART_Init+0x4c>)
 8001b76:	220c      	movs	r2, #12
 8001b78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b7a:	4b08      	ldr	r3, [pc, #32]	; (8001b9c <MX_USART2_UART_Init+0x4c>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b80:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <MX_USART2_UART_Init+0x4c>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b86:	4805      	ldr	r0, [pc, #20]	; (8001b9c <MX_USART2_UART_Init+0x4c>)
 8001b88:	f003 f9ea 	bl	8004f60 <HAL_UART_Init>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b92:	f000 f999 	bl	8001ec8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	200003ac 	.word	0x200003ac
 8001ba0:	40004400 	.word	0x40004400

08001ba4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b08a      	sub	sp, #40	; 0x28
 8001ba8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001baa:	f107 0314 	add.w	r3, r7, #20
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	605a      	str	r2, [r3, #4]
 8001bb4:	609a      	str	r2, [r3, #8]
 8001bb6:	60da      	str	r2, [r3, #12]
 8001bb8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	613b      	str	r3, [r7, #16]
 8001bbe:	4b4f      	ldr	r3, [pc, #316]	; (8001cfc <MX_GPIO_Init+0x158>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	4a4e      	ldr	r2, [pc, #312]	; (8001cfc <MX_GPIO_Init+0x158>)
 8001bc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bca:	4b4c      	ldr	r3, [pc, #304]	; (8001cfc <MX_GPIO_Init+0x158>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bd2:	613b      	str	r3, [r7, #16]
 8001bd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60fb      	str	r3, [r7, #12]
 8001bda:	4b48      	ldr	r3, [pc, #288]	; (8001cfc <MX_GPIO_Init+0x158>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	4a47      	ldr	r2, [pc, #284]	; (8001cfc <MX_GPIO_Init+0x158>)
 8001be0:	f043 0301 	orr.w	r3, r3, #1
 8001be4:	6313      	str	r3, [r2, #48]	; 0x30
 8001be6:	4b45      	ldr	r3, [pc, #276]	; (8001cfc <MX_GPIO_Init+0x158>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60bb      	str	r3, [r7, #8]
 8001bf6:	4b41      	ldr	r3, [pc, #260]	; (8001cfc <MX_GPIO_Init+0x158>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	4a40      	ldr	r2, [pc, #256]	; (8001cfc <MX_GPIO_Init+0x158>)
 8001bfc:	f043 0304 	orr.w	r3, r3, #4
 8001c00:	6313      	str	r3, [r2, #48]	; 0x30
 8001c02:	4b3e      	ldr	r3, [pc, #248]	; (8001cfc <MX_GPIO_Init+0x158>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	f003 0304 	and.w	r3, r3, #4
 8001c0a:	60bb      	str	r3, [r7, #8]
 8001c0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	607b      	str	r3, [r7, #4]
 8001c12:	4b3a      	ldr	r3, [pc, #232]	; (8001cfc <MX_GPIO_Init+0x158>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	4a39      	ldr	r2, [pc, #228]	; (8001cfc <MX_GPIO_Init+0x158>)
 8001c18:	f043 0302 	orr.w	r3, r3, #2
 8001c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1e:	4b37      	ldr	r3, [pc, #220]	; (8001cfc <MX_GPIO_Init+0x158>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	607b      	str	r3, [r7, #4]
 8001c28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, A_Pin|B_Pin|C_Pin|D_Pin
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f44f 617f 	mov.w	r1, #4080	; 0xff0
 8001c30:	4833      	ldr	r0, [pc, #204]	; (8001d00 <MX_GPIO_Init+0x15c>)
 8001c32:	f000 ffbd 	bl	8002bb0 <HAL_GPIO_WritePin>
                          |E_Pin|F_Pin|G_Pin|DotT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Dig1_Pin|Dig2_Pin|Dig3_Pin|Dig4_Pin, GPIO_PIN_RESET);
 8001c36:	2200      	movs	r2, #0
 8001c38:	210f      	movs	r1, #15
 8001c3a:	4832      	ldr	r0, [pc, #200]	; (8001d04 <MX_GPIO_Init+0x160>)
 8001c3c:	f000 ffb8 	bl	8002bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|Test_Pin, GPIO_PIN_RESET);
 8001c40:	2200      	movs	r2, #0
 8001c42:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8001c46:	4830      	ldr	r0, [pc, #192]	; (8001d08 <MX_GPIO_Init+0x164>)
 8001c48:	f000 ffb2 	bl	8002bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A_Pin B_Pin C_Pin D_Pin
                           E_Pin F_Pin G_Pin DotT_Pin */
  GPIO_InitStruct.Pin = A_Pin|B_Pin|C_Pin|D_Pin
 8001c4c:	f44f 637f 	mov.w	r3, #4080	; 0xff0
 8001c50:	617b      	str	r3, [r7, #20]
                          |E_Pin|F_Pin|G_Pin|DotT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c52:	2301      	movs	r3, #1
 8001c54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c56:	2300      	movs	r3, #0
 8001c58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c5e:	f107 0314 	add.w	r3, r7, #20
 8001c62:	4619      	mov	r1, r3
 8001c64:	4826      	ldr	r0, [pc, #152]	; (8001d00 <MX_GPIO_Init+0x15c>)
 8001c66:	f000 fe07 	bl	8002878 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c6a:	2320      	movs	r3, #32
 8001c6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c72:	2300      	movs	r3, #0
 8001c74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c76:	f107 0314 	add.w	r3, r7, #20
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4822      	ldr	r0, [pc, #136]	; (8001d08 <MX_GPIO_Init+0x164>)
 8001c7e:	f000 fdfb 	bl	8002878 <HAL_GPIO_Init>

  /*Configure GPIO pins : Dig1_Pin Dig2_Pin Dig3_Pin Dig4_Pin */
  GPIO_InitStruct.Pin = Dig1_Pin|Dig2_Pin|Dig3_Pin|Dig4_Pin;
 8001c82:	230f      	movs	r3, #15
 8001c84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c86:	2301      	movs	r3, #1
 8001c88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c92:	f107 0314 	add.w	r3, r7, #20
 8001c96:	4619      	mov	r1, r3
 8001c98:	481a      	ldr	r0, [pc, #104]	; (8001d04 <MX_GPIO_Init+0x160>)
 8001c9a:	f000 fded 	bl	8002878 <HAL_GPIO_Init>

  /*Configure GPIO pins : Switch2_Pin Switch1_Pin */
  GPIO_InitStruct.Pin = Switch2_Pin|Switch1_Pin;
 8001c9e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001ca2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ca4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ca8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001caa:	2302      	movs	r3, #2
 8001cac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cae:	f107 0314 	add.w	r3, r7, #20
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4813      	ldr	r0, [pc, #76]	; (8001d04 <MX_GPIO_Init+0x160>)
 8001cb6:	f000 fddf 	bl	8002878 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 Test_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_6|Test_Pin;
 8001cba:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8001cbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ccc:	f107 0314 	add.w	r3, r7, #20
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	480d      	ldr	r0, [pc, #52]	; (8001d08 <MX_GPIO_Init+0x164>)
 8001cd4:	f000 fdd0 	bl	8002878 <HAL_GPIO_Init>

  /*Configure GPIO pin : CO2_Pin */
  GPIO_InitStruct.Pin = CO2_Pin;
 8001cd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CO2_GPIO_Port, &GPIO_InitStruct);
 8001ce6:	f107 0314 	add.w	r3, r7, #20
 8001cea:	4619      	mov	r1, r3
 8001cec:	4806      	ldr	r0, [pc, #24]	; (8001d08 <MX_GPIO_Init+0x164>)
 8001cee:	f000 fdc3 	bl	8002878 <HAL_GPIO_Init>

}
 8001cf2:	bf00      	nop
 8001cf4:	3728      	adds	r7, #40	; 0x28
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40023800 	.word	0x40023800
 8001d00:	40020000 	.word	0x40020000
 8001d04:	40020400 	.word	0x40020400
 8001d08:	40020800 	.word	0x40020800

08001d0c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM2) {
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d1c:	d101      	bne.n	8001d22 <HAL_TIM_PeriodElapsedCallback+0x16>
//		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);

	    HAL_IncTick();
 8001d1e:	f000 fbf3 	bl	8002508 <HAL_IncTick>
	  }

	if(htim->Instance == TIM10){//타이머6 인터럽트 실행(1초)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a53      	ldr	r2, [pc, #332]	; (8001e74 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d11b      	bne.n	8001d64 <HAL_TIM_PeriodElapsedCallback+0x58>

	  HAL_GPIO_TogglePin(GPIOA, DotT_Pin);
 8001d2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d30:	4851      	ldr	r0, [pc, #324]	; (8001e78 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001d32:	f000 ff56 	bl	8002be2 <HAL_GPIO_TogglePin>
	  DHT22_Loop_Time++;
 8001d36:	4b51      	ldr	r3, [pc, #324]	; (8001e7c <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	b2da      	uxtb	r2, r3
 8001d3e:	4b4f      	ldr	r3, [pc, #316]	; (8001e7c <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001d40:	701a      	strb	r2, [r3, #0]
	  Uart_Loop_Time++;
 8001d42:	4b4f      	ldr	r3, [pc, #316]	; (8001e80 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	3301      	adds	r3, #1
 8001d48:	b2da      	uxtb	r2, r3
 8001d4a:	4b4d      	ldr	r3, [pc, #308]	; (8001e80 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001d4c:	701a      	strb	r2, [r3, #0]

	  Seg_Out++;
 8001d4e:	4b4d      	ldr	r3, [pc, #308]	; (8001e84 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	3301      	adds	r3, #1
 8001d54:	4a4b      	ldr	r2, [pc, #300]	; (8001e84 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001d56:	6013      	str	r3, [r2, #0]
	  lcd++;
 8001d58:	4b4b      	ldr	r3, [pc, #300]	; (8001e88 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	b2da      	uxtb	r2, r3
 8001d60:	4b49      	ldr	r3, [pc, #292]	; (8001e88 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001d62:	701a      	strb	r2, [r3, #0]

	}
	if(htim->Instance == TIM11){//타이머6 인터럽트 실행(1ms)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a48      	ldr	r2, [pc, #288]	; (8001e8c <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d177      	bne.n	8001e5e <HAL_TIM_PeriodElapsedCallback+0x152>
		Dustms++;
 8001d6e:	4b48      	ldr	r3, [pc, #288]	; (8001e90 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	3301      	adds	r3, #1
 8001d74:	4a46      	ldr	r2, [pc, #280]	; (8001e90 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001d76:	6013      	str	r3, [r2, #0]
		ms++;
 8001d78:	4b46      	ldr	r3, [pc, #280]	; (8001e94 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	b2da      	uxtb	r2, r3
 8001d80:	4b44      	ldr	r3, [pc, #272]	; (8001e94 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001d82:	701a      	strb	r2, [r3, #0]
		CO2ms++;
 8001d84:	4b44      	ldr	r3, [pc, #272]	; (8001e98 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	4a43      	ldr	r2, [pc, #268]	; (8001e98 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001d8c:	6013      	str	r3, [r2, #0]
		checkms++;
 8001d8e:	4b43      	ldr	r3, [pc, #268]	; (8001e9c <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	3301      	adds	r3, #1
 8001d94:	4a41      	ldr	r2, [pc, #260]	; (8001e9c <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001d96:	6013      	str	r3, [r2, #0]
		CO2_Pin_State = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8);
 8001d98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d9c:	4840      	ldr	r0, [pc, #256]	; (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001d9e:	f000 feef 	bl	8002b80 <HAL_GPIO_ReadPin>
 8001da2:	4603      	mov	r3, r0
 8001da4:	461a      	mov	r2, r3
 8001da6:	4b3f      	ldr	r3, [pc, #252]	; (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001da8:	701a      	strb	r2, [r3, #0]
//		if (CO2_Pin_State != OLD_CO2_Pin_State && CO2_Pin_State == 0){
//			rising_check = 1;
//		}

		if (rising_check == 1 && CO2_Pin_State != OLD_CO2_Pin_State && CO2_Pin_State == 1){ //라이징 엣지
 8001daa:	4b3f      	ldr	r3, [pc, #252]	; (8001ea8 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d119      	bne.n	8001de6 <HAL_TIM_PeriodElapsedCallback+0xda>
 8001db2:	4b3c      	ldr	r3, [pc, #240]	; (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001db4:	781a      	ldrb	r2, [r3, #0]
 8001db6:	4b3d      	ldr	r3, [pc, #244]	; (8001eac <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d013      	beq.n	8001de6 <HAL_TIM_PeriodElapsedCallback+0xda>
 8001dbe:	4b39      	ldr	r3, [pc, #228]	; (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d10f      	bne.n	8001de6 <HAL_TIM_PeriodElapsedCallback+0xda>
			CO2ms = 0;
 8001dc6:	4b34      	ldr	r3, [pc, #208]	; (8001e98 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
			CO2_Rising_Time = CO2ms;
 8001dcc:	4b32      	ldr	r3, [pc, #200]	; (8001e98 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a37      	ldr	r2, [pc, #220]	; (8001eb0 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001dd2:	6013      	str	r3, [r2, #0]
			rising_check = 0;
 8001dd4:	4b34      	ldr	r3, [pc, #208]	; (8001ea8 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	701a      	strb	r2, [r3, #0]
			CO2_Falling_Time = 0;
 8001dda:	4b36      	ldr	r3, [pc, #216]	; (8001eb4 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
			falling_check = 1;
 8001de0:	4b35      	ldr	r3, [pc, #212]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001de2:	2201      	movs	r2, #1
 8001de4:	701a      	strb	r2, [r3, #0]
		}

		if (falling_check && CO2_Pin_State != OLD_CO2_Pin_State && CO2_Pin_State == 0){ //폴링 엣지
 8001de6:	4b34      	ldr	r3, [pc, #208]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d016      	beq.n	8001e1c <HAL_TIM_PeriodElapsedCallback+0x110>
 8001dee:	4b2d      	ldr	r3, [pc, #180]	; (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001df0:	781a      	ldrb	r2, [r3, #0]
 8001df2:	4b2e      	ldr	r3, [pc, #184]	; (8001eac <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d010      	beq.n	8001e1c <HAL_TIM_PeriodElapsedCallback+0x110>
 8001dfa:	4b2a      	ldr	r3, [pc, #168]	; (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d10c      	bne.n	8001e1c <HAL_TIM_PeriodElapsedCallback+0x110>
			falling_check = 0;
 8001e02:	4b2d      	ldr	r3, [pc, #180]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	701a      	strb	r2, [r3, #0]
			CO2_Falling_Time = CO2ms;
 8001e08:	4b23      	ldr	r3, [pc, #140]	; (8001e98 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a29      	ldr	r2, [pc, #164]	; (8001eb4 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001e0e:	6013      	str	r3, [r2, #0]
			CO2_ReRising_Time = 0;
 8001e10:	4b2a      	ldr	r3, [pc, #168]	; (8001ebc <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	601a      	str	r2, [r3, #0]
			rerising_check = 1;
 8001e16:	4b2a      	ldr	r3, [pc, #168]	; (8001ec0 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001e18:	2201      	movs	r2, #1
 8001e1a:	701a      	strb	r2, [r3, #0]
		}

		if (rerising_check == 1 && CO2_Pin_State != OLD_CO2_Pin_State && CO2_Pin_State == 1&&CO2ms > 1000){
 8001e1c:	4b28      	ldr	r3, [pc, #160]	; (8001ec0 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d118      	bne.n	8001e56 <HAL_TIM_PeriodElapsedCallback+0x14a>
 8001e24:	4b1f      	ldr	r3, [pc, #124]	; (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001e26:	781a      	ldrb	r2, [r3, #0]
 8001e28:	4b20      	ldr	r3, [pc, #128]	; (8001eac <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d012      	beq.n	8001e56 <HAL_TIM_PeriodElapsedCallback+0x14a>
 8001e30:	4b1c      	ldr	r3, [pc, #112]	; (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d10e      	bne.n	8001e56 <HAL_TIM_PeriodElapsedCallback+0x14a>
 8001e38:	4b17      	ldr	r3, [pc, #92]	; (8001e98 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e40:	dd09      	ble.n	8001e56 <HAL_TIM_PeriodElapsedCallback+0x14a>
			CO2_ReRising_Time = CO2ms;
 8001e42:	4b15      	ldr	r3, [pc, #84]	; (8001e98 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a1d      	ldr	r2, [pc, #116]	; (8001ebc <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001e48:	6013      	str	r3, [r2, #0]
			rerising_check = 0;
 8001e4a:	4b1d      	ldr	r3, [pc, #116]	; (8001ec0 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	701a      	strb	r2, [r3, #0]
			rising_check = 1;
 8001e50:	4b15      	ldr	r3, [pc, #84]	; (8001ea8 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001e52:	2201      	movs	r2, #1
 8001e54:	701a      	strb	r2, [r3, #0]

		}



		OLD_CO2_Pin_State = CO2_Pin_State;
 8001e56:	4b13      	ldr	r3, [pc, #76]	; (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001e58:	781a      	ldrb	r2, [r3, #0]
 8001e5a:	4b14      	ldr	r3, [pc, #80]	; (8001eac <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001e5c:	701a      	strb	r2, [r3, #0]


		}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a18      	ldr	r2, [pc, #96]	; (8001ec4 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d101      	bne.n	8001e6c <HAL_TIM_PeriodElapsedCallback+0x160>
    HAL_IncTick();
 8001e68:	f000 fb4e 	bl	8002508 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e6c:	bf00      	nop
 8001e6e:	3708      	adds	r7, #8
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40014400 	.word	0x40014400
 8001e78:	40020000 	.word	0x40020000
 8001e7c:	2000021c 	.word	0x2000021c
 8001e80:	2000021d 	.word	0x2000021d
 8001e84:	20000004 	.word	0x20000004
 8001e88:	20000000 	.word	0x20000000
 8001e8c:	40014800 	.word	0x40014800
 8001e90:	2000022c 	.word	0x2000022c
 8001e94:	20000220 	.word	0x20000220
 8001e98:	20000224 	.word	0x20000224
 8001e9c:	20000228 	.word	0x20000228
 8001ea0:	40020800 	.word	0x40020800
 8001ea4:	2000021e 	.word	0x2000021e
 8001ea8:	20000219 	.word	0x20000219
 8001eac:	2000021f 	.word	0x2000021f
 8001eb0:	20000344 	.word	0x20000344
 8001eb4:	200002dc 	.word	0x200002dc
 8001eb8:	2000021a 	.word	0x2000021a
 8001ebc:	200003f0 	.word	0x200003f0
 8001ec0:	2000021b 	.word	0x2000021b
 8001ec4:	40010000 	.word	0x40010000

08001ec8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ecc:	b672      	cpsid	i
}
 8001ece:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ed0:	e7fe      	b.n	8001ed0 <Error_Handler+0x8>
	...

08001ed4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	607b      	str	r3, [r7, #4]
 8001ede:	4b14      	ldr	r3, [pc, #80]	; (8001f30 <HAL_MspInit+0x5c>)
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee2:	4a13      	ldr	r2, [pc, #76]	; (8001f30 <HAL_MspInit+0x5c>)
 8001ee4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ee8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eea:	4b11      	ldr	r3, [pc, #68]	; (8001f30 <HAL_MspInit+0x5c>)
 8001eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ef2:	607b      	str	r3, [r7, #4]
 8001ef4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	603b      	str	r3, [r7, #0]
 8001efa:	4b0d      	ldr	r3, [pc, #52]	; (8001f30 <HAL_MspInit+0x5c>)
 8001efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efe:	4a0c      	ldr	r2, [pc, #48]	; (8001f30 <HAL_MspInit+0x5c>)
 8001f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f04:	6413      	str	r3, [r2, #64]	; 0x40
 8001f06:	4b0a      	ldr	r3, [pc, #40]	; (8001f30 <HAL_MspInit+0x5c>)
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f0e:	603b      	str	r3, [r7, #0]
 8001f10:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001f12:	2007      	movs	r0, #7
 8001f14:	f000 fbe9 	bl	80026ea <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001f18:	2200      	movs	r2, #0
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	2005      	movs	r0, #5
 8001f1e:	f000 fbef 	bl	8002700 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001f22:	2005      	movs	r0, #5
 8001f24:	f000 fc08 	bl	8002738 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f28:	bf00      	nop
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40023800 	.word	0x40023800

08001f34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b08a      	sub	sp, #40	; 0x28
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f3c:	f107 0314 	add.w	r3, r7, #20
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	605a      	str	r2, [r3, #4]
 8001f46:	609a      	str	r2, [r3, #8]
 8001f48:	60da      	str	r2, [r3, #12]
 8001f4a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a1d      	ldr	r2, [pc, #116]	; (8001fc8 <HAL_I2C_MspInit+0x94>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d133      	bne.n	8001fbe <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	613b      	str	r3, [r7, #16]
 8001f5a:	4b1c      	ldr	r3, [pc, #112]	; (8001fcc <HAL_I2C_MspInit+0x98>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	4a1b      	ldr	r2, [pc, #108]	; (8001fcc <HAL_I2C_MspInit+0x98>)
 8001f60:	f043 0302 	orr.w	r3, r3, #2
 8001f64:	6313      	str	r3, [r2, #48]	; 0x30
 8001f66:	4b19      	ldr	r3, [pc, #100]	; (8001fcc <HAL_I2C_MspInit+0x98>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	613b      	str	r3, [r7, #16]
 8001f70:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f72:	23c0      	movs	r3, #192	; 0xc0
 8001f74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f76:	2312      	movs	r3, #18
 8001f78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f82:	2304      	movs	r3, #4
 8001f84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f86:	f107 0314 	add.w	r3, r7, #20
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4810      	ldr	r0, [pc, #64]	; (8001fd0 <HAL_I2C_MspInit+0x9c>)
 8001f8e:	f000 fc73 	bl	8002878 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	60fb      	str	r3, [r7, #12]
 8001f96:	4b0d      	ldr	r3, [pc, #52]	; (8001fcc <HAL_I2C_MspInit+0x98>)
 8001f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9a:	4a0c      	ldr	r2, [pc, #48]	; (8001fcc <HAL_I2C_MspInit+0x98>)
 8001f9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fa0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fa2:	4b0a      	ldr	r3, [pc, #40]	; (8001fcc <HAL_I2C_MspInit+0x98>)
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	2020      	movs	r0, #32
 8001fb4:	f000 fba4 	bl	8002700 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001fb8:	2020      	movs	r0, #32
 8001fba:	f000 fbbd 	bl	8002738 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001fbe:	bf00      	nop
 8001fc0:	3728      	adds	r7, #40	; 0x28
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	40005400 	.word	0x40005400
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	40020400 	.word	0x40020400

08001fd4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fe4:	d116      	bne.n	8002014 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	617b      	str	r3, [r7, #20]
 8001fea:	4b24      	ldr	r3, [pc, #144]	; (800207c <HAL_TIM_Base_MspInit+0xa8>)
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	4a23      	ldr	r2, [pc, #140]	; (800207c <HAL_TIM_Base_MspInit+0xa8>)
 8001ff0:	f043 0301 	orr.w	r3, r3, #1
 8001ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ff6:	4b21      	ldr	r3, [pc, #132]	; (800207c <HAL_TIM_Base_MspInit+0xa8>)
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	617b      	str	r3, [r7, #20]
 8002000:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002002:	2200      	movs	r2, #0
 8002004:	2100      	movs	r1, #0
 8002006:	201c      	movs	r0, #28
 8002008:	f000 fb7a 	bl	8002700 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800200c:	201c      	movs	r0, #28
 800200e:	f000 fb93 	bl	8002738 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002012:	e02e      	b.n	8002072 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM10)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a19      	ldr	r2, [pc, #100]	; (8002080 <HAL_TIM_Base_MspInit+0xac>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d116      	bne.n	800204c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	613b      	str	r3, [r7, #16]
 8002022:	4b16      	ldr	r3, [pc, #88]	; (800207c <HAL_TIM_Base_MspInit+0xa8>)
 8002024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002026:	4a15      	ldr	r2, [pc, #84]	; (800207c <HAL_TIM_Base_MspInit+0xa8>)
 8002028:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800202c:	6453      	str	r3, [r2, #68]	; 0x44
 800202e:	4b13      	ldr	r3, [pc, #76]	; (800207c <HAL_TIM_Base_MspInit+0xa8>)
 8002030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002036:	613b      	str	r3, [r7, #16]
 8002038:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800203a:	2200      	movs	r2, #0
 800203c:	2100      	movs	r1, #0
 800203e:	2019      	movs	r0, #25
 8002040:	f000 fb5e 	bl	8002700 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002044:	2019      	movs	r0, #25
 8002046:	f000 fb77 	bl	8002738 <HAL_NVIC_EnableIRQ>
}
 800204a:	e012      	b.n	8002072 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM11)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a0c      	ldr	r2, [pc, #48]	; (8002084 <HAL_TIM_Base_MspInit+0xb0>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d10d      	bne.n	8002072 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002056:	2300      	movs	r3, #0
 8002058:	60fb      	str	r3, [r7, #12]
 800205a:	4b08      	ldr	r3, [pc, #32]	; (800207c <HAL_TIM_Base_MspInit+0xa8>)
 800205c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205e:	4a07      	ldr	r2, [pc, #28]	; (800207c <HAL_TIM_Base_MspInit+0xa8>)
 8002060:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002064:	6453      	str	r3, [r2, #68]	; 0x44
 8002066:	4b05      	ldr	r3, [pc, #20]	; (800207c <HAL_TIM_Base_MspInit+0xa8>)
 8002068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800206e:	60fb      	str	r3, [r7, #12]
 8002070:	68fb      	ldr	r3, [r7, #12]
}
 8002072:	bf00      	nop
 8002074:	3718      	adds	r7, #24
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	40023800 	.word	0x40023800
 8002080:	40014400 	.word	0x40014400
 8002084:	40014800 	.word	0x40014800

08002088 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b08a      	sub	sp, #40	; 0x28
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002090:	f107 0314 	add.w	r3, r7, #20
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	609a      	str	r2, [r3, #8]
 800209c:	60da      	str	r2, [r3, #12]
 800209e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a1d      	ldr	r2, [pc, #116]	; (800211c <HAL_UART_MspInit+0x94>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d133      	bne.n	8002112 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80020aa:	2300      	movs	r3, #0
 80020ac:	613b      	str	r3, [r7, #16]
 80020ae:	4b1c      	ldr	r3, [pc, #112]	; (8002120 <HAL_UART_MspInit+0x98>)
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	4a1b      	ldr	r2, [pc, #108]	; (8002120 <HAL_UART_MspInit+0x98>)
 80020b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020b8:	6413      	str	r3, [r2, #64]	; 0x40
 80020ba:	4b19      	ldr	r3, [pc, #100]	; (8002120 <HAL_UART_MspInit+0x98>)
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c2:	613b      	str	r3, [r7, #16]
 80020c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020c6:	2300      	movs	r3, #0
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	4b15      	ldr	r3, [pc, #84]	; (8002120 <HAL_UART_MspInit+0x98>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	4a14      	ldr	r2, [pc, #80]	; (8002120 <HAL_UART_MspInit+0x98>)
 80020d0:	f043 0301 	orr.w	r3, r3, #1
 80020d4:	6313      	str	r3, [r2, #48]	; 0x30
 80020d6:	4b12      	ldr	r3, [pc, #72]	; (8002120 <HAL_UART_MspInit+0x98>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	60fb      	str	r3, [r7, #12]
 80020e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80020e2:	230c      	movs	r3, #12
 80020e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e6:	2302      	movs	r3, #2
 80020e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ea:	2300      	movs	r3, #0
 80020ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ee:	2303      	movs	r3, #3
 80020f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020f2:	2307      	movs	r3, #7
 80020f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020f6:	f107 0314 	add.w	r3, r7, #20
 80020fa:	4619      	mov	r1, r3
 80020fc:	4809      	ldr	r0, [pc, #36]	; (8002124 <HAL_UART_MspInit+0x9c>)
 80020fe:	f000 fbbb 	bl	8002878 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002102:	2200      	movs	r2, #0
 8002104:	2100      	movs	r1, #0
 8002106:	2026      	movs	r0, #38	; 0x26
 8002108:	f000 fafa 	bl	8002700 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800210c:	2026      	movs	r0, #38	; 0x26
 800210e:	f000 fb13 	bl	8002738 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002112:	bf00      	nop
 8002114:	3728      	adds	r7, #40	; 0x28
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	40004400 	.word	0x40004400
 8002120:	40023800 	.word	0x40023800
 8002124:	40020000 	.word	0x40020000

08002128 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b08c      	sub	sp, #48	; 0x30
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002130:	2300      	movs	r3, #0
 8002132:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002134:	2300      	movs	r3, #0
 8002136:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8002138:	2200      	movs	r2, #0
 800213a:	6879      	ldr	r1, [r7, #4]
 800213c:	2019      	movs	r0, #25
 800213e:	f000 fadf 	bl	8002700 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002142:	2019      	movs	r0, #25
 8002144:	f000 faf8 	bl	8002738 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002148:	2300      	movs	r3, #0
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	4b1e      	ldr	r3, [pc, #120]	; (80021c8 <HAL_InitTick+0xa0>)
 800214e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002150:	4a1d      	ldr	r2, [pc, #116]	; (80021c8 <HAL_InitTick+0xa0>)
 8002152:	f043 0301 	orr.w	r3, r3, #1
 8002156:	6453      	str	r3, [r2, #68]	; 0x44
 8002158:	4b1b      	ldr	r3, [pc, #108]	; (80021c8 <HAL_InitTick+0xa0>)
 800215a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215c:	f003 0301 	and.w	r3, r3, #1
 8002160:	60fb      	str	r3, [r7, #12]
 8002162:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002164:	f107 0210 	add.w	r2, r7, #16
 8002168:	f107 0314 	add.w	r3, r7, #20
 800216c:	4611      	mov	r1, r2
 800216e:	4618      	mov	r0, r3
 8002170:	f002 fa7e 	bl	8004670 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002174:	f002 fa68 	bl	8004648 <HAL_RCC_GetPCLK2Freq>
 8002178:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800217a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800217c:	4a13      	ldr	r2, [pc, #76]	; (80021cc <HAL_InitTick+0xa4>)
 800217e:	fba2 2303 	umull	r2, r3, r2, r3
 8002182:	0c9b      	lsrs	r3, r3, #18
 8002184:	3b01      	subs	r3, #1
 8002186:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002188:	4b11      	ldr	r3, [pc, #68]	; (80021d0 <HAL_InitTick+0xa8>)
 800218a:	4a12      	ldr	r2, [pc, #72]	; (80021d4 <HAL_InitTick+0xac>)
 800218c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800218e:	4b10      	ldr	r3, [pc, #64]	; (80021d0 <HAL_InitTick+0xa8>)
 8002190:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002194:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002196:	4a0e      	ldr	r2, [pc, #56]	; (80021d0 <HAL_InitTick+0xa8>)
 8002198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800219a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800219c:	4b0c      	ldr	r3, [pc, #48]	; (80021d0 <HAL_InitTick+0xa8>)
 800219e:	2200      	movs	r2, #0
 80021a0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021a2:	4b0b      	ldr	r3, [pc, #44]	; (80021d0 <HAL_InitTick+0xa8>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80021a8:	4809      	ldr	r0, [pc, #36]	; (80021d0 <HAL_InitTick+0xa8>)
 80021aa:	f002 fa93 	bl	80046d4 <HAL_TIM_Base_Init>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d104      	bne.n	80021be <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80021b4:	4806      	ldr	r0, [pc, #24]	; (80021d0 <HAL_InitTick+0xa8>)
 80021b6:	f002 fadd 	bl	8004774 <HAL_TIM_Base_Start_IT>
 80021ba:	4603      	mov	r3, r0
 80021bc:	e000      	b.n	80021c0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3730      	adds	r7, #48	; 0x30
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40023800 	.word	0x40023800
 80021cc:	431bde83 	.word	0x431bde83
 80021d0:	200003f4 	.word	0x200003f4
 80021d4:	40010000 	.word	0x40010000

080021d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021dc:	e7fe      	b.n	80021dc <NMI_Handler+0x4>

080021de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021de:	b480      	push	{r7}
 80021e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021e2:	e7fe      	b.n	80021e2 <HardFault_Handler+0x4>

080021e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021e8:	e7fe      	b.n	80021e8 <MemManage_Handler+0x4>

080021ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021ea:	b480      	push	{r7}
 80021ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021ee:	e7fe      	b.n	80021ee <BusFault_Handler+0x4>

080021f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021f4:	e7fe      	b.n	80021f4 <UsageFault_Handler+0x4>

080021f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021f6:	b480      	push	{r7}
 80021f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021fa:	bf00      	nop
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002208:	bf00      	nop
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr

08002212 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002212:	b480      	push	{r7}
 8002214:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002216:	bf00      	nop
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002224:	bf00      	nop
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr

0800222e <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800222e:	b480      	push	{r7}
 8002230:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002232:	bf00      	nop
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002240:	4803      	ldr	r0, [pc, #12]	; (8002250 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8002242:	f002 faf9 	bl	8004838 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8002246:	4803      	ldr	r0, [pc, #12]	; (8002254 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8002248:	f002 faf6 	bl	8004838 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800224c:	bf00      	nop
 800224e:	bd80      	pop	{r7, pc}
 8002250:	200003f4 	.word	0x200003f4
 8002254:	20000294 	.word	0x20000294

08002258 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 800225c:	4802      	ldr	r0, [pc, #8]	; (8002268 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800225e:	f002 faeb 	bl	8004838 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002262:	bf00      	nop
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	200002fc 	.word	0x200002fc

0800226c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002270:	4802      	ldr	r0, [pc, #8]	; (800227c <TIM2_IRQHandler+0x10>)
 8002272:	f002 fae1 	bl	8004838 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002276:	bf00      	nop
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	20000364 	.word	0x20000364

08002280 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002284:	4802      	ldr	r0, [pc, #8]	; (8002290 <I2C1_ER_IRQHandler+0x10>)
 8002286:	f001 f85b 	bl	8003340 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800228a:	bf00      	nop
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	20000240 	.word	0x20000240

08002294 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002298:	4802      	ldr	r0, [pc, #8]	; (80022a4 <USART2_IRQHandler+0x10>)
 800229a:	f002 ff41 	bl	8005120 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800229e:	bf00      	nop
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	200003ac 	.word	0x200003ac

080022a8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80022ac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80022b0:	f000 fcb2 	bl	8002c18 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80022b4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80022b8:	f000 fcae 	bl	8002c18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80022bc:	bf00      	nop
 80022be:	bd80      	pop	{r7, pc}

080022c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
	return 1;
 80022c4:	2301      	movs	r3, #1
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <_kill>:

int _kill(int pid, int sig)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80022da:	f003 fda9 	bl	8005e30 <__errno>
 80022de:	4603      	mov	r3, r0
 80022e0:	2216      	movs	r2, #22
 80022e2:	601a      	str	r2, [r3, #0]
	return -1;
 80022e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <_exit>:

void _exit (int status)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80022f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f7ff ffe7 	bl	80022d0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002302:	e7fe      	b.n	8002302 <_exit+0x12>

08002304 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002310:	2300      	movs	r3, #0
 8002312:	617b      	str	r3, [r7, #20]
 8002314:	e00a      	b.n	800232c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002316:	f3af 8000 	nop.w
 800231a:	4601      	mov	r1, r0
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	1c5a      	adds	r2, r3, #1
 8002320:	60ba      	str	r2, [r7, #8]
 8002322:	b2ca      	uxtb	r2, r1
 8002324:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	3301      	adds	r3, #1
 800232a:	617b      	str	r3, [r7, #20]
 800232c:	697a      	ldr	r2, [r7, #20]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	429a      	cmp	r2, r3
 8002332:	dbf0      	blt.n	8002316 <_read+0x12>
	}

return len;
 8002334:	687b      	ldr	r3, [r7, #4]
}
 8002336:	4618      	mov	r0, r3
 8002338:	3718      	adds	r7, #24
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b086      	sub	sp, #24
 8002342:	af00      	add	r7, sp, #0
 8002344:	60f8      	str	r0, [r7, #12]
 8002346:	60b9      	str	r1, [r7, #8]
 8002348:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800234a:	2300      	movs	r3, #0
 800234c:	617b      	str	r3, [r7, #20]
 800234e:	e009      	b.n	8002364 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	1c5a      	adds	r2, r3, #1
 8002354:	60ba      	str	r2, [r7, #8]
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	4618      	mov	r0, r3
 800235a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	3301      	adds	r3, #1
 8002362:	617b      	str	r3, [r7, #20]
 8002364:	697a      	ldr	r2, [r7, #20]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	429a      	cmp	r2, r3
 800236a:	dbf1      	blt.n	8002350 <_write+0x12>
	}
	return len;
 800236c:	687b      	ldr	r3, [r7, #4]
}
 800236e:	4618      	mov	r0, r3
 8002370:	3718      	adds	r7, #24
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <_close>:

int _close(int file)
{
 8002376:	b480      	push	{r7}
 8002378:	b083      	sub	sp, #12
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
	return -1;
 800237e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002382:	4618      	mov	r0, r3
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr

0800238e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800238e:	b480      	push	{r7}
 8002390:	b083      	sub	sp, #12
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
 8002396:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800239e:	605a      	str	r2, [r3, #4]
	return 0;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr

080023ae <_isatty>:

int _isatty(int file)
{
 80023ae:	b480      	push	{r7}
 80023b0:	b083      	sub	sp, #12
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
	return 1;
 80023b6:	2301      	movs	r3, #1
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
	return 0;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3714      	adds	r7, #20
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
	...

080023e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023e8:	4a14      	ldr	r2, [pc, #80]	; (800243c <_sbrk+0x5c>)
 80023ea:	4b15      	ldr	r3, [pc, #84]	; (8002440 <_sbrk+0x60>)
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023f4:	4b13      	ldr	r3, [pc, #76]	; (8002444 <_sbrk+0x64>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d102      	bne.n	8002402 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023fc:	4b11      	ldr	r3, [pc, #68]	; (8002444 <_sbrk+0x64>)
 80023fe:	4a12      	ldr	r2, [pc, #72]	; (8002448 <_sbrk+0x68>)
 8002400:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002402:	4b10      	ldr	r3, [pc, #64]	; (8002444 <_sbrk+0x64>)
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4413      	add	r3, r2
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	429a      	cmp	r2, r3
 800240e:	d207      	bcs.n	8002420 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002410:	f003 fd0e 	bl	8005e30 <__errno>
 8002414:	4603      	mov	r3, r0
 8002416:	220c      	movs	r2, #12
 8002418:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800241a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800241e:	e009      	b.n	8002434 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002420:	4b08      	ldr	r3, [pc, #32]	; (8002444 <_sbrk+0x64>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002426:	4b07      	ldr	r3, [pc, #28]	; (8002444 <_sbrk+0x64>)
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4413      	add	r3, r2
 800242e:	4a05      	ldr	r2, [pc, #20]	; (8002444 <_sbrk+0x64>)
 8002430:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002432:	68fb      	ldr	r3, [r7, #12]
}
 8002434:	4618      	mov	r0, r3
 8002436:	3718      	adds	r7, #24
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	20018000 	.word	0x20018000
 8002440:	00000400 	.word	0x00000400
 8002444:	20000234 	.word	0x20000234
 8002448:	20000450 	.word	0x20000450

0800244c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002450:	4b06      	ldr	r3, [pc, #24]	; (800246c <SystemInit+0x20>)
 8002452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002456:	4a05      	ldr	r2, [pc, #20]	; (800246c <SystemInit+0x20>)
 8002458:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800245c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002460:	bf00      	nop
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	e000ed00 	.word	0xe000ed00

08002470 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002470:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002474:	480d      	ldr	r0, [pc, #52]	; (80024ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002476:	490e      	ldr	r1, [pc, #56]	; (80024b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002478:	4a0e      	ldr	r2, [pc, #56]	; (80024b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800247a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800247c:	e002      	b.n	8002484 <LoopCopyDataInit>

0800247e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800247e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002480:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002482:	3304      	adds	r3, #4

08002484 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002484:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002486:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002488:	d3f9      	bcc.n	800247e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800248a:	4a0b      	ldr	r2, [pc, #44]	; (80024b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800248c:	4c0b      	ldr	r4, [pc, #44]	; (80024bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800248e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002490:	e001      	b.n	8002496 <LoopFillZerobss>

08002492 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002492:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002494:	3204      	adds	r2, #4

08002496 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002496:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002498:	d3fb      	bcc.n	8002492 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800249a:	f7ff ffd7 	bl	800244c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800249e:	f003 fccd 	bl	8005e3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024a2:	f7ff f93d 	bl	8001720 <main>
  bx  lr    
 80024a6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80024a8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80024ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024b0:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 80024b4:	08009074 	.word	0x08009074
  ldr r2, =_sbss
 80024b8:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 80024bc:	20000450 	.word	0x20000450

080024c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024c0:	e7fe      	b.n	80024c0 <ADC_IRQHandler>
	...

080024c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024c8:	4b0e      	ldr	r3, [pc, #56]	; (8002504 <HAL_Init+0x40>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a0d      	ldr	r2, [pc, #52]	; (8002504 <HAL_Init+0x40>)
 80024ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024d4:	4b0b      	ldr	r3, [pc, #44]	; (8002504 <HAL_Init+0x40>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a0a      	ldr	r2, [pc, #40]	; (8002504 <HAL_Init+0x40>)
 80024da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024e0:	4b08      	ldr	r3, [pc, #32]	; (8002504 <HAL_Init+0x40>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a07      	ldr	r2, [pc, #28]	; (8002504 <HAL_Init+0x40>)
 80024e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024ec:	2003      	movs	r0, #3
 80024ee:	f000 f8fc 	bl	80026ea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024f2:	2000      	movs	r0, #0
 80024f4:	f7ff fe18 	bl	8002128 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024f8:	f7ff fcec 	bl	8001ed4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	40023c00 	.word	0x40023c00

08002508 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800250c:	4b06      	ldr	r3, [pc, #24]	; (8002528 <HAL_IncTick+0x20>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	461a      	mov	r2, r3
 8002512:	4b06      	ldr	r3, [pc, #24]	; (800252c <HAL_IncTick+0x24>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4413      	add	r3, r2
 8002518:	4a04      	ldr	r2, [pc, #16]	; (800252c <HAL_IncTick+0x24>)
 800251a:	6013      	str	r3, [r2, #0]
}
 800251c:	bf00      	nop
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	20000024 	.word	0x20000024
 800252c:	2000043c 	.word	0x2000043c

08002530 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  return uwTick;
 8002534:	4b03      	ldr	r3, [pc, #12]	; (8002544 <HAL_GetTick+0x14>)
 8002536:	681b      	ldr	r3, [r3, #0]
}
 8002538:	4618      	mov	r0, r3
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	2000043c 	.word	0x2000043c

08002548 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002550:	f7ff ffee 	bl	8002530 <HAL_GetTick>
 8002554:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002560:	d005      	beq.n	800256e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002562:	4b0a      	ldr	r3, [pc, #40]	; (800258c <HAL_Delay+0x44>)
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	461a      	mov	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	4413      	add	r3, r2
 800256c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800256e:	bf00      	nop
 8002570:	f7ff ffde 	bl	8002530 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	429a      	cmp	r2, r3
 800257e:	d8f7      	bhi.n	8002570 <HAL_Delay+0x28>
  {
  }
}
 8002580:	bf00      	nop
 8002582:	bf00      	nop
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	20000024 	.word	0x20000024

08002590 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f003 0307 	and.w	r3, r3, #7
 800259e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025a0:	4b0c      	ldr	r3, [pc, #48]	; (80025d4 <__NVIC_SetPriorityGrouping+0x44>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025a6:	68ba      	ldr	r2, [r7, #8]
 80025a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025ac:	4013      	ands	r3, r2
 80025ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025c2:	4a04      	ldr	r2, [pc, #16]	; (80025d4 <__NVIC_SetPriorityGrouping+0x44>)
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	60d3      	str	r3, [r2, #12]
}
 80025c8:	bf00      	nop
 80025ca:	3714      	adds	r7, #20
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr
 80025d4:	e000ed00 	.word	0xe000ed00

080025d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025dc:	4b04      	ldr	r3, [pc, #16]	; (80025f0 <__NVIC_GetPriorityGrouping+0x18>)
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	0a1b      	lsrs	r3, r3, #8
 80025e2:	f003 0307 	and.w	r3, r3, #7
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	e000ed00 	.word	0xe000ed00

080025f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	4603      	mov	r3, r0
 80025fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002602:	2b00      	cmp	r3, #0
 8002604:	db0b      	blt.n	800261e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002606:	79fb      	ldrb	r3, [r7, #7]
 8002608:	f003 021f 	and.w	r2, r3, #31
 800260c:	4907      	ldr	r1, [pc, #28]	; (800262c <__NVIC_EnableIRQ+0x38>)
 800260e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002612:	095b      	lsrs	r3, r3, #5
 8002614:	2001      	movs	r0, #1
 8002616:	fa00 f202 	lsl.w	r2, r0, r2
 800261a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	e000e100 	.word	0xe000e100

08002630 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	4603      	mov	r3, r0
 8002638:	6039      	str	r1, [r7, #0]
 800263a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800263c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002640:	2b00      	cmp	r3, #0
 8002642:	db0a      	blt.n	800265a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	b2da      	uxtb	r2, r3
 8002648:	490c      	ldr	r1, [pc, #48]	; (800267c <__NVIC_SetPriority+0x4c>)
 800264a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264e:	0112      	lsls	r2, r2, #4
 8002650:	b2d2      	uxtb	r2, r2
 8002652:	440b      	add	r3, r1
 8002654:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002658:	e00a      	b.n	8002670 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	b2da      	uxtb	r2, r3
 800265e:	4908      	ldr	r1, [pc, #32]	; (8002680 <__NVIC_SetPriority+0x50>)
 8002660:	79fb      	ldrb	r3, [r7, #7]
 8002662:	f003 030f 	and.w	r3, r3, #15
 8002666:	3b04      	subs	r3, #4
 8002668:	0112      	lsls	r2, r2, #4
 800266a:	b2d2      	uxtb	r2, r2
 800266c:	440b      	add	r3, r1
 800266e:	761a      	strb	r2, [r3, #24]
}
 8002670:	bf00      	nop
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr
 800267c:	e000e100 	.word	0xe000e100
 8002680:	e000ed00 	.word	0xe000ed00

08002684 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002684:	b480      	push	{r7}
 8002686:	b089      	sub	sp, #36	; 0x24
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f003 0307 	and.w	r3, r3, #7
 8002696:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	f1c3 0307 	rsb	r3, r3, #7
 800269e:	2b04      	cmp	r3, #4
 80026a0:	bf28      	it	cs
 80026a2:	2304      	movcs	r3, #4
 80026a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	3304      	adds	r3, #4
 80026aa:	2b06      	cmp	r3, #6
 80026ac:	d902      	bls.n	80026b4 <NVIC_EncodePriority+0x30>
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	3b03      	subs	r3, #3
 80026b2:	e000      	b.n	80026b6 <NVIC_EncodePriority+0x32>
 80026b4:	2300      	movs	r3, #0
 80026b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	43da      	mvns	r2, r3
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	401a      	ands	r2, r3
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	fa01 f303 	lsl.w	r3, r1, r3
 80026d6:	43d9      	mvns	r1, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026dc:	4313      	orrs	r3, r2
         );
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3724      	adds	r7, #36	; 0x24
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr

080026ea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b082      	sub	sp, #8
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f7ff ff4c 	bl	8002590 <__NVIC_SetPriorityGrouping>
}
 80026f8:	bf00      	nop
 80026fa:	3708      	adds	r7, #8
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}

08002700 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af00      	add	r7, sp, #0
 8002706:	4603      	mov	r3, r0
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	607a      	str	r2, [r7, #4]
 800270c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800270e:	2300      	movs	r3, #0
 8002710:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002712:	f7ff ff61 	bl	80025d8 <__NVIC_GetPriorityGrouping>
 8002716:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	68b9      	ldr	r1, [r7, #8]
 800271c:	6978      	ldr	r0, [r7, #20]
 800271e:	f7ff ffb1 	bl	8002684 <NVIC_EncodePriority>
 8002722:	4602      	mov	r2, r0
 8002724:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002728:	4611      	mov	r1, r2
 800272a:	4618      	mov	r0, r3
 800272c:	f7ff ff80 	bl	8002630 <__NVIC_SetPriority>
}
 8002730:	bf00      	nop
 8002732:	3718      	adds	r7, #24
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	4603      	mov	r3, r0
 8002740:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002746:	4618      	mov	r0, r3
 8002748:	f7ff ff54 	bl	80025f4 <__NVIC_EnableIRQ>
}
 800274c:	bf00      	nop
 800274e:	3708      	adds	r7, #8
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002760:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002762:	f7ff fee5 	bl	8002530 <HAL_GetTick>
 8002766:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800276e:	b2db      	uxtb	r3, r3
 8002770:	2b02      	cmp	r3, #2
 8002772:	d008      	beq.n	8002786 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2280      	movs	r2, #128	; 0x80
 8002778:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e052      	b.n	800282c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f022 0216 	bic.w	r2, r2, #22
 8002794:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	695a      	ldr	r2, [r3, #20]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027a4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d103      	bne.n	80027b6 <HAL_DMA_Abort+0x62>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d007      	beq.n	80027c6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f022 0208 	bic.w	r2, r2, #8
 80027c4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f022 0201 	bic.w	r2, r2, #1
 80027d4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027d6:	e013      	b.n	8002800 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027d8:	f7ff feaa 	bl	8002530 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b05      	cmp	r3, #5
 80027e4:	d90c      	bls.n	8002800 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2220      	movs	r2, #32
 80027ea:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2203      	movs	r2, #3
 80027f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e015      	b.n	800282c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1e4      	bne.n	80027d8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002812:	223f      	movs	r2, #63	; 0x3f
 8002814:	409a      	lsls	r2, r3
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2201      	movs	r2, #1
 800281e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800282a:	2300      	movs	r3, #0
}
 800282c:	4618      	mov	r0, r3
 800282e:	3710      	adds	r7, #16
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002842:	b2db      	uxtb	r3, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d004      	beq.n	8002852 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2280      	movs	r2, #128	; 0x80
 800284c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e00c      	b.n	800286c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2205      	movs	r2, #5
 8002856:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f022 0201 	bic.w	r2, r2, #1
 8002868:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800286a:	2300      	movs	r3, #0
}
 800286c:	4618      	mov	r0, r3
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002878:	b480      	push	{r7}
 800287a:	b089      	sub	sp, #36	; 0x24
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002882:	2300      	movs	r3, #0
 8002884:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002886:	2300      	movs	r3, #0
 8002888:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800288a:	2300      	movs	r3, #0
 800288c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800288e:	2300      	movs	r3, #0
 8002890:	61fb      	str	r3, [r7, #28]
 8002892:	e159      	b.n	8002b48 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002894:	2201      	movs	r2, #1
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	4013      	ands	r3, r2
 80028a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	f040 8148 	bne.w	8002b42 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f003 0303 	and.w	r3, r3, #3
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d005      	beq.n	80028ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d130      	bne.n	800292c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	2203      	movs	r2, #3
 80028d6:	fa02 f303 	lsl.w	r3, r2, r3
 80028da:	43db      	mvns	r3, r3
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	4013      	ands	r3, r2
 80028e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	68da      	ldr	r2, [r3, #12]
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	fa02 f303 	lsl.w	r3, r2, r3
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002900:	2201      	movs	r2, #1
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	43db      	mvns	r3, r3
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	4013      	ands	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	091b      	lsrs	r3, r3, #4
 8002916:	f003 0201 	and.w	r2, r3, #1
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	4313      	orrs	r3, r2
 8002924:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f003 0303 	and.w	r3, r3, #3
 8002934:	2b03      	cmp	r3, #3
 8002936:	d017      	beq.n	8002968 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	2203      	movs	r2, #3
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	43db      	mvns	r3, r3
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	4013      	ands	r3, r2
 800294e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	689a      	ldr	r2, [r3, #8]
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	4313      	orrs	r3, r2
 8002960:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f003 0303 	and.w	r3, r3, #3
 8002970:	2b02      	cmp	r3, #2
 8002972:	d123      	bne.n	80029bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	08da      	lsrs	r2, r3, #3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	3208      	adds	r2, #8
 800297c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002980:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	f003 0307 	and.w	r3, r3, #7
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	220f      	movs	r2, #15
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	43db      	mvns	r3, r3
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	4013      	ands	r3, r2
 8002996:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	691a      	ldr	r2, [r3, #16]
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	f003 0307 	and.w	r3, r3, #7
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	fa02 f303 	lsl.w	r3, r2, r3
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	08da      	lsrs	r2, r3, #3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	3208      	adds	r2, #8
 80029b6:	69b9      	ldr	r1, [r7, #24]
 80029b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	2203      	movs	r2, #3
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	43db      	mvns	r3, r3
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	4013      	ands	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f003 0203 	and.w	r2, r3, #3
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	fa02 f303 	lsl.w	r3, r2, r3
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	f000 80a2 	beq.w	8002b42 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029fe:	2300      	movs	r3, #0
 8002a00:	60fb      	str	r3, [r7, #12]
 8002a02:	4b57      	ldr	r3, [pc, #348]	; (8002b60 <HAL_GPIO_Init+0x2e8>)
 8002a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a06:	4a56      	ldr	r2, [pc, #344]	; (8002b60 <HAL_GPIO_Init+0x2e8>)
 8002a08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a0c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a0e:	4b54      	ldr	r3, [pc, #336]	; (8002b60 <HAL_GPIO_Init+0x2e8>)
 8002a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a16:	60fb      	str	r3, [r7, #12]
 8002a18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a1a:	4a52      	ldr	r2, [pc, #328]	; (8002b64 <HAL_GPIO_Init+0x2ec>)
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	089b      	lsrs	r3, r3, #2
 8002a20:	3302      	adds	r3, #2
 8002a22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	f003 0303 	and.w	r3, r3, #3
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	220f      	movs	r2, #15
 8002a32:	fa02 f303 	lsl.w	r3, r2, r3
 8002a36:	43db      	mvns	r3, r3
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a49      	ldr	r2, [pc, #292]	; (8002b68 <HAL_GPIO_Init+0x2f0>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d019      	beq.n	8002a7a <HAL_GPIO_Init+0x202>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a48      	ldr	r2, [pc, #288]	; (8002b6c <HAL_GPIO_Init+0x2f4>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d013      	beq.n	8002a76 <HAL_GPIO_Init+0x1fe>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a47      	ldr	r2, [pc, #284]	; (8002b70 <HAL_GPIO_Init+0x2f8>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d00d      	beq.n	8002a72 <HAL_GPIO_Init+0x1fa>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a46      	ldr	r2, [pc, #280]	; (8002b74 <HAL_GPIO_Init+0x2fc>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d007      	beq.n	8002a6e <HAL_GPIO_Init+0x1f6>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a45      	ldr	r2, [pc, #276]	; (8002b78 <HAL_GPIO_Init+0x300>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d101      	bne.n	8002a6a <HAL_GPIO_Init+0x1f2>
 8002a66:	2304      	movs	r3, #4
 8002a68:	e008      	b.n	8002a7c <HAL_GPIO_Init+0x204>
 8002a6a:	2307      	movs	r3, #7
 8002a6c:	e006      	b.n	8002a7c <HAL_GPIO_Init+0x204>
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e004      	b.n	8002a7c <HAL_GPIO_Init+0x204>
 8002a72:	2302      	movs	r3, #2
 8002a74:	e002      	b.n	8002a7c <HAL_GPIO_Init+0x204>
 8002a76:	2301      	movs	r3, #1
 8002a78:	e000      	b.n	8002a7c <HAL_GPIO_Init+0x204>
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	69fa      	ldr	r2, [r7, #28]
 8002a7e:	f002 0203 	and.w	r2, r2, #3
 8002a82:	0092      	lsls	r2, r2, #2
 8002a84:	4093      	lsls	r3, r2
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a8c:	4935      	ldr	r1, [pc, #212]	; (8002b64 <HAL_GPIO_Init+0x2ec>)
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	089b      	lsrs	r3, r3, #2
 8002a92:	3302      	adds	r3, #2
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a9a:	4b38      	ldr	r3, [pc, #224]	; (8002b7c <HAL_GPIO_Init+0x304>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	43db      	mvns	r3, r3
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d003      	beq.n	8002abe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002abe:	4a2f      	ldr	r2, [pc, #188]	; (8002b7c <HAL_GPIO_Init+0x304>)
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002ac4:	4b2d      	ldr	r3, [pc, #180]	; (8002b7c <HAL_GPIO_Init+0x304>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	43db      	mvns	r3, r3
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d003      	beq.n	8002ae8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ae8:	4a24      	ldr	r2, [pc, #144]	; (8002b7c <HAL_GPIO_Init+0x304>)
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002aee:	4b23      	ldr	r3, [pc, #140]	; (8002b7c <HAL_GPIO_Init+0x304>)
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	43db      	mvns	r3, r3
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	4013      	ands	r3, r2
 8002afc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d003      	beq.n	8002b12 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b12:	4a1a      	ldr	r2, [pc, #104]	; (8002b7c <HAL_GPIO_Init+0x304>)
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b18:	4b18      	ldr	r3, [pc, #96]	; (8002b7c <HAL_GPIO_Init+0x304>)
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	43db      	mvns	r3, r3
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	4013      	ands	r3, r2
 8002b26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d003      	beq.n	8002b3c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b3c:	4a0f      	ldr	r2, [pc, #60]	; (8002b7c <HAL_GPIO_Init+0x304>)
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	3301      	adds	r3, #1
 8002b46:	61fb      	str	r3, [r7, #28]
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	2b0f      	cmp	r3, #15
 8002b4c:	f67f aea2 	bls.w	8002894 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b50:	bf00      	nop
 8002b52:	bf00      	nop
 8002b54:	3724      	adds	r7, #36	; 0x24
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	40023800 	.word	0x40023800
 8002b64:	40013800 	.word	0x40013800
 8002b68:	40020000 	.word	0x40020000
 8002b6c:	40020400 	.word	0x40020400
 8002b70:	40020800 	.word	0x40020800
 8002b74:	40020c00 	.word	0x40020c00
 8002b78:	40021000 	.word	0x40021000
 8002b7c:	40013c00 	.word	0x40013c00

08002b80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	460b      	mov	r3, r1
 8002b8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	691a      	ldr	r2, [r3, #16]
 8002b90:	887b      	ldrh	r3, [r7, #2]
 8002b92:	4013      	ands	r3, r2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d002      	beq.n	8002b9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	73fb      	strb	r3, [r7, #15]
 8002b9c:	e001      	b.n	8002ba2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3714      	adds	r7, #20
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	460b      	mov	r3, r1
 8002bba:	807b      	strh	r3, [r7, #2]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bc0:	787b      	ldrb	r3, [r7, #1]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d003      	beq.n	8002bce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bc6:	887a      	ldrh	r2, [r7, #2]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bcc:	e003      	b.n	8002bd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bce:	887b      	ldrh	r3, [r7, #2]
 8002bd0:	041a      	lsls	r2, r3, #16
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	619a      	str	r2, [r3, #24]
}
 8002bd6:	bf00      	nop
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr

08002be2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b085      	sub	sp, #20
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
 8002bea:	460b      	mov	r3, r1
 8002bec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002bf4:	887a      	ldrh	r2, [r7, #2]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	041a      	lsls	r2, r3, #16
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	43d9      	mvns	r1, r3
 8002c00:	887b      	ldrh	r3, [r7, #2]
 8002c02:	400b      	ands	r3, r1
 8002c04:	431a      	orrs	r2, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	619a      	str	r2, [r3, #24]
}
 8002c0a:	bf00      	nop
 8002c0c:	3714      	adds	r7, #20
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
	...

08002c18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	4603      	mov	r3, r0
 8002c20:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002c22:	4b08      	ldr	r3, [pc, #32]	; (8002c44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c24:	695a      	ldr	r2, [r3, #20]
 8002c26:	88fb      	ldrh	r3, [r7, #6]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d006      	beq.n	8002c3c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c2e:	4a05      	ldr	r2, [pc, #20]	; (8002c44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c30:	88fb      	ldrh	r3, [r7, #6]
 8002c32:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c34:	88fb      	ldrh	r3, [r7, #6]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f000 f806 	bl	8002c48 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c3c:	bf00      	nop
 8002c3e:	3708      	adds	r7, #8
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	40013c00 	.word	0x40013c00

08002c48 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	4603      	mov	r3, r0
 8002c50:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002c52:	bf00      	nop
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
	...

08002c60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e12b      	b.n	8002eca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d106      	bne.n	8002c8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f7ff f954 	bl	8001f34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2224      	movs	r2, #36	; 0x24
 8002c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f022 0201 	bic.w	r2, r2, #1
 8002ca2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cb2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002cc2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002cc4:	f001 fcac 	bl	8004620 <HAL_RCC_GetPCLK1Freq>
 8002cc8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	4a81      	ldr	r2, [pc, #516]	; (8002ed4 <HAL_I2C_Init+0x274>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d807      	bhi.n	8002ce4 <HAL_I2C_Init+0x84>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	4a80      	ldr	r2, [pc, #512]	; (8002ed8 <HAL_I2C_Init+0x278>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	bf94      	ite	ls
 8002cdc:	2301      	movls	r3, #1
 8002cde:	2300      	movhi	r3, #0
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	e006      	b.n	8002cf2 <HAL_I2C_Init+0x92>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	4a7d      	ldr	r2, [pc, #500]	; (8002edc <HAL_I2C_Init+0x27c>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	bf94      	ite	ls
 8002cec:	2301      	movls	r3, #1
 8002cee:	2300      	movhi	r3, #0
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e0e7      	b.n	8002eca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	4a78      	ldr	r2, [pc, #480]	; (8002ee0 <HAL_I2C_Init+0x280>)
 8002cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002d02:	0c9b      	lsrs	r3, r3, #18
 8002d04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68ba      	ldr	r2, [r7, #8]
 8002d16:	430a      	orrs	r2, r1
 8002d18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	6a1b      	ldr	r3, [r3, #32]
 8002d20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	4a6a      	ldr	r2, [pc, #424]	; (8002ed4 <HAL_I2C_Init+0x274>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d802      	bhi.n	8002d34 <HAL_I2C_Init+0xd4>
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	3301      	adds	r3, #1
 8002d32:	e009      	b.n	8002d48 <HAL_I2C_Init+0xe8>
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d3a:	fb02 f303 	mul.w	r3, r2, r3
 8002d3e:	4a69      	ldr	r2, [pc, #420]	; (8002ee4 <HAL_I2C_Init+0x284>)
 8002d40:	fba2 2303 	umull	r2, r3, r2, r3
 8002d44:	099b      	lsrs	r3, r3, #6
 8002d46:	3301      	adds	r3, #1
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	6812      	ldr	r2, [r2, #0]
 8002d4c:	430b      	orrs	r3, r1
 8002d4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	69db      	ldr	r3, [r3, #28]
 8002d56:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d5a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	495c      	ldr	r1, [pc, #368]	; (8002ed4 <HAL_I2C_Init+0x274>)
 8002d64:	428b      	cmp	r3, r1
 8002d66:	d819      	bhi.n	8002d9c <HAL_I2C_Init+0x13c>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	1e59      	subs	r1, r3, #1
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d76:	1c59      	adds	r1, r3, #1
 8002d78:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d7c:	400b      	ands	r3, r1
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00a      	beq.n	8002d98 <HAL_I2C_Init+0x138>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	1e59      	subs	r1, r3, #1
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d90:	3301      	adds	r3, #1
 8002d92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d96:	e051      	b.n	8002e3c <HAL_I2C_Init+0x1dc>
 8002d98:	2304      	movs	r3, #4
 8002d9a:	e04f      	b.n	8002e3c <HAL_I2C_Init+0x1dc>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d111      	bne.n	8002dc8 <HAL_I2C_Init+0x168>
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	1e58      	subs	r0, r3, #1
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6859      	ldr	r1, [r3, #4]
 8002dac:	460b      	mov	r3, r1
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	440b      	add	r3, r1
 8002db2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002db6:	3301      	adds	r3, #1
 8002db8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	bf0c      	ite	eq
 8002dc0:	2301      	moveq	r3, #1
 8002dc2:	2300      	movne	r3, #0
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	e012      	b.n	8002dee <HAL_I2C_Init+0x18e>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	1e58      	subs	r0, r3, #1
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6859      	ldr	r1, [r3, #4]
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	440b      	add	r3, r1
 8002dd6:	0099      	lsls	r1, r3, #2
 8002dd8:	440b      	add	r3, r1
 8002dda:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dde:	3301      	adds	r3, #1
 8002de0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	bf0c      	ite	eq
 8002de8:	2301      	moveq	r3, #1
 8002dea:	2300      	movne	r3, #0
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <HAL_I2C_Init+0x196>
 8002df2:	2301      	movs	r3, #1
 8002df4:	e022      	b.n	8002e3c <HAL_I2C_Init+0x1dc>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d10e      	bne.n	8002e1c <HAL_I2C_Init+0x1bc>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	1e58      	subs	r0, r3, #1
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6859      	ldr	r1, [r3, #4]
 8002e06:	460b      	mov	r3, r1
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	440b      	add	r3, r1
 8002e0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e10:	3301      	adds	r3, #1
 8002e12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e1a:	e00f      	b.n	8002e3c <HAL_I2C_Init+0x1dc>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	1e58      	subs	r0, r3, #1
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6859      	ldr	r1, [r3, #4]
 8002e24:	460b      	mov	r3, r1
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	440b      	add	r3, r1
 8002e2a:	0099      	lsls	r1, r3, #2
 8002e2c:	440b      	add	r3, r1
 8002e2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e32:	3301      	adds	r3, #1
 8002e34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e3c:	6879      	ldr	r1, [r7, #4]
 8002e3e:	6809      	ldr	r1, [r1, #0]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	69da      	ldr	r2, [r3, #28]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a1b      	ldr	r3, [r3, #32]
 8002e56:	431a      	orrs	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	6911      	ldr	r1, [r2, #16]
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	68d2      	ldr	r2, [r2, #12]
 8002e76:	4311      	orrs	r1, r2
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	6812      	ldr	r2, [r2, #0]
 8002e7c:	430b      	orrs	r3, r1
 8002e7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	695a      	ldr	r2, [r3, #20]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	431a      	orrs	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f042 0201 	orr.w	r2, r2, #1
 8002eaa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2220      	movs	r2, #32
 8002eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3710      	adds	r7, #16
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	000186a0 	.word	0x000186a0
 8002ed8:	001e847f 	.word	0x001e847f
 8002edc:	003d08ff 	.word	0x003d08ff
 8002ee0:	431bde83 	.word	0x431bde83
 8002ee4:	10624dd3 	.word	0x10624dd3

08002ee8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b088      	sub	sp, #32
 8002eec:	af02      	add	r7, sp, #8
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	607a      	str	r2, [r7, #4]
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	817b      	strh	r3, [r7, #10]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002efc:	f7ff fb18 	bl	8002530 <HAL_GetTick>
 8002f00:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b20      	cmp	r3, #32
 8002f0c:	f040 80e0 	bne.w	80030d0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	9300      	str	r3, [sp, #0]
 8002f14:	2319      	movs	r3, #25
 8002f16:	2201      	movs	r2, #1
 8002f18:	4970      	ldr	r1, [pc, #448]	; (80030dc <HAL_I2C_Master_Transmit+0x1f4>)
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f000 fdac 	bl	8003a78 <I2C_WaitOnFlagUntilTimeout>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d001      	beq.n	8002f2a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002f26:	2302      	movs	r3, #2
 8002f28:	e0d3      	b.n	80030d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d101      	bne.n	8002f38 <HAL_I2C_Master_Transmit+0x50>
 8002f34:	2302      	movs	r3, #2
 8002f36:	e0cc      	b.n	80030d2 <HAL_I2C_Master_Transmit+0x1ea>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d007      	beq.n	8002f5e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f042 0201 	orr.w	r2, r2, #1
 8002f5c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f6c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2221      	movs	r2, #33	; 0x21
 8002f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2210      	movs	r2, #16
 8002f7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	893a      	ldrh	r2, [r7, #8]
 8002f8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f94:	b29a      	uxth	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	4a50      	ldr	r2, [pc, #320]	; (80030e0 <HAL_I2C_Master_Transmit+0x1f8>)
 8002f9e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002fa0:	8979      	ldrh	r1, [r7, #10]
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	6a3a      	ldr	r2, [r7, #32]
 8002fa6:	68f8      	ldr	r0, [r7, #12]
 8002fa8:	f000 fc3c 	bl	8003824 <I2C_MasterRequestWrite>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e08d      	b.n	80030d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	613b      	str	r3, [r7, #16]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	695b      	ldr	r3, [r3, #20]
 8002fc0:	613b      	str	r3, [r7, #16]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	613b      	str	r3, [r7, #16]
 8002fca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002fcc:	e066      	b.n	800309c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fce:	697a      	ldr	r2, [r7, #20]
 8002fd0:	6a39      	ldr	r1, [r7, #32]
 8002fd2:	68f8      	ldr	r0, [r7, #12]
 8002fd4:	f000 fe26 	bl	8003c24 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00d      	beq.n	8002ffa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe2:	2b04      	cmp	r3, #4
 8002fe4:	d107      	bne.n	8002ff6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ff4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e06b      	b.n	80030d2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffe:	781a      	ldrb	r2, [r3, #0]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300a:	1c5a      	adds	r2, r3, #1
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003014:	b29b      	uxth	r3, r3
 8003016:	3b01      	subs	r3, #1
 8003018:	b29a      	uxth	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003022:	3b01      	subs	r3, #1
 8003024:	b29a      	uxth	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	695b      	ldr	r3, [r3, #20]
 8003030:	f003 0304 	and.w	r3, r3, #4
 8003034:	2b04      	cmp	r3, #4
 8003036:	d11b      	bne.n	8003070 <HAL_I2C_Master_Transmit+0x188>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800303c:	2b00      	cmp	r3, #0
 800303e:	d017      	beq.n	8003070 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003044:	781a      	ldrb	r2, [r3, #0]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003050:	1c5a      	adds	r2, r3, #1
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800305a:	b29b      	uxth	r3, r3
 800305c:	3b01      	subs	r3, #1
 800305e:	b29a      	uxth	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003068:	3b01      	subs	r3, #1
 800306a:	b29a      	uxth	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003070:	697a      	ldr	r2, [r7, #20]
 8003072:	6a39      	ldr	r1, [r7, #32]
 8003074:	68f8      	ldr	r0, [r7, #12]
 8003076:	f000 fe16 	bl	8003ca6 <I2C_WaitOnBTFFlagUntilTimeout>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d00d      	beq.n	800309c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003084:	2b04      	cmp	r3, #4
 8003086:	d107      	bne.n	8003098 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003096:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e01a      	b.n	80030d2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d194      	bne.n	8002fce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2220      	movs	r2, #32
 80030b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80030cc:	2300      	movs	r3, #0
 80030ce:	e000      	b.n	80030d2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80030d0:	2302      	movs	r3, #2
  }
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3718      	adds	r7, #24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	00100002 	.word	0x00100002
 80030e0:	ffff0000 	.word	0xffff0000

080030e4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b08a      	sub	sp, #40	; 0x28
 80030e8:	af02      	add	r7, sp, #8
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	607a      	str	r2, [r7, #4]
 80030ee:	603b      	str	r3, [r7, #0]
 80030f0:	460b      	mov	r3, r1
 80030f2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80030f4:	f7ff fa1c 	bl	8002530 <HAL_GetTick>
 80030f8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80030fa:	2301      	movs	r3, #1
 80030fc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b20      	cmp	r3, #32
 8003108:	f040 8111 	bne.w	800332e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	9300      	str	r3, [sp, #0]
 8003110:	2319      	movs	r3, #25
 8003112:	2201      	movs	r2, #1
 8003114:	4988      	ldr	r1, [pc, #544]	; (8003338 <HAL_I2C_IsDeviceReady+0x254>)
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f000 fcae 	bl	8003a78 <I2C_WaitOnFlagUntilTimeout>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003122:	2302      	movs	r3, #2
 8003124:	e104      	b.n	8003330 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800312c:	2b01      	cmp	r3, #1
 800312e:	d101      	bne.n	8003134 <HAL_I2C_IsDeviceReady+0x50>
 8003130:	2302      	movs	r3, #2
 8003132:	e0fd      	b.n	8003330 <HAL_I2C_IsDeviceReady+0x24c>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	2b01      	cmp	r3, #1
 8003148:	d007      	beq.n	800315a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f042 0201 	orr.w	r2, r2, #1
 8003158:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003168:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2224      	movs	r2, #36	; 0x24
 800316e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	4a70      	ldr	r2, [pc, #448]	; (800333c <HAL_I2C_IsDeviceReady+0x258>)
 800317c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800318c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	9300      	str	r3, [sp, #0]
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	2200      	movs	r2, #0
 8003196:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800319a:	68f8      	ldr	r0, [r7, #12]
 800319c:	f000 fc6c 	bl	8003a78 <I2C_WaitOnFlagUntilTimeout>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00d      	beq.n	80031c2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031b4:	d103      	bne.n	80031be <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031bc:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e0b6      	b.n	8003330 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80031c2:	897b      	ldrh	r3, [r7, #10]
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	461a      	mov	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80031d0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80031d2:	f7ff f9ad 	bl	8002530 <HAL_GetTick>
 80031d6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	bf0c      	ite	eq
 80031e6:	2301      	moveq	r3, #1
 80031e8:	2300      	movne	r3, #0
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	695b      	ldr	r3, [r3, #20]
 80031f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031fc:	bf0c      	ite	eq
 80031fe:	2301      	moveq	r3, #1
 8003200:	2300      	movne	r3, #0
 8003202:	b2db      	uxtb	r3, r3
 8003204:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003206:	e025      	b.n	8003254 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003208:	f7ff f992 	bl	8002530 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	683a      	ldr	r2, [r7, #0]
 8003214:	429a      	cmp	r2, r3
 8003216:	d302      	bcc.n	800321e <HAL_I2C_IsDeviceReady+0x13a>
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d103      	bne.n	8003226 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	22a0      	movs	r2, #160	; 0xa0
 8003222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	695b      	ldr	r3, [r3, #20]
 800322c:	f003 0302 	and.w	r3, r3, #2
 8003230:	2b02      	cmp	r3, #2
 8003232:	bf0c      	ite	eq
 8003234:	2301      	moveq	r3, #1
 8003236:	2300      	movne	r3, #0
 8003238:	b2db      	uxtb	r3, r3
 800323a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003246:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800324a:	bf0c      	ite	eq
 800324c:	2301      	moveq	r3, #1
 800324e:	2300      	movne	r3, #0
 8003250:	b2db      	uxtb	r3, r3
 8003252:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800325a:	b2db      	uxtb	r3, r3
 800325c:	2ba0      	cmp	r3, #160	; 0xa0
 800325e:	d005      	beq.n	800326c <HAL_I2C_IsDeviceReady+0x188>
 8003260:	7dfb      	ldrb	r3, [r7, #23]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d102      	bne.n	800326c <HAL_I2C_IsDeviceReady+0x188>
 8003266:	7dbb      	ldrb	r3, [r7, #22]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d0cd      	beq.n	8003208 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2220      	movs	r2, #32
 8003270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b02      	cmp	r3, #2
 8003280:	d129      	bne.n	80032d6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003290:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003292:	2300      	movs	r3, #0
 8003294:	613b      	str	r3, [r7, #16]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	613b      	str	r3, [r7, #16]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	613b      	str	r3, [r7, #16]
 80032a6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	9300      	str	r3, [sp, #0]
 80032ac:	2319      	movs	r3, #25
 80032ae:	2201      	movs	r2, #1
 80032b0:	4921      	ldr	r1, [pc, #132]	; (8003338 <HAL_I2C_IsDeviceReady+0x254>)
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f000 fbe0 	bl	8003a78 <I2C_WaitOnFlagUntilTimeout>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e036      	b.n	8003330 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2220      	movs	r2, #32
 80032c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80032d2:	2300      	movs	r3, #0
 80032d4:	e02c      	b.n	8003330 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032e4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032ee:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	9300      	str	r3, [sp, #0]
 80032f4:	2319      	movs	r3, #25
 80032f6:	2201      	movs	r2, #1
 80032f8:	490f      	ldr	r1, [pc, #60]	; (8003338 <HAL_I2C_IsDeviceReady+0x254>)
 80032fa:	68f8      	ldr	r0, [r7, #12]
 80032fc:	f000 fbbc 	bl	8003a78 <I2C_WaitOnFlagUntilTimeout>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e012      	b.n	8003330 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	3301      	adds	r3, #1
 800330e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	429a      	cmp	r2, r3
 8003316:	f4ff af32 	bcc.w	800317e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2220      	movs	r2, #32
 800331e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e000      	b.n	8003330 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800332e:	2302      	movs	r3, #2
  }
}
 8003330:	4618      	mov	r0, r3
 8003332:	3720      	adds	r7, #32
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	00100002 	.word	0x00100002
 800333c:	ffff0000 	.word	0xffff0000

08003340 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b08a      	sub	sp, #40	; 0x28
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003358:	2300      	movs	r3, #0
 800335a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003362:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003364:	6a3b      	ldr	r3, [r7, #32]
 8003366:	0a1b      	lsrs	r3, r3, #8
 8003368:	f003 0301 	and.w	r3, r3, #1
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00e      	beq.n	800338e <HAL_I2C_ER_IRQHandler+0x4e>
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	0a1b      	lsrs	r3, r3, #8
 8003374:	f003 0301 	and.w	r3, r3, #1
 8003378:	2b00      	cmp	r3, #0
 800337a:	d008      	beq.n	800338e <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800337c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337e:	f043 0301 	orr.w	r3, r3, #1
 8003382:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800338c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800338e:	6a3b      	ldr	r3, [r7, #32]
 8003390:	0a5b      	lsrs	r3, r3, #9
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00e      	beq.n	80033b8 <HAL_I2C_ER_IRQHandler+0x78>
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	0a1b      	lsrs	r3, r3, #8
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d008      	beq.n	80033b8 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80033a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a8:	f043 0302 	orr.w	r3, r3, #2
 80033ac:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80033b6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80033b8:	6a3b      	ldr	r3, [r7, #32]
 80033ba:	0a9b      	lsrs	r3, r3, #10
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d03f      	beq.n	8003444 <HAL_I2C_ER_IRQHandler+0x104>
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	0a1b      	lsrs	r3, r3, #8
 80033c8:	f003 0301 	and.w	r3, r3, #1
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d039      	beq.n	8003444 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80033d0:	7efb      	ldrb	r3, [r7, #27]
 80033d2:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d8:	b29b      	uxth	r3, r3
 80033da:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033e2:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e8:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80033ea:	7ebb      	ldrb	r3, [r7, #26]
 80033ec:	2b20      	cmp	r3, #32
 80033ee:	d112      	bne.n	8003416 <HAL_I2C_ER_IRQHandler+0xd6>
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d10f      	bne.n	8003416 <HAL_I2C_ER_IRQHandler+0xd6>
 80033f6:	7cfb      	ldrb	r3, [r7, #19]
 80033f8:	2b21      	cmp	r3, #33	; 0x21
 80033fa:	d008      	beq.n	800340e <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80033fc:	7cfb      	ldrb	r3, [r7, #19]
 80033fe:	2b29      	cmp	r3, #41	; 0x29
 8003400:	d005      	beq.n	800340e <HAL_I2C_ER_IRQHandler+0xce>
 8003402:	7cfb      	ldrb	r3, [r7, #19]
 8003404:	2b28      	cmp	r3, #40	; 0x28
 8003406:	d106      	bne.n	8003416 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2b21      	cmp	r3, #33	; 0x21
 800340c:	d103      	bne.n	8003416 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 f866 	bl	80034e0 <I2C_Slave_AF>
 8003414:	e016      	b.n	8003444 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800341e:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003422:	f043 0304 	orr.w	r3, r3, #4
 8003426:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003428:	7efb      	ldrb	r3, [r7, #27]
 800342a:	2b10      	cmp	r3, #16
 800342c:	d002      	beq.n	8003434 <HAL_I2C_ER_IRQHandler+0xf4>
 800342e:	7efb      	ldrb	r3, [r7, #27]
 8003430:	2b40      	cmp	r3, #64	; 0x40
 8003432:	d107      	bne.n	8003444 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003442:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003444:	6a3b      	ldr	r3, [r7, #32]
 8003446:	0adb      	lsrs	r3, r3, #11
 8003448:	f003 0301 	and.w	r3, r3, #1
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00e      	beq.n	800346e <HAL_I2C_ER_IRQHandler+0x12e>
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	0a1b      	lsrs	r3, r3, #8
 8003454:	f003 0301 	and.w	r3, r3, #1
 8003458:	2b00      	cmp	r3, #0
 800345a:	d008      	beq.n	800346e <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800345c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345e:	f043 0308 	orr.w	r3, r3, #8
 8003462:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800346c:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800346e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003470:	2b00      	cmp	r3, #0
 8003472:	d008      	beq.n	8003486 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347a:	431a      	orrs	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f000 f89d 	bl	80035c0 <I2C_ITError>
  }
}
 8003486:	bf00      	nop
 8003488:	3728      	adds	r7, #40	; 0x28
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800348e:	b480      	push	{r7}
 8003490:	b083      	sub	sp, #12
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003496:	bf00      	nop
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr

080034a2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034a2:	b480      	push	{r7}
 80034a4:	b083      	sub	sp, #12
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80034aa:	bf00      	nop
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr

080034b6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80034b6:	b480      	push	{r7}
 80034b8:	b083      	sub	sp, #12
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80034be:	bf00      	nop
 80034c0:	370c      	adds	r7, #12
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr

080034ca <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034ca:	b480      	push	{r7}
 80034cc:	b083      	sub	sp, #12
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80034d2:	bf00      	nop
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
	...

080034e0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ee:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	2b08      	cmp	r3, #8
 80034fa:	d002      	beq.n	8003502 <I2C_Slave_AF+0x22>
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	2b20      	cmp	r3, #32
 8003500:	d129      	bne.n	8003556 <I2C_Slave_AF+0x76>
 8003502:	7bfb      	ldrb	r3, [r7, #15]
 8003504:	2b28      	cmp	r3, #40	; 0x28
 8003506:	d126      	bne.n	8003556 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a2c      	ldr	r2, [pc, #176]	; (80035bc <I2C_Slave_AF+0xdc>)
 800350c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	685a      	ldr	r2, [r3, #4]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800351c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003526:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003536:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2220      	movs	r2, #32
 8003542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f7ff ffa7 	bl	80034a2 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003554:	e02e      	b.n	80035b4 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003556:	7bfb      	ldrb	r3, [r7, #15]
 8003558:	2b21      	cmp	r3, #33	; 0x21
 800355a:	d126      	bne.n	80035aa <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a17      	ldr	r2, [pc, #92]	; (80035bc <I2C_Slave_AF+0xdc>)
 8003560:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2221      	movs	r2, #33	; 0x21
 8003566:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2220      	movs	r2, #32
 800356c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	685a      	ldr	r2, [r3, #4]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003586:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003590:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035a0:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f7ff ff73 	bl	800348e <HAL_I2C_SlaveTxCpltCallback>
}
 80035a8:	e004      	b.n	80035b4 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035b2:	615a      	str	r2, [r3, #20]
}
 80035b4:	bf00      	nop
 80035b6:	3710      	adds	r7, #16
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	ffff0000 	.word	0xffff0000

080035c0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035ce:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035d6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80035d8:	7bbb      	ldrb	r3, [r7, #14]
 80035da:	2b10      	cmp	r3, #16
 80035dc:	d002      	beq.n	80035e4 <I2C_ITError+0x24>
 80035de:	7bbb      	ldrb	r3, [r7, #14]
 80035e0:	2b40      	cmp	r3, #64	; 0x40
 80035e2:	d10a      	bne.n	80035fa <I2C_ITError+0x3a>
 80035e4:	7bfb      	ldrb	r3, [r7, #15]
 80035e6:	2b22      	cmp	r3, #34	; 0x22
 80035e8:	d107      	bne.n	80035fa <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035f8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80035fa:	7bfb      	ldrb	r3, [r7, #15]
 80035fc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003600:	2b28      	cmp	r3, #40	; 0x28
 8003602:	d107      	bne.n	8003614 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2228      	movs	r2, #40	; 0x28
 800360e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003612:	e015      	b.n	8003640 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800361e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003622:	d00a      	beq.n	800363a <I2C_ITError+0x7a>
 8003624:	7bfb      	ldrb	r3, [r7, #15]
 8003626:	2b60      	cmp	r3, #96	; 0x60
 8003628:	d007      	beq.n	800363a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2220      	movs	r2, #32
 800362e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800364a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800364e:	d162      	bne.n	8003716 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	685a      	ldr	r2, [r3, #4]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800365e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003664:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b01      	cmp	r3, #1
 800366c:	d020      	beq.n	80036b0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003672:	4a6a      	ldr	r2, [pc, #424]	; (800381c <I2C_ITError+0x25c>)
 8003674:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800367a:	4618      	mov	r0, r3
 800367c:	f7ff f8da 	bl	8002834 <HAL_DMA_Abort_IT>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	f000 8089 	beq.w	800379a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f022 0201 	bic.w	r2, r2, #1
 8003696:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2220      	movs	r2, #32
 800369c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80036aa:	4610      	mov	r0, r2
 80036ac:	4798      	blx	r3
 80036ae:	e074      	b.n	800379a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b4:	4a59      	ldr	r2, [pc, #356]	; (800381c <I2C_ITError+0x25c>)
 80036b6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036bc:	4618      	mov	r0, r3
 80036be:	f7ff f8b9 	bl	8002834 <HAL_DMA_Abort_IT>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d068      	beq.n	800379a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d2:	2b40      	cmp	r3, #64	; 0x40
 80036d4:	d10b      	bne.n	80036ee <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	691a      	ldr	r2, [r3, #16]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e0:	b2d2      	uxtb	r2, r2
 80036e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e8:	1c5a      	adds	r2, r3, #1
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f022 0201 	bic.w	r2, r2, #1
 80036fc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2220      	movs	r2, #32
 8003702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800370a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003710:	4610      	mov	r0, r2
 8003712:	4798      	blx	r3
 8003714:	e041      	b.n	800379a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800371c:	b2db      	uxtb	r3, r3
 800371e:	2b60      	cmp	r3, #96	; 0x60
 8003720:	d125      	bne.n	800376e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2220      	movs	r2, #32
 8003726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800373a:	2b40      	cmp	r3, #64	; 0x40
 800373c:	d10b      	bne.n	8003756 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	691a      	ldr	r2, [r3, #16]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003748:	b2d2      	uxtb	r2, r2
 800374a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003750:	1c5a      	adds	r2, r3, #1
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f022 0201 	bic.w	r2, r2, #1
 8003764:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f7ff feaf 	bl	80034ca <HAL_I2C_AbortCpltCallback>
 800376c:	e015      	b.n	800379a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	695b      	ldr	r3, [r3, #20]
 8003774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003778:	2b40      	cmp	r3, #64	; 0x40
 800377a:	d10b      	bne.n	8003794 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	691a      	ldr	r2, [r3, #16]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003786:	b2d2      	uxtb	r2, r2
 8003788:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378e:	1c5a      	adds	r2, r3, #1
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f7ff fe8e 	bl	80034b6 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d10e      	bne.n	80037c8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d109      	bne.n	80037c8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d104      	bne.n	80037c8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d007      	beq.n	80037d8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	685a      	ldr	r2, [r3, #4]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037d6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037de:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e4:	f003 0304 	and.w	r3, r3, #4
 80037e8:	2b04      	cmp	r3, #4
 80037ea:	d113      	bne.n	8003814 <I2C_ITError+0x254>
 80037ec:	7bfb      	ldrb	r3, [r7, #15]
 80037ee:	2b28      	cmp	r3, #40	; 0x28
 80037f0:	d110      	bne.n	8003814 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a0a      	ldr	r2, [pc, #40]	; (8003820 <I2C_ITError+0x260>)
 80037f6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2220      	movs	r2, #32
 8003802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f7ff fe47 	bl	80034a2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003814:	bf00      	nop
 8003816:	3710      	adds	r7, #16
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	08003929 	.word	0x08003929
 8003820:	ffff0000 	.word	0xffff0000

08003824 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b088      	sub	sp, #32
 8003828:	af02      	add	r7, sp, #8
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	607a      	str	r2, [r7, #4]
 800382e:	603b      	str	r3, [r7, #0]
 8003830:	460b      	mov	r3, r1
 8003832:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003838:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	2b08      	cmp	r3, #8
 800383e:	d006      	beq.n	800384e <I2C_MasterRequestWrite+0x2a>
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	2b01      	cmp	r3, #1
 8003844:	d003      	beq.n	800384e <I2C_MasterRequestWrite+0x2a>
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800384c:	d108      	bne.n	8003860 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800385c:	601a      	str	r2, [r3, #0]
 800385e:	e00b      	b.n	8003878 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003864:	2b12      	cmp	r3, #18
 8003866:	d107      	bne.n	8003878 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003876:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	9300      	str	r3, [sp, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f000 f8f7 	bl	8003a78 <I2C_WaitOnFlagUntilTimeout>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d00d      	beq.n	80038ac <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800389a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800389e:	d103      	bne.n	80038a8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e035      	b.n	8003918 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038b4:	d108      	bne.n	80038c8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80038b6:	897b      	ldrh	r3, [r7, #10]
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	461a      	mov	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80038c4:	611a      	str	r2, [r3, #16]
 80038c6:	e01b      	b.n	8003900 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80038c8:	897b      	ldrh	r3, [r7, #10]
 80038ca:	11db      	asrs	r3, r3, #7
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	f003 0306 	and.w	r3, r3, #6
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	f063 030f 	orn	r3, r3, #15
 80038d8:	b2da      	uxtb	r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	490e      	ldr	r1, [pc, #56]	; (8003920 <I2C_MasterRequestWrite+0xfc>)
 80038e6:	68f8      	ldr	r0, [r7, #12]
 80038e8:	f000 f91d 	bl	8003b26 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e010      	b.n	8003918 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80038f6:	897b      	ldrh	r3, [r7, #10]
 80038f8:	b2da      	uxtb	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	4907      	ldr	r1, [pc, #28]	; (8003924 <I2C_MasterRequestWrite+0x100>)
 8003906:	68f8      	ldr	r0, [r7, #12]
 8003908:	f000 f90d 	bl	8003b26 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e000      	b.n	8003918 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003916:	2300      	movs	r3, #0
}
 8003918:	4618      	mov	r0, r3
 800391a:	3718      	adds	r7, #24
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}
 8003920:	00010008 	.word	0x00010008
 8003924:	00010002 	.word	0x00010002

08003928 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b086      	sub	sp, #24
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003930:	2300      	movs	r3, #0
 8003932:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003938:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003940:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003942:	4b4b      	ldr	r3, [pc, #300]	; (8003a70 <I2C_DMAAbort+0x148>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	08db      	lsrs	r3, r3, #3
 8003948:	4a4a      	ldr	r2, [pc, #296]	; (8003a74 <I2C_DMAAbort+0x14c>)
 800394a:	fba2 2303 	umull	r2, r3, r2, r3
 800394e:	0a1a      	lsrs	r2, r3, #8
 8003950:	4613      	mov	r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	4413      	add	r3, r2
 8003956:	00da      	lsls	r2, r3, #3
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d106      	bne.n	8003970 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003966:	f043 0220 	orr.w	r2, r3, #32
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800396e:	e00a      	b.n	8003986 <I2C_DMAAbort+0x5e>
    }
    count--;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	3b01      	subs	r3, #1
 8003974:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003980:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003984:	d0ea      	beq.n	800395c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800398a:	2b00      	cmp	r3, #0
 800398c:	d003      	beq.n	8003996 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003992:	2200      	movs	r2, #0
 8003994:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800399a:	2b00      	cmp	r3, #0
 800399c:	d003      	beq.n	80039a6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a2:	2200      	movs	r2, #0
 80039a4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039b4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	2200      	movs	r2, #0
 80039ba:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d003      	beq.n	80039cc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039c8:	2200      	movs	r2, #0
 80039ca:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d003      	beq.n	80039dc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d8:	2200      	movs	r2, #0
 80039da:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f022 0201 	bic.w	r2, r2, #1
 80039ea:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	2b60      	cmp	r3, #96	; 0x60
 80039f6:	d10e      	bne.n	8003a16 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	2220      	movs	r2, #32
 80039fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003a0e:	6978      	ldr	r0, [r7, #20]
 8003a10:	f7ff fd5b 	bl	80034ca <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003a14:	e027      	b.n	8003a66 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003a16:	7cfb      	ldrb	r3, [r7, #19]
 8003a18:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003a1c:	2b28      	cmp	r3, #40	; 0x28
 8003a1e:	d117      	bne.n	8003a50 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f042 0201 	orr.w	r2, r2, #1
 8003a2e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a3e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	2200      	movs	r2, #0
 8003a44:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	2228      	movs	r2, #40	; 0x28
 8003a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003a4e:	e007      	b.n	8003a60 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	2220      	movs	r2, #32
 8003a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003a60:	6978      	ldr	r0, [r7, #20]
 8003a62:	f7ff fd28 	bl	80034b6 <HAL_I2C_ErrorCallback>
}
 8003a66:	bf00      	nop
 8003a68:	3718      	adds	r7, #24
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	2000001c 	.word	0x2000001c
 8003a74:	14f8b589 	.word	0x14f8b589

08003a78 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	603b      	str	r3, [r7, #0]
 8003a84:	4613      	mov	r3, r2
 8003a86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a88:	e025      	b.n	8003ad6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a90:	d021      	beq.n	8003ad6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a92:	f7fe fd4d 	bl	8002530 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	683a      	ldr	r2, [r7, #0]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d302      	bcc.n	8003aa8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d116      	bne.n	8003ad6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2220      	movs	r2, #32
 8003ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac2:	f043 0220 	orr.w	r2, r3, #32
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e023      	b.n	8003b1e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	0c1b      	lsrs	r3, r3, #16
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d10d      	bne.n	8003afc <I2C_WaitOnFlagUntilTimeout+0x84>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	43da      	mvns	r2, r3
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	4013      	ands	r3, r2
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	bf0c      	ite	eq
 8003af2:	2301      	moveq	r3, #1
 8003af4:	2300      	movne	r3, #0
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	461a      	mov	r2, r3
 8003afa:	e00c      	b.n	8003b16 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	43da      	mvns	r2, r3
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	4013      	ands	r3, r2
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	bf0c      	ite	eq
 8003b0e:	2301      	moveq	r3, #1
 8003b10:	2300      	movne	r3, #0
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	461a      	mov	r2, r3
 8003b16:	79fb      	ldrb	r3, [r7, #7]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d0b6      	beq.n	8003a8a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3710      	adds	r7, #16
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003b26:	b580      	push	{r7, lr}
 8003b28:	b084      	sub	sp, #16
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	60f8      	str	r0, [r7, #12]
 8003b2e:	60b9      	str	r1, [r7, #8]
 8003b30:	607a      	str	r2, [r7, #4]
 8003b32:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b34:	e051      	b.n	8003bda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	695b      	ldr	r3, [r3, #20]
 8003b3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b44:	d123      	bne.n	8003b8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b54:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b5e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2220      	movs	r2, #32
 8003b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7a:	f043 0204 	orr.w	r2, r3, #4
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e046      	b.n	8003c1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b94:	d021      	beq.n	8003bda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b96:	f7fe fccb 	bl	8002530 <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d302      	bcc.n	8003bac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d116      	bne.n	8003bda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2220      	movs	r2, #32
 8003bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc6:	f043 0220 	orr.w	r2, r3, #32
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e020      	b.n	8003c1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	0c1b      	lsrs	r3, r3, #16
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d10c      	bne.n	8003bfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	43da      	mvns	r2, r3
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	4013      	ands	r3, r2
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	bf14      	ite	ne
 8003bf6:	2301      	movne	r3, #1
 8003bf8:	2300      	moveq	r3, #0
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	e00b      	b.n	8003c16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	43da      	mvns	r2, r3
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	4013      	ands	r3, r2
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	bf14      	ite	ne
 8003c10:	2301      	movne	r3, #1
 8003c12:	2300      	moveq	r3, #0
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d18d      	bne.n	8003b36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3710      	adds	r7, #16
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c30:	e02d      	b.n	8003c8e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c32:	68f8      	ldr	r0, [r7, #12]
 8003c34:	f000 f878 	bl	8003d28 <I2C_IsAcknowledgeFailed>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d001      	beq.n	8003c42 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e02d      	b.n	8003c9e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c48:	d021      	beq.n	8003c8e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c4a:	f7fe fc71 	bl	8002530 <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	68ba      	ldr	r2, [r7, #8]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d302      	bcc.n	8003c60 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d116      	bne.n	8003c8e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2220      	movs	r2, #32
 8003c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7a:	f043 0220 	orr.w	r2, r3, #32
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e007      	b.n	8003c9e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	695b      	ldr	r3, [r3, #20]
 8003c94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c98:	2b80      	cmp	r3, #128	; 0x80
 8003c9a:	d1ca      	bne.n	8003c32 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3710      	adds	r7, #16
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b084      	sub	sp, #16
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	60f8      	str	r0, [r7, #12]
 8003cae:	60b9      	str	r1, [r7, #8]
 8003cb0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003cb2:	e02d      	b.n	8003d10 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003cb4:	68f8      	ldr	r0, [r7, #12]
 8003cb6:	f000 f837 	bl	8003d28 <I2C_IsAcknowledgeFailed>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d001      	beq.n	8003cc4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e02d      	b.n	8003d20 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cca:	d021      	beq.n	8003d10 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ccc:	f7fe fc30 	bl	8002530 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	68ba      	ldr	r2, [r7, #8]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d302      	bcc.n	8003ce2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d116      	bne.n	8003d10 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2220      	movs	r2, #32
 8003cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfc:	f043 0220 	orr.w	r2, r3, #32
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e007      	b.n	8003d20 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	f003 0304 	and.w	r3, r3, #4
 8003d1a:	2b04      	cmp	r3, #4
 8003d1c:	d1ca      	bne.n	8003cb4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3710      	adds	r7, #16
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	695b      	ldr	r3, [r3, #20]
 8003d36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d3e:	d11b      	bne.n	8003d78 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d48:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2220      	movs	r2, #32
 8003d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d64:	f043 0204 	orr.w	r2, r3, #4
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e000      	b.n	8003d7a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	370c      	adds	r7, #12
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
	...

08003d88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b086      	sub	sp, #24
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d101      	bne.n	8003d9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e264      	b.n	8004264 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d075      	beq.n	8003e92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003da6:	4ba3      	ldr	r3, [pc, #652]	; (8004034 <HAL_RCC_OscConfig+0x2ac>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f003 030c 	and.w	r3, r3, #12
 8003dae:	2b04      	cmp	r3, #4
 8003db0:	d00c      	beq.n	8003dcc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003db2:	4ba0      	ldr	r3, [pc, #640]	; (8004034 <HAL_RCC_OscConfig+0x2ac>)
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003dba:	2b08      	cmp	r3, #8
 8003dbc:	d112      	bne.n	8003de4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dbe:	4b9d      	ldr	r3, [pc, #628]	; (8004034 <HAL_RCC_OscConfig+0x2ac>)
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dca:	d10b      	bne.n	8003de4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dcc:	4b99      	ldr	r3, [pc, #612]	; (8004034 <HAL_RCC_OscConfig+0x2ac>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d05b      	beq.n	8003e90 <HAL_RCC_OscConfig+0x108>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d157      	bne.n	8003e90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e23f      	b.n	8004264 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dec:	d106      	bne.n	8003dfc <HAL_RCC_OscConfig+0x74>
 8003dee:	4b91      	ldr	r3, [pc, #580]	; (8004034 <HAL_RCC_OscConfig+0x2ac>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a90      	ldr	r2, [pc, #576]	; (8004034 <HAL_RCC_OscConfig+0x2ac>)
 8003df4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003df8:	6013      	str	r3, [r2, #0]
 8003dfa:	e01d      	b.n	8003e38 <HAL_RCC_OscConfig+0xb0>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e04:	d10c      	bne.n	8003e20 <HAL_RCC_OscConfig+0x98>
 8003e06:	4b8b      	ldr	r3, [pc, #556]	; (8004034 <HAL_RCC_OscConfig+0x2ac>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a8a      	ldr	r2, [pc, #552]	; (8004034 <HAL_RCC_OscConfig+0x2ac>)
 8003e0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e10:	6013      	str	r3, [r2, #0]
 8003e12:	4b88      	ldr	r3, [pc, #544]	; (8004034 <HAL_RCC_OscConfig+0x2ac>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a87      	ldr	r2, [pc, #540]	; (8004034 <HAL_RCC_OscConfig+0x2ac>)
 8003e18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e1c:	6013      	str	r3, [r2, #0]
 8003e1e:	e00b      	b.n	8003e38 <HAL_RCC_OscConfig+0xb0>
 8003e20:	4b84      	ldr	r3, [pc, #528]	; (8004034 <HAL_RCC_OscConfig+0x2ac>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a83      	ldr	r2, [pc, #524]	; (8004034 <HAL_RCC_OscConfig+0x2ac>)
 8003e26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e2a:	6013      	str	r3, [r2, #0]
 8003e2c:	4b81      	ldr	r3, [pc, #516]	; (8004034 <HAL_RCC_OscConfig+0x2ac>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a80      	ldr	r2, [pc, #512]	; (8004034 <HAL_RCC_OscConfig+0x2ac>)
 8003e32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d013      	beq.n	8003e68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e40:	f7fe fb76 	bl	8002530 <HAL_GetTick>
 8003e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e46:	e008      	b.n	8003e5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e48:	f7fe fb72 	bl	8002530 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	2b64      	cmp	r3, #100	; 0x64
 8003e54:	d901      	bls.n	8003e5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e204      	b.n	8004264 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e5a:	4b76      	ldr	r3, [pc, #472]	; (8004034 <HAL_RCC_OscConfig+0x2ac>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d0f0      	beq.n	8003e48 <HAL_RCC_OscConfig+0xc0>
 8003e66:	e014      	b.n	8003e92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e68:	f7fe fb62 	bl	8002530 <HAL_GetTick>
 8003e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e6e:	e008      	b.n	8003e82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e70:	f7fe fb5e 	bl	8002530 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b64      	cmp	r3, #100	; 0x64
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e1f0      	b.n	8004264 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e82:	4b6c      	ldr	r3, [pc, #432]	; (8004034 <HAL_RCC_OscConfig+0x2ac>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d1f0      	bne.n	8003e70 <HAL_RCC_OscConfig+0xe8>
 8003e8e:	e000      	b.n	8003e92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0302 	and.w	r3, r3, #2
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d063      	beq.n	8003f66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e9e:	4b65      	ldr	r3, [pc, #404]	; (8004034 <HAL_RCC_OscConfig+0x2ac>)
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f003 030c 	and.w	r3, r3, #12
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00b      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003eaa:	4b62      	ldr	r3, [pc, #392]	; (8004034 <HAL_RCC_OscConfig+0x2ac>)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003eb2:	2b08      	cmp	r3, #8
 8003eb4:	d11c      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003eb6:	4b5f      	ldr	r3, [pc, #380]	; (8004034 <HAL_RCC_OscConfig+0x2ac>)
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d116      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ec2:	4b5c      	ldr	r3, [pc, #368]	; (8004034 <HAL_RCC_OscConfig+0x2ac>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d005      	beq.n	8003eda <HAL_RCC_OscConfig+0x152>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d001      	beq.n	8003eda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e1c4      	b.n	8004264 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eda:	4b56      	ldr	r3, [pc, #344]	; (8004034 <HAL_RCC_OscConfig+0x2ac>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	00db      	lsls	r3, r3, #3
 8003ee8:	4952      	ldr	r1, [pc, #328]	; (8004034 <HAL_RCC_OscConfig+0x2ac>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eee:	e03a      	b.n	8003f66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d020      	beq.n	8003f3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ef8:	4b4f      	ldr	r3, [pc, #316]	; (8004038 <HAL_RCC_OscConfig+0x2b0>)
 8003efa:	2201      	movs	r2, #1
 8003efc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003efe:	f7fe fb17 	bl	8002530 <HAL_GetTick>
 8003f02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f04:	e008      	b.n	8003f18 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f06:	f7fe fb13 	bl	8002530 <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d901      	bls.n	8003f18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e1a5      	b.n	8004264 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f18:	4b46      	ldr	r3, [pc, #280]	; (8004034 <HAL_RCC_OscConfig+0x2ac>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0302 	and.w	r3, r3, #2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d0f0      	beq.n	8003f06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f24:	4b43      	ldr	r3, [pc, #268]	; (8004034 <HAL_RCC_OscConfig+0x2ac>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	00db      	lsls	r3, r3, #3
 8003f32:	4940      	ldr	r1, [pc, #256]	; (8004034 <HAL_RCC_OscConfig+0x2ac>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	600b      	str	r3, [r1, #0]
 8003f38:	e015      	b.n	8003f66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f3a:	4b3f      	ldr	r3, [pc, #252]	; (8004038 <HAL_RCC_OscConfig+0x2b0>)
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f40:	f7fe faf6 	bl	8002530 <HAL_GetTick>
 8003f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f46:	e008      	b.n	8003f5a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f48:	f7fe faf2 	bl	8002530 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d901      	bls.n	8003f5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e184      	b.n	8004264 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f5a:	4b36      	ldr	r3, [pc, #216]	; (8004034 <HAL_RCC_OscConfig+0x2ac>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1f0      	bne.n	8003f48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0308 	and.w	r3, r3, #8
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d030      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d016      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f7a:	4b30      	ldr	r3, [pc, #192]	; (800403c <HAL_RCC_OscConfig+0x2b4>)
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f80:	f7fe fad6 	bl	8002530 <HAL_GetTick>
 8003f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f86:	e008      	b.n	8003f9a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f88:	f7fe fad2 	bl	8002530 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e164      	b.n	8004264 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f9a:	4b26      	ldr	r3, [pc, #152]	; (8004034 <HAL_RCC_OscConfig+0x2ac>)
 8003f9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d0f0      	beq.n	8003f88 <HAL_RCC_OscConfig+0x200>
 8003fa6:	e015      	b.n	8003fd4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fa8:	4b24      	ldr	r3, [pc, #144]	; (800403c <HAL_RCC_OscConfig+0x2b4>)
 8003faa:	2200      	movs	r2, #0
 8003fac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fae:	f7fe fabf 	bl	8002530 <HAL_GetTick>
 8003fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fb4:	e008      	b.n	8003fc8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fb6:	f7fe fabb 	bl	8002530 <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d901      	bls.n	8003fc8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	e14d      	b.n	8004264 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fc8:	4b1a      	ldr	r3, [pc, #104]	; (8004034 <HAL_RCC_OscConfig+0x2ac>)
 8003fca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fcc:	f003 0302 	and.w	r3, r3, #2
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d1f0      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0304 	and.w	r3, r3, #4
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	f000 80a0 	beq.w	8004122 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fe6:	4b13      	ldr	r3, [pc, #76]	; (8004034 <HAL_RCC_OscConfig+0x2ac>)
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10f      	bne.n	8004012 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	60bb      	str	r3, [r7, #8]
 8003ff6:	4b0f      	ldr	r3, [pc, #60]	; (8004034 <HAL_RCC_OscConfig+0x2ac>)
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffa:	4a0e      	ldr	r2, [pc, #56]	; (8004034 <HAL_RCC_OscConfig+0x2ac>)
 8003ffc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004000:	6413      	str	r3, [r2, #64]	; 0x40
 8004002:	4b0c      	ldr	r3, [pc, #48]	; (8004034 <HAL_RCC_OscConfig+0x2ac>)
 8004004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800400a:	60bb      	str	r3, [r7, #8]
 800400c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800400e:	2301      	movs	r3, #1
 8004010:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004012:	4b0b      	ldr	r3, [pc, #44]	; (8004040 <HAL_RCC_OscConfig+0x2b8>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800401a:	2b00      	cmp	r3, #0
 800401c:	d121      	bne.n	8004062 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800401e:	4b08      	ldr	r3, [pc, #32]	; (8004040 <HAL_RCC_OscConfig+0x2b8>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a07      	ldr	r2, [pc, #28]	; (8004040 <HAL_RCC_OscConfig+0x2b8>)
 8004024:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004028:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800402a:	f7fe fa81 	bl	8002530 <HAL_GetTick>
 800402e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004030:	e011      	b.n	8004056 <HAL_RCC_OscConfig+0x2ce>
 8004032:	bf00      	nop
 8004034:	40023800 	.word	0x40023800
 8004038:	42470000 	.word	0x42470000
 800403c:	42470e80 	.word	0x42470e80
 8004040:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004044:	f7fe fa74 	bl	8002530 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b02      	cmp	r3, #2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e106      	b.n	8004264 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004056:	4b85      	ldr	r3, [pc, #532]	; (800426c <HAL_RCC_OscConfig+0x4e4>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800405e:	2b00      	cmp	r3, #0
 8004060:	d0f0      	beq.n	8004044 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	2b01      	cmp	r3, #1
 8004068:	d106      	bne.n	8004078 <HAL_RCC_OscConfig+0x2f0>
 800406a:	4b81      	ldr	r3, [pc, #516]	; (8004270 <HAL_RCC_OscConfig+0x4e8>)
 800406c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800406e:	4a80      	ldr	r2, [pc, #512]	; (8004270 <HAL_RCC_OscConfig+0x4e8>)
 8004070:	f043 0301 	orr.w	r3, r3, #1
 8004074:	6713      	str	r3, [r2, #112]	; 0x70
 8004076:	e01c      	b.n	80040b2 <HAL_RCC_OscConfig+0x32a>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	2b05      	cmp	r3, #5
 800407e:	d10c      	bne.n	800409a <HAL_RCC_OscConfig+0x312>
 8004080:	4b7b      	ldr	r3, [pc, #492]	; (8004270 <HAL_RCC_OscConfig+0x4e8>)
 8004082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004084:	4a7a      	ldr	r2, [pc, #488]	; (8004270 <HAL_RCC_OscConfig+0x4e8>)
 8004086:	f043 0304 	orr.w	r3, r3, #4
 800408a:	6713      	str	r3, [r2, #112]	; 0x70
 800408c:	4b78      	ldr	r3, [pc, #480]	; (8004270 <HAL_RCC_OscConfig+0x4e8>)
 800408e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004090:	4a77      	ldr	r2, [pc, #476]	; (8004270 <HAL_RCC_OscConfig+0x4e8>)
 8004092:	f043 0301 	orr.w	r3, r3, #1
 8004096:	6713      	str	r3, [r2, #112]	; 0x70
 8004098:	e00b      	b.n	80040b2 <HAL_RCC_OscConfig+0x32a>
 800409a:	4b75      	ldr	r3, [pc, #468]	; (8004270 <HAL_RCC_OscConfig+0x4e8>)
 800409c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800409e:	4a74      	ldr	r2, [pc, #464]	; (8004270 <HAL_RCC_OscConfig+0x4e8>)
 80040a0:	f023 0301 	bic.w	r3, r3, #1
 80040a4:	6713      	str	r3, [r2, #112]	; 0x70
 80040a6:	4b72      	ldr	r3, [pc, #456]	; (8004270 <HAL_RCC_OscConfig+0x4e8>)
 80040a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040aa:	4a71      	ldr	r2, [pc, #452]	; (8004270 <HAL_RCC_OscConfig+0x4e8>)
 80040ac:	f023 0304 	bic.w	r3, r3, #4
 80040b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d015      	beq.n	80040e6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ba:	f7fe fa39 	bl	8002530 <HAL_GetTick>
 80040be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040c0:	e00a      	b.n	80040d8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040c2:	f7fe fa35 	bl	8002530 <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d901      	bls.n	80040d8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e0c5      	b.n	8004264 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040d8:	4b65      	ldr	r3, [pc, #404]	; (8004270 <HAL_RCC_OscConfig+0x4e8>)
 80040da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040dc:	f003 0302 	and.w	r3, r3, #2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d0ee      	beq.n	80040c2 <HAL_RCC_OscConfig+0x33a>
 80040e4:	e014      	b.n	8004110 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040e6:	f7fe fa23 	bl	8002530 <HAL_GetTick>
 80040ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040ec:	e00a      	b.n	8004104 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040ee:	f7fe fa1f 	bl	8002530 <HAL_GetTick>
 80040f2:	4602      	mov	r2, r0
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d901      	bls.n	8004104 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e0af      	b.n	8004264 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004104:	4b5a      	ldr	r3, [pc, #360]	; (8004270 <HAL_RCC_OscConfig+0x4e8>)
 8004106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004108:	f003 0302 	and.w	r3, r3, #2
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1ee      	bne.n	80040ee <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004110:	7dfb      	ldrb	r3, [r7, #23]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d105      	bne.n	8004122 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004116:	4b56      	ldr	r3, [pc, #344]	; (8004270 <HAL_RCC_OscConfig+0x4e8>)
 8004118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411a:	4a55      	ldr	r2, [pc, #340]	; (8004270 <HAL_RCC_OscConfig+0x4e8>)
 800411c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004120:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	2b00      	cmp	r3, #0
 8004128:	f000 809b 	beq.w	8004262 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800412c:	4b50      	ldr	r3, [pc, #320]	; (8004270 <HAL_RCC_OscConfig+0x4e8>)
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	f003 030c 	and.w	r3, r3, #12
 8004134:	2b08      	cmp	r3, #8
 8004136:	d05c      	beq.n	80041f2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	2b02      	cmp	r3, #2
 800413e:	d141      	bne.n	80041c4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004140:	4b4c      	ldr	r3, [pc, #304]	; (8004274 <HAL_RCC_OscConfig+0x4ec>)
 8004142:	2200      	movs	r2, #0
 8004144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004146:	f7fe f9f3 	bl	8002530 <HAL_GetTick>
 800414a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800414c:	e008      	b.n	8004160 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800414e:	f7fe f9ef 	bl	8002530 <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	2b02      	cmp	r3, #2
 800415a:	d901      	bls.n	8004160 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e081      	b.n	8004264 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004160:	4b43      	ldr	r3, [pc, #268]	; (8004270 <HAL_RCC_OscConfig+0x4e8>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1f0      	bne.n	800414e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	69da      	ldr	r2, [r3, #28]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a1b      	ldr	r3, [r3, #32]
 8004174:	431a      	orrs	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417a:	019b      	lsls	r3, r3, #6
 800417c:	431a      	orrs	r2, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004182:	085b      	lsrs	r3, r3, #1
 8004184:	3b01      	subs	r3, #1
 8004186:	041b      	lsls	r3, r3, #16
 8004188:	431a      	orrs	r2, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418e:	061b      	lsls	r3, r3, #24
 8004190:	4937      	ldr	r1, [pc, #220]	; (8004270 <HAL_RCC_OscConfig+0x4e8>)
 8004192:	4313      	orrs	r3, r2
 8004194:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004196:	4b37      	ldr	r3, [pc, #220]	; (8004274 <HAL_RCC_OscConfig+0x4ec>)
 8004198:	2201      	movs	r2, #1
 800419a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800419c:	f7fe f9c8 	bl	8002530 <HAL_GetTick>
 80041a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041a2:	e008      	b.n	80041b6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041a4:	f7fe f9c4 	bl	8002530 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d901      	bls.n	80041b6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e056      	b.n	8004264 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041b6:	4b2e      	ldr	r3, [pc, #184]	; (8004270 <HAL_RCC_OscConfig+0x4e8>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d0f0      	beq.n	80041a4 <HAL_RCC_OscConfig+0x41c>
 80041c2:	e04e      	b.n	8004262 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041c4:	4b2b      	ldr	r3, [pc, #172]	; (8004274 <HAL_RCC_OscConfig+0x4ec>)
 80041c6:	2200      	movs	r2, #0
 80041c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ca:	f7fe f9b1 	bl	8002530 <HAL_GetTick>
 80041ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041d0:	e008      	b.n	80041e4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041d2:	f7fe f9ad 	bl	8002530 <HAL_GetTick>
 80041d6:	4602      	mov	r2, r0
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d901      	bls.n	80041e4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e03f      	b.n	8004264 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041e4:	4b22      	ldr	r3, [pc, #136]	; (8004270 <HAL_RCC_OscConfig+0x4e8>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d1f0      	bne.n	80041d2 <HAL_RCC_OscConfig+0x44a>
 80041f0:	e037      	b.n	8004262 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d101      	bne.n	80041fe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e032      	b.n	8004264 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041fe:	4b1c      	ldr	r3, [pc, #112]	; (8004270 <HAL_RCC_OscConfig+0x4e8>)
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d028      	beq.n	800425e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004216:	429a      	cmp	r2, r3
 8004218:	d121      	bne.n	800425e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004224:	429a      	cmp	r2, r3
 8004226:	d11a      	bne.n	800425e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800422e:	4013      	ands	r3, r2
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004234:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004236:	4293      	cmp	r3, r2
 8004238:	d111      	bne.n	800425e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004244:	085b      	lsrs	r3, r3, #1
 8004246:	3b01      	subs	r3, #1
 8004248:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800424a:	429a      	cmp	r2, r3
 800424c:	d107      	bne.n	800425e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004258:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800425a:	429a      	cmp	r2, r3
 800425c:	d001      	beq.n	8004262 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e000      	b.n	8004264 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	3718      	adds	r7, #24
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	40007000 	.word	0x40007000
 8004270:	40023800 	.word	0x40023800
 8004274:	42470060 	.word	0x42470060

08004278 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d101      	bne.n	800428c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e0cc      	b.n	8004426 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800428c:	4b68      	ldr	r3, [pc, #416]	; (8004430 <HAL_RCC_ClockConfig+0x1b8>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0307 	and.w	r3, r3, #7
 8004294:	683a      	ldr	r2, [r7, #0]
 8004296:	429a      	cmp	r2, r3
 8004298:	d90c      	bls.n	80042b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800429a:	4b65      	ldr	r3, [pc, #404]	; (8004430 <HAL_RCC_ClockConfig+0x1b8>)
 800429c:	683a      	ldr	r2, [r7, #0]
 800429e:	b2d2      	uxtb	r2, r2
 80042a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042a2:	4b63      	ldr	r3, [pc, #396]	; (8004430 <HAL_RCC_ClockConfig+0x1b8>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0307 	and.w	r3, r3, #7
 80042aa:	683a      	ldr	r2, [r7, #0]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d001      	beq.n	80042b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e0b8      	b.n	8004426 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0302 	and.w	r3, r3, #2
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d020      	beq.n	8004302 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0304 	and.w	r3, r3, #4
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d005      	beq.n	80042d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042cc:	4b59      	ldr	r3, [pc, #356]	; (8004434 <HAL_RCC_ClockConfig+0x1bc>)
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	4a58      	ldr	r2, [pc, #352]	; (8004434 <HAL_RCC_ClockConfig+0x1bc>)
 80042d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80042d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0308 	and.w	r3, r3, #8
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d005      	beq.n	80042f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042e4:	4b53      	ldr	r3, [pc, #332]	; (8004434 <HAL_RCC_ClockConfig+0x1bc>)
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	4a52      	ldr	r2, [pc, #328]	; (8004434 <HAL_RCC_ClockConfig+0x1bc>)
 80042ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80042ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042f0:	4b50      	ldr	r3, [pc, #320]	; (8004434 <HAL_RCC_ClockConfig+0x1bc>)
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	494d      	ldr	r1, [pc, #308]	; (8004434 <HAL_RCC_ClockConfig+0x1bc>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0301 	and.w	r3, r3, #1
 800430a:	2b00      	cmp	r3, #0
 800430c:	d044      	beq.n	8004398 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	2b01      	cmp	r3, #1
 8004314:	d107      	bne.n	8004326 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004316:	4b47      	ldr	r3, [pc, #284]	; (8004434 <HAL_RCC_ClockConfig+0x1bc>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d119      	bne.n	8004356 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e07f      	b.n	8004426 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	2b02      	cmp	r3, #2
 800432c:	d003      	beq.n	8004336 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004332:	2b03      	cmp	r3, #3
 8004334:	d107      	bne.n	8004346 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004336:	4b3f      	ldr	r3, [pc, #252]	; (8004434 <HAL_RCC_ClockConfig+0x1bc>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d109      	bne.n	8004356 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e06f      	b.n	8004426 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004346:	4b3b      	ldr	r3, [pc, #236]	; (8004434 <HAL_RCC_ClockConfig+0x1bc>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0302 	and.w	r3, r3, #2
 800434e:	2b00      	cmp	r3, #0
 8004350:	d101      	bne.n	8004356 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e067      	b.n	8004426 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004356:	4b37      	ldr	r3, [pc, #220]	; (8004434 <HAL_RCC_ClockConfig+0x1bc>)
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f023 0203 	bic.w	r2, r3, #3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	4934      	ldr	r1, [pc, #208]	; (8004434 <HAL_RCC_ClockConfig+0x1bc>)
 8004364:	4313      	orrs	r3, r2
 8004366:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004368:	f7fe f8e2 	bl	8002530 <HAL_GetTick>
 800436c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800436e:	e00a      	b.n	8004386 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004370:	f7fe f8de 	bl	8002530 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	f241 3288 	movw	r2, #5000	; 0x1388
 800437e:	4293      	cmp	r3, r2
 8004380:	d901      	bls.n	8004386 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e04f      	b.n	8004426 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004386:	4b2b      	ldr	r3, [pc, #172]	; (8004434 <HAL_RCC_ClockConfig+0x1bc>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f003 020c 	and.w	r2, r3, #12
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	429a      	cmp	r2, r3
 8004396:	d1eb      	bne.n	8004370 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004398:	4b25      	ldr	r3, [pc, #148]	; (8004430 <HAL_RCC_ClockConfig+0x1b8>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0307 	and.w	r3, r3, #7
 80043a0:	683a      	ldr	r2, [r7, #0]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d20c      	bcs.n	80043c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043a6:	4b22      	ldr	r3, [pc, #136]	; (8004430 <HAL_RCC_ClockConfig+0x1b8>)
 80043a8:	683a      	ldr	r2, [r7, #0]
 80043aa:	b2d2      	uxtb	r2, r2
 80043ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ae:	4b20      	ldr	r3, [pc, #128]	; (8004430 <HAL_RCC_ClockConfig+0x1b8>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0307 	and.w	r3, r3, #7
 80043b6:	683a      	ldr	r2, [r7, #0]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d001      	beq.n	80043c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e032      	b.n	8004426 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0304 	and.w	r3, r3, #4
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d008      	beq.n	80043de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043cc:	4b19      	ldr	r3, [pc, #100]	; (8004434 <HAL_RCC_ClockConfig+0x1bc>)
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	4916      	ldr	r1, [pc, #88]	; (8004434 <HAL_RCC_ClockConfig+0x1bc>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0308 	and.w	r3, r3, #8
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d009      	beq.n	80043fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043ea:	4b12      	ldr	r3, [pc, #72]	; (8004434 <HAL_RCC_ClockConfig+0x1bc>)
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	00db      	lsls	r3, r3, #3
 80043f8:	490e      	ldr	r1, [pc, #56]	; (8004434 <HAL_RCC_ClockConfig+0x1bc>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80043fe:	f000 f821 	bl	8004444 <HAL_RCC_GetSysClockFreq>
 8004402:	4602      	mov	r2, r0
 8004404:	4b0b      	ldr	r3, [pc, #44]	; (8004434 <HAL_RCC_ClockConfig+0x1bc>)
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	091b      	lsrs	r3, r3, #4
 800440a:	f003 030f 	and.w	r3, r3, #15
 800440e:	490a      	ldr	r1, [pc, #40]	; (8004438 <HAL_RCC_ClockConfig+0x1c0>)
 8004410:	5ccb      	ldrb	r3, [r1, r3]
 8004412:	fa22 f303 	lsr.w	r3, r2, r3
 8004416:	4a09      	ldr	r2, [pc, #36]	; (800443c <HAL_RCC_ClockConfig+0x1c4>)
 8004418:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800441a:	4b09      	ldr	r3, [pc, #36]	; (8004440 <HAL_RCC_ClockConfig+0x1c8>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4618      	mov	r0, r3
 8004420:	f7fd fe82 	bl	8002128 <HAL_InitTick>

  return HAL_OK;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3710      	adds	r7, #16
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	40023c00 	.word	0x40023c00
 8004434:	40023800 	.word	0x40023800
 8004438:	08008c6c 	.word	0x08008c6c
 800443c:	2000001c 	.word	0x2000001c
 8004440:	20000020 	.word	0x20000020

08004444 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004444:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004448:	b084      	sub	sp, #16
 800444a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800444c:	2300      	movs	r3, #0
 800444e:	607b      	str	r3, [r7, #4]
 8004450:	2300      	movs	r3, #0
 8004452:	60fb      	str	r3, [r7, #12]
 8004454:	2300      	movs	r3, #0
 8004456:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004458:	2300      	movs	r3, #0
 800445a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800445c:	4b67      	ldr	r3, [pc, #412]	; (80045fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f003 030c 	and.w	r3, r3, #12
 8004464:	2b08      	cmp	r3, #8
 8004466:	d00d      	beq.n	8004484 <HAL_RCC_GetSysClockFreq+0x40>
 8004468:	2b08      	cmp	r3, #8
 800446a:	f200 80bd 	bhi.w	80045e8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800446e:	2b00      	cmp	r3, #0
 8004470:	d002      	beq.n	8004478 <HAL_RCC_GetSysClockFreq+0x34>
 8004472:	2b04      	cmp	r3, #4
 8004474:	d003      	beq.n	800447e <HAL_RCC_GetSysClockFreq+0x3a>
 8004476:	e0b7      	b.n	80045e8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004478:	4b61      	ldr	r3, [pc, #388]	; (8004600 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800447a:	60bb      	str	r3, [r7, #8]
       break;
 800447c:	e0b7      	b.n	80045ee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800447e:	4b61      	ldr	r3, [pc, #388]	; (8004604 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004480:	60bb      	str	r3, [r7, #8]
      break;
 8004482:	e0b4      	b.n	80045ee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004484:	4b5d      	ldr	r3, [pc, #372]	; (80045fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800448c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800448e:	4b5b      	ldr	r3, [pc, #364]	; (80045fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d04d      	beq.n	8004536 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800449a:	4b58      	ldr	r3, [pc, #352]	; (80045fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	099b      	lsrs	r3, r3, #6
 80044a0:	461a      	mov	r2, r3
 80044a2:	f04f 0300 	mov.w	r3, #0
 80044a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80044aa:	f04f 0100 	mov.w	r1, #0
 80044ae:	ea02 0800 	and.w	r8, r2, r0
 80044b2:	ea03 0901 	and.w	r9, r3, r1
 80044b6:	4640      	mov	r0, r8
 80044b8:	4649      	mov	r1, r9
 80044ba:	f04f 0200 	mov.w	r2, #0
 80044be:	f04f 0300 	mov.w	r3, #0
 80044c2:	014b      	lsls	r3, r1, #5
 80044c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80044c8:	0142      	lsls	r2, r0, #5
 80044ca:	4610      	mov	r0, r2
 80044cc:	4619      	mov	r1, r3
 80044ce:	ebb0 0008 	subs.w	r0, r0, r8
 80044d2:	eb61 0109 	sbc.w	r1, r1, r9
 80044d6:	f04f 0200 	mov.w	r2, #0
 80044da:	f04f 0300 	mov.w	r3, #0
 80044de:	018b      	lsls	r3, r1, #6
 80044e0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80044e4:	0182      	lsls	r2, r0, #6
 80044e6:	1a12      	subs	r2, r2, r0
 80044e8:	eb63 0301 	sbc.w	r3, r3, r1
 80044ec:	f04f 0000 	mov.w	r0, #0
 80044f0:	f04f 0100 	mov.w	r1, #0
 80044f4:	00d9      	lsls	r1, r3, #3
 80044f6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80044fa:	00d0      	lsls	r0, r2, #3
 80044fc:	4602      	mov	r2, r0
 80044fe:	460b      	mov	r3, r1
 8004500:	eb12 0208 	adds.w	r2, r2, r8
 8004504:	eb43 0309 	adc.w	r3, r3, r9
 8004508:	f04f 0000 	mov.w	r0, #0
 800450c:	f04f 0100 	mov.w	r1, #0
 8004510:	0259      	lsls	r1, r3, #9
 8004512:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004516:	0250      	lsls	r0, r2, #9
 8004518:	4602      	mov	r2, r0
 800451a:	460b      	mov	r3, r1
 800451c:	4610      	mov	r0, r2
 800451e:	4619      	mov	r1, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	461a      	mov	r2, r3
 8004524:	f04f 0300 	mov.w	r3, #0
 8004528:	f7fc fb46 	bl	8000bb8 <__aeabi_uldivmod>
 800452c:	4602      	mov	r2, r0
 800452e:	460b      	mov	r3, r1
 8004530:	4613      	mov	r3, r2
 8004532:	60fb      	str	r3, [r7, #12]
 8004534:	e04a      	b.n	80045cc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004536:	4b31      	ldr	r3, [pc, #196]	; (80045fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	099b      	lsrs	r3, r3, #6
 800453c:	461a      	mov	r2, r3
 800453e:	f04f 0300 	mov.w	r3, #0
 8004542:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004546:	f04f 0100 	mov.w	r1, #0
 800454a:	ea02 0400 	and.w	r4, r2, r0
 800454e:	ea03 0501 	and.w	r5, r3, r1
 8004552:	4620      	mov	r0, r4
 8004554:	4629      	mov	r1, r5
 8004556:	f04f 0200 	mov.w	r2, #0
 800455a:	f04f 0300 	mov.w	r3, #0
 800455e:	014b      	lsls	r3, r1, #5
 8004560:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004564:	0142      	lsls	r2, r0, #5
 8004566:	4610      	mov	r0, r2
 8004568:	4619      	mov	r1, r3
 800456a:	1b00      	subs	r0, r0, r4
 800456c:	eb61 0105 	sbc.w	r1, r1, r5
 8004570:	f04f 0200 	mov.w	r2, #0
 8004574:	f04f 0300 	mov.w	r3, #0
 8004578:	018b      	lsls	r3, r1, #6
 800457a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800457e:	0182      	lsls	r2, r0, #6
 8004580:	1a12      	subs	r2, r2, r0
 8004582:	eb63 0301 	sbc.w	r3, r3, r1
 8004586:	f04f 0000 	mov.w	r0, #0
 800458a:	f04f 0100 	mov.w	r1, #0
 800458e:	00d9      	lsls	r1, r3, #3
 8004590:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004594:	00d0      	lsls	r0, r2, #3
 8004596:	4602      	mov	r2, r0
 8004598:	460b      	mov	r3, r1
 800459a:	1912      	adds	r2, r2, r4
 800459c:	eb45 0303 	adc.w	r3, r5, r3
 80045a0:	f04f 0000 	mov.w	r0, #0
 80045a4:	f04f 0100 	mov.w	r1, #0
 80045a8:	0299      	lsls	r1, r3, #10
 80045aa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80045ae:	0290      	lsls	r0, r2, #10
 80045b0:	4602      	mov	r2, r0
 80045b2:	460b      	mov	r3, r1
 80045b4:	4610      	mov	r0, r2
 80045b6:	4619      	mov	r1, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	461a      	mov	r2, r3
 80045bc:	f04f 0300 	mov.w	r3, #0
 80045c0:	f7fc fafa 	bl	8000bb8 <__aeabi_uldivmod>
 80045c4:	4602      	mov	r2, r0
 80045c6:	460b      	mov	r3, r1
 80045c8:	4613      	mov	r3, r2
 80045ca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80045cc:	4b0b      	ldr	r3, [pc, #44]	; (80045fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	0c1b      	lsrs	r3, r3, #16
 80045d2:	f003 0303 	and.w	r3, r3, #3
 80045d6:	3301      	adds	r3, #1
 80045d8:	005b      	lsls	r3, r3, #1
 80045da:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e4:	60bb      	str	r3, [r7, #8]
      break;
 80045e6:	e002      	b.n	80045ee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045e8:	4b05      	ldr	r3, [pc, #20]	; (8004600 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80045ea:	60bb      	str	r3, [r7, #8]
      break;
 80045ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045ee:	68bb      	ldr	r3, [r7, #8]
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3710      	adds	r7, #16
 80045f4:	46bd      	mov	sp, r7
 80045f6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80045fa:	bf00      	nop
 80045fc:	40023800 	.word	0x40023800
 8004600:	00f42400 	.word	0x00f42400
 8004604:	007a1200 	.word	0x007a1200

08004608 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004608:	b480      	push	{r7}
 800460a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800460c:	4b03      	ldr	r3, [pc, #12]	; (800461c <HAL_RCC_GetHCLKFreq+0x14>)
 800460e:	681b      	ldr	r3, [r3, #0]
}
 8004610:	4618      	mov	r0, r3
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop
 800461c:	2000001c 	.word	0x2000001c

08004620 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004624:	f7ff fff0 	bl	8004608 <HAL_RCC_GetHCLKFreq>
 8004628:	4602      	mov	r2, r0
 800462a:	4b05      	ldr	r3, [pc, #20]	; (8004640 <HAL_RCC_GetPCLK1Freq+0x20>)
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	0a9b      	lsrs	r3, r3, #10
 8004630:	f003 0307 	and.w	r3, r3, #7
 8004634:	4903      	ldr	r1, [pc, #12]	; (8004644 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004636:	5ccb      	ldrb	r3, [r1, r3]
 8004638:	fa22 f303 	lsr.w	r3, r2, r3
}
 800463c:	4618      	mov	r0, r3
 800463e:	bd80      	pop	{r7, pc}
 8004640:	40023800 	.word	0x40023800
 8004644:	08008c7c 	.word	0x08008c7c

08004648 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800464c:	f7ff ffdc 	bl	8004608 <HAL_RCC_GetHCLKFreq>
 8004650:	4602      	mov	r2, r0
 8004652:	4b05      	ldr	r3, [pc, #20]	; (8004668 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	0b5b      	lsrs	r3, r3, #13
 8004658:	f003 0307 	and.w	r3, r3, #7
 800465c:	4903      	ldr	r1, [pc, #12]	; (800466c <HAL_RCC_GetPCLK2Freq+0x24>)
 800465e:	5ccb      	ldrb	r3, [r1, r3]
 8004660:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004664:	4618      	mov	r0, r3
 8004666:	bd80      	pop	{r7, pc}
 8004668:	40023800 	.word	0x40023800
 800466c:	08008c7c 	.word	0x08008c7c

08004670 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	220f      	movs	r2, #15
 800467e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004680:	4b12      	ldr	r3, [pc, #72]	; (80046cc <HAL_RCC_GetClockConfig+0x5c>)
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f003 0203 	and.w	r2, r3, #3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800468c:	4b0f      	ldr	r3, [pc, #60]	; (80046cc <HAL_RCC_GetClockConfig+0x5c>)
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004698:	4b0c      	ldr	r3, [pc, #48]	; (80046cc <HAL_RCC_GetClockConfig+0x5c>)
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80046a4:	4b09      	ldr	r3, [pc, #36]	; (80046cc <HAL_RCC_GetClockConfig+0x5c>)
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	08db      	lsrs	r3, r3, #3
 80046aa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80046b2:	4b07      	ldr	r3, [pc, #28]	; (80046d0 <HAL_RCC_GetClockConfig+0x60>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0207 	and.w	r2, r3, #7
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	601a      	str	r2, [r3, #0]
}
 80046be:	bf00      	nop
 80046c0:	370c      	adds	r7, #12
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	40023800 	.word	0x40023800
 80046d0:	40023c00 	.word	0x40023c00

080046d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d101      	bne.n	80046e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e041      	b.n	800476a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d106      	bne.n	8004700 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f7fd fc6a 	bl	8001fd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2202      	movs	r2, #2
 8004704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	3304      	adds	r3, #4
 8004710:	4619      	mov	r1, r3
 8004712:	4610      	mov	r0, r2
 8004714:	f000 fa88 	bl	8004c28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	3708      	adds	r7, #8
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
	...

08004774 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004774:	b480      	push	{r7}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004782:	b2db      	uxtb	r3, r3
 8004784:	2b01      	cmp	r3, #1
 8004786:	d001      	beq.n	800478c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e044      	b.n	8004816 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2202      	movs	r2, #2
 8004790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68da      	ldr	r2, [r3, #12]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f042 0201 	orr.w	r2, r2, #1
 80047a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a1e      	ldr	r2, [pc, #120]	; (8004824 <HAL_TIM_Base_Start_IT+0xb0>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d018      	beq.n	80047e0 <HAL_TIM_Base_Start_IT+0x6c>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047b6:	d013      	beq.n	80047e0 <HAL_TIM_Base_Start_IT+0x6c>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a1a      	ldr	r2, [pc, #104]	; (8004828 <HAL_TIM_Base_Start_IT+0xb4>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d00e      	beq.n	80047e0 <HAL_TIM_Base_Start_IT+0x6c>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a19      	ldr	r2, [pc, #100]	; (800482c <HAL_TIM_Base_Start_IT+0xb8>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d009      	beq.n	80047e0 <HAL_TIM_Base_Start_IT+0x6c>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a17      	ldr	r2, [pc, #92]	; (8004830 <HAL_TIM_Base_Start_IT+0xbc>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d004      	beq.n	80047e0 <HAL_TIM_Base_Start_IT+0x6c>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a16      	ldr	r2, [pc, #88]	; (8004834 <HAL_TIM_Base_Start_IT+0xc0>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d111      	bne.n	8004804 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f003 0307 	and.w	r3, r3, #7
 80047ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2b06      	cmp	r3, #6
 80047f0:	d010      	beq.n	8004814 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f042 0201 	orr.w	r2, r2, #1
 8004800:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004802:	e007      	b.n	8004814 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f042 0201 	orr.w	r2, r2, #1
 8004812:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3714      	adds	r7, #20
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	40010000 	.word	0x40010000
 8004828:	40000400 	.word	0x40000400
 800482c:	40000800 	.word	0x40000800
 8004830:	40000c00 	.word	0x40000c00
 8004834:	40014000 	.word	0x40014000

08004838 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	f003 0302 	and.w	r3, r3, #2
 800484a:	2b02      	cmp	r3, #2
 800484c:	d122      	bne.n	8004894 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	f003 0302 	and.w	r3, r3, #2
 8004858:	2b02      	cmp	r3, #2
 800485a:	d11b      	bne.n	8004894 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f06f 0202 	mvn.w	r2, #2
 8004864:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2201      	movs	r2, #1
 800486a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	f003 0303 	and.w	r3, r3, #3
 8004876:	2b00      	cmp	r3, #0
 8004878:	d003      	beq.n	8004882 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 f9b5 	bl	8004bea <HAL_TIM_IC_CaptureCallback>
 8004880:	e005      	b.n	800488e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f9a7 	bl	8004bd6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f000 f9b8 	bl	8004bfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	f003 0304 	and.w	r3, r3, #4
 800489e:	2b04      	cmp	r3, #4
 80048a0:	d122      	bne.n	80048e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	f003 0304 	and.w	r3, r3, #4
 80048ac:	2b04      	cmp	r3, #4
 80048ae:	d11b      	bne.n	80048e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f06f 0204 	mvn.w	r2, #4
 80048b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2202      	movs	r2, #2
 80048be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	699b      	ldr	r3, [r3, #24]
 80048c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d003      	beq.n	80048d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 f98b 	bl	8004bea <HAL_TIM_IC_CaptureCallback>
 80048d4:	e005      	b.n	80048e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 f97d 	bl	8004bd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f000 f98e 	bl	8004bfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	f003 0308 	and.w	r3, r3, #8
 80048f2:	2b08      	cmp	r3, #8
 80048f4:	d122      	bne.n	800493c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	f003 0308 	and.w	r3, r3, #8
 8004900:	2b08      	cmp	r3, #8
 8004902:	d11b      	bne.n	800493c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f06f 0208 	mvn.w	r2, #8
 800490c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2204      	movs	r2, #4
 8004912:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	69db      	ldr	r3, [r3, #28]
 800491a:	f003 0303 	and.w	r3, r3, #3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d003      	beq.n	800492a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 f961 	bl	8004bea <HAL_TIM_IC_CaptureCallback>
 8004928:	e005      	b.n	8004936 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 f953 	bl	8004bd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 f964 	bl	8004bfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	f003 0310 	and.w	r3, r3, #16
 8004946:	2b10      	cmp	r3, #16
 8004948:	d122      	bne.n	8004990 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	f003 0310 	and.w	r3, r3, #16
 8004954:	2b10      	cmp	r3, #16
 8004956:	d11b      	bne.n	8004990 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f06f 0210 	mvn.w	r2, #16
 8004960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2208      	movs	r2, #8
 8004966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	69db      	ldr	r3, [r3, #28]
 800496e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004972:	2b00      	cmp	r3, #0
 8004974:	d003      	beq.n	800497e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 f937 	bl	8004bea <HAL_TIM_IC_CaptureCallback>
 800497c:	e005      	b.n	800498a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 f929 	bl	8004bd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 f93a 	bl	8004bfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	f003 0301 	and.w	r3, r3, #1
 800499a:	2b01      	cmp	r3, #1
 800499c:	d10e      	bne.n	80049bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	f003 0301 	and.w	r3, r3, #1
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d107      	bne.n	80049bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f06f 0201 	mvn.w	r2, #1
 80049b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f7fd f9a8 	bl	8001d0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049c6:	2b80      	cmp	r3, #128	; 0x80
 80049c8:	d10e      	bne.n	80049e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049d4:	2b80      	cmp	r3, #128	; 0x80
 80049d6:	d107      	bne.n	80049e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80049e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 fab2 	bl	8004f4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f2:	2b40      	cmp	r3, #64	; 0x40
 80049f4:	d10e      	bne.n	8004a14 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a00:	2b40      	cmp	r3, #64	; 0x40
 8004a02:	d107      	bne.n	8004a14 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 f8ff 	bl	8004c12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	f003 0320 	and.w	r3, r3, #32
 8004a1e:	2b20      	cmp	r3, #32
 8004a20:	d10e      	bne.n	8004a40 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	f003 0320 	and.w	r3, r3, #32
 8004a2c:	2b20      	cmp	r3, #32
 8004a2e:	d107      	bne.n	8004a40 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f06f 0220 	mvn.w	r2, #32
 8004a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 fa7c 	bl	8004f38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a40:	bf00      	nop
 8004a42:	3708      	adds	r7, #8
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a52:	2300      	movs	r3, #0
 8004a54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d101      	bne.n	8004a64 <HAL_TIM_ConfigClockSource+0x1c>
 8004a60:	2302      	movs	r3, #2
 8004a62:	e0b4      	b.n	8004bce <HAL_TIM_ConfigClockSource+0x186>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2202      	movs	r2, #2
 8004a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68ba      	ldr	r2, [r7, #8]
 8004a92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a9c:	d03e      	beq.n	8004b1c <HAL_TIM_ConfigClockSource+0xd4>
 8004a9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004aa2:	f200 8087 	bhi.w	8004bb4 <HAL_TIM_ConfigClockSource+0x16c>
 8004aa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aaa:	f000 8086 	beq.w	8004bba <HAL_TIM_ConfigClockSource+0x172>
 8004aae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ab2:	d87f      	bhi.n	8004bb4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ab4:	2b70      	cmp	r3, #112	; 0x70
 8004ab6:	d01a      	beq.n	8004aee <HAL_TIM_ConfigClockSource+0xa6>
 8004ab8:	2b70      	cmp	r3, #112	; 0x70
 8004aba:	d87b      	bhi.n	8004bb4 <HAL_TIM_ConfigClockSource+0x16c>
 8004abc:	2b60      	cmp	r3, #96	; 0x60
 8004abe:	d050      	beq.n	8004b62 <HAL_TIM_ConfigClockSource+0x11a>
 8004ac0:	2b60      	cmp	r3, #96	; 0x60
 8004ac2:	d877      	bhi.n	8004bb4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ac4:	2b50      	cmp	r3, #80	; 0x50
 8004ac6:	d03c      	beq.n	8004b42 <HAL_TIM_ConfigClockSource+0xfa>
 8004ac8:	2b50      	cmp	r3, #80	; 0x50
 8004aca:	d873      	bhi.n	8004bb4 <HAL_TIM_ConfigClockSource+0x16c>
 8004acc:	2b40      	cmp	r3, #64	; 0x40
 8004ace:	d058      	beq.n	8004b82 <HAL_TIM_ConfigClockSource+0x13a>
 8004ad0:	2b40      	cmp	r3, #64	; 0x40
 8004ad2:	d86f      	bhi.n	8004bb4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ad4:	2b30      	cmp	r3, #48	; 0x30
 8004ad6:	d064      	beq.n	8004ba2 <HAL_TIM_ConfigClockSource+0x15a>
 8004ad8:	2b30      	cmp	r3, #48	; 0x30
 8004ada:	d86b      	bhi.n	8004bb4 <HAL_TIM_ConfigClockSource+0x16c>
 8004adc:	2b20      	cmp	r3, #32
 8004ade:	d060      	beq.n	8004ba2 <HAL_TIM_ConfigClockSource+0x15a>
 8004ae0:	2b20      	cmp	r3, #32
 8004ae2:	d867      	bhi.n	8004bb4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d05c      	beq.n	8004ba2 <HAL_TIM_ConfigClockSource+0x15a>
 8004ae8:	2b10      	cmp	r3, #16
 8004aea:	d05a      	beq.n	8004ba2 <HAL_TIM_ConfigClockSource+0x15a>
 8004aec:	e062      	b.n	8004bb4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6818      	ldr	r0, [r3, #0]
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	6899      	ldr	r1, [r3, #8]
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	685a      	ldr	r2, [r3, #4]
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	f000 f98d 	bl	8004e1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b10:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68ba      	ldr	r2, [r7, #8]
 8004b18:	609a      	str	r2, [r3, #8]
      break;
 8004b1a:	e04f      	b.n	8004bbc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6818      	ldr	r0, [r3, #0]
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	6899      	ldr	r1, [r3, #8]
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	685a      	ldr	r2, [r3, #4]
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	f000 f976 	bl	8004e1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	689a      	ldr	r2, [r3, #8]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b3e:	609a      	str	r2, [r3, #8]
      break;
 8004b40:	e03c      	b.n	8004bbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6818      	ldr	r0, [r3, #0]
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	6859      	ldr	r1, [r3, #4]
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	461a      	mov	r2, r3
 8004b50:	f000 f8ea 	bl	8004d28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2150      	movs	r1, #80	; 0x50
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f000 f943 	bl	8004de6 <TIM_ITRx_SetConfig>
      break;
 8004b60:	e02c      	b.n	8004bbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6818      	ldr	r0, [r3, #0]
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	6859      	ldr	r1, [r3, #4]
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	461a      	mov	r2, r3
 8004b70:	f000 f909 	bl	8004d86 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2160      	movs	r1, #96	; 0x60
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f000 f933 	bl	8004de6 <TIM_ITRx_SetConfig>
      break;
 8004b80:	e01c      	b.n	8004bbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6818      	ldr	r0, [r3, #0]
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	6859      	ldr	r1, [r3, #4]
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	461a      	mov	r2, r3
 8004b90:	f000 f8ca 	bl	8004d28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2140      	movs	r1, #64	; 0x40
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f000 f923 	bl	8004de6 <TIM_ITRx_SetConfig>
      break;
 8004ba0:	e00c      	b.n	8004bbc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4619      	mov	r1, r3
 8004bac:	4610      	mov	r0, r2
 8004bae:	f000 f91a 	bl	8004de6 <TIM_ITRx_SetConfig>
      break;
 8004bb2:	e003      	b.n	8004bbc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	73fb      	strb	r3, [r7, #15]
      break;
 8004bb8:	e000      	b.n	8004bbc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004bba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3710      	adds	r7, #16
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}

08004bd6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	b083      	sub	sp, #12
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004bde:	bf00      	nop
 8004be0:	370c      	adds	r7, #12
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr

08004bea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004bea:	b480      	push	{r7}
 8004bec:	b083      	sub	sp, #12
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004bf2:	bf00      	nop
 8004bf4:	370c      	adds	r7, #12
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr

08004bfe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004bfe:	b480      	push	{r7}
 8004c00:	b083      	sub	sp, #12
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c06:	bf00      	nop
 8004c08:	370c      	adds	r7, #12
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr

08004c12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c12:	b480      	push	{r7}
 8004c14:	b083      	sub	sp, #12
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c1a:	bf00      	nop
 8004c1c:	370c      	adds	r7, #12
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
	...

08004c28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b085      	sub	sp, #20
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a34      	ldr	r2, [pc, #208]	; (8004d0c <TIM_Base_SetConfig+0xe4>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d00f      	beq.n	8004c60 <TIM_Base_SetConfig+0x38>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c46:	d00b      	beq.n	8004c60 <TIM_Base_SetConfig+0x38>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a31      	ldr	r2, [pc, #196]	; (8004d10 <TIM_Base_SetConfig+0xe8>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d007      	beq.n	8004c60 <TIM_Base_SetConfig+0x38>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4a30      	ldr	r2, [pc, #192]	; (8004d14 <TIM_Base_SetConfig+0xec>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d003      	beq.n	8004c60 <TIM_Base_SetConfig+0x38>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4a2f      	ldr	r2, [pc, #188]	; (8004d18 <TIM_Base_SetConfig+0xf0>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d108      	bne.n	8004c72 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a25      	ldr	r2, [pc, #148]	; (8004d0c <TIM_Base_SetConfig+0xe4>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d01b      	beq.n	8004cb2 <TIM_Base_SetConfig+0x8a>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c80:	d017      	beq.n	8004cb2 <TIM_Base_SetConfig+0x8a>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a22      	ldr	r2, [pc, #136]	; (8004d10 <TIM_Base_SetConfig+0xe8>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d013      	beq.n	8004cb2 <TIM_Base_SetConfig+0x8a>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a21      	ldr	r2, [pc, #132]	; (8004d14 <TIM_Base_SetConfig+0xec>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d00f      	beq.n	8004cb2 <TIM_Base_SetConfig+0x8a>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a20      	ldr	r2, [pc, #128]	; (8004d18 <TIM_Base_SetConfig+0xf0>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d00b      	beq.n	8004cb2 <TIM_Base_SetConfig+0x8a>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a1f      	ldr	r2, [pc, #124]	; (8004d1c <TIM_Base_SetConfig+0xf4>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d007      	beq.n	8004cb2 <TIM_Base_SetConfig+0x8a>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a1e      	ldr	r2, [pc, #120]	; (8004d20 <TIM_Base_SetConfig+0xf8>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d003      	beq.n	8004cb2 <TIM_Base_SetConfig+0x8a>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a1d      	ldr	r2, [pc, #116]	; (8004d24 <TIM_Base_SetConfig+0xfc>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d108      	bne.n	8004cc4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	695b      	ldr	r3, [r3, #20]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	689a      	ldr	r2, [r3, #8]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a08      	ldr	r2, [pc, #32]	; (8004d0c <TIM_Base_SetConfig+0xe4>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d103      	bne.n	8004cf8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	691a      	ldr	r2, [r3, #16]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	615a      	str	r2, [r3, #20]
}
 8004cfe:	bf00      	nop
 8004d00:	3714      	adds	r7, #20
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	40010000 	.word	0x40010000
 8004d10:	40000400 	.word	0x40000400
 8004d14:	40000800 	.word	0x40000800
 8004d18:	40000c00 	.word	0x40000c00
 8004d1c:	40014000 	.word	0x40014000
 8004d20:	40014400 	.word	0x40014400
 8004d24:	40014800 	.word	0x40014800

08004d28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b087      	sub	sp, #28
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	60b9      	str	r1, [r7, #8]
 8004d32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6a1b      	ldr	r3, [r3, #32]
 8004d38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6a1b      	ldr	r3, [r3, #32]
 8004d3e:	f023 0201 	bic.w	r2, r3, #1
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	699b      	ldr	r3, [r3, #24]
 8004d4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	011b      	lsls	r3, r3, #4
 8004d58:	693a      	ldr	r2, [r7, #16]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	f023 030a 	bic.w	r3, r3, #10
 8004d64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d66:	697a      	ldr	r2, [r7, #20]
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	693a      	ldr	r2, [r7, #16]
 8004d72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	697a      	ldr	r2, [r7, #20]
 8004d78:	621a      	str	r2, [r3, #32]
}
 8004d7a:	bf00      	nop
 8004d7c:	371c      	adds	r7, #28
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr

08004d86 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d86:	b480      	push	{r7}
 8004d88:	b087      	sub	sp, #28
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	60f8      	str	r0, [r7, #12]
 8004d8e:	60b9      	str	r1, [r7, #8]
 8004d90:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6a1b      	ldr	r3, [r3, #32]
 8004d96:	f023 0210 	bic.w	r2, r3, #16
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	699b      	ldr	r3, [r3, #24]
 8004da2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6a1b      	ldr	r3, [r3, #32]
 8004da8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004db0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	031b      	lsls	r3, r3, #12
 8004db6:	697a      	ldr	r2, [r7, #20]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004dc2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	011b      	lsls	r3, r3, #4
 8004dc8:	693a      	ldr	r2, [r7, #16]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	697a      	ldr	r2, [r7, #20]
 8004dd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	693a      	ldr	r2, [r7, #16]
 8004dd8:	621a      	str	r2, [r3, #32]
}
 8004dda:	bf00      	nop
 8004ddc:	371c      	adds	r7, #28
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr

08004de6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004de6:	b480      	push	{r7}
 8004de8:	b085      	sub	sp, #20
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
 8004dee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dfc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004dfe:	683a      	ldr	r2, [r7, #0]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	f043 0307 	orr.w	r3, r3, #7
 8004e08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	609a      	str	r2, [r3, #8]
}
 8004e10:	bf00      	nop
 8004e12:	3714      	adds	r7, #20
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b087      	sub	sp, #28
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
 8004e28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	021a      	lsls	r2, r3, #8
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	431a      	orrs	r2, r3
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	697a      	ldr	r2, [r7, #20]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	697a      	ldr	r2, [r7, #20]
 8004e4e:	609a      	str	r2, [r3, #8]
}
 8004e50:	bf00      	nop
 8004e52:	371c      	adds	r7, #28
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b085      	sub	sp, #20
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d101      	bne.n	8004e74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e70:	2302      	movs	r3, #2
 8004e72:	e050      	b.n	8004f16 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2202      	movs	r2, #2
 8004e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a1c      	ldr	r2, [pc, #112]	; (8004f24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d018      	beq.n	8004eea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ec0:	d013      	beq.n	8004eea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a18      	ldr	r2, [pc, #96]	; (8004f28 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d00e      	beq.n	8004eea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a16      	ldr	r2, [pc, #88]	; (8004f2c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d009      	beq.n	8004eea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a15      	ldr	r2, [pc, #84]	; (8004f30 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d004      	beq.n	8004eea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a13      	ldr	r2, [pc, #76]	; (8004f34 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d10c      	bne.n	8004f04 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ef0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	68ba      	ldr	r2, [r7, #8]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68ba      	ldr	r2, [r7, #8]
 8004f02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3714      	adds	r7, #20
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr
 8004f22:	bf00      	nop
 8004f24:	40010000 	.word	0x40010000
 8004f28:	40000400 	.word	0x40000400
 8004f2c:	40000800 	.word	0x40000800
 8004f30:	40000c00 	.word	0x40000c00
 8004f34:	40014000 	.word	0x40014000

08004f38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f54:	bf00      	nop
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d101      	bne.n	8004f72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e03f      	b.n	8004ff2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d106      	bne.n	8004f8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f7fd f87e 	bl	8002088 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2224      	movs	r2, #36	; 0x24
 8004f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	68da      	ldr	r2, [r3, #12]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fa2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f000 fd7b 	bl	8005aa0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	691a      	ldr	r2, [r3, #16]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fb8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	695a      	ldr	r2, [r3, #20]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fc8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68da      	ldr	r2, [r3, #12]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fd8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2220      	movs	r2, #32
 8004fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2220      	movs	r2, #32
 8004fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3708      	adds	r7, #8
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}

08004ffa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ffa:	b580      	push	{r7, lr}
 8004ffc:	b08a      	sub	sp, #40	; 0x28
 8004ffe:	af02      	add	r7, sp, #8
 8005000:	60f8      	str	r0, [r7, #12]
 8005002:	60b9      	str	r1, [r7, #8]
 8005004:	603b      	str	r3, [r7, #0]
 8005006:	4613      	mov	r3, r2
 8005008:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800500a:	2300      	movs	r3, #0
 800500c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005014:	b2db      	uxtb	r3, r3
 8005016:	2b20      	cmp	r3, #32
 8005018:	d17c      	bne.n	8005114 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d002      	beq.n	8005026 <HAL_UART_Transmit+0x2c>
 8005020:	88fb      	ldrh	r3, [r7, #6]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d101      	bne.n	800502a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e075      	b.n	8005116 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005030:	2b01      	cmp	r3, #1
 8005032:	d101      	bne.n	8005038 <HAL_UART_Transmit+0x3e>
 8005034:	2302      	movs	r3, #2
 8005036:	e06e      	b.n	8005116 <HAL_UART_Transmit+0x11c>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2200      	movs	r2, #0
 8005044:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2221      	movs	r2, #33	; 0x21
 800504a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800504e:	f7fd fa6f 	bl	8002530 <HAL_GetTick>
 8005052:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	88fa      	ldrh	r2, [r7, #6]
 8005058:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	88fa      	ldrh	r2, [r7, #6]
 800505e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005068:	d108      	bne.n	800507c <HAL_UART_Transmit+0x82>
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d104      	bne.n	800507c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005072:	2300      	movs	r3, #0
 8005074:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	61bb      	str	r3, [r7, #24]
 800507a:	e003      	b.n	8005084 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005080:	2300      	movs	r3, #0
 8005082:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800508c:	e02a      	b.n	80050e4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	9300      	str	r3, [sp, #0]
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	2200      	movs	r2, #0
 8005096:	2180      	movs	r1, #128	; 0x80
 8005098:	68f8      	ldr	r0, [r7, #12]
 800509a:	f000 faf9 	bl	8005690 <UART_WaitOnFlagUntilTimeout>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d001      	beq.n	80050a8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80050a4:	2303      	movs	r3, #3
 80050a6:	e036      	b.n	8005116 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d10b      	bne.n	80050c6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	881b      	ldrh	r3, [r3, #0]
 80050b2:	461a      	mov	r2, r3
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	3302      	adds	r3, #2
 80050c2:	61bb      	str	r3, [r7, #24]
 80050c4:	e007      	b.n	80050d6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	781a      	ldrb	r2, [r3, #0]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	3301      	adds	r3, #1
 80050d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050da:	b29b      	uxth	r3, r3
 80050dc:	3b01      	subs	r3, #1
 80050de:	b29a      	uxth	r2, r3
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1cf      	bne.n	800508e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	9300      	str	r3, [sp, #0]
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	2200      	movs	r2, #0
 80050f6:	2140      	movs	r1, #64	; 0x40
 80050f8:	68f8      	ldr	r0, [r7, #12]
 80050fa:	f000 fac9 	bl	8005690 <UART_WaitOnFlagUntilTimeout>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d001      	beq.n	8005108 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e006      	b.n	8005116 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2220      	movs	r2, #32
 800510c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005110:	2300      	movs	r3, #0
 8005112:	e000      	b.n	8005116 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005114:	2302      	movs	r3, #2
  }
}
 8005116:	4618      	mov	r0, r3
 8005118:	3720      	adds	r7, #32
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
	...

08005120 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b0ba      	sub	sp, #232	; 0xe8
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	695b      	ldr	r3, [r3, #20]
 8005142:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005146:	2300      	movs	r3, #0
 8005148:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800514c:	2300      	movs	r3, #0
 800514e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005156:	f003 030f 	and.w	r3, r3, #15
 800515a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800515e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005162:	2b00      	cmp	r3, #0
 8005164:	d10f      	bne.n	8005186 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800516a:	f003 0320 	and.w	r3, r3, #32
 800516e:	2b00      	cmp	r3, #0
 8005170:	d009      	beq.n	8005186 <HAL_UART_IRQHandler+0x66>
 8005172:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005176:	f003 0320 	and.w	r3, r3, #32
 800517a:	2b00      	cmp	r3, #0
 800517c:	d003      	beq.n	8005186 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 fbd3 	bl	800592a <UART_Receive_IT>
      return;
 8005184:	e256      	b.n	8005634 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005186:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800518a:	2b00      	cmp	r3, #0
 800518c:	f000 80de 	beq.w	800534c <HAL_UART_IRQHandler+0x22c>
 8005190:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005194:	f003 0301 	and.w	r3, r3, #1
 8005198:	2b00      	cmp	r3, #0
 800519a:	d106      	bne.n	80051aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800519c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051a0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	f000 80d1 	beq.w	800534c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80051aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051ae:	f003 0301 	and.w	r3, r3, #1
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00b      	beq.n	80051ce <HAL_UART_IRQHandler+0xae>
 80051b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d005      	beq.n	80051ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c6:	f043 0201 	orr.w	r2, r3, #1
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80051ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051d2:	f003 0304 	and.w	r3, r3, #4
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00b      	beq.n	80051f2 <HAL_UART_IRQHandler+0xd2>
 80051da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051de:	f003 0301 	and.w	r3, r3, #1
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d005      	beq.n	80051f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ea:	f043 0202 	orr.w	r2, r3, #2
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80051f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051f6:	f003 0302 	and.w	r3, r3, #2
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00b      	beq.n	8005216 <HAL_UART_IRQHandler+0xf6>
 80051fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005202:	f003 0301 	and.w	r3, r3, #1
 8005206:	2b00      	cmp	r3, #0
 8005208:	d005      	beq.n	8005216 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520e:	f043 0204 	orr.w	r2, r3, #4
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800521a:	f003 0308 	and.w	r3, r3, #8
 800521e:	2b00      	cmp	r3, #0
 8005220:	d011      	beq.n	8005246 <HAL_UART_IRQHandler+0x126>
 8005222:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005226:	f003 0320 	and.w	r3, r3, #32
 800522a:	2b00      	cmp	r3, #0
 800522c:	d105      	bne.n	800523a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800522e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005232:	f003 0301 	and.w	r3, r3, #1
 8005236:	2b00      	cmp	r3, #0
 8005238:	d005      	beq.n	8005246 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523e:	f043 0208 	orr.w	r2, r3, #8
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524a:	2b00      	cmp	r3, #0
 800524c:	f000 81ed 	beq.w	800562a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005254:	f003 0320 	and.w	r3, r3, #32
 8005258:	2b00      	cmp	r3, #0
 800525a:	d008      	beq.n	800526e <HAL_UART_IRQHandler+0x14e>
 800525c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005260:	f003 0320 	and.w	r3, r3, #32
 8005264:	2b00      	cmp	r3, #0
 8005266:	d002      	beq.n	800526e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 fb5e 	bl	800592a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	695b      	ldr	r3, [r3, #20]
 8005274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005278:	2b40      	cmp	r3, #64	; 0x40
 800527a:	bf0c      	ite	eq
 800527c:	2301      	moveq	r3, #1
 800527e:	2300      	movne	r3, #0
 8005280:	b2db      	uxtb	r3, r3
 8005282:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528a:	f003 0308 	and.w	r3, r3, #8
 800528e:	2b00      	cmp	r3, #0
 8005290:	d103      	bne.n	800529a <HAL_UART_IRQHandler+0x17a>
 8005292:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005296:	2b00      	cmp	r3, #0
 8005298:	d04f      	beq.n	800533a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 fa66 	bl	800576c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	695b      	ldr	r3, [r3, #20]
 80052a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052aa:	2b40      	cmp	r3, #64	; 0x40
 80052ac:	d141      	bne.n	8005332 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	3314      	adds	r3, #20
 80052b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80052bc:	e853 3f00 	ldrex	r3, [r3]
 80052c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80052c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80052c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	3314      	adds	r3, #20
 80052d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80052da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80052de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80052e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80052ea:	e841 2300 	strex	r3, r2, [r1]
 80052ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80052f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d1d9      	bne.n	80052ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d013      	beq.n	800532a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005306:	4a7d      	ldr	r2, [pc, #500]	; (80054fc <HAL_UART_IRQHandler+0x3dc>)
 8005308:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530e:	4618      	mov	r0, r3
 8005310:	f7fd fa90 	bl	8002834 <HAL_DMA_Abort_IT>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d016      	beq.n	8005348 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800531e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005324:	4610      	mov	r0, r2
 8005326:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005328:	e00e      	b.n	8005348 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 f99a 	bl	8005664 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005330:	e00a      	b.n	8005348 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 f996 	bl	8005664 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005338:	e006      	b.n	8005348 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 f992 	bl	8005664 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005346:	e170      	b.n	800562a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005348:	bf00      	nop
    return;
 800534a:	e16e      	b.n	800562a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005350:	2b01      	cmp	r3, #1
 8005352:	f040 814a 	bne.w	80055ea <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800535a:	f003 0310 	and.w	r3, r3, #16
 800535e:	2b00      	cmp	r3, #0
 8005360:	f000 8143 	beq.w	80055ea <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005368:	f003 0310 	and.w	r3, r3, #16
 800536c:	2b00      	cmp	r3, #0
 800536e:	f000 813c 	beq.w	80055ea <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005372:	2300      	movs	r3, #0
 8005374:	60bb      	str	r3, [r7, #8]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	60bb      	str	r3, [r7, #8]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	60bb      	str	r3, [r7, #8]
 8005386:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	695b      	ldr	r3, [r3, #20]
 800538e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005392:	2b40      	cmp	r3, #64	; 0x40
 8005394:	f040 80b4 	bne.w	8005500 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80053a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f000 8140 	beq.w	800562e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80053b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80053b6:	429a      	cmp	r2, r3
 80053b8:	f080 8139 	bcs.w	800562e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80053c2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c8:	69db      	ldr	r3, [r3, #28]
 80053ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053ce:	f000 8088 	beq.w	80054e2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	330c      	adds	r3, #12
 80053d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80053e0:	e853 3f00 	ldrex	r3, [r3]
 80053e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80053e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80053ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	330c      	adds	r3, #12
 80053fa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80053fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005402:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005406:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800540a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800540e:	e841 2300 	strex	r3, r2, [r1]
 8005412:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005416:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800541a:	2b00      	cmp	r3, #0
 800541c:	d1d9      	bne.n	80053d2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	3314      	adds	r3, #20
 8005424:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005426:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005428:	e853 3f00 	ldrex	r3, [r3]
 800542c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800542e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005430:	f023 0301 	bic.w	r3, r3, #1
 8005434:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	3314      	adds	r3, #20
 800543e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005442:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005446:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005448:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800544a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800544e:	e841 2300 	strex	r3, r2, [r1]
 8005452:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005454:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005456:	2b00      	cmp	r3, #0
 8005458:	d1e1      	bne.n	800541e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	3314      	adds	r3, #20
 8005460:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005462:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005464:	e853 3f00 	ldrex	r3, [r3]
 8005468:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800546a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800546c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005470:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	3314      	adds	r3, #20
 800547a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800547e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005480:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005482:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005484:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005486:	e841 2300 	strex	r3, r2, [r1]
 800548a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800548c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800548e:	2b00      	cmp	r3, #0
 8005490:	d1e3      	bne.n	800545a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2220      	movs	r2, #32
 8005496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	330c      	adds	r3, #12
 80054a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054aa:	e853 3f00 	ldrex	r3, [r3]
 80054ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80054b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054b2:	f023 0310 	bic.w	r3, r3, #16
 80054b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	330c      	adds	r3, #12
 80054c0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80054c4:	65ba      	str	r2, [r7, #88]	; 0x58
 80054c6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80054ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80054cc:	e841 2300 	strex	r3, r2, [r1]
 80054d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80054d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d1e3      	bne.n	80054a0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054dc:	4618      	mov	r0, r3
 80054de:	f7fd f939 	bl	8002754 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	4619      	mov	r1, r3
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 f8c0 	bl	8005678 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80054f8:	e099      	b.n	800562e <HAL_UART_IRQHandler+0x50e>
 80054fa:	bf00      	nop
 80054fc:	08005833 	.word	0x08005833
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005508:	b29b      	uxth	r3, r3
 800550a:	1ad3      	subs	r3, r2, r3
 800550c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005514:	b29b      	uxth	r3, r3
 8005516:	2b00      	cmp	r3, #0
 8005518:	f000 808b 	beq.w	8005632 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800551c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005520:	2b00      	cmp	r3, #0
 8005522:	f000 8086 	beq.w	8005632 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	330c      	adds	r3, #12
 800552c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800552e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005530:	e853 3f00 	ldrex	r3, [r3]
 8005534:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005538:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800553c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	330c      	adds	r3, #12
 8005546:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800554a:	647a      	str	r2, [r7, #68]	; 0x44
 800554c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800554e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005550:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005552:	e841 2300 	strex	r3, r2, [r1]
 8005556:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800555a:	2b00      	cmp	r3, #0
 800555c:	d1e3      	bne.n	8005526 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	3314      	adds	r3, #20
 8005564:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005568:	e853 3f00 	ldrex	r3, [r3]
 800556c:	623b      	str	r3, [r7, #32]
   return(result);
 800556e:	6a3b      	ldr	r3, [r7, #32]
 8005570:	f023 0301 	bic.w	r3, r3, #1
 8005574:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	3314      	adds	r3, #20
 800557e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005582:	633a      	str	r2, [r7, #48]	; 0x30
 8005584:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005586:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005588:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800558a:	e841 2300 	strex	r3, r2, [r1]
 800558e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005592:	2b00      	cmp	r3, #0
 8005594:	d1e3      	bne.n	800555e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2220      	movs	r2, #32
 800559a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	330c      	adds	r3, #12
 80055aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	e853 3f00 	ldrex	r3, [r3]
 80055b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f023 0310 	bic.w	r3, r3, #16
 80055ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	330c      	adds	r3, #12
 80055c4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80055c8:	61fa      	str	r2, [r7, #28]
 80055ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055cc:	69b9      	ldr	r1, [r7, #24]
 80055ce:	69fa      	ldr	r2, [r7, #28]
 80055d0:	e841 2300 	strex	r3, r2, [r1]
 80055d4:	617b      	str	r3, [r7, #20]
   return(result);
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d1e3      	bne.n	80055a4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80055dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80055e0:	4619      	mov	r1, r3
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 f848 	bl	8005678 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80055e8:	e023      	b.n	8005632 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80055ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d009      	beq.n	800560a <HAL_UART_IRQHandler+0x4ea>
 80055f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d003      	beq.n	800560a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 f929 	bl	800585a <UART_Transmit_IT>
    return;
 8005608:	e014      	b.n	8005634 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800560a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800560e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005612:	2b00      	cmp	r3, #0
 8005614:	d00e      	beq.n	8005634 <HAL_UART_IRQHandler+0x514>
 8005616:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800561a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800561e:	2b00      	cmp	r3, #0
 8005620:	d008      	beq.n	8005634 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 f969 	bl	80058fa <UART_EndTransmit_IT>
    return;
 8005628:	e004      	b.n	8005634 <HAL_UART_IRQHandler+0x514>
    return;
 800562a:	bf00      	nop
 800562c:	e002      	b.n	8005634 <HAL_UART_IRQHandler+0x514>
      return;
 800562e:	bf00      	nop
 8005630:	e000      	b.n	8005634 <HAL_UART_IRQHandler+0x514>
      return;
 8005632:	bf00      	nop
  }
}
 8005634:	37e8      	adds	r7, #232	; 0xe8
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop

0800563c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800563c:	b480      	push	{r7}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005644:	bf00      	nop
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005658:	bf00      	nop
 800565a:	370c      	adds	r7, #12
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800566c:	bf00      	nop
 800566e:	370c      	adds	r7, #12
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	460b      	mov	r3, r1
 8005682:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005684:	bf00      	nop
 8005686:	370c      	adds	r7, #12
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b090      	sub	sp, #64	; 0x40
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	603b      	str	r3, [r7, #0]
 800569c:	4613      	mov	r3, r2
 800569e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056a0:	e050      	b.n	8005744 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056a8:	d04c      	beq.n	8005744 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80056aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d007      	beq.n	80056c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80056b0:	f7fc ff3e 	bl	8002530 <HAL_GetTick>
 80056b4:	4602      	mov	r2, r0
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056bc:	429a      	cmp	r2, r3
 80056be:	d241      	bcs.n	8005744 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	330c      	adds	r3, #12
 80056c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ca:	e853 3f00 	ldrex	r3, [r3]
 80056ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80056d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	330c      	adds	r3, #12
 80056de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80056e0:	637a      	str	r2, [r7, #52]	; 0x34
 80056e2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80056e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056e8:	e841 2300 	strex	r3, r2, [r1]
 80056ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80056ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d1e5      	bne.n	80056c0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	3314      	adds	r3, #20
 80056fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	e853 3f00 	ldrex	r3, [r3]
 8005702:	613b      	str	r3, [r7, #16]
   return(result);
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	f023 0301 	bic.w	r3, r3, #1
 800570a:	63bb      	str	r3, [r7, #56]	; 0x38
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	3314      	adds	r3, #20
 8005712:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005714:	623a      	str	r2, [r7, #32]
 8005716:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005718:	69f9      	ldr	r1, [r7, #28]
 800571a:	6a3a      	ldr	r2, [r7, #32]
 800571c:	e841 2300 	strex	r3, r2, [r1]
 8005720:	61bb      	str	r3, [r7, #24]
   return(result);
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d1e5      	bne.n	80056f4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2220      	movs	r2, #32
 800572c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2220      	movs	r2, #32
 8005734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2200      	movs	r2, #0
 800573c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005740:	2303      	movs	r3, #3
 8005742:	e00f      	b.n	8005764 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	4013      	ands	r3, r2
 800574e:	68ba      	ldr	r2, [r7, #8]
 8005750:	429a      	cmp	r2, r3
 8005752:	bf0c      	ite	eq
 8005754:	2301      	moveq	r3, #1
 8005756:	2300      	movne	r3, #0
 8005758:	b2db      	uxtb	r3, r3
 800575a:	461a      	mov	r2, r3
 800575c:	79fb      	ldrb	r3, [r7, #7]
 800575e:	429a      	cmp	r2, r3
 8005760:	d09f      	beq.n	80056a2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005762:	2300      	movs	r3, #0
}
 8005764:	4618      	mov	r0, r3
 8005766:	3740      	adds	r7, #64	; 0x40
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800576c:	b480      	push	{r7}
 800576e:	b095      	sub	sp, #84	; 0x54
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	330c      	adds	r3, #12
 800577a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800577c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800577e:	e853 3f00 	ldrex	r3, [r3]
 8005782:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005786:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800578a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	330c      	adds	r3, #12
 8005792:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005794:	643a      	str	r2, [r7, #64]	; 0x40
 8005796:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005798:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800579a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800579c:	e841 2300 	strex	r3, r2, [r1]
 80057a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80057a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d1e5      	bne.n	8005774 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	3314      	adds	r3, #20
 80057ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b0:	6a3b      	ldr	r3, [r7, #32]
 80057b2:	e853 3f00 	ldrex	r3, [r3]
 80057b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	f023 0301 	bic.w	r3, r3, #1
 80057be:	64bb      	str	r3, [r7, #72]	; 0x48
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	3314      	adds	r3, #20
 80057c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057d0:	e841 2300 	strex	r3, r2, [r1]
 80057d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d1e5      	bne.n	80057a8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d119      	bne.n	8005818 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	330c      	adds	r3, #12
 80057ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	e853 3f00 	ldrex	r3, [r3]
 80057f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	f023 0310 	bic.w	r3, r3, #16
 80057fa:	647b      	str	r3, [r7, #68]	; 0x44
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	330c      	adds	r3, #12
 8005802:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005804:	61ba      	str	r2, [r7, #24]
 8005806:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005808:	6979      	ldr	r1, [r7, #20]
 800580a:	69ba      	ldr	r2, [r7, #24]
 800580c:	e841 2300 	strex	r3, r2, [r1]
 8005810:	613b      	str	r3, [r7, #16]
   return(result);
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d1e5      	bne.n	80057e4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2220      	movs	r2, #32
 800581c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005826:	bf00      	nop
 8005828:	3754      	adds	r7, #84	; 0x54
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr

08005832 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005832:	b580      	push	{r7, lr}
 8005834:	b084      	sub	sp, #16
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800583e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2200      	movs	r2, #0
 8005844:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2200      	movs	r2, #0
 800584a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800584c:	68f8      	ldr	r0, [r7, #12]
 800584e:	f7ff ff09 	bl	8005664 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005852:	bf00      	nop
 8005854:	3710      	adds	r7, #16
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}

0800585a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800585a:	b480      	push	{r7}
 800585c:	b085      	sub	sp, #20
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005868:	b2db      	uxtb	r3, r3
 800586a:	2b21      	cmp	r3, #33	; 0x21
 800586c:	d13e      	bne.n	80058ec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005876:	d114      	bne.n	80058a2 <UART_Transmit_IT+0x48>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	691b      	ldr	r3, [r3, #16]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d110      	bne.n	80058a2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6a1b      	ldr	r3, [r3, #32]
 8005884:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	881b      	ldrh	r3, [r3, #0]
 800588a:	461a      	mov	r2, r3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005894:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a1b      	ldr	r3, [r3, #32]
 800589a:	1c9a      	adds	r2, r3, #2
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	621a      	str	r2, [r3, #32]
 80058a0:	e008      	b.n	80058b4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a1b      	ldr	r3, [r3, #32]
 80058a6:	1c59      	adds	r1, r3, #1
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	6211      	str	r1, [r2, #32]
 80058ac:	781a      	ldrb	r2, [r3, #0]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	3b01      	subs	r3, #1
 80058bc:	b29b      	uxth	r3, r3
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	4619      	mov	r1, r3
 80058c2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d10f      	bne.n	80058e8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68da      	ldr	r2, [r3, #12]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058d6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68da      	ldr	r2, [r3, #12]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058e6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80058e8:	2300      	movs	r3, #0
 80058ea:	e000      	b.n	80058ee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80058ec:	2302      	movs	r3, #2
  }
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3714      	adds	r7, #20
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr

080058fa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80058fa:	b580      	push	{r7, lr}
 80058fc:	b082      	sub	sp, #8
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68da      	ldr	r2, [r3, #12]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005910:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2220      	movs	r2, #32
 8005916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f7ff fe8e 	bl	800563c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	3708      	adds	r7, #8
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}

0800592a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800592a:	b580      	push	{r7, lr}
 800592c:	b08c      	sub	sp, #48	; 0x30
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005938:	b2db      	uxtb	r3, r3
 800593a:	2b22      	cmp	r3, #34	; 0x22
 800593c:	f040 80ab 	bne.w	8005a96 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005948:	d117      	bne.n	800597a <UART_Receive_IT+0x50>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d113      	bne.n	800597a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005952:	2300      	movs	r3, #0
 8005954:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800595a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	b29b      	uxth	r3, r3
 8005964:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005968:	b29a      	uxth	r2, r3
 800596a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800596c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005972:	1c9a      	adds	r2, r3, #2
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	629a      	str	r2, [r3, #40]	; 0x28
 8005978:	e026      	b.n	80059c8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800597e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005980:	2300      	movs	r3, #0
 8005982:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800598c:	d007      	beq.n	800599e <UART_Receive_IT+0x74>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d10a      	bne.n	80059ac <UART_Receive_IT+0x82>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d106      	bne.n	80059ac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	b2da      	uxtb	r2, r3
 80059a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059a8:	701a      	strb	r2, [r3, #0]
 80059aa:	e008      	b.n	80059be <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059b8:	b2da      	uxtb	r2, r3
 80059ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059bc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c2:	1c5a      	adds	r2, r3, #1
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	3b01      	subs	r3, #1
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	4619      	mov	r1, r3
 80059d6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d15a      	bne.n	8005a92 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	68da      	ldr	r2, [r3, #12]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f022 0220 	bic.w	r2, r2, #32
 80059ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	68da      	ldr	r2, [r3, #12]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80059fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	695a      	ldr	r2, [r3, #20]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f022 0201 	bic.w	r2, r2, #1
 8005a0a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2220      	movs	r2, #32
 8005a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d135      	bne.n	8005a88 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	330c      	adds	r3, #12
 8005a28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	e853 3f00 	ldrex	r3, [r3]
 8005a30:	613b      	str	r3, [r7, #16]
   return(result);
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	f023 0310 	bic.w	r3, r3, #16
 8005a38:	627b      	str	r3, [r7, #36]	; 0x24
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	330c      	adds	r3, #12
 8005a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a42:	623a      	str	r2, [r7, #32]
 8005a44:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a46:	69f9      	ldr	r1, [r7, #28]
 8005a48:	6a3a      	ldr	r2, [r7, #32]
 8005a4a:	e841 2300 	strex	r3, r2, [r1]
 8005a4e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d1e5      	bne.n	8005a22 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 0310 	and.w	r3, r3, #16
 8005a60:	2b10      	cmp	r3, #16
 8005a62:	d10a      	bne.n	8005a7a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a64:	2300      	movs	r3, #0
 8005a66:	60fb      	str	r3, [r7, #12]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	60fb      	str	r3, [r7, #12]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	60fb      	str	r3, [r7, #12]
 8005a78:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005a7e:	4619      	mov	r1, r3
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f7ff fdf9 	bl	8005678 <HAL_UARTEx_RxEventCallback>
 8005a86:	e002      	b.n	8005a8e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f7ff fde1 	bl	8005650 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	e002      	b.n	8005a98 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005a92:	2300      	movs	r3, #0
 8005a94:	e000      	b.n	8005a98 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005a96:	2302      	movs	r3, #2
  }
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3730      	adds	r7, #48	; 0x30
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aa4:	b09f      	sub	sp, #124	; 0x7c
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005aaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005ab4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ab6:	68d9      	ldr	r1, [r3, #12]
 8005ab8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	ea40 0301 	orr.w	r3, r0, r1
 8005ac0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ac2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ac4:	689a      	ldr	r2, [r3, #8]
 8005ac6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	431a      	orrs	r2, r3
 8005acc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ace:	695b      	ldr	r3, [r3, #20]
 8005ad0:	431a      	orrs	r2, r3
 8005ad2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ad4:	69db      	ldr	r3, [r3, #28]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005ada:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005ae4:	f021 010c 	bic.w	r1, r1, #12
 8005ae8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005aee:	430b      	orrs	r3, r1
 8005af0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005af2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	695b      	ldr	r3, [r3, #20]
 8005af8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005afc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005afe:	6999      	ldr	r1, [r3, #24]
 8005b00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	ea40 0301 	orr.w	r3, r0, r1
 8005b08:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	4bc5      	ldr	r3, [pc, #788]	; (8005e24 <UART_SetConfig+0x384>)
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d004      	beq.n	8005b1e <UART_SetConfig+0x7e>
 8005b14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	4bc3      	ldr	r3, [pc, #780]	; (8005e28 <UART_SetConfig+0x388>)
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d103      	bne.n	8005b26 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b1e:	f7fe fd93 	bl	8004648 <HAL_RCC_GetPCLK2Freq>
 8005b22:	6778      	str	r0, [r7, #116]	; 0x74
 8005b24:	e002      	b.n	8005b2c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b26:	f7fe fd7b 	bl	8004620 <HAL_RCC_GetPCLK1Freq>
 8005b2a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b2e:	69db      	ldr	r3, [r3, #28]
 8005b30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b34:	f040 80b6 	bne.w	8005ca4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b3a:	461c      	mov	r4, r3
 8005b3c:	f04f 0500 	mov.w	r5, #0
 8005b40:	4622      	mov	r2, r4
 8005b42:	462b      	mov	r3, r5
 8005b44:	1891      	adds	r1, r2, r2
 8005b46:	6439      	str	r1, [r7, #64]	; 0x40
 8005b48:	415b      	adcs	r3, r3
 8005b4a:	647b      	str	r3, [r7, #68]	; 0x44
 8005b4c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005b50:	1912      	adds	r2, r2, r4
 8005b52:	eb45 0303 	adc.w	r3, r5, r3
 8005b56:	f04f 0000 	mov.w	r0, #0
 8005b5a:	f04f 0100 	mov.w	r1, #0
 8005b5e:	00d9      	lsls	r1, r3, #3
 8005b60:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005b64:	00d0      	lsls	r0, r2, #3
 8005b66:	4602      	mov	r2, r0
 8005b68:	460b      	mov	r3, r1
 8005b6a:	1911      	adds	r1, r2, r4
 8005b6c:	6639      	str	r1, [r7, #96]	; 0x60
 8005b6e:	416b      	adcs	r3, r5
 8005b70:	667b      	str	r3, [r7, #100]	; 0x64
 8005b72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	461a      	mov	r2, r3
 8005b78:	f04f 0300 	mov.w	r3, #0
 8005b7c:	1891      	adds	r1, r2, r2
 8005b7e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005b80:	415b      	adcs	r3, r3
 8005b82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005b88:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005b8c:	f7fb f814 	bl	8000bb8 <__aeabi_uldivmod>
 8005b90:	4602      	mov	r2, r0
 8005b92:	460b      	mov	r3, r1
 8005b94:	4ba5      	ldr	r3, [pc, #660]	; (8005e2c <UART_SetConfig+0x38c>)
 8005b96:	fba3 2302 	umull	r2, r3, r3, r2
 8005b9a:	095b      	lsrs	r3, r3, #5
 8005b9c:	011e      	lsls	r6, r3, #4
 8005b9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ba0:	461c      	mov	r4, r3
 8005ba2:	f04f 0500 	mov.w	r5, #0
 8005ba6:	4622      	mov	r2, r4
 8005ba8:	462b      	mov	r3, r5
 8005baa:	1891      	adds	r1, r2, r2
 8005bac:	6339      	str	r1, [r7, #48]	; 0x30
 8005bae:	415b      	adcs	r3, r3
 8005bb0:	637b      	str	r3, [r7, #52]	; 0x34
 8005bb2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005bb6:	1912      	adds	r2, r2, r4
 8005bb8:	eb45 0303 	adc.w	r3, r5, r3
 8005bbc:	f04f 0000 	mov.w	r0, #0
 8005bc0:	f04f 0100 	mov.w	r1, #0
 8005bc4:	00d9      	lsls	r1, r3, #3
 8005bc6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005bca:	00d0      	lsls	r0, r2, #3
 8005bcc:	4602      	mov	r2, r0
 8005bce:	460b      	mov	r3, r1
 8005bd0:	1911      	adds	r1, r2, r4
 8005bd2:	65b9      	str	r1, [r7, #88]	; 0x58
 8005bd4:	416b      	adcs	r3, r5
 8005bd6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005bd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	461a      	mov	r2, r3
 8005bde:	f04f 0300 	mov.w	r3, #0
 8005be2:	1891      	adds	r1, r2, r2
 8005be4:	62b9      	str	r1, [r7, #40]	; 0x28
 8005be6:	415b      	adcs	r3, r3
 8005be8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005bee:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005bf2:	f7fa ffe1 	bl	8000bb8 <__aeabi_uldivmod>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	4b8c      	ldr	r3, [pc, #560]	; (8005e2c <UART_SetConfig+0x38c>)
 8005bfc:	fba3 1302 	umull	r1, r3, r3, r2
 8005c00:	095b      	lsrs	r3, r3, #5
 8005c02:	2164      	movs	r1, #100	; 0x64
 8005c04:	fb01 f303 	mul.w	r3, r1, r3
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	00db      	lsls	r3, r3, #3
 8005c0c:	3332      	adds	r3, #50	; 0x32
 8005c0e:	4a87      	ldr	r2, [pc, #540]	; (8005e2c <UART_SetConfig+0x38c>)
 8005c10:	fba2 2303 	umull	r2, r3, r2, r3
 8005c14:	095b      	lsrs	r3, r3, #5
 8005c16:	005b      	lsls	r3, r3, #1
 8005c18:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005c1c:	441e      	add	r6, r3
 8005c1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c20:	4618      	mov	r0, r3
 8005c22:	f04f 0100 	mov.w	r1, #0
 8005c26:	4602      	mov	r2, r0
 8005c28:	460b      	mov	r3, r1
 8005c2a:	1894      	adds	r4, r2, r2
 8005c2c:	623c      	str	r4, [r7, #32]
 8005c2e:	415b      	adcs	r3, r3
 8005c30:	627b      	str	r3, [r7, #36]	; 0x24
 8005c32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005c36:	1812      	adds	r2, r2, r0
 8005c38:	eb41 0303 	adc.w	r3, r1, r3
 8005c3c:	f04f 0400 	mov.w	r4, #0
 8005c40:	f04f 0500 	mov.w	r5, #0
 8005c44:	00dd      	lsls	r5, r3, #3
 8005c46:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005c4a:	00d4      	lsls	r4, r2, #3
 8005c4c:	4622      	mov	r2, r4
 8005c4e:	462b      	mov	r3, r5
 8005c50:	1814      	adds	r4, r2, r0
 8005c52:	653c      	str	r4, [r7, #80]	; 0x50
 8005c54:	414b      	adcs	r3, r1
 8005c56:	657b      	str	r3, [r7, #84]	; 0x54
 8005c58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	f04f 0300 	mov.w	r3, #0
 8005c62:	1891      	adds	r1, r2, r2
 8005c64:	61b9      	str	r1, [r7, #24]
 8005c66:	415b      	adcs	r3, r3
 8005c68:	61fb      	str	r3, [r7, #28]
 8005c6a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c6e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005c72:	f7fa ffa1 	bl	8000bb8 <__aeabi_uldivmod>
 8005c76:	4602      	mov	r2, r0
 8005c78:	460b      	mov	r3, r1
 8005c7a:	4b6c      	ldr	r3, [pc, #432]	; (8005e2c <UART_SetConfig+0x38c>)
 8005c7c:	fba3 1302 	umull	r1, r3, r3, r2
 8005c80:	095b      	lsrs	r3, r3, #5
 8005c82:	2164      	movs	r1, #100	; 0x64
 8005c84:	fb01 f303 	mul.w	r3, r1, r3
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	00db      	lsls	r3, r3, #3
 8005c8c:	3332      	adds	r3, #50	; 0x32
 8005c8e:	4a67      	ldr	r2, [pc, #412]	; (8005e2c <UART_SetConfig+0x38c>)
 8005c90:	fba2 2303 	umull	r2, r3, r2, r3
 8005c94:	095b      	lsrs	r3, r3, #5
 8005c96:	f003 0207 	and.w	r2, r3, #7
 8005c9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4432      	add	r2, r6
 8005ca0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005ca2:	e0b9      	b.n	8005e18 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ca4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ca6:	461c      	mov	r4, r3
 8005ca8:	f04f 0500 	mov.w	r5, #0
 8005cac:	4622      	mov	r2, r4
 8005cae:	462b      	mov	r3, r5
 8005cb0:	1891      	adds	r1, r2, r2
 8005cb2:	6139      	str	r1, [r7, #16]
 8005cb4:	415b      	adcs	r3, r3
 8005cb6:	617b      	str	r3, [r7, #20]
 8005cb8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005cbc:	1912      	adds	r2, r2, r4
 8005cbe:	eb45 0303 	adc.w	r3, r5, r3
 8005cc2:	f04f 0000 	mov.w	r0, #0
 8005cc6:	f04f 0100 	mov.w	r1, #0
 8005cca:	00d9      	lsls	r1, r3, #3
 8005ccc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005cd0:	00d0      	lsls	r0, r2, #3
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	eb12 0804 	adds.w	r8, r2, r4
 8005cda:	eb43 0905 	adc.w	r9, r3, r5
 8005cde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f04f 0100 	mov.w	r1, #0
 8005ce8:	f04f 0200 	mov.w	r2, #0
 8005cec:	f04f 0300 	mov.w	r3, #0
 8005cf0:	008b      	lsls	r3, r1, #2
 8005cf2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005cf6:	0082      	lsls	r2, r0, #2
 8005cf8:	4640      	mov	r0, r8
 8005cfa:	4649      	mov	r1, r9
 8005cfc:	f7fa ff5c 	bl	8000bb8 <__aeabi_uldivmod>
 8005d00:	4602      	mov	r2, r0
 8005d02:	460b      	mov	r3, r1
 8005d04:	4b49      	ldr	r3, [pc, #292]	; (8005e2c <UART_SetConfig+0x38c>)
 8005d06:	fba3 2302 	umull	r2, r3, r3, r2
 8005d0a:	095b      	lsrs	r3, r3, #5
 8005d0c:	011e      	lsls	r6, r3, #4
 8005d0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d10:	4618      	mov	r0, r3
 8005d12:	f04f 0100 	mov.w	r1, #0
 8005d16:	4602      	mov	r2, r0
 8005d18:	460b      	mov	r3, r1
 8005d1a:	1894      	adds	r4, r2, r2
 8005d1c:	60bc      	str	r4, [r7, #8]
 8005d1e:	415b      	adcs	r3, r3
 8005d20:	60fb      	str	r3, [r7, #12]
 8005d22:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d26:	1812      	adds	r2, r2, r0
 8005d28:	eb41 0303 	adc.w	r3, r1, r3
 8005d2c:	f04f 0400 	mov.w	r4, #0
 8005d30:	f04f 0500 	mov.w	r5, #0
 8005d34:	00dd      	lsls	r5, r3, #3
 8005d36:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005d3a:	00d4      	lsls	r4, r2, #3
 8005d3c:	4622      	mov	r2, r4
 8005d3e:	462b      	mov	r3, r5
 8005d40:	1814      	adds	r4, r2, r0
 8005d42:	64bc      	str	r4, [r7, #72]	; 0x48
 8005d44:	414b      	adcs	r3, r1
 8005d46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f04f 0100 	mov.w	r1, #0
 8005d52:	f04f 0200 	mov.w	r2, #0
 8005d56:	f04f 0300 	mov.w	r3, #0
 8005d5a:	008b      	lsls	r3, r1, #2
 8005d5c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005d60:	0082      	lsls	r2, r0, #2
 8005d62:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005d66:	f7fa ff27 	bl	8000bb8 <__aeabi_uldivmod>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	4b2f      	ldr	r3, [pc, #188]	; (8005e2c <UART_SetConfig+0x38c>)
 8005d70:	fba3 1302 	umull	r1, r3, r3, r2
 8005d74:	095b      	lsrs	r3, r3, #5
 8005d76:	2164      	movs	r1, #100	; 0x64
 8005d78:	fb01 f303 	mul.w	r3, r1, r3
 8005d7c:	1ad3      	subs	r3, r2, r3
 8005d7e:	011b      	lsls	r3, r3, #4
 8005d80:	3332      	adds	r3, #50	; 0x32
 8005d82:	4a2a      	ldr	r2, [pc, #168]	; (8005e2c <UART_SetConfig+0x38c>)
 8005d84:	fba2 2303 	umull	r2, r3, r2, r3
 8005d88:	095b      	lsrs	r3, r3, #5
 8005d8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d8e:	441e      	add	r6, r3
 8005d90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d92:	4618      	mov	r0, r3
 8005d94:	f04f 0100 	mov.w	r1, #0
 8005d98:	4602      	mov	r2, r0
 8005d9a:	460b      	mov	r3, r1
 8005d9c:	1894      	adds	r4, r2, r2
 8005d9e:	603c      	str	r4, [r7, #0]
 8005da0:	415b      	adcs	r3, r3
 8005da2:	607b      	str	r3, [r7, #4]
 8005da4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005da8:	1812      	adds	r2, r2, r0
 8005daa:	eb41 0303 	adc.w	r3, r1, r3
 8005dae:	f04f 0400 	mov.w	r4, #0
 8005db2:	f04f 0500 	mov.w	r5, #0
 8005db6:	00dd      	lsls	r5, r3, #3
 8005db8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005dbc:	00d4      	lsls	r4, r2, #3
 8005dbe:	4622      	mov	r2, r4
 8005dc0:	462b      	mov	r3, r5
 8005dc2:	eb12 0a00 	adds.w	sl, r2, r0
 8005dc6:	eb43 0b01 	adc.w	fp, r3, r1
 8005dca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f04f 0100 	mov.w	r1, #0
 8005dd4:	f04f 0200 	mov.w	r2, #0
 8005dd8:	f04f 0300 	mov.w	r3, #0
 8005ddc:	008b      	lsls	r3, r1, #2
 8005dde:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005de2:	0082      	lsls	r2, r0, #2
 8005de4:	4650      	mov	r0, sl
 8005de6:	4659      	mov	r1, fp
 8005de8:	f7fa fee6 	bl	8000bb8 <__aeabi_uldivmod>
 8005dec:	4602      	mov	r2, r0
 8005dee:	460b      	mov	r3, r1
 8005df0:	4b0e      	ldr	r3, [pc, #56]	; (8005e2c <UART_SetConfig+0x38c>)
 8005df2:	fba3 1302 	umull	r1, r3, r3, r2
 8005df6:	095b      	lsrs	r3, r3, #5
 8005df8:	2164      	movs	r1, #100	; 0x64
 8005dfa:	fb01 f303 	mul.w	r3, r1, r3
 8005dfe:	1ad3      	subs	r3, r2, r3
 8005e00:	011b      	lsls	r3, r3, #4
 8005e02:	3332      	adds	r3, #50	; 0x32
 8005e04:	4a09      	ldr	r2, [pc, #36]	; (8005e2c <UART_SetConfig+0x38c>)
 8005e06:	fba2 2303 	umull	r2, r3, r2, r3
 8005e0a:	095b      	lsrs	r3, r3, #5
 8005e0c:	f003 020f 	and.w	r2, r3, #15
 8005e10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4432      	add	r2, r6
 8005e16:	609a      	str	r2, [r3, #8]
}
 8005e18:	bf00      	nop
 8005e1a:	377c      	adds	r7, #124	; 0x7c
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e22:	bf00      	nop
 8005e24:	40011000 	.word	0x40011000
 8005e28:	40011400 	.word	0x40011400
 8005e2c:	51eb851f 	.word	0x51eb851f

08005e30 <__errno>:
 8005e30:	4b01      	ldr	r3, [pc, #4]	; (8005e38 <__errno+0x8>)
 8005e32:	6818      	ldr	r0, [r3, #0]
 8005e34:	4770      	bx	lr
 8005e36:	bf00      	nop
 8005e38:	20000028 	.word	0x20000028

08005e3c <__libc_init_array>:
 8005e3c:	b570      	push	{r4, r5, r6, lr}
 8005e3e:	4d0d      	ldr	r5, [pc, #52]	; (8005e74 <__libc_init_array+0x38>)
 8005e40:	4c0d      	ldr	r4, [pc, #52]	; (8005e78 <__libc_init_array+0x3c>)
 8005e42:	1b64      	subs	r4, r4, r5
 8005e44:	10a4      	asrs	r4, r4, #2
 8005e46:	2600      	movs	r6, #0
 8005e48:	42a6      	cmp	r6, r4
 8005e4a:	d109      	bne.n	8005e60 <__libc_init_array+0x24>
 8005e4c:	4d0b      	ldr	r5, [pc, #44]	; (8005e7c <__libc_init_array+0x40>)
 8005e4e:	4c0c      	ldr	r4, [pc, #48]	; (8005e80 <__libc_init_array+0x44>)
 8005e50:	f002 fed4 	bl	8008bfc <_init>
 8005e54:	1b64      	subs	r4, r4, r5
 8005e56:	10a4      	asrs	r4, r4, #2
 8005e58:	2600      	movs	r6, #0
 8005e5a:	42a6      	cmp	r6, r4
 8005e5c:	d105      	bne.n	8005e6a <__libc_init_array+0x2e>
 8005e5e:	bd70      	pop	{r4, r5, r6, pc}
 8005e60:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e64:	4798      	blx	r3
 8005e66:	3601      	adds	r6, #1
 8005e68:	e7ee      	b.n	8005e48 <__libc_init_array+0xc>
 8005e6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e6e:	4798      	blx	r3
 8005e70:	3601      	adds	r6, #1
 8005e72:	e7f2      	b.n	8005e5a <__libc_init_array+0x1e>
 8005e74:	0800906c 	.word	0x0800906c
 8005e78:	0800906c 	.word	0x0800906c
 8005e7c:	0800906c 	.word	0x0800906c
 8005e80:	08009070 	.word	0x08009070

08005e84 <memset>:
 8005e84:	4402      	add	r2, r0
 8005e86:	4603      	mov	r3, r0
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d100      	bne.n	8005e8e <memset+0xa>
 8005e8c:	4770      	bx	lr
 8005e8e:	f803 1b01 	strb.w	r1, [r3], #1
 8005e92:	e7f9      	b.n	8005e88 <memset+0x4>

08005e94 <__cvt>:
 8005e94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e98:	ec55 4b10 	vmov	r4, r5, d0
 8005e9c:	2d00      	cmp	r5, #0
 8005e9e:	460e      	mov	r6, r1
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	462b      	mov	r3, r5
 8005ea4:	bfbb      	ittet	lt
 8005ea6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005eaa:	461d      	movlt	r5, r3
 8005eac:	2300      	movge	r3, #0
 8005eae:	232d      	movlt	r3, #45	; 0x2d
 8005eb0:	700b      	strb	r3, [r1, #0]
 8005eb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005eb4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005eb8:	4691      	mov	r9, r2
 8005eba:	f023 0820 	bic.w	r8, r3, #32
 8005ebe:	bfbc      	itt	lt
 8005ec0:	4622      	movlt	r2, r4
 8005ec2:	4614      	movlt	r4, r2
 8005ec4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005ec8:	d005      	beq.n	8005ed6 <__cvt+0x42>
 8005eca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005ece:	d100      	bne.n	8005ed2 <__cvt+0x3e>
 8005ed0:	3601      	adds	r6, #1
 8005ed2:	2102      	movs	r1, #2
 8005ed4:	e000      	b.n	8005ed8 <__cvt+0x44>
 8005ed6:	2103      	movs	r1, #3
 8005ed8:	ab03      	add	r3, sp, #12
 8005eda:	9301      	str	r3, [sp, #4]
 8005edc:	ab02      	add	r3, sp, #8
 8005ede:	9300      	str	r3, [sp, #0]
 8005ee0:	ec45 4b10 	vmov	d0, r4, r5
 8005ee4:	4653      	mov	r3, sl
 8005ee6:	4632      	mov	r2, r6
 8005ee8:	f000 fd0a 	bl	8006900 <_dtoa_r>
 8005eec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005ef0:	4607      	mov	r7, r0
 8005ef2:	d102      	bne.n	8005efa <__cvt+0x66>
 8005ef4:	f019 0f01 	tst.w	r9, #1
 8005ef8:	d022      	beq.n	8005f40 <__cvt+0xac>
 8005efa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005efe:	eb07 0906 	add.w	r9, r7, r6
 8005f02:	d110      	bne.n	8005f26 <__cvt+0x92>
 8005f04:	783b      	ldrb	r3, [r7, #0]
 8005f06:	2b30      	cmp	r3, #48	; 0x30
 8005f08:	d10a      	bne.n	8005f20 <__cvt+0x8c>
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	4620      	mov	r0, r4
 8005f10:	4629      	mov	r1, r5
 8005f12:	f7fa fde1 	bl	8000ad8 <__aeabi_dcmpeq>
 8005f16:	b918      	cbnz	r0, 8005f20 <__cvt+0x8c>
 8005f18:	f1c6 0601 	rsb	r6, r6, #1
 8005f1c:	f8ca 6000 	str.w	r6, [sl]
 8005f20:	f8da 3000 	ldr.w	r3, [sl]
 8005f24:	4499      	add	r9, r3
 8005f26:	2200      	movs	r2, #0
 8005f28:	2300      	movs	r3, #0
 8005f2a:	4620      	mov	r0, r4
 8005f2c:	4629      	mov	r1, r5
 8005f2e:	f7fa fdd3 	bl	8000ad8 <__aeabi_dcmpeq>
 8005f32:	b108      	cbz	r0, 8005f38 <__cvt+0xa4>
 8005f34:	f8cd 900c 	str.w	r9, [sp, #12]
 8005f38:	2230      	movs	r2, #48	; 0x30
 8005f3a:	9b03      	ldr	r3, [sp, #12]
 8005f3c:	454b      	cmp	r3, r9
 8005f3e:	d307      	bcc.n	8005f50 <__cvt+0xbc>
 8005f40:	9b03      	ldr	r3, [sp, #12]
 8005f42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005f44:	1bdb      	subs	r3, r3, r7
 8005f46:	4638      	mov	r0, r7
 8005f48:	6013      	str	r3, [r2, #0]
 8005f4a:	b004      	add	sp, #16
 8005f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f50:	1c59      	adds	r1, r3, #1
 8005f52:	9103      	str	r1, [sp, #12]
 8005f54:	701a      	strb	r2, [r3, #0]
 8005f56:	e7f0      	b.n	8005f3a <__cvt+0xa6>

08005f58 <__exponent>:
 8005f58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	2900      	cmp	r1, #0
 8005f5e:	bfb8      	it	lt
 8005f60:	4249      	neglt	r1, r1
 8005f62:	f803 2b02 	strb.w	r2, [r3], #2
 8005f66:	bfb4      	ite	lt
 8005f68:	222d      	movlt	r2, #45	; 0x2d
 8005f6a:	222b      	movge	r2, #43	; 0x2b
 8005f6c:	2909      	cmp	r1, #9
 8005f6e:	7042      	strb	r2, [r0, #1]
 8005f70:	dd2a      	ble.n	8005fc8 <__exponent+0x70>
 8005f72:	f10d 0407 	add.w	r4, sp, #7
 8005f76:	46a4      	mov	ip, r4
 8005f78:	270a      	movs	r7, #10
 8005f7a:	46a6      	mov	lr, r4
 8005f7c:	460a      	mov	r2, r1
 8005f7e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005f82:	fb07 1516 	mls	r5, r7, r6, r1
 8005f86:	3530      	adds	r5, #48	; 0x30
 8005f88:	2a63      	cmp	r2, #99	; 0x63
 8005f8a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8005f8e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005f92:	4631      	mov	r1, r6
 8005f94:	dcf1      	bgt.n	8005f7a <__exponent+0x22>
 8005f96:	3130      	adds	r1, #48	; 0x30
 8005f98:	f1ae 0502 	sub.w	r5, lr, #2
 8005f9c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005fa0:	1c44      	adds	r4, r0, #1
 8005fa2:	4629      	mov	r1, r5
 8005fa4:	4561      	cmp	r1, ip
 8005fa6:	d30a      	bcc.n	8005fbe <__exponent+0x66>
 8005fa8:	f10d 0209 	add.w	r2, sp, #9
 8005fac:	eba2 020e 	sub.w	r2, r2, lr
 8005fb0:	4565      	cmp	r5, ip
 8005fb2:	bf88      	it	hi
 8005fb4:	2200      	movhi	r2, #0
 8005fb6:	4413      	add	r3, r2
 8005fb8:	1a18      	subs	r0, r3, r0
 8005fba:	b003      	add	sp, #12
 8005fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005fc2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005fc6:	e7ed      	b.n	8005fa4 <__exponent+0x4c>
 8005fc8:	2330      	movs	r3, #48	; 0x30
 8005fca:	3130      	adds	r1, #48	; 0x30
 8005fcc:	7083      	strb	r3, [r0, #2]
 8005fce:	70c1      	strb	r1, [r0, #3]
 8005fd0:	1d03      	adds	r3, r0, #4
 8005fd2:	e7f1      	b.n	8005fb8 <__exponent+0x60>

08005fd4 <_printf_float>:
 8005fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fd8:	ed2d 8b02 	vpush	{d8}
 8005fdc:	b08d      	sub	sp, #52	; 0x34
 8005fde:	460c      	mov	r4, r1
 8005fe0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005fe4:	4616      	mov	r6, r2
 8005fe6:	461f      	mov	r7, r3
 8005fe8:	4605      	mov	r5, r0
 8005fea:	f001 fa75 	bl	80074d8 <_localeconv_r>
 8005fee:	f8d0 a000 	ldr.w	sl, [r0]
 8005ff2:	4650      	mov	r0, sl
 8005ff4:	f7fa f8f4 	bl	80001e0 <strlen>
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	930a      	str	r3, [sp, #40]	; 0x28
 8005ffc:	6823      	ldr	r3, [r4, #0]
 8005ffe:	9305      	str	r3, [sp, #20]
 8006000:	f8d8 3000 	ldr.w	r3, [r8]
 8006004:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006008:	3307      	adds	r3, #7
 800600a:	f023 0307 	bic.w	r3, r3, #7
 800600e:	f103 0208 	add.w	r2, r3, #8
 8006012:	f8c8 2000 	str.w	r2, [r8]
 8006016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800601a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800601e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006022:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006026:	9307      	str	r3, [sp, #28]
 8006028:	f8cd 8018 	str.w	r8, [sp, #24]
 800602c:	ee08 0a10 	vmov	s16, r0
 8006030:	4b9f      	ldr	r3, [pc, #636]	; (80062b0 <_printf_float+0x2dc>)
 8006032:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006036:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800603a:	f7fa fd7f 	bl	8000b3c <__aeabi_dcmpun>
 800603e:	bb88      	cbnz	r0, 80060a4 <_printf_float+0xd0>
 8006040:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006044:	4b9a      	ldr	r3, [pc, #616]	; (80062b0 <_printf_float+0x2dc>)
 8006046:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800604a:	f7fa fd59 	bl	8000b00 <__aeabi_dcmple>
 800604e:	bb48      	cbnz	r0, 80060a4 <_printf_float+0xd0>
 8006050:	2200      	movs	r2, #0
 8006052:	2300      	movs	r3, #0
 8006054:	4640      	mov	r0, r8
 8006056:	4649      	mov	r1, r9
 8006058:	f7fa fd48 	bl	8000aec <__aeabi_dcmplt>
 800605c:	b110      	cbz	r0, 8006064 <_printf_float+0x90>
 800605e:	232d      	movs	r3, #45	; 0x2d
 8006060:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006064:	4b93      	ldr	r3, [pc, #588]	; (80062b4 <_printf_float+0x2e0>)
 8006066:	4894      	ldr	r0, [pc, #592]	; (80062b8 <_printf_float+0x2e4>)
 8006068:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800606c:	bf94      	ite	ls
 800606e:	4698      	movls	r8, r3
 8006070:	4680      	movhi	r8, r0
 8006072:	2303      	movs	r3, #3
 8006074:	6123      	str	r3, [r4, #16]
 8006076:	9b05      	ldr	r3, [sp, #20]
 8006078:	f023 0204 	bic.w	r2, r3, #4
 800607c:	6022      	str	r2, [r4, #0]
 800607e:	f04f 0900 	mov.w	r9, #0
 8006082:	9700      	str	r7, [sp, #0]
 8006084:	4633      	mov	r3, r6
 8006086:	aa0b      	add	r2, sp, #44	; 0x2c
 8006088:	4621      	mov	r1, r4
 800608a:	4628      	mov	r0, r5
 800608c:	f000 f9d8 	bl	8006440 <_printf_common>
 8006090:	3001      	adds	r0, #1
 8006092:	f040 8090 	bne.w	80061b6 <_printf_float+0x1e2>
 8006096:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800609a:	b00d      	add	sp, #52	; 0x34
 800609c:	ecbd 8b02 	vpop	{d8}
 80060a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060a4:	4642      	mov	r2, r8
 80060a6:	464b      	mov	r3, r9
 80060a8:	4640      	mov	r0, r8
 80060aa:	4649      	mov	r1, r9
 80060ac:	f7fa fd46 	bl	8000b3c <__aeabi_dcmpun>
 80060b0:	b140      	cbz	r0, 80060c4 <_printf_float+0xf0>
 80060b2:	464b      	mov	r3, r9
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	bfbc      	itt	lt
 80060b8:	232d      	movlt	r3, #45	; 0x2d
 80060ba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80060be:	487f      	ldr	r0, [pc, #508]	; (80062bc <_printf_float+0x2e8>)
 80060c0:	4b7f      	ldr	r3, [pc, #508]	; (80062c0 <_printf_float+0x2ec>)
 80060c2:	e7d1      	b.n	8006068 <_printf_float+0x94>
 80060c4:	6863      	ldr	r3, [r4, #4]
 80060c6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80060ca:	9206      	str	r2, [sp, #24]
 80060cc:	1c5a      	adds	r2, r3, #1
 80060ce:	d13f      	bne.n	8006150 <_printf_float+0x17c>
 80060d0:	2306      	movs	r3, #6
 80060d2:	6063      	str	r3, [r4, #4]
 80060d4:	9b05      	ldr	r3, [sp, #20]
 80060d6:	6861      	ldr	r1, [r4, #4]
 80060d8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80060dc:	2300      	movs	r3, #0
 80060de:	9303      	str	r3, [sp, #12]
 80060e0:	ab0a      	add	r3, sp, #40	; 0x28
 80060e2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80060e6:	ab09      	add	r3, sp, #36	; 0x24
 80060e8:	ec49 8b10 	vmov	d0, r8, r9
 80060ec:	9300      	str	r3, [sp, #0]
 80060ee:	6022      	str	r2, [r4, #0]
 80060f0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80060f4:	4628      	mov	r0, r5
 80060f6:	f7ff fecd 	bl	8005e94 <__cvt>
 80060fa:	9b06      	ldr	r3, [sp, #24]
 80060fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80060fe:	2b47      	cmp	r3, #71	; 0x47
 8006100:	4680      	mov	r8, r0
 8006102:	d108      	bne.n	8006116 <_printf_float+0x142>
 8006104:	1cc8      	adds	r0, r1, #3
 8006106:	db02      	blt.n	800610e <_printf_float+0x13a>
 8006108:	6863      	ldr	r3, [r4, #4]
 800610a:	4299      	cmp	r1, r3
 800610c:	dd41      	ble.n	8006192 <_printf_float+0x1be>
 800610e:	f1ab 0b02 	sub.w	fp, fp, #2
 8006112:	fa5f fb8b 	uxtb.w	fp, fp
 8006116:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800611a:	d820      	bhi.n	800615e <_printf_float+0x18a>
 800611c:	3901      	subs	r1, #1
 800611e:	465a      	mov	r2, fp
 8006120:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006124:	9109      	str	r1, [sp, #36]	; 0x24
 8006126:	f7ff ff17 	bl	8005f58 <__exponent>
 800612a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800612c:	1813      	adds	r3, r2, r0
 800612e:	2a01      	cmp	r2, #1
 8006130:	4681      	mov	r9, r0
 8006132:	6123      	str	r3, [r4, #16]
 8006134:	dc02      	bgt.n	800613c <_printf_float+0x168>
 8006136:	6822      	ldr	r2, [r4, #0]
 8006138:	07d2      	lsls	r2, r2, #31
 800613a:	d501      	bpl.n	8006140 <_printf_float+0x16c>
 800613c:	3301      	adds	r3, #1
 800613e:	6123      	str	r3, [r4, #16]
 8006140:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006144:	2b00      	cmp	r3, #0
 8006146:	d09c      	beq.n	8006082 <_printf_float+0xae>
 8006148:	232d      	movs	r3, #45	; 0x2d
 800614a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800614e:	e798      	b.n	8006082 <_printf_float+0xae>
 8006150:	9a06      	ldr	r2, [sp, #24]
 8006152:	2a47      	cmp	r2, #71	; 0x47
 8006154:	d1be      	bne.n	80060d4 <_printf_float+0x100>
 8006156:	2b00      	cmp	r3, #0
 8006158:	d1bc      	bne.n	80060d4 <_printf_float+0x100>
 800615a:	2301      	movs	r3, #1
 800615c:	e7b9      	b.n	80060d2 <_printf_float+0xfe>
 800615e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006162:	d118      	bne.n	8006196 <_printf_float+0x1c2>
 8006164:	2900      	cmp	r1, #0
 8006166:	6863      	ldr	r3, [r4, #4]
 8006168:	dd0b      	ble.n	8006182 <_printf_float+0x1ae>
 800616a:	6121      	str	r1, [r4, #16]
 800616c:	b913      	cbnz	r3, 8006174 <_printf_float+0x1a0>
 800616e:	6822      	ldr	r2, [r4, #0]
 8006170:	07d0      	lsls	r0, r2, #31
 8006172:	d502      	bpl.n	800617a <_printf_float+0x1a6>
 8006174:	3301      	adds	r3, #1
 8006176:	440b      	add	r3, r1
 8006178:	6123      	str	r3, [r4, #16]
 800617a:	65a1      	str	r1, [r4, #88]	; 0x58
 800617c:	f04f 0900 	mov.w	r9, #0
 8006180:	e7de      	b.n	8006140 <_printf_float+0x16c>
 8006182:	b913      	cbnz	r3, 800618a <_printf_float+0x1b6>
 8006184:	6822      	ldr	r2, [r4, #0]
 8006186:	07d2      	lsls	r2, r2, #31
 8006188:	d501      	bpl.n	800618e <_printf_float+0x1ba>
 800618a:	3302      	adds	r3, #2
 800618c:	e7f4      	b.n	8006178 <_printf_float+0x1a4>
 800618e:	2301      	movs	r3, #1
 8006190:	e7f2      	b.n	8006178 <_printf_float+0x1a4>
 8006192:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006196:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006198:	4299      	cmp	r1, r3
 800619a:	db05      	blt.n	80061a8 <_printf_float+0x1d4>
 800619c:	6823      	ldr	r3, [r4, #0]
 800619e:	6121      	str	r1, [r4, #16]
 80061a0:	07d8      	lsls	r0, r3, #31
 80061a2:	d5ea      	bpl.n	800617a <_printf_float+0x1a6>
 80061a4:	1c4b      	adds	r3, r1, #1
 80061a6:	e7e7      	b.n	8006178 <_printf_float+0x1a4>
 80061a8:	2900      	cmp	r1, #0
 80061aa:	bfd4      	ite	le
 80061ac:	f1c1 0202 	rsble	r2, r1, #2
 80061b0:	2201      	movgt	r2, #1
 80061b2:	4413      	add	r3, r2
 80061b4:	e7e0      	b.n	8006178 <_printf_float+0x1a4>
 80061b6:	6823      	ldr	r3, [r4, #0]
 80061b8:	055a      	lsls	r2, r3, #21
 80061ba:	d407      	bmi.n	80061cc <_printf_float+0x1f8>
 80061bc:	6923      	ldr	r3, [r4, #16]
 80061be:	4642      	mov	r2, r8
 80061c0:	4631      	mov	r1, r6
 80061c2:	4628      	mov	r0, r5
 80061c4:	47b8      	blx	r7
 80061c6:	3001      	adds	r0, #1
 80061c8:	d12c      	bne.n	8006224 <_printf_float+0x250>
 80061ca:	e764      	b.n	8006096 <_printf_float+0xc2>
 80061cc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80061d0:	f240 80e0 	bls.w	8006394 <_printf_float+0x3c0>
 80061d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80061d8:	2200      	movs	r2, #0
 80061da:	2300      	movs	r3, #0
 80061dc:	f7fa fc7c 	bl	8000ad8 <__aeabi_dcmpeq>
 80061e0:	2800      	cmp	r0, #0
 80061e2:	d034      	beq.n	800624e <_printf_float+0x27a>
 80061e4:	4a37      	ldr	r2, [pc, #220]	; (80062c4 <_printf_float+0x2f0>)
 80061e6:	2301      	movs	r3, #1
 80061e8:	4631      	mov	r1, r6
 80061ea:	4628      	mov	r0, r5
 80061ec:	47b8      	blx	r7
 80061ee:	3001      	adds	r0, #1
 80061f0:	f43f af51 	beq.w	8006096 <_printf_float+0xc2>
 80061f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80061f8:	429a      	cmp	r2, r3
 80061fa:	db02      	blt.n	8006202 <_printf_float+0x22e>
 80061fc:	6823      	ldr	r3, [r4, #0]
 80061fe:	07d8      	lsls	r0, r3, #31
 8006200:	d510      	bpl.n	8006224 <_printf_float+0x250>
 8006202:	ee18 3a10 	vmov	r3, s16
 8006206:	4652      	mov	r2, sl
 8006208:	4631      	mov	r1, r6
 800620a:	4628      	mov	r0, r5
 800620c:	47b8      	blx	r7
 800620e:	3001      	adds	r0, #1
 8006210:	f43f af41 	beq.w	8006096 <_printf_float+0xc2>
 8006214:	f04f 0800 	mov.w	r8, #0
 8006218:	f104 091a 	add.w	r9, r4, #26
 800621c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800621e:	3b01      	subs	r3, #1
 8006220:	4543      	cmp	r3, r8
 8006222:	dc09      	bgt.n	8006238 <_printf_float+0x264>
 8006224:	6823      	ldr	r3, [r4, #0]
 8006226:	079b      	lsls	r3, r3, #30
 8006228:	f100 8105 	bmi.w	8006436 <_printf_float+0x462>
 800622c:	68e0      	ldr	r0, [r4, #12]
 800622e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006230:	4298      	cmp	r0, r3
 8006232:	bfb8      	it	lt
 8006234:	4618      	movlt	r0, r3
 8006236:	e730      	b.n	800609a <_printf_float+0xc6>
 8006238:	2301      	movs	r3, #1
 800623a:	464a      	mov	r2, r9
 800623c:	4631      	mov	r1, r6
 800623e:	4628      	mov	r0, r5
 8006240:	47b8      	blx	r7
 8006242:	3001      	adds	r0, #1
 8006244:	f43f af27 	beq.w	8006096 <_printf_float+0xc2>
 8006248:	f108 0801 	add.w	r8, r8, #1
 800624c:	e7e6      	b.n	800621c <_printf_float+0x248>
 800624e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006250:	2b00      	cmp	r3, #0
 8006252:	dc39      	bgt.n	80062c8 <_printf_float+0x2f4>
 8006254:	4a1b      	ldr	r2, [pc, #108]	; (80062c4 <_printf_float+0x2f0>)
 8006256:	2301      	movs	r3, #1
 8006258:	4631      	mov	r1, r6
 800625a:	4628      	mov	r0, r5
 800625c:	47b8      	blx	r7
 800625e:	3001      	adds	r0, #1
 8006260:	f43f af19 	beq.w	8006096 <_printf_float+0xc2>
 8006264:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006268:	4313      	orrs	r3, r2
 800626a:	d102      	bne.n	8006272 <_printf_float+0x29e>
 800626c:	6823      	ldr	r3, [r4, #0]
 800626e:	07d9      	lsls	r1, r3, #31
 8006270:	d5d8      	bpl.n	8006224 <_printf_float+0x250>
 8006272:	ee18 3a10 	vmov	r3, s16
 8006276:	4652      	mov	r2, sl
 8006278:	4631      	mov	r1, r6
 800627a:	4628      	mov	r0, r5
 800627c:	47b8      	blx	r7
 800627e:	3001      	adds	r0, #1
 8006280:	f43f af09 	beq.w	8006096 <_printf_float+0xc2>
 8006284:	f04f 0900 	mov.w	r9, #0
 8006288:	f104 0a1a 	add.w	sl, r4, #26
 800628c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800628e:	425b      	negs	r3, r3
 8006290:	454b      	cmp	r3, r9
 8006292:	dc01      	bgt.n	8006298 <_printf_float+0x2c4>
 8006294:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006296:	e792      	b.n	80061be <_printf_float+0x1ea>
 8006298:	2301      	movs	r3, #1
 800629a:	4652      	mov	r2, sl
 800629c:	4631      	mov	r1, r6
 800629e:	4628      	mov	r0, r5
 80062a0:	47b8      	blx	r7
 80062a2:	3001      	adds	r0, #1
 80062a4:	f43f aef7 	beq.w	8006096 <_printf_float+0xc2>
 80062a8:	f109 0901 	add.w	r9, r9, #1
 80062ac:	e7ee      	b.n	800628c <_printf_float+0x2b8>
 80062ae:	bf00      	nop
 80062b0:	7fefffff 	.word	0x7fefffff
 80062b4:	08008c88 	.word	0x08008c88
 80062b8:	08008c8c 	.word	0x08008c8c
 80062bc:	08008c94 	.word	0x08008c94
 80062c0:	08008c90 	.word	0x08008c90
 80062c4:	08008c98 	.word	0x08008c98
 80062c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80062cc:	429a      	cmp	r2, r3
 80062ce:	bfa8      	it	ge
 80062d0:	461a      	movge	r2, r3
 80062d2:	2a00      	cmp	r2, #0
 80062d4:	4691      	mov	r9, r2
 80062d6:	dc37      	bgt.n	8006348 <_printf_float+0x374>
 80062d8:	f04f 0b00 	mov.w	fp, #0
 80062dc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80062e0:	f104 021a 	add.w	r2, r4, #26
 80062e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80062e6:	9305      	str	r3, [sp, #20]
 80062e8:	eba3 0309 	sub.w	r3, r3, r9
 80062ec:	455b      	cmp	r3, fp
 80062ee:	dc33      	bgt.n	8006358 <_printf_float+0x384>
 80062f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80062f4:	429a      	cmp	r2, r3
 80062f6:	db3b      	blt.n	8006370 <_printf_float+0x39c>
 80062f8:	6823      	ldr	r3, [r4, #0]
 80062fa:	07da      	lsls	r2, r3, #31
 80062fc:	d438      	bmi.n	8006370 <_printf_float+0x39c>
 80062fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006300:	9b05      	ldr	r3, [sp, #20]
 8006302:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006304:	1ad3      	subs	r3, r2, r3
 8006306:	eba2 0901 	sub.w	r9, r2, r1
 800630a:	4599      	cmp	r9, r3
 800630c:	bfa8      	it	ge
 800630e:	4699      	movge	r9, r3
 8006310:	f1b9 0f00 	cmp.w	r9, #0
 8006314:	dc35      	bgt.n	8006382 <_printf_float+0x3ae>
 8006316:	f04f 0800 	mov.w	r8, #0
 800631a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800631e:	f104 0a1a 	add.w	sl, r4, #26
 8006322:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006326:	1a9b      	subs	r3, r3, r2
 8006328:	eba3 0309 	sub.w	r3, r3, r9
 800632c:	4543      	cmp	r3, r8
 800632e:	f77f af79 	ble.w	8006224 <_printf_float+0x250>
 8006332:	2301      	movs	r3, #1
 8006334:	4652      	mov	r2, sl
 8006336:	4631      	mov	r1, r6
 8006338:	4628      	mov	r0, r5
 800633a:	47b8      	blx	r7
 800633c:	3001      	adds	r0, #1
 800633e:	f43f aeaa 	beq.w	8006096 <_printf_float+0xc2>
 8006342:	f108 0801 	add.w	r8, r8, #1
 8006346:	e7ec      	b.n	8006322 <_printf_float+0x34e>
 8006348:	4613      	mov	r3, r2
 800634a:	4631      	mov	r1, r6
 800634c:	4642      	mov	r2, r8
 800634e:	4628      	mov	r0, r5
 8006350:	47b8      	blx	r7
 8006352:	3001      	adds	r0, #1
 8006354:	d1c0      	bne.n	80062d8 <_printf_float+0x304>
 8006356:	e69e      	b.n	8006096 <_printf_float+0xc2>
 8006358:	2301      	movs	r3, #1
 800635a:	4631      	mov	r1, r6
 800635c:	4628      	mov	r0, r5
 800635e:	9205      	str	r2, [sp, #20]
 8006360:	47b8      	blx	r7
 8006362:	3001      	adds	r0, #1
 8006364:	f43f ae97 	beq.w	8006096 <_printf_float+0xc2>
 8006368:	9a05      	ldr	r2, [sp, #20]
 800636a:	f10b 0b01 	add.w	fp, fp, #1
 800636e:	e7b9      	b.n	80062e4 <_printf_float+0x310>
 8006370:	ee18 3a10 	vmov	r3, s16
 8006374:	4652      	mov	r2, sl
 8006376:	4631      	mov	r1, r6
 8006378:	4628      	mov	r0, r5
 800637a:	47b8      	blx	r7
 800637c:	3001      	adds	r0, #1
 800637e:	d1be      	bne.n	80062fe <_printf_float+0x32a>
 8006380:	e689      	b.n	8006096 <_printf_float+0xc2>
 8006382:	9a05      	ldr	r2, [sp, #20]
 8006384:	464b      	mov	r3, r9
 8006386:	4442      	add	r2, r8
 8006388:	4631      	mov	r1, r6
 800638a:	4628      	mov	r0, r5
 800638c:	47b8      	blx	r7
 800638e:	3001      	adds	r0, #1
 8006390:	d1c1      	bne.n	8006316 <_printf_float+0x342>
 8006392:	e680      	b.n	8006096 <_printf_float+0xc2>
 8006394:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006396:	2a01      	cmp	r2, #1
 8006398:	dc01      	bgt.n	800639e <_printf_float+0x3ca>
 800639a:	07db      	lsls	r3, r3, #31
 800639c:	d538      	bpl.n	8006410 <_printf_float+0x43c>
 800639e:	2301      	movs	r3, #1
 80063a0:	4642      	mov	r2, r8
 80063a2:	4631      	mov	r1, r6
 80063a4:	4628      	mov	r0, r5
 80063a6:	47b8      	blx	r7
 80063a8:	3001      	adds	r0, #1
 80063aa:	f43f ae74 	beq.w	8006096 <_printf_float+0xc2>
 80063ae:	ee18 3a10 	vmov	r3, s16
 80063b2:	4652      	mov	r2, sl
 80063b4:	4631      	mov	r1, r6
 80063b6:	4628      	mov	r0, r5
 80063b8:	47b8      	blx	r7
 80063ba:	3001      	adds	r0, #1
 80063bc:	f43f ae6b 	beq.w	8006096 <_printf_float+0xc2>
 80063c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80063c4:	2200      	movs	r2, #0
 80063c6:	2300      	movs	r3, #0
 80063c8:	f7fa fb86 	bl	8000ad8 <__aeabi_dcmpeq>
 80063cc:	b9d8      	cbnz	r0, 8006406 <_printf_float+0x432>
 80063ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063d0:	f108 0201 	add.w	r2, r8, #1
 80063d4:	3b01      	subs	r3, #1
 80063d6:	4631      	mov	r1, r6
 80063d8:	4628      	mov	r0, r5
 80063da:	47b8      	blx	r7
 80063dc:	3001      	adds	r0, #1
 80063de:	d10e      	bne.n	80063fe <_printf_float+0x42a>
 80063e0:	e659      	b.n	8006096 <_printf_float+0xc2>
 80063e2:	2301      	movs	r3, #1
 80063e4:	4652      	mov	r2, sl
 80063e6:	4631      	mov	r1, r6
 80063e8:	4628      	mov	r0, r5
 80063ea:	47b8      	blx	r7
 80063ec:	3001      	adds	r0, #1
 80063ee:	f43f ae52 	beq.w	8006096 <_printf_float+0xc2>
 80063f2:	f108 0801 	add.w	r8, r8, #1
 80063f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063f8:	3b01      	subs	r3, #1
 80063fa:	4543      	cmp	r3, r8
 80063fc:	dcf1      	bgt.n	80063e2 <_printf_float+0x40e>
 80063fe:	464b      	mov	r3, r9
 8006400:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006404:	e6dc      	b.n	80061c0 <_printf_float+0x1ec>
 8006406:	f04f 0800 	mov.w	r8, #0
 800640a:	f104 0a1a 	add.w	sl, r4, #26
 800640e:	e7f2      	b.n	80063f6 <_printf_float+0x422>
 8006410:	2301      	movs	r3, #1
 8006412:	4642      	mov	r2, r8
 8006414:	e7df      	b.n	80063d6 <_printf_float+0x402>
 8006416:	2301      	movs	r3, #1
 8006418:	464a      	mov	r2, r9
 800641a:	4631      	mov	r1, r6
 800641c:	4628      	mov	r0, r5
 800641e:	47b8      	blx	r7
 8006420:	3001      	adds	r0, #1
 8006422:	f43f ae38 	beq.w	8006096 <_printf_float+0xc2>
 8006426:	f108 0801 	add.w	r8, r8, #1
 800642a:	68e3      	ldr	r3, [r4, #12]
 800642c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800642e:	1a5b      	subs	r3, r3, r1
 8006430:	4543      	cmp	r3, r8
 8006432:	dcf0      	bgt.n	8006416 <_printf_float+0x442>
 8006434:	e6fa      	b.n	800622c <_printf_float+0x258>
 8006436:	f04f 0800 	mov.w	r8, #0
 800643a:	f104 0919 	add.w	r9, r4, #25
 800643e:	e7f4      	b.n	800642a <_printf_float+0x456>

08006440 <_printf_common>:
 8006440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006444:	4616      	mov	r6, r2
 8006446:	4699      	mov	r9, r3
 8006448:	688a      	ldr	r2, [r1, #8]
 800644a:	690b      	ldr	r3, [r1, #16]
 800644c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006450:	4293      	cmp	r3, r2
 8006452:	bfb8      	it	lt
 8006454:	4613      	movlt	r3, r2
 8006456:	6033      	str	r3, [r6, #0]
 8006458:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800645c:	4607      	mov	r7, r0
 800645e:	460c      	mov	r4, r1
 8006460:	b10a      	cbz	r2, 8006466 <_printf_common+0x26>
 8006462:	3301      	adds	r3, #1
 8006464:	6033      	str	r3, [r6, #0]
 8006466:	6823      	ldr	r3, [r4, #0]
 8006468:	0699      	lsls	r1, r3, #26
 800646a:	bf42      	ittt	mi
 800646c:	6833      	ldrmi	r3, [r6, #0]
 800646e:	3302      	addmi	r3, #2
 8006470:	6033      	strmi	r3, [r6, #0]
 8006472:	6825      	ldr	r5, [r4, #0]
 8006474:	f015 0506 	ands.w	r5, r5, #6
 8006478:	d106      	bne.n	8006488 <_printf_common+0x48>
 800647a:	f104 0a19 	add.w	sl, r4, #25
 800647e:	68e3      	ldr	r3, [r4, #12]
 8006480:	6832      	ldr	r2, [r6, #0]
 8006482:	1a9b      	subs	r3, r3, r2
 8006484:	42ab      	cmp	r3, r5
 8006486:	dc26      	bgt.n	80064d6 <_printf_common+0x96>
 8006488:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800648c:	1e13      	subs	r3, r2, #0
 800648e:	6822      	ldr	r2, [r4, #0]
 8006490:	bf18      	it	ne
 8006492:	2301      	movne	r3, #1
 8006494:	0692      	lsls	r2, r2, #26
 8006496:	d42b      	bmi.n	80064f0 <_printf_common+0xb0>
 8006498:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800649c:	4649      	mov	r1, r9
 800649e:	4638      	mov	r0, r7
 80064a0:	47c0      	blx	r8
 80064a2:	3001      	adds	r0, #1
 80064a4:	d01e      	beq.n	80064e4 <_printf_common+0xa4>
 80064a6:	6823      	ldr	r3, [r4, #0]
 80064a8:	68e5      	ldr	r5, [r4, #12]
 80064aa:	6832      	ldr	r2, [r6, #0]
 80064ac:	f003 0306 	and.w	r3, r3, #6
 80064b0:	2b04      	cmp	r3, #4
 80064b2:	bf08      	it	eq
 80064b4:	1aad      	subeq	r5, r5, r2
 80064b6:	68a3      	ldr	r3, [r4, #8]
 80064b8:	6922      	ldr	r2, [r4, #16]
 80064ba:	bf0c      	ite	eq
 80064bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80064c0:	2500      	movne	r5, #0
 80064c2:	4293      	cmp	r3, r2
 80064c4:	bfc4      	itt	gt
 80064c6:	1a9b      	subgt	r3, r3, r2
 80064c8:	18ed      	addgt	r5, r5, r3
 80064ca:	2600      	movs	r6, #0
 80064cc:	341a      	adds	r4, #26
 80064ce:	42b5      	cmp	r5, r6
 80064d0:	d11a      	bne.n	8006508 <_printf_common+0xc8>
 80064d2:	2000      	movs	r0, #0
 80064d4:	e008      	b.n	80064e8 <_printf_common+0xa8>
 80064d6:	2301      	movs	r3, #1
 80064d8:	4652      	mov	r2, sl
 80064da:	4649      	mov	r1, r9
 80064dc:	4638      	mov	r0, r7
 80064de:	47c0      	blx	r8
 80064e0:	3001      	adds	r0, #1
 80064e2:	d103      	bne.n	80064ec <_printf_common+0xac>
 80064e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80064e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064ec:	3501      	adds	r5, #1
 80064ee:	e7c6      	b.n	800647e <_printf_common+0x3e>
 80064f0:	18e1      	adds	r1, r4, r3
 80064f2:	1c5a      	adds	r2, r3, #1
 80064f4:	2030      	movs	r0, #48	; 0x30
 80064f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80064fa:	4422      	add	r2, r4
 80064fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006500:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006504:	3302      	adds	r3, #2
 8006506:	e7c7      	b.n	8006498 <_printf_common+0x58>
 8006508:	2301      	movs	r3, #1
 800650a:	4622      	mov	r2, r4
 800650c:	4649      	mov	r1, r9
 800650e:	4638      	mov	r0, r7
 8006510:	47c0      	blx	r8
 8006512:	3001      	adds	r0, #1
 8006514:	d0e6      	beq.n	80064e4 <_printf_common+0xa4>
 8006516:	3601      	adds	r6, #1
 8006518:	e7d9      	b.n	80064ce <_printf_common+0x8e>
	...

0800651c <_printf_i>:
 800651c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006520:	460c      	mov	r4, r1
 8006522:	4691      	mov	r9, r2
 8006524:	7e27      	ldrb	r7, [r4, #24]
 8006526:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006528:	2f78      	cmp	r7, #120	; 0x78
 800652a:	4680      	mov	r8, r0
 800652c:	469a      	mov	sl, r3
 800652e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006532:	d807      	bhi.n	8006544 <_printf_i+0x28>
 8006534:	2f62      	cmp	r7, #98	; 0x62
 8006536:	d80a      	bhi.n	800654e <_printf_i+0x32>
 8006538:	2f00      	cmp	r7, #0
 800653a:	f000 80d8 	beq.w	80066ee <_printf_i+0x1d2>
 800653e:	2f58      	cmp	r7, #88	; 0x58
 8006540:	f000 80a3 	beq.w	800668a <_printf_i+0x16e>
 8006544:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006548:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800654c:	e03a      	b.n	80065c4 <_printf_i+0xa8>
 800654e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006552:	2b15      	cmp	r3, #21
 8006554:	d8f6      	bhi.n	8006544 <_printf_i+0x28>
 8006556:	a001      	add	r0, pc, #4	; (adr r0, 800655c <_printf_i+0x40>)
 8006558:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800655c:	080065b5 	.word	0x080065b5
 8006560:	080065c9 	.word	0x080065c9
 8006564:	08006545 	.word	0x08006545
 8006568:	08006545 	.word	0x08006545
 800656c:	08006545 	.word	0x08006545
 8006570:	08006545 	.word	0x08006545
 8006574:	080065c9 	.word	0x080065c9
 8006578:	08006545 	.word	0x08006545
 800657c:	08006545 	.word	0x08006545
 8006580:	08006545 	.word	0x08006545
 8006584:	08006545 	.word	0x08006545
 8006588:	080066d5 	.word	0x080066d5
 800658c:	080065f9 	.word	0x080065f9
 8006590:	080066b7 	.word	0x080066b7
 8006594:	08006545 	.word	0x08006545
 8006598:	08006545 	.word	0x08006545
 800659c:	080066f7 	.word	0x080066f7
 80065a0:	08006545 	.word	0x08006545
 80065a4:	080065f9 	.word	0x080065f9
 80065a8:	08006545 	.word	0x08006545
 80065ac:	08006545 	.word	0x08006545
 80065b0:	080066bf 	.word	0x080066bf
 80065b4:	680b      	ldr	r3, [r1, #0]
 80065b6:	1d1a      	adds	r2, r3, #4
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	600a      	str	r2, [r1, #0]
 80065bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80065c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80065c4:	2301      	movs	r3, #1
 80065c6:	e0a3      	b.n	8006710 <_printf_i+0x1f4>
 80065c8:	6825      	ldr	r5, [r4, #0]
 80065ca:	6808      	ldr	r0, [r1, #0]
 80065cc:	062e      	lsls	r6, r5, #24
 80065ce:	f100 0304 	add.w	r3, r0, #4
 80065d2:	d50a      	bpl.n	80065ea <_printf_i+0xce>
 80065d4:	6805      	ldr	r5, [r0, #0]
 80065d6:	600b      	str	r3, [r1, #0]
 80065d8:	2d00      	cmp	r5, #0
 80065da:	da03      	bge.n	80065e4 <_printf_i+0xc8>
 80065dc:	232d      	movs	r3, #45	; 0x2d
 80065de:	426d      	negs	r5, r5
 80065e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065e4:	485e      	ldr	r0, [pc, #376]	; (8006760 <_printf_i+0x244>)
 80065e6:	230a      	movs	r3, #10
 80065e8:	e019      	b.n	800661e <_printf_i+0x102>
 80065ea:	f015 0f40 	tst.w	r5, #64	; 0x40
 80065ee:	6805      	ldr	r5, [r0, #0]
 80065f0:	600b      	str	r3, [r1, #0]
 80065f2:	bf18      	it	ne
 80065f4:	b22d      	sxthne	r5, r5
 80065f6:	e7ef      	b.n	80065d8 <_printf_i+0xbc>
 80065f8:	680b      	ldr	r3, [r1, #0]
 80065fa:	6825      	ldr	r5, [r4, #0]
 80065fc:	1d18      	adds	r0, r3, #4
 80065fe:	6008      	str	r0, [r1, #0]
 8006600:	0628      	lsls	r0, r5, #24
 8006602:	d501      	bpl.n	8006608 <_printf_i+0xec>
 8006604:	681d      	ldr	r5, [r3, #0]
 8006606:	e002      	b.n	800660e <_printf_i+0xf2>
 8006608:	0669      	lsls	r1, r5, #25
 800660a:	d5fb      	bpl.n	8006604 <_printf_i+0xe8>
 800660c:	881d      	ldrh	r5, [r3, #0]
 800660e:	4854      	ldr	r0, [pc, #336]	; (8006760 <_printf_i+0x244>)
 8006610:	2f6f      	cmp	r7, #111	; 0x6f
 8006612:	bf0c      	ite	eq
 8006614:	2308      	moveq	r3, #8
 8006616:	230a      	movne	r3, #10
 8006618:	2100      	movs	r1, #0
 800661a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800661e:	6866      	ldr	r6, [r4, #4]
 8006620:	60a6      	str	r6, [r4, #8]
 8006622:	2e00      	cmp	r6, #0
 8006624:	bfa2      	ittt	ge
 8006626:	6821      	ldrge	r1, [r4, #0]
 8006628:	f021 0104 	bicge.w	r1, r1, #4
 800662c:	6021      	strge	r1, [r4, #0]
 800662e:	b90d      	cbnz	r5, 8006634 <_printf_i+0x118>
 8006630:	2e00      	cmp	r6, #0
 8006632:	d04d      	beq.n	80066d0 <_printf_i+0x1b4>
 8006634:	4616      	mov	r6, r2
 8006636:	fbb5 f1f3 	udiv	r1, r5, r3
 800663a:	fb03 5711 	mls	r7, r3, r1, r5
 800663e:	5dc7      	ldrb	r7, [r0, r7]
 8006640:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006644:	462f      	mov	r7, r5
 8006646:	42bb      	cmp	r3, r7
 8006648:	460d      	mov	r5, r1
 800664a:	d9f4      	bls.n	8006636 <_printf_i+0x11a>
 800664c:	2b08      	cmp	r3, #8
 800664e:	d10b      	bne.n	8006668 <_printf_i+0x14c>
 8006650:	6823      	ldr	r3, [r4, #0]
 8006652:	07df      	lsls	r7, r3, #31
 8006654:	d508      	bpl.n	8006668 <_printf_i+0x14c>
 8006656:	6923      	ldr	r3, [r4, #16]
 8006658:	6861      	ldr	r1, [r4, #4]
 800665a:	4299      	cmp	r1, r3
 800665c:	bfde      	ittt	le
 800665e:	2330      	movle	r3, #48	; 0x30
 8006660:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006664:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8006668:	1b92      	subs	r2, r2, r6
 800666a:	6122      	str	r2, [r4, #16]
 800666c:	f8cd a000 	str.w	sl, [sp]
 8006670:	464b      	mov	r3, r9
 8006672:	aa03      	add	r2, sp, #12
 8006674:	4621      	mov	r1, r4
 8006676:	4640      	mov	r0, r8
 8006678:	f7ff fee2 	bl	8006440 <_printf_common>
 800667c:	3001      	adds	r0, #1
 800667e:	d14c      	bne.n	800671a <_printf_i+0x1fe>
 8006680:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006684:	b004      	add	sp, #16
 8006686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800668a:	4835      	ldr	r0, [pc, #212]	; (8006760 <_printf_i+0x244>)
 800668c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006690:	6823      	ldr	r3, [r4, #0]
 8006692:	680e      	ldr	r6, [r1, #0]
 8006694:	061f      	lsls	r7, r3, #24
 8006696:	f856 5b04 	ldr.w	r5, [r6], #4
 800669a:	600e      	str	r6, [r1, #0]
 800669c:	d514      	bpl.n	80066c8 <_printf_i+0x1ac>
 800669e:	07d9      	lsls	r1, r3, #31
 80066a0:	bf44      	itt	mi
 80066a2:	f043 0320 	orrmi.w	r3, r3, #32
 80066a6:	6023      	strmi	r3, [r4, #0]
 80066a8:	b91d      	cbnz	r5, 80066b2 <_printf_i+0x196>
 80066aa:	6823      	ldr	r3, [r4, #0]
 80066ac:	f023 0320 	bic.w	r3, r3, #32
 80066b0:	6023      	str	r3, [r4, #0]
 80066b2:	2310      	movs	r3, #16
 80066b4:	e7b0      	b.n	8006618 <_printf_i+0xfc>
 80066b6:	6823      	ldr	r3, [r4, #0]
 80066b8:	f043 0320 	orr.w	r3, r3, #32
 80066bc:	6023      	str	r3, [r4, #0]
 80066be:	2378      	movs	r3, #120	; 0x78
 80066c0:	4828      	ldr	r0, [pc, #160]	; (8006764 <_printf_i+0x248>)
 80066c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80066c6:	e7e3      	b.n	8006690 <_printf_i+0x174>
 80066c8:	065e      	lsls	r6, r3, #25
 80066ca:	bf48      	it	mi
 80066cc:	b2ad      	uxthmi	r5, r5
 80066ce:	e7e6      	b.n	800669e <_printf_i+0x182>
 80066d0:	4616      	mov	r6, r2
 80066d2:	e7bb      	b.n	800664c <_printf_i+0x130>
 80066d4:	680b      	ldr	r3, [r1, #0]
 80066d6:	6826      	ldr	r6, [r4, #0]
 80066d8:	6960      	ldr	r0, [r4, #20]
 80066da:	1d1d      	adds	r5, r3, #4
 80066dc:	600d      	str	r5, [r1, #0]
 80066de:	0635      	lsls	r5, r6, #24
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	d501      	bpl.n	80066e8 <_printf_i+0x1cc>
 80066e4:	6018      	str	r0, [r3, #0]
 80066e6:	e002      	b.n	80066ee <_printf_i+0x1d2>
 80066e8:	0671      	lsls	r1, r6, #25
 80066ea:	d5fb      	bpl.n	80066e4 <_printf_i+0x1c8>
 80066ec:	8018      	strh	r0, [r3, #0]
 80066ee:	2300      	movs	r3, #0
 80066f0:	6123      	str	r3, [r4, #16]
 80066f2:	4616      	mov	r6, r2
 80066f4:	e7ba      	b.n	800666c <_printf_i+0x150>
 80066f6:	680b      	ldr	r3, [r1, #0]
 80066f8:	1d1a      	adds	r2, r3, #4
 80066fa:	600a      	str	r2, [r1, #0]
 80066fc:	681e      	ldr	r6, [r3, #0]
 80066fe:	6862      	ldr	r2, [r4, #4]
 8006700:	2100      	movs	r1, #0
 8006702:	4630      	mov	r0, r6
 8006704:	f7f9 fd74 	bl	80001f0 <memchr>
 8006708:	b108      	cbz	r0, 800670e <_printf_i+0x1f2>
 800670a:	1b80      	subs	r0, r0, r6
 800670c:	6060      	str	r0, [r4, #4]
 800670e:	6863      	ldr	r3, [r4, #4]
 8006710:	6123      	str	r3, [r4, #16]
 8006712:	2300      	movs	r3, #0
 8006714:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006718:	e7a8      	b.n	800666c <_printf_i+0x150>
 800671a:	6923      	ldr	r3, [r4, #16]
 800671c:	4632      	mov	r2, r6
 800671e:	4649      	mov	r1, r9
 8006720:	4640      	mov	r0, r8
 8006722:	47d0      	blx	sl
 8006724:	3001      	adds	r0, #1
 8006726:	d0ab      	beq.n	8006680 <_printf_i+0x164>
 8006728:	6823      	ldr	r3, [r4, #0]
 800672a:	079b      	lsls	r3, r3, #30
 800672c:	d413      	bmi.n	8006756 <_printf_i+0x23a>
 800672e:	68e0      	ldr	r0, [r4, #12]
 8006730:	9b03      	ldr	r3, [sp, #12]
 8006732:	4298      	cmp	r0, r3
 8006734:	bfb8      	it	lt
 8006736:	4618      	movlt	r0, r3
 8006738:	e7a4      	b.n	8006684 <_printf_i+0x168>
 800673a:	2301      	movs	r3, #1
 800673c:	4632      	mov	r2, r6
 800673e:	4649      	mov	r1, r9
 8006740:	4640      	mov	r0, r8
 8006742:	47d0      	blx	sl
 8006744:	3001      	adds	r0, #1
 8006746:	d09b      	beq.n	8006680 <_printf_i+0x164>
 8006748:	3501      	adds	r5, #1
 800674a:	68e3      	ldr	r3, [r4, #12]
 800674c:	9903      	ldr	r1, [sp, #12]
 800674e:	1a5b      	subs	r3, r3, r1
 8006750:	42ab      	cmp	r3, r5
 8006752:	dcf2      	bgt.n	800673a <_printf_i+0x21e>
 8006754:	e7eb      	b.n	800672e <_printf_i+0x212>
 8006756:	2500      	movs	r5, #0
 8006758:	f104 0619 	add.w	r6, r4, #25
 800675c:	e7f5      	b.n	800674a <_printf_i+0x22e>
 800675e:	bf00      	nop
 8006760:	08008c9a 	.word	0x08008c9a
 8006764:	08008cab 	.word	0x08008cab

08006768 <siprintf>:
 8006768:	b40e      	push	{r1, r2, r3}
 800676a:	b500      	push	{lr}
 800676c:	b09c      	sub	sp, #112	; 0x70
 800676e:	ab1d      	add	r3, sp, #116	; 0x74
 8006770:	9002      	str	r0, [sp, #8]
 8006772:	9006      	str	r0, [sp, #24]
 8006774:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006778:	4809      	ldr	r0, [pc, #36]	; (80067a0 <siprintf+0x38>)
 800677a:	9107      	str	r1, [sp, #28]
 800677c:	9104      	str	r1, [sp, #16]
 800677e:	4909      	ldr	r1, [pc, #36]	; (80067a4 <siprintf+0x3c>)
 8006780:	f853 2b04 	ldr.w	r2, [r3], #4
 8006784:	9105      	str	r1, [sp, #20]
 8006786:	6800      	ldr	r0, [r0, #0]
 8006788:	9301      	str	r3, [sp, #4]
 800678a:	a902      	add	r1, sp, #8
 800678c:	f001 fb52 	bl	8007e34 <_svfiprintf_r>
 8006790:	9b02      	ldr	r3, [sp, #8]
 8006792:	2200      	movs	r2, #0
 8006794:	701a      	strb	r2, [r3, #0]
 8006796:	b01c      	add	sp, #112	; 0x70
 8006798:	f85d eb04 	ldr.w	lr, [sp], #4
 800679c:	b003      	add	sp, #12
 800679e:	4770      	bx	lr
 80067a0:	20000028 	.word	0x20000028
 80067a4:	ffff0208 	.word	0xffff0208

080067a8 <_vsiprintf_r>:
 80067a8:	b500      	push	{lr}
 80067aa:	b09b      	sub	sp, #108	; 0x6c
 80067ac:	9100      	str	r1, [sp, #0]
 80067ae:	9104      	str	r1, [sp, #16]
 80067b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80067b4:	9105      	str	r1, [sp, #20]
 80067b6:	9102      	str	r1, [sp, #8]
 80067b8:	4905      	ldr	r1, [pc, #20]	; (80067d0 <_vsiprintf_r+0x28>)
 80067ba:	9103      	str	r1, [sp, #12]
 80067bc:	4669      	mov	r1, sp
 80067be:	f001 fb39 	bl	8007e34 <_svfiprintf_r>
 80067c2:	9b00      	ldr	r3, [sp, #0]
 80067c4:	2200      	movs	r2, #0
 80067c6:	701a      	strb	r2, [r3, #0]
 80067c8:	b01b      	add	sp, #108	; 0x6c
 80067ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80067ce:	bf00      	nop
 80067d0:	ffff0208 	.word	0xffff0208

080067d4 <vsiprintf>:
 80067d4:	4613      	mov	r3, r2
 80067d6:	460a      	mov	r2, r1
 80067d8:	4601      	mov	r1, r0
 80067da:	4802      	ldr	r0, [pc, #8]	; (80067e4 <vsiprintf+0x10>)
 80067dc:	6800      	ldr	r0, [r0, #0]
 80067de:	f7ff bfe3 	b.w	80067a8 <_vsiprintf_r>
 80067e2:	bf00      	nop
 80067e4:	20000028 	.word	0x20000028

080067e8 <quorem>:
 80067e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067ec:	6903      	ldr	r3, [r0, #16]
 80067ee:	690c      	ldr	r4, [r1, #16]
 80067f0:	42a3      	cmp	r3, r4
 80067f2:	4607      	mov	r7, r0
 80067f4:	f2c0 8081 	blt.w	80068fa <quorem+0x112>
 80067f8:	3c01      	subs	r4, #1
 80067fa:	f101 0814 	add.w	r8, r1, #20
 80067fe:	f100 0514 	add.w	r5, r0, #20
 8006802:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006806:	9301      	str	r3, [sp, #4]
 8006808:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800680c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006810:	3301      	adds	r3, #1
 8006812:	429a      	cmp	r2, r3
 8006814:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006818:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800681c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006820:	d331      	bcc.n	8006886 <quorem+0x9e>
 8006822:	f04f 0e00 	mov.w	lr, #0
 8006826:	4640      	mov	r0, r8
 8006828:	46ac      	mov	ip, r5
 800682a:	46f2      	mov	sl, lr
 800682c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006830:	b293      	uxth	r3, r2
 8006832:	fb06 e303 	mla	r3, r6, r3, lr
 8006836:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800683a:	b29b      	uxth	r3, r3
 800683c:	ebaa 0303 	sub.w	r3, sl, r3
 8006840:	0c12      	lsrs	r2, r2, #16
 8006842:	f8dc a000 	ldr.w	sl, [ip]
 8006846:	fb06 e202 	mla	r2, r6, r2, lr
 800684a:	fa13 f38a 	uxtah	r3, r3, sl
 800684e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006852:	fa1f fa82 	uxth.w	sl, r2
 8006856:	f8dc 2000 	ldr.w	r2, [ip]
 800685a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800685e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006862:	b29b      	uxth	r3, r3
 8006864:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006868:	4581      	cmp	r9, r0
 800686a:	f84c 3b04 	str.w	r3, [ip], #4
 800686e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006872:	d2db      	bcs.n	800682c <quorem+0x44>
 8006874:	f855 300b 	ldr.w	r3, [r5, fp]
 8006878:	b92b      	cbnz	r3, 8006886 <quorem+0x9e>
 800687a:	9b01      	ldr	r3, [sp, #4]
 800687c:	3b04      	subs	r3, #4
 800687e:	429d      	cmp	r5, r3
 8006880:	461a      	mov	r2, r3
 8006882:	d32e      	bcc.n	80068e2 <quorem+0xfa>
 8006884:	613c      	str	r4, [r7, #16]
 8006886:	4638      	mov	r0, r7
 8006888:	f001 f8be 	bl	8007a08 <__mcmp>
 800688c:	2800      	cmp	r0, #0
 800688e:	db24      	blt.n	80068da <quorem+0xf2>
 8006890:	3601      	adds	r6, #1
 8006892:	4628      	mov	r0, r5
 8006894:	f04f 0c00 	mov.w	ip, #0
 8006898:	f858 2b04 	ldr.w	r2, [r8], #4
 800689c:	f8d0 e000 	ldr.w	lr, [r0]
 80068a0:	b293      	uxth	r3, r2
 80068a2:	ebac 0303 	sub.w	r3, ip, r3
 80068a6:	0c12      	lsrs	r2, r2, #16
 80068a8:	fa13 f38e 	uxtah	r3, r3, lr
 80068ac:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80068b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80068ba:	45c1      	cmp	r9, r8
 80068bc:	f840 3b04 	str.w	r3, [r0], #4
 80068c0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80068c4:	d2e8      	bcs.n	8006898 <quorem+0xb0>
 80068c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80068ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80068ce:	b922      	cbnz	r2, 80068da <quorem+0xf2>
 80068d0:	3b04      	subs	r3, #4
 80068d2:	429d      	cmp	r5, r3
 80068d4:	461a      	mov	r2, r3
 80068d6:	d30a      	bcc.n	80068ee <quorem+0x106>
 80068d8:	613c      	str	r4, [r7, #16]
 80068da:	4630      	mov	r0, r6
 80068dc:	b003      	add	sp, #12
 80068de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068e2:	6812      	ldr	r2, [r2, #0]
 80068e4:	3b04      	subs	r3, #4
 80068e6:	2a00      	cmp	r2, #0
 80068e8:	d1cc      	bne.n	8006884 <quorem+0x9c>
 80068ea:	3c01      	subs	r4, #1
 80068ec:	e7c7      	b.n	800687e <quorem+0x96>
 80068ee:	6812      	ldr	r2, [r2, #0]
 80068f0:	3b04      	subs	r3, #4
 80068f2:	2a00      	cmp	r2, #0
 80068f4:	d1f0      	bne.n	80068d8 <quorem+0xf0>
 80068f6:	3c01      	subs	r4, #1
 80068f8:	e7eb      	b.n	80068d2 <quorem+0xea>
 80068fa:	2000      	movs	r0, #0
 80068fc:	e7ee      	b.n	80068dc <quorem+0xf4>
	...

08006900 <_dtoa_r>:
 8006900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006904:	ed2d 8b02 	vpush	{d8}
 8006908:	ec57 6b10 	vmov	r6, r7, d0
 800690c:	b095      	sub	sp, #84	; 0x54
 800690e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006910:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006914:	9105      	str	r1, [sp, #20]
 8006916:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800691a:	4604      	mov	r4, r0
 800691c:	9209      	str	r2, [sp, #36]	; 0x24
 800691e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006920:	b975      	cbnz	r5, 8006940 <_dtoa_r+0x40>
 8006922:	2010      	movs	r0, #16
 8006924:	f000 fddc 	bl	80074e0 <malloc>
 8006928:	4602      	mov	r2, r0
 800692a:	6260      	str	r0, [r4, #36]	; 0x24
 800692c:	b920      	cbnz	r0, 8006938 <_dtoa_r+0x38>
 800692e:	4bb2      	ldr	r3, [pc, #712]	; (8006bf8 <_dtoa_r+0x2f8>)
 8006930:	21ea      	movs	r1, #234	; 0xea
 8006932:	48b2      	ldr	r0, [pc, #712]	; (8006bfc <_dtoa_r+0x2fc>)
 8006934:	f001 fb8e 	bl	8008054 <__assert_func>
 8006938:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800693c:	6005      	str	r5, [r0, #0]
 800693e:	60c5      	str	r5, [r0, #12]
 8006940:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006942:	6819      	ldr	r1, [r3, #0]
 8006944:	b151      	cbz	r1, 800695c <_dtoa_r+0x5c>
 8006946:	685a      	ldr	r2, [r3, #4]
 8006948:	604a      	str	r2, [r1, #4]
 800694a:	2301      	movs	r3, #1
 800694c:	4093      	lsls	r3, r2
 800694e:	608b      	str	r3, [r1, #8]
 8006950:	4620      	mov	r0, r4
 8006952:	f000 fe1b 	bl	800758c <_Bfree>
 8006956:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006958:	2200      	movs	r2, #0
 800695a:	601a      	str	r2, [r3, #0]
 800695c:	1e3b      	subs	r3, r7, #0
 800695e:	bfb9      	ittee	lt
 8006960:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006964:	9303      	strlt	r3, [sp, #12]
 8006966:	2300      	movge	r3, #0
 8006968:	f8c8 3000 	strge.w	r3, [r8]
 800696c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006970:	4ba3      	ldr	r3, [pc, #652]	; (8006c00 <_dtoa_r+0x300>)
 8006972:	bfbc      	itt	lt
 8006974:	2201      	movlt	r2, #1
 8006976:	f8c8 2000 	strlt.w	r2, [r8]
 800697a:	ea33 0309 	bics.w	r3, r3, r9
 800697e:	d11b      	bne.n	80069b8 <_dtoa_r+0xb8>
 8006980:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006982:	f242 730f 	movw	r3, #9999	; 0x270f
 8006986:	6013      	str	r3, [r2, #0]
 8006988:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800698c:	4333      	orrs	r3, r6
 800698e:	f000 857a 	beq.w	8007486 <_dtoa_r+0xb86>
 8006992:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006994:	b963      	cbnz	r3, 80069b0 <_dtoa_r+0xb0>
 8006996:	4b9b      	ldr	r3, [pc, #620]	; (8006c04 <_dtoa_r+0x304>)
 8006998:	e024      	b.n	80069e4 <_dtoa_r+0xe4>
 800699a:	4b9b      	ldr	r3, [pc, #620]	; (8006c08 <_dtoa_r+0x308>)
 800699c:	9300      	str	r3, [sp, #0]
 800699e:	3308      	adds	r3, #8
 80069a0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80069a2:	6013      	str	r3, [r2, #0]
 80069a4:	9800      	ldr	r0, [sp, #0]
 80069a6:	b015      	add	sp, #84	; 0x54
 80069a8:	ecbd 8b02 	vpop	{d8}
 80069ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069b0:	4b94      	ldr	r3, [pc, #592]	; (8006c04 <_dtoa_r+0x304>)
 80069b2:	9300      	str	r3, [sp, #0]
 80069b4:	3303      	adds	r3, #3
 80069b6:	e7f3      	b.n	80069a0 <_dtoa_r+0xa0>
 80069b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80069bc:	2200      	movs	r2, #0
 80069be:	ec51 0b17 	vmov	r0, r1, d7
 80069c2:	2300      	movs	r3, #0
 80069c4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80069c8:	f7fa f886 	bl	8000ad8 <__aeabi_dcmpeq>
 80069cc:	4680      	mov	r8, r0
 80069ce:	b158      	cbz	r0, 80069e8 <_dtoa_r+0xe8>
 80069d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80069d2:	2301      	movs	r3, #1
 80069d4:	6013      	str	r3, [r2, #0]
 80069d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80069d8:	2b00      	cmp	r3, #0
 80069da:	f000 8551 	beq.w	8007480 <_dtoa_r+0xb80>
 80069de:	488b      	ldr	r0, [pc, #556]	; (8006c0c <_dtoa_r+0x30c>)
 80069e0:	6018      	str	r0, [r3, #0]
 80069e2:	1e43      	subs	r3, r0, #1
 80069e4:	9300      	str	r3, [sp, #0]
 80069e6:	e7dd      	b.n	80069a4 <_dtoa_r+0xa4>
 80069e8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80069ec:	aa12      	add	r2, sp, #72	; 0x48
 80069ee:	a913      	add	r1, sp, #76	; 0x4c
 80069f0:	4620      	mov	r0, r4
 80069f2:	f001 f8ad 	bl	8007b50 <__d2b>
 80069f6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80069fa:	4683      	mov	fp, r0
 80069fc:	2d00      	cmp	r5, #0
 80069fe:	d07c      	beq.n	8006afa <_dtoa_r+0x1fa>
 8006a00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a02:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006a06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a0a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006a0e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006a12:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006a16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006a1a:	4b7d      	ldr	r3, [pc, #500]	; (8006c10 <_dtoa_r+0x310>)
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	4630      	mov	r0, r6
 8006a20:	4639      	mov	r1, r7
 8006a22:	f7f9 fc39 	bl	8000298 <__aeabi_dsub>
 8006a26:	a36e      	add	r3, pc, #440	; (adr r3, 8006be0 <_dtoa_r+0x2e0>)
 8006a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a2c:	f7f9 fdec 	bl	8000608 <__aeabi_dmul>
 8006a30:	a36d      	add	r3, pc, #436	; (adr r3, 8006be8 <_dtoa_r+0x2e8>)
 8006a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a36:	f7f9 fc31 	bl	800029c <__adddf3>
 8006a3a:	4606      	mov	r6, r0
 8006a3c:	4628      	mov	r0, r5
 8006a3e:	460f      	mov	r7, r1
 8006a40:	f7f9 fd78 	bl	8000534 <__aeabi_i2d>
 8006a44:	a36a      	add	r3, pc, #424	; (adr r3, 8006bf0 <_dtoa_r+0x2f0>)
 8006a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a4a:	f7f9 fddd 	bl	8000608 <__aeabi_dmul>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	460b      	mov	r3, r1
 8006a52:	4630      	mov	r0, r6
 8006a54:	4639      	mov	r1, r7
 8006a56:	f7f9 fc21 	bl	800029c <__adddf3>
 8006a5a:	4606      	mov	r6, r0
 8006a5c:	460f      	mov	r7, r1
 8006a5e:	f7fa f883 	bl	8000b68 <__aeabi_d2iz>
 8006a62:	2200      	movs	r2, #0
 8006a64:	4682      	mov	sl, r0
 8006a66:	2300      	movs	r3, #0
 8006a68:	4630      	mov	r0, r6
 8006a6a:	4639      	mov	r1, r7
 8006a6c:	f7fa f83e 	bl	8000aec <__aeabi_dcmplt>
 8006a70:	b148      	cbz	r0, 8006a86 <_dtoa_r+0x186>
 8006a72:	4650      	mov	r0, sl
 8006a74:	f7f9 fd5e 	bl	8000534 <__aeabi_i2d>
 8006a78:	4632      	mov	r2, r6
 8006a7a:	463b      	mov	r3, r7
 8006a7c:	f7fa f82c 	bl	8000ad8 <__aeabi_dcmpeq>
 8006a80:	b908      	cbnz	r0, 8006a86 <_dtoa_r+0x186>
 8006a82:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006a86:	f1ba 0f16 	cmp.w	sl, #22
 8006a8a:	d854      	bhi.n	8006b36 <_dtoa_r+0x236>
 8006a8c:	4b61      	ldr	r3, [pc, #388]	; (8006c14 <_dtoa_r+0x314>)
 8006a8e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a96:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006a9a:	f7fa f827 	bl	8000aec <__aeabi_dcmplt>
 8006a9e:	2800      	cmp	r0, #0
 8006aa0:	d04b      	beq.n	8006b3a <_dtoa_r+0x23a>
 8006aa2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	930e      	str	r3, [sp, #56]	; 0x38
 8006aaa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006aac:	1b5d      	subs	r5, r3, r5
 8006aae:	1e6b      	subs	r3, r5, #1
 8006ab0:	9304      	str	r3, [sp, #16]
 8006ab2:	bf43      	ittte	mi
 8006ab4:	2300      	movmi	r3, #0
 8006ab6:	f1c5 0801 	rsbmi	r8, r5, #1
 8006aba:	9304      	strmi	r3, [sp, #16]
 8006abc:	f04f 0800 	movpl.w	r8, #0
 8006ac0:	f1ba 0f00 	cmp.w	sl, #0
 8006ac4:	db3b      	blt.n	8006b3e <_dtoa_r+0x23e>
 8006ac6:	9b04      	ldr	r3, [sp, #16]
 8006ac8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8006acc:	4453      	add	r3, sl
 8006ace:	9304      	str	r3, [sp, #16]
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	9306      	str	r3, [sp, #24]
 8006ad4:	9b05      	ldr	r3, [sp, #20]
 8006ad6:	2b09      	cmp	r3, #9
 8006ad8:	d869      	bhi.n	8006bae <_dtoa_r+0x2ae>
 8006ada:	2b05      	cmp	r3, #5
 8006adc:	bfc4      	itt	gt
 8006ade:	3b04      	subgt	r3, #4
 8006ae0:	9305      	strgt	r3, [sp, #20]
 8006ae2:	9b05      	ldr	r3, [sp, #20]
 8006ae4:	f1a3 0302 	sub.w	r3, r3, #2
 8006ae8:	bfcc      	ite	gt
 8006aea:	2500      	movgt	r5, #0
 8006aec:	2501      	movle	r5, #1
 8006aee:	2b03      	cmp	r3, #3
 8006af0:	d869      	bhi.n	8006bc6 <_dtoa_r+0x2c6>
 8006af2:	e8df f003 	tbb	[pc, r3]
 8006af6:	4e2c      	.short	0x4e2c
 8006af8:	5a4c      	.short	0x5a4c
 8006afa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006afe:	441d      	add	r5, r3
 8006b00:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006b04:	2b20      	cmp	r3, #32
 8006b06:	bfc1      	itttt	gt
 8006b08:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006b0c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006b10:	fa09 f303 	lslgt.w	r3, r9, r3
 8006b14:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006b18:	bfda      	itte	le
 8006b1a:	f1c3 0320 	rsble	r3, r3, #32
 8006b1e:	fa06 f003 	lslle.w	r0, r6, r3
 8006b22:	4318      	orrgt	r0, r3
 8006b24:	f7f9 fcf6 	bl	8000514 <__aeabi_ui2d>
 8006b28:	2301      	movs	r3, #1
 8006b2a:	4606      	mov	r6, r0
 8006b2c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006b30:	3d01      	subs	r5, #1
 8006b32:	9310      	str	r3, [sp, #64]	; 0x40
 8006b34:	e771      	b.n	8006a1a <_dtoa_r+0x11a>
 8006b36:	2301      	movs	r3, #1
 8006b38:	e7b6      	b.n	8006aa8 <_dtoa_r+0x1a8>
 8006b3a:	900e      	str	r0, [sp, #56]	; 0x38
 8006b3c:	e7b5      	b.n	8006aaa <_dtoa_r+0x1aa>
 8006b3e:	f1ca 0300 	rsb	r3, sl, #0
 8006b42:	9306      	str	r3, [sp, #24]
 8006b44:	2300      	movs	r3, #0
 8006b46:	eba8 080a 	sub.w	r8, r8, sl
 8006b4a:	930d      	str	r3, [sp, #52]	; 0x34
 8006b4c:	e7c2      	b.n	8006ad4 <_dtoa_r+0x1d4>
 8006b4e:	2300      	movs	r3, #0
 8006b50:	9308      	str	r3, [sp, #32]
 8006b52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	dc39      	bgt.n	8006bcc <_dtoa_r+0x2cc>
 8006b58:	f04f 0901 	mov.w	r9, #1
 8006b5c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006b60:	464b      	mov	r3, r9
 8006b62:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006b66:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006b68:	2200      	movs	r2, #0
 8006b6a:	6042      	str	r2, [r0, #4]
 8006b6c:	2204      	movs	r2, #4
 8006b6e:	f102 0614 	add.w	r6, r2, #20
 8006b72:	429e      	cmp	r6, r3
 8006b74:	6841      	ldr	r1, [r0, #4]
 8006b76:	d92f      	bls.n	8006bd8 <_dtoa_r+0x2d8>
 8006b78:	4620      	mov	r0, r4
 8006b7a:	f000 fcc7 	bl	800750c <_Balloc>
 8006b7e:	9000      	str	r0, [sp, #0]
 8006b80:	2800      	cmp	r0, #0
 8006b82:	d14b      	bne.n	8006c1c <_dtoa_r+0x31c>
 8006b84:	4b24      	ldr	r3, [pc, #144]	; (8006c18 <_dtoa_r+0x318>)
 8006b86:	4602      	mov	r2, r0
 8006b88:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006b8c:	e6d1      	b.n	8006932 <_dtoa_r+0x32>
 8006b8e:	2301      	movs	r3, #1
 8006b90:	e7de      	b.n	8006b50 <_dtoa_r+0x250>
 8006b92:	2300      	movs	r3, #0
 8006b94:	9308      	str	r3, [sp, #32]
 8006b96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b98:	eb0a 0903 	add.w	r9, sl, r3
 8006b9c:	f109 0301 	add.w	r3, r9, #1
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	9301      	str	r3, [sp, #4]
 8006ba4:	bfb8      	it	lt
 8006ba6:	2301      	movlt	r3, #1
 8006ba8:	e7dd      	b.n	8006b66 <_dtoa_r+0x266>
 8006baa:	2301      	movs	r3, #1
 8006bac:	e7f2      	b.n	8006b94 <_dtoa_r+0x294>
 8006bae:	2501      	movs	r5, #1
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	9305      	str	r3, [sp, #20]
 8006bb4:	9508      	str	r5, [sp, #32]
 8006bb6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f8cd 9004 	str.w	r9, [sp, #4]
 8006bc0:	2312      	movs	r3, #18
 8006bc2:	9209      	str	r2, [sp, #36]	; 0x24
 8006bc4:	e7cf      	b.n	8006b66 <_dtoa_r+0x266>
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	9308      	str	r3, [sp, #32]
 8006bca:	e7f4      	b.n	8006bb6 <_dtoa_r+0x2b6>
 8006bcc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006bd0:	f8cd 9004 	str.w	r9, [sp, #4]
 8006bd4:	464b      	mov	r3, r9
 8006bd6:	e7c6      	b.n	8006b66 <_dtoa_r+0x266>
 8006bd8:	3101      	adds	r1, #1
 8006bda:	6041      	str	r1, [r0, #4]
 8006bdc:	0052      	lsls	r2, r2, #1
 8006bde:	e7c6      	b.n	8006b6e <_dtoa_r+0x26e>
 8006be0:	636f4361 	.word	0x636f4361
 8006be4:	3fd287a7 	.word	0x3fd287a7
 8006be8:	8b60c8b3 	.word	0x8b60c8b3
 8006bec:	3fc68a28 	.word	0x3fc68a28
 8006bf0:	509f79fb 	.word	0x509f79fb
 8006bf4:	3fd34413 	.word	0x3fd34413
 8006bf8:	08008cc9 	.word	0x08008cc9
 8006bfc:	08008ce0 	.word	0x08008ce0
 8006c00:	7ff00000 	.word	0x7ff00000
 8006c04:	08008cc5 	.word	0x08008cc5
 8006c08:	08008cbc 	.word	0x08008cbc
 8006c0c:	08008c99 	.word	0x08008c99
 8006c10:	3ff80000 	.word	0x3ff80000
 8006c14:	08008dd8 	.word	0x08008dd8
 8006c18:	08008d3f 	.word	0x08008d3f
 8006c1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c1e:	9a00      	ldr	r2, [sp, #0]
 8006c20:	601a      	str	r2, [r3, #0]
 8006c22:	9b01      	ldr	r3, [sp, #4]
 8006c24:	2b0e      	cmp	r3, #14
 8006c26:	f200 80ad 	bhi.w	8006d84 <_dtoa_r+0x484>
 8006c2a:	2d00      	cmp	r5, #0
 8006c2c:	f000 80aa 	beq.w	8006d84 <_dtoa_r+0x484>
 8006c30:	f1ba 0f00 	cmp.w	sl, #0
 8006c34:	dd36      	ble.n	8006ca4 <_dtoa_r+0x3a4>
 8006c36:	4ac3      	ldr	r2, [pc, #780]	; (8006f44 <_dtoa_r+0x644>)
 8006c38:	f00a 030f 	and.w	r3, sl, #15
 8006c3c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006c40:	ed93 7b00 	vldr	d7, [r3]
 8006c44:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006c48:	ea4f 172a 	mov.w	r7, sl, asr #4
 8006c4c:	eeb0 8a47 	vmov.f32	s16, s14
 8006c50:	eef0 8a67 	vmov.f32	s17, s15
 8006c54:	d016      	beq.n	8006c84 <_dtoa_r+0x384>
 8006c56:	4bbc      	ldr	r3, [pc, #752]	; (8006f48 <_dtoa_r+0x648>)
 8006c58:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006c5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006c60:	f7f9 fdfc 	bl	800085c <__aeabi_ddiv>
 8006c64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c68:	f007 070f 	and.w	r7, r7, #15
 8006c6c:	2503      	movs	r5, #3
 8006c6e:	4eb6      	ldr	r6, [pc, #728]	; (8006f48 <_dtoa_r+0x648>)
 8006c70:	b957      	cbnz	r7, 8006c88 <_dtoa_r+0x388>
 8006c72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c76:	ec53 2b18 	vmov	r2, r3, d8
 8006c7a:	f7f9 fdef 	bl	800085c <__aeabi_ddiv>
 8006c7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c82:	e029      	b.n	8006cd8 <_dtoa_r+0x3d8>
 8006c84:	2502      	movs	r5, #2
 8006c86:	e7f2      	b.n	8006c6e <_dtoa_r+0x36e>
 8006c88:	07f9      	lsls	r1, r7, #31
 8006c8a:	d508      	bpl.n	8006c9e <_dtoa_r+0x39e>
 8006c8c:	ec51 0b18 	vmov	r0, r1, d8
 8006c90:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006c94:	f7f9 fcb8 	bl	8000608 <__aeabi_dmul>
 8006c98:	ec41 0b18 	vmov	d8, r0, r1
 8006c9c:	3501      	adds	r5, #1
 8006c9e:	107f      	asrs	r7, r7, #1
 8006ca0:	3608      	adds	r6, #8
 8006ca2:	e7e5      	b.n	8006c70 <_dtoa_r+0x370>
 8006ca4:	f000 80a6 	beq.w	8006df4 <_dtoa_r+0x4f4>
 8006ca8:	f1ca 0600 	rsb	r6, sl, #0
 8006cac:	4ba5      	ldr	r3, [pc, #660]	; (8006f44 <_dtoa_r+0x644>)
 8006cae:	4fa6      	ldr	r7, [pc, #664]	; (8006f48 <_dtoa_r+0x648>)
 8006cb0:	f006 020f 	and.w	r2, r6, #15
 8006cb4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cbc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006cc0:	f7f9 fca2 	bl	8000608 <__aeabi_dmul>
 8006cc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006cc8:	1136      	asrs	r6, r6, #4
 8006cca:	2300      	movs	r3, #0
 8006ccc:	2502      	movs	r5, #2
 8006cce:	2e00      	cmp	r6, #0
 8006cd0:	f040 8085 	bne.w	8006dde <_dtoa_r+0x4de>
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d1d2      	bne.n	8006c7e <_dtoa_r+0x37e>
 8006cd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	f000 808c 	beq.w	8006df8 <_dtoa_r+0x4f8>
 8006ce0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006ce4:	4b99      	ldr	r3, [pc, #612]	; (8006f4c <_dtoa_r+0x64c>)
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	4630      	mov	r0, r6
 8006cea:	4639      	mov	r1, r7
 8006cec:	f7f9 fefe 	bl	8000aec <__aeabi_dcmplt>
 8006cf0:	2800      	cmp	r0, #0
 8006cf2:	f000 8081 	beq.w	8006df8 <_dtoa_r+0x4f8>
 8006cf6:	9b01      	ldr	r3, [sp, #4]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d07d      	beq.n	8006df8 <_dtoa_r+0x4f8>
 8006cfc:	f1b9 0f00 	cmp.w	r9, #0
 8006d00:	dd3c      	ble.n	8006d7c <_dtoa_r+0x47c>
 8006d02:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8006d06:	9307      	str	r3, [sp, #28]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	4b91      	ldr	r3, [pc, #580]	; (8006f50 <_dtoa_r+0x650>)
 8006d0c:	4630      	mov	r0, r6
 8006d0e:	4639      	mov	r1, r7
 8006d10:	f7f9 fc7a 	bl	8000608 <__aeabi_dmul>
 8006d14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d18:	3501      	adds	r5, #1
 8006d1a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8006d1e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006d22:	4628      	mov	r0, r5
 8006d24:	f7f9 fc06 	bl	8000534 <__aeabi_i2d>
 8006d28:	4632      	mov	r2, r6
 8006d2a:	463b      	mov	r3, r7
 8006d2c:	f7f9 fc6c 	bl	8000608 <__aeabi_dmul>
 8006d30:	4b88      	ldr	r3, [pc, #544]	; (8006f54 <_dtoa_r+0x654>)
 8006d32:	2200      	movs	r2, #0
 8006d34:	f7f9 fab2 	bl	800029c <__adddf3>
 8006d38:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006d3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d40:	9303      	str	r3, [sp, #12]
 8006d42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d15c      	bne.n	8006e02 <_dtoa_r+0x502>
 8006d48:	4b83      	ldr	r3, [pc, #524]	; (8006f58 <_dtoa_r+0x658>)
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	4630      	mov	r0, r6
 8006d4e:	4639      	mov	r1, r7
 8006d50:	f7f9 faa2 	bl	8000298 <__aeabi_dsub>
 8006d54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d58:	4606      	mov	r6, r0
 8006d5a:	460f      	mov	r7, r1
 8006d5c:	f7f9 fee4 	bl	8000b28 <__aeabi_dcmpgt>
 8006d60:	2800      	cmp	r0, #0
 8006d62:	f040 8296 	bne.w	8007292 <_dtoa_r+0x992>
 8006d66:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006d6a:	4630      	mov	r0, r6
 8006d6c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006d70:	4639      	mov	r1, r7
 8006d72:	f7f9 febb 	bl	8000aec <__aeabi_dcmplt>
 8006d76:	2800      	cmp	r0, #0
 8006d78:	f040 8288 	bne.w	800728c <_dtoa_r+0x98c>
 8006d7c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006d80:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006d84:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	f2c0 8158 	blt.w	800703c <_dtoa_r+0x73c>
 8006d8c:	f1ba 0f0e 	cmp.w	sl, #14
 8006d90:	f300 8154 	bgt.w	800703c <_dtoa_r+0x73c>
 8006d94:	4b6b      	ldr	r3, [pc, #428]	; (8006f44 <_dtoa_r+0x644>)
 8006d96:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006d9a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006d9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	f280 80e3 	bge.w	8006f6c <_dtoa_r+0x66c>
 8006da6:	9b01      	ldr	r3, [sp, #4]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	f300 80df 	bgt.w	8006f6c <_dtoa_r+0x66c>
 8006dae:	f040 826d 	bne.w	800728c <_dtoa_r+0x98c>
 8006db2:	4b69      	ldr	r3, [pc, #420]	; (8006f58 <_dtoa_r+0x658>)
 8006db4:	2200      	movs	r2, #0
 8006db6:	4640      	mov	r0, r8
 8006db8:	4649      	mov	r1, r9
 8006dba:	f7f9 fc25 	bl	8000608 <__aeabi_dmul>
 8006dbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006dc2:	f7f9 fea7 	bl	8000b14 <__aeabi_dcmpge>
 8006dc6:	9e01      	ldr	r6, [sp, #4]
 8006dc8:	4637      	mov	r7, r6
 8006dca:	2800      	cmp	r0, #0
 8006dcc:	f040 8243 	bne.w	8007256 <_dtoa_r+0x956>
 8006dd0:	9d00      	ldr	r5, [sp, #0]
 8006dd2:	2331      	movs	r3, #49	; 0x31
 8006dd4:	f805 3b01 	strb.w	r3, [r5], #1
 8006dd8:	f10a 0a01 	add.w	sl, sl, #1
 8006ddc:	e23f      	b.n	800725e <_dtoa_r+0x95e>
 8006dde:	07f2      	lsls	r2, r6, #31
 8006de0:	d505      	bpl.n	8006dee <_dtoa_r+0x4ee>
 8006de2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006de6:	f7f9 fc0f 	bl	8000608 <__aeabi_dmul>
 8006dea:	3501      	adds	r5, #1
 8006dec:	2301      	movs	r3, #1
 8006dee:	1076      	asrs	r6, r6, #1
 8006df0:	3708      	adds	r7, #8
 8006df2:	e76c      	b.n	8006cce <_dtoa_r+0x3ce>
 8006df4:	2502      	movs	r5, #2
 8006df6:	e76f      	b.n	8006cd8 <_dtoa_r+0x3d8>
 8006df8:	9b01      	ldr	r3, [sp, #4]
 8006dfa:	f8cd a01c 	str.w	sl, [sp, #28]
 8006dfe:	930c      	str	r3, [sp, #48]	; 0x30
 8006e00:	e78d      	b.n	8006d1e <_dtoa_r+0x41e>
 8006e02:	9900      	ldr	r1, [sp, #0]
 8006e04:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006e06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e08:	4b4e      	ldr	r3, [pc, #312]	; (8006f44 <_dtoa_r+0x644>)
 8006e0a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006e0e:	4401      	add	r1, r0
 8006e10:	9102      	str	r1, [sp, #8]
 8006e12:	9908      	ldr	r1, [sp, #32]
 8006e14:	eeb0 8a47 	vmov.f32	s16, s14
 8006e18:	eef0 8a67 	vmov.f32	s17, s15
 8006e1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e20:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006e24:	2900      	cmp	r1, #0
 8006e26:	d045      	beq.n	8006eb4 <_dtoa_r+0x5b4>
 8006e28:	494c      	ldr	r1, [pc, #304]	; (8006f5c <_dtoa_r+0x65c>)
 8006e2a:	2000      	movs	r0, #0
 8006e2c:	f7f9 fd16 	bl	800085c <__aeabi_ddiv>
 8006e30:	ec53 2b18 	vmov	r2, r3, d8
 8006e34:	f7f9 fa30 	bl	8000298 <__aeabi_dsub>
 8006e38:	9d00      	ldr	r5, [sp, #0]
 8006e3a:	ec41 0b18 	vmov	d8, r0, r1
 8006e3e:	4639      	mov	r1, r7
 8006e40:	4630      	mov	r0, r6
 8006e42:	f7f9 fe91 	bl	8000b68 <__aeabi_d2iz>
 8006e46:	900c      	str	r0, [sp, #48]	; 0x30
 8006e48:	f7f9 fb74 	bl	8000534 <__aeabi_i2d>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	460b      	mov	r3, r1
 8006e50:	4630      	mov	r0, r6
 8006e52:	4639      	mov	r1, r7
 8006e54:	f7f9 fa20 	bl	8000298 <__aeabi_dsub>
 8006e58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e5a:	3330      	adds	r3, #48	; 0x30
 8006e5c:	f805 3b01 	strb.w	r3, [r5], #1
 8006e60:	ec53 2b18 	vmov	r2, r3, d8
 8006e64:	4606      	mov	r6, r0
 8006e66:	460f      	mov	r7, r1
 8006e68:	f7f9 fe40 	bl	8000aec <__aeabi_dcmplt>
 8006e6c:	2800      	cmp	r0, #0
 8006e6e:	d165      	bne.n	8006f3c <_dtoa_r+0x63c>
 8006e70:	4632      	mov	r2, r6
 8006e72:	463b      	mov	r3, r7
 8006e74:	4935      	ldr	r1, [pc, #212]	; (8006f4c <_dtoa_r+0x64c>)
 8006e76:	2000      	movs	r0, #0
 8006e78:	f7f9 fa0e 	bl	8000298 <__aeabi_dsub>
 8006e7c:	ec53 2b18 	vmov	r2, r3, d8
 8006e80:	f7f9 fe34 	bl	8000aec <__aeabi_dcmplt>
 8006e84:	2800      	cmp	r0, #0
 8006e86:	f040 80b9 	bne.w	8006ffc <_dtoa_r+0x6fc>
 8006e8a:	9b02      	ldr	r3, [sp, #8]
 8006e8c:	429d      	cmp	r5, r3
 8006e8e:	f43f af75 	beq.w	8006d7c <_dtoa_r+0x47c>
 8006e92:	4b2f      	ldr	r3, [pc, #188]	; (8006f50 <_dtoa_r+0x650>)
 8006e94:	ec51 0b18 	vmov	r0, r1, d8
 8006e98:	2200      	movs	r2, #0
 8006e9a:	f7f9 fbb5 	bl	8000608 <__aeabi_dmul>
 8006e9e:	4b2c      	ldr	r3, [pc, #176]	; (8006f50 <_dtoa_r+0x650>)
 8006ea0:	ec41 0b18 	vmov	d8, r0, r1
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	4630      	mov	r0, r6
 8006ea8:	4639      	mov	r1, r7
 8006eaa:	f7f9 fbad 	bl	8000608 <__aeabi_dmul>
 8006eae:	4606      	mov	r6, r0
 8006eb0:	460f      	mov	r7, r1
 8006eb2:	e7c4      	b.n	8006e3e <_dtoa_r+0x53e>
 8006eb4:	ec51 0b17 	vmov	r0, r1, d7
 8006eb8:	f7f9 fba6 	bl	8000608 <__aeabi_dmul>
 8006ebc:	9b02      	ldr	r3, [sp, #8]
 8006ebe:	9d00      	ldr	r5, [sp, #0]
 8006ec0:	930c      	str	r3, [sp, #48]	; 0x30
 8006ec2:	ec41 0b18 	vmov	d8, r0, r1
 8006ec6:	4639      	mov	r1, r7
 8006ec8:	4630      	mov	r0, r6
 8006eca:	f7f9 fe4d 	bl	8000b68 <__aeabi_d2iz>
 8006ece:	9011      	str	r0, [sp, #68]	; 0x44
 8006ed0:	f7f9 fb30 	bl	8000534 <__aeabi_i2d>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	460b      	mov	r3, r1
 8006ed8:	4630      	mov	r0, r6
 8006eda:	4639      	mov	r1, r7
 8006edc:	f7f9 f9dc 	bl	8000298 <__aeabi_dsub>
 8006ee0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ee2:	3330      	adds	r3, #48	; 0x30
 8006ee4:	f805 3b01 	strb.w	r3, [r5], #1
 8006ee8:	9b02      	ldr	r3, [sp, #8]
 8006eea:	429d      	cmp	r5, r3
 8006eec:	4606      	mov	r6, r0
 8006eee:	460f      	mov	r7, r1
 8006ef0:	f04f 0200 	mov.w	r2, #0
 8006ef4:	d134      	bne.n	8006f60 <_dtoa_r+0x660>
 8006ef6:	4b19      	ldr	r3, [pc, #100]	; (8006f5c <_dtoa_r+0x65c>)
 8006ef8:	ec51 0b18 	vmov	r0, r1, d8
 8006efc:	f7f9 f9ce 	bl	800029c <__adddf3>
 8006f00:	4602      	mov	r2, r0
 8006f02:	460b      	mov	r3, r1
 8006f04:	4630      	mov	r0, r6
 8006f06:	4639      	mov	r1, r7
 8006f08:	f7f9 fe0e 	bl	8000b28 <__aeabi_dcmpgt>
 8006f0c:	2800      	cmp	r0, #0
 8006f0e:	d175      	bne.n	8006ffc <_dtoa_r+0x6fc>
 8006f10:	ec53 2b18 	vmov	r2, r3, d8
 8006f14:	4911      	ldr	r1, [pc, #68]	; (8006f5c <_dtoa_r+0x65c>)
 8006f16:	2000      	movs	r0, #0
 8006f18:	f7f9 f9be 	bl	8000298 <__aeabi_dsub>
 8006f1c:	4602      	mov	r2, r0
 8006f1e:	460b      	mov	r3, r1
 8006f20:	4630      	mov	r0, r6
 8006f22:	4639      	mov	r1, r7
 8006f24:	f7f9 fde2 	bl	8000aec <__aeabi_dcmplt>
 8006f28:	2800      	cmp	r0, #0
 8006f2a:	f43f af27 	beq.w	8006d7c <_dtoa_r+0x47c>
 8006f2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006f30:	1e6b      	subs	r3, r5, #1
 8006f32:	930c      	str	r3, [sp, #48]	; 0x30
 8006f34:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006f38:	2b30      	cmp	r3, #48	; 0x30
 8006f3a:	d0f8      	beq.n	8006f2e <_dtoa_r+0x62e>
 8006f3c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006f40:	e04a      	b.n	8006fd8 <_dtoa_r+0x6d8>
 8006f42:	bf00      	nop
 8006f44:	08008dd8 	.word	0x08008dd8
 8006f48:	08008db0 	.word	0x08008db0
 8006f4c:	3ff00000 	.word	0x3ff00000
 8006f50:	40240000 	.word	0x40240000
 8006f54:	401c0000 	.word	0x401c0000
 8006f58:	40140000 	.word	0x40140000
 8006f5c:	3fe00000 	.word	0x3fe00000
 8006f60:	4baf      	ldr	r3, [pc, #700]	; (8007220 <_dtoa_r+0x920>)
 8006f62:	f7f9 fb51 	bl	8000608 <__aeabi_dmul>
 8006f66:	4606      	mov	r6, r0
 8006f68:	460f      	mov	r7, r1
 8006f6a:	e7ac      	b.n	8006ec6 <_dtoa_r+0x5c6>
 8006f6c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006f70:	9d00      	ldr	r5, [sp, #0]
 8006f72:	4642      	mov	r2, r8
 8006f74:	464b      	mov	r3, r9
 8006f76:	4630      	mov	r0, r6
 8006f78:	4639      	mov	r1, r7
 8006f7a:	f7f9 fc6f 	bl	800085c <__aeabi_ddiv>
 8006f7e:	f7f9 fdf3 	bl	8000b68 <__aeabi_d2iz>
 8006f82:	9002      	str	r0, [sp, #8]
 8006f84:	f7f9 fad6 	bl	8000534 <__aeabi_i2d>
 8006f88:	4642      	mov	r2, r8
 8006f8a:	464b      	mov	r3, r9
 8006f8c:	f7f9 fb3c 	bl	8000608 <__aeabi_dmul>
 8006f90:	4602      	mov	r2, r0
 8006f92:	460b      	mov	r3, r1
 8006f94:	4630      	mov	r0, r6
 8006f96:	4639      	mov	r1, r7
 8006f98:	f7f9 f97e 	bl	8000298 <__aeabi_dsub>
 8006f9c:	9e02      	ldr	r6, [sp, #8]
 8006f9e:	9f01      	ldr	r7, [sp, #4]
 8006fa0:	3630      	adds	r6, #48	; 0x30
 8006fa2:	f805 6b01 	strb.w	r6, [r5], #1
 8006fa6:	9e00      	ldr	r6, [sp, #0]
 8006fa8:	1bae      	subs	r6, r5, r6
 8006faa:	42b7      	cmp	r7, r6
 8006fac:	4602      	mov	r2, r0
 8006fae:	460b      	mov	r3, r1
 8006fb0:	d137      	bne.n	8007022 <_dtoa_r+0x722>
 8006fb2:	f7f9 f973 	bl	800029c <__adddf3>
 8006fb6:	4642      	mov	r2, r8
 8006fb8:	464b      	mov	r3, r9
 8006fba:	4606      	mov	r6, r0
 8006fbc:	460f      	mov	r7, r1
 8006fbe:	f7f9 fdb3 	bl	8000b28 <__aeabi_dcmpgt>
 8006fc2:	b9c8      	cbnz	r0, 8006ff8 <_dtoa_r+0x6f8>
 8006fc4:	4642      	mov	r2, r8
 8006fc6:	464b      	mov	r3, r9
 8006fc8:	4630      	mov	r0, r6
 8006fca:	4639      	mov	r1, r7
 8006fcc:	f7f9 fd84 	bl	8000ad8 <__aeabi_dcmpeq>
 8006fd0:	b110      	cbz	r0, 8006fd8 <_dtoa_r+0x6d8>
 8006fd2:	9b02      	ldr	r3, [sp, #8]
 8006fd4:	07d9      	lsls	r1, r3, #31
 8006fd6:	d40f      	bmi.n	8006ff8 <_dtoa_r+0x6f8>
 8006fd8:	4620      	mov	r0, r4
 8006fda:	4659      	mov	r1, fp
 8006fdc:	f000 fad6 	bl	800758c <_Bfree>
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	702b      	strb	r3, [r5, #0]
 8006fe4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006fe6:	f10a 0001 	add.w	r0, sl, #1
 8006fea:	6018      	str	r0, [r3, #0]
 8006fec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	f43f acd8 	beq.w	80069a4 <_dtoa_r+0xa4>
 8006ff4:	601d      	str	r5, [r3, #0]
 8006ff6:	e4d5      	b.n	80069a4 <_dtoa_r+0xa4>
 8006ff8:	f8cd a01c 	str.w	sl, [sp, #28]
 8006ffc:	462b      	mov	r3, r5
 8006ffe:	461d      	mov	r5, r3
 8007000:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007004:	2a39      	cmp	r2, #57	; 0x39
 8007006:	d108      	bne.n	800701a <_dtoa_r+0x71a>
 8007008:	9a00      	ldr	r2, [sp, #0]
 800700a:	429a      	cmp	r2, r3
 800700c:	d1f7      	bne.n	8006ffe <_dtoa_r+0x6fe>
 800700e:	9a07      	ldr	r2, [sp, #28]
 8007010:	9900      	ldr	r1, [sp, #0]
 8007012:	3201      	adds	r2, #1
 8007014:	9207      	str	r2, [sp, #28]
 8007016:	2230      	movs	r2, #48	; 0x30
 8007018:	700a      	strb	r2, [r1, #0]
 800701a:	781a      	ldrb	r2, [r3, #0]
 800701c:	3201      	adds	r2, #1
 800701e:	701a      	strb	r2, [r3, #0]
 8007020:	e78c      	b.n	8006f3c <_dtoa_r+0x63c>
 8007022:	4b7f      	ldr	r3, [pc, #508]	; (8007220 <_dtoa_r+0x920>)
 8007024:	2200      	movs	r2, #0
 8007026:	f7f9 faef 	bl	8000608 <__aeabi_dmul>
 800702a:	2200      	movs	r2, #0
 800702c:	2300      	movs	r3, #0
 800702e:	4606      	mov	r6, r0
 8007030:	460f      	mov	r7, r1
 8007032:	f7f9 fd51 	bl	8000ad8 <__aeabi_dcmpeq>
 8007036:	2800      	cmp	r0, #0
 8007038:	d09b      	beq.n	8006f72 <_dtoa_r+0x672>
 800703a:	e7cd      	b.n	8006fd8 <_dtoa_r+0x6d8>
 800703c:	9a08      	ldr	r2, [sp, #32]
 800703e:	2a00      	cmp	r2, #0
 8007040:	f000 80c4 	beq.w	80071cc <_dtoa_r+0x8cc>
 8007044:	9a05      	ldr	r2, [sp, #20]
 8007046:	2a01      	cmp	r2, #1
 8007048:	f300 80a8 	bgt.w	800719c <_dtoa_r+0x89c>
 800704c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800704e:	2a00      	cmp	r2, #0
 8007050:	f000 80a0 	beq.w	8007194 <_dtoa_r+0x894>
 8007054:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007058:	9e06      	ldr	r6, [sp, #24]
 800705a:	4645      	mov	r5, r8
 800705c:	9a04      	ldr	r2, [sp, #16]
 800705e:	2101      	movs	r1, #1
 8007060:	441a      	add	r2, r3
 8007062:	4620      	mov	r0, r4
 8007064:	4498      	add	r8, r3
 8007066:	9204      	str	r2, [sp, #16]
 8007068:	f000 fb4c 	bl	8007704 <__i2b>
 800706c:	4607      	mov	r7, r0
 800706e:	2d00      	cmp	r5, #0
 8007070:	dd0b      	ble.n	800708a <_dtoa_r+0x78a>
 8007072:	9b04      	ldr	r3, [sp, #16]
 8007074:	2b00      	cmp	r3, #0
 8007076:	dd08      	ble.n	800708a <_dtoa_r+0x78a>
 8007078:	42ab      	cmp	r3, r5
 800707a:	9a04      	ldr	r2, [sp, #16]
 800707c:	bfa8      	it	ge
 800707e:	462b      	movge	r3, r5
 8007080:	eba8 0803 	sub.w	r8, r8, r3
 8007084:	1aed      	subs	r5, r5, r3
 8007086:	1ad3      	subs	r3, r2, r3
 8007088:	9304      	str	r3, [sp, #16]
 800708a:	9b06      	ldr	r3, [sp, #24]
 800708c:	b1fb      	cbz	r3, 80070ce <_dtoa_r+0x7ce>
 800708e:	9b08      	ldr	r3, [sp, #32]
 8007090:	2b00      	cmp	r3, #0
 8007092:	f000 809f 	beq.w	80071d4 <_dtoa_r+0x8d4>
 8007096:	2e00      	cmp	r6, #0
 8007098:	dd11      	ble.n	80070be <_dtoa_r+0x7be>
 800709a:	4639      	mov	r1, r7
 800709c:	4632      	mov	r2, r6
 800709e:	4620      	mov	r0, r4
 80070a0:	f000 fbec 	bl	800787c <__pow5mult>
 80070a4:	465a      	mov	r2, fp
 80070a6:	4601      	mov	r1, r0
 80070a8:	4607      	mov	r7, r0
 80070aa:	4620      	mov	r0, r4
 80070ac:	f000 fb40 	bl	8007730 <__multiply>
 80070b0:	4659      	mov	r1, fp
 80070b2:	9007      	str	r0, [sp, #28]
 80070b4:	4620      	mov	r0, r4
 80070b6:	f000 fa69 	bl	800758c <_Bfree>
 80070ba:	9b07      	ldr	r3, [sp, #28]
 80070bc:	469b      	mov	fp, r3
 80070be:	9b06      	ldr	r3, [sp, #24]
 80070c0:	1b9a      	subs	r2, r3, r6
 80070c2:	d004      	beq.n	80070ce <_dtoa_r+0x7ce>
 80070c4:	4659      	mov	r1, fp
 80070c6:	4620      	mov	r0, r4
 80070c8:	f000 fbd8 	bl	800787c <__pow5mult>
 80070cc:	4683      	mov	fp, r0
 80070ce:	2101      	movs	r1, #1
 80070d0:	4620      	mov	r0, r4
 80070d2:	f000 fb17 	bl	8007704 <__i2b>
 80070d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070d8:	2b00      	cmp	r3, #0
 80070da:	4606      	mov	r6, r0
 80070dc:	dd7c      	ble.n	80071d8 <_dtoa_r+0x8d8>
 80070de:	461a      	mov	r2, r3
 80070e0:	4601      	mov	r1, r0
 80070e2:	4620      	mov	r0, r4
 80070e4:	f000 fbca 	bl	800787c <__pow5mult>
 80070e8:	9b05      	ldr	r3, [sp, #20]
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	4606      	mov	r6, r0
 80070ee:	dd76      	ble.n	80071de <_dtoa_r+0x8de>
 80070f0:	2300      	movs	r3, #0
 80070f2:	9306      	str	r3, [sp, #24]
 80070f4:	6933      	ldr	r3, [r6, #16]
 80070f6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80070fa:	6918      	ldr	r0, [r3, #16]
 80070fc:	f000 fab2 	bl	8007664 <__hi0bits>
 8007100:	f1c0 0020 	rsb	r0, r0, #32
 8007104:	9b04      	ldr	r3, [sp, #16]
 8007106:	4418      	add	r0, r3
 8007108:	f010 001f 	ands.w	r0, r0, #31
 800710c:	f000 8086 	beq.w	800721c <_dtoa_r+0x91c>
 8007110:	f1c0 0320 	rsb	r3, r0, #32
 8007114:	2b04      	cmp	r3, #4
 8007116:	dd7f      	ble.n	8007218 <_dtoa_r+0x918>
 8007118:	f1c0 001c 	rsb	r0, r0, #28
 800711c:	9b04      	ldr	r3, [sp, #16]
 800711e:	4403      	add	r3, r0
 8007120:	4480      	add	r8, r0
 8007122:	4405      	add	r5, r0
 8007124:	9304      	str	r3, [sp, #16]
 8007126:	f1b8 0f00 	cmp.w	r8, #0
 800712a:	dd05      	ble.n	8007138 <_dtoa_r+0x838>
 800712c:	4659      	mov	r1, fp
 800712e:	4642      	mov	r2, r8
 8007130:	4620      	mov	r0, r4
 8007132:	f000 fbfd 	bl	8007930 <__lshift>
 8007136:	4683      	mov	fp, r0
 8007138:	9b04      	ldr	r3, [sp, #16]
 800713a:	2b00      	cmp	r3, #0
 800713c:	dd05      	ble.n	800714a <_dtoa_r+0x84a>
 800713e:	4631      	mov	r1, r6
 8007140:	461a      	mov	r2, r3
 8007142:	4620      	mov	r0, r4
 8007144:	f000 fbf4 	bl	8007930 <__lshift>
 8007148:	4606      	mov	r6, r0
 800714a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800714c:	2b00      	cmp	r3, #0
 800714e:	d069      	beq.n	8007224 <_dtoa_r+0x924>
 8007150:	4631      	mov	r1, r6
 8007152:	4658      	mov	r0, fp
 8007154:	f000 fc58 	bl	8007a08 <__mcmp>
 8007158:	2800      	cmp	r0, #0
 800715a:	da63      	bge.n	8007224 <_dtoa_r+0x924>
 800715c:	2300      	movs	r3, #0
 800715e:	4659      	mov	r1, fp
 8007160:	220a      	movs	r2, #10
 8007162:	4620      	mov	r0, r4
 8007164:	f000 fa34 	bl	80075d0 <__multadd>
 8007168:	9b08      	ldr	r3, [sp, #32]
 800716a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800716e:	4683      	mov	fp, r0
 8007170:	2b00      	cmp	r3, #0
 8007172:	f000 818f 	beq.w	8007494 <_dtoa_r+0xb94>
 8007176:	4639      	mov	r1, r7
 8007178:	2300      	movs	r3, #0
 800717a:	220a      	movs	r2, #10
 800717c:	4620      	mov	r0, r4
 800717e:	f000 fa27 	bl	80075d0 <__multadd>
 8007182:	f1b9 0f00 	cmp.w	r9, #0
 8007186:	4607      	mov	r7, r0
 8007188:	f300 808e 	bgt.w	80072a8 <_dtoa_r+0x9a8>
 800718c:	9b05      	ldr	r3, [sp, #20]
 800718e:	2b02      	cmp	r3, #2
 8007190:	dc50      	bgt.n	8007234 <_dtoa_r+0x934>
 8007192:	e089      	b.n	80072a8 <_dtoa_r+0x9a8>
 8007194:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007196:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800719a:	e75d      	b.n	8007058 <_dtoa_r+0x758>
 800719c:	9b01      	ldr	r3, [sp, #4]
 800719e:	1e5e      	subs	r6, r3, #1
 80071a0:	9b06      	ldr	r3, [sp, #24]
 80071a2:	42b3      	cmp	r3, r6
 80071a4:	bfbf      	itttt	lt
 80071a6:	9b06      	ldrlt	r3, [sp, #24]
 80071a8:	9606      	strlt	r6, [sp, #24]
 80071aa:	1af2      	sublt	r2, r6, r3
 80071ac:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80071ae:	bfb6      	itet	lt
 80071b0:	189b      	addlt	r3, r3, r2
 80071b2:	1b9e      	subge	r6, r3, r6
 80071b4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80071b6:	9b01      	ldr	r3, [sp, #4]
 80071b8:	bfb8      	it	lt
 80071ba:	2600      	movlt	r6, #0
 80071bc:	2b00      	cmp	r3, #0
 80071be:	bfb5      	itete	lt
 80071c0:	eba8 0503 	sublt.w	r5, r8, r3
 80071c4:	9b01      	ldrge	r3, [sp, #4]
 80071c6:	2300      	movlt	r3, #0
 80071c8:	4645      	movge	r5, r8
 80071ca:	e747      	b.n	800705c <_dtoa_r+0x75c>
 80071cc:	9e06      	ldr	r6, [sp, #24]
 80071ce:	9f08      	ldr	r7, [sp, #32]
 80071d0:	4645      	mov	r5, r8
 80071d2:	e74c      	b.n	800706e <_dtoa_r+0x76e>
 80071d4:	9a06      	ldr	r2, [sp, #24]
 80071d6:	e775      	b.n	80070c4 <_dtoa_r+0x7c4>
 80071d8:	9b05      	ldr	r3, [sp, #20]
 80071da:	2b01      	cmp	r3, #1
 80071dc:	dc18      	bgt.n	8007210 <_dtoa_r+0x910>
 80071de:	9b02      	ldr	r3, [sp, #8]
 80071e0:	b9b3      	cbnz	r3, 8007210 <_dtoa_r+0x910>
 80071e2:	9b03      	ldr	r3, [sp, #12]
 80071e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071e8:	b9a3      	cbnz	r3, 8007214 <_dtoa_r+0x914>
 80071ea:	9b03      	ldr	r3, [sp, #12]
 80071ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80071f0:	0d1b      	lsrs	r3, r3, #20
 80071f2:	051b      	lsls	r3, r3, #20
 80071f4:	b12b      	cbz	r3, 8007202 <_dtoa_r+0x902>
 80071f6:	9b04      	ldr	r3, [sp, #16]
 80071f8:	3301      	adds	r3, #1
 80071fa:	9304      	str	r3, [sp, #16]
 80071fc:	f108 0801 	add.w	r8, r8, #1
 8007200:	2301      	movs	r3, #1
 8007202:	9306      	str	r3, [sp, #24]
 8007204:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007206:	2b00      	cmp	r3, #0
 8007208:	f47f af74 	bne.w	80070f4 <_dtoa_r+0x7f4>
 800720c:	2001      	movs	r0, #1
 800720e:	e779      	b.n	8007104 <_dtoa_r+0x804>
 8007210:	2300      	movs	r3, #0
 8007212:	e7f6      	b.n	8007202 <_dtoa_r+0x902>
 8007214:	9b02      	ldr	r3, [sp, #8]
 8007216:	e7f4      	b.n	8007202 <_dtoa_r+0x902>
 8007218:	d085      	beq.n	8007126 <_dtoa_r+0x826>
 800721a:	4618      	mov	r0, r3
 800721c:	301c      	adds	r0, #28
 800721e:	e77d      	b.n	800711c <_dtoa_r+0x81c>
 8007220:	40240000 	.word	0x40240000
 8007224:	9b01      	ldr	r3, [sp, #4]
 8007226:	2b00      	cmp	r3, #0
 8007228:	dc38      	bgt.n	800729c <_dtoa_r+0x99c>
 800722a:	9b05      	ldr	r3, [sp, #20]
 800722c:	2b02      	cmp	r3, #2
 800722e:	dd35      	ble.n	800729c <_dtoa_r+0x99c>
 8007230:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007234:	f1b9 0f00 	cmp.w	r9, #0
 8007238:	d10d      	bne.n	8007256 <_dtoa_r+0x956>
 800723a:	4631      	mov	r1, r6
 800723c:	464b      	mov	r3, r9
 800723e:	2205      	movs	r2, #5
 8007240:	4620      	mov	r0, r4
 8007242:	f000 f9c5 	bl	80075d0 <__multadd>
 8007246:	4601      	mov	r1, r0
 8007248:	4606      	mov	r6, r0
 800724a:	4658      	mov	r0, fp
 800724c:	f000 fbdc 	bl	8007a08 <__mcmp>
 8007250:	2800      	cmp	r0, #0
 8007252:	f73f adbd 	bgt.w	8006dd0 <_dtoa_r+0x4d0>
 8007256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007258:	9d00      	ldr	r5, [sp, #0]
 800725a:	ea6f 0a03 	mvn.w	sl, r3
 800725e:	f04f 0800 	mov.w	r8, #0
 8007262:	4631      	mov	r1, r6
 8007264:	4620      	mov	r0, r4
 8007266:	f000 f991 	bl	800758c <_Bfree>
 800726a:	2f00      	cmp	r7, #0
 800726c:	f43f aeb4 	beq.w	8006fd8 <_dtoa_r+0x6d8>
 8007270:	f1b8 0f00 	cmp.w	r8, #0
 8007274:	d005      	beq.n	8007282 <_dtoa_r+0x982>
 8007276:	45b8      	cmp	r8, r7
 8007278:	d003      	beq.n	8007282 <_dtoa_r+0x982>
 800727a:	4641      	mov	r1, r8
 800727c:	4620      	mov	r0, r4
 800727e:	f000 f985 	bl	800758c <_Bfree>
 8007282:	4639      	mov	r1, r7
 8007284:	4620      	mov	r0, r4
 8007286:	f000 f981 	bl	800758c <_Bfree>
 800728a:	e6a5      	b.n	8006fd8 <_dtoa_r+0x6d8>
 800728c:	2600      	movs	r6, #0
 800728e:	4637      	mov	r7, r6
 8007290:	e7e1      	b.n	8007256 <_dtoa_r+0x956>
 8007292:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007294:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007298:	4637      	mov	r7, r6
 800729a:	e599      	b.n	8006dd0 <_dtoa_r+0x4d0>
 800729c:	9b08      	ldr	r3, [sp, #32]
 800729e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	f000 80fd 	beq.w	80074a2 <_dtoa_r+0xba2>
 80072a8:	2d00      	cmp	r5, #0
 80072aa:	dd05      	ble.n	80072b8 <_dtoa_r+0x9b8>
 80072ac:	4639      	mov	r1, r7
 80072ae:	462a      	mov	r2, r5
 80072b0:	4620      	mov	r0, r4
 80072b2:	f000 fb3d 	bl	8007930 <__lshift>
 80072b6:	4607      	mov	r7, r0
 80072b8:	9b06      	ldr	r3, [sp, #24]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d05c      	beq.n	8007378 <_dtoa_r+0xa78>
 80072be:	6879      	ldr	r1, [r7, #4]
 80072c0:	4620      	mov	r0, r4
 80072c2:	f000 f923 	bl	800750c <_Balloc>
 80072c6:	4605      	mov	r5, r0
 80072c8:	b928      	cbnz	r0, 80072d6 <_dtoa_r+0x9d6>
 80072ca:	4b80      	ldr	r3, [pc, #512]	; (80074cc <_dtoa_r+0xbcc>)
 80072cc:	4602      	mov	r2, r0
 80072ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 80072d2:	f7ff bb2e 	b.w	8006932 <_dtoa_r+0x32>
 80072d6:	693a      	ldr	r2, [r7, #16]
 80072d8:	3202      	adds	r2, #2
 80072da:	0092      	lsls	r2, r2, #2
 80072dc:	f107 010c 	add.w	r1, r7, #12
 80072e0:	300c      	adds	r0, #12
 80072e2:	f000 f905 	bl	80074f0 <memcpy>
 80072e6:	2201      	movs	r2, #1
 80072e8:	4629      	mov	r1, r5
 80072ea:	4620      	mov	r0, r4
 80072ec:	f000 fb20 	bl	8007930 <__lshift>
 80072f0:	9b00      	ldr	r3, [sp, #0]
 80072f2:	3301      	adds	r3, #1
 80072f4:	9301      	str	r3, [sp, #4]
 80072f6:	9b00      	ldr	r3, [sp, #0]
 80072f8:	444b      	add	r3, r9
 80072fa:	9307      	str	r3, [sp, #28]
 80072fc:	9b02      	ldr	r3, [sp, #8]
 80072fe:	f003 0301 	and.w	r3, r3, #1
 8007302:	46b8      	mov	r8, r7
 8007304:	9306      	str	r3, [sp, #24]
 8007306:	4607      	mov	r7, r0
 8007308:	9b01      	ldr	r3, [sp, #4]
 800730a:	4631      	mov	r1, r6
 800730c:	3b01      	subs	r3, #1
 800730e:	4658      	mov	r0, fp
 8007310:	9302      	str	r3, [sp, #8]
 8007312:	f7ff fa69 	bl	80067e8 <quorem>
 8007316:	4603      	mov	r3, r0
 8007318:	3330      	adds	r3, #48	; 0x30
 800731a:	9004      	str	r0, [sp, #16]
 800731c:	4641      	mov	r1, r8
 800731e:	4658      	mov	r0, fp
 8007320:	9308      	str	r3, [sp, #32]
 8007322:	f000 fb71 	bl	8007a08 <__mcmp>
 8007326:	463a      	mov	r2, r7
 8007328:	4681      	mov	r9, r0
 800732a:	4631      	mov	r1, r6
 800732c:	4620      	mov	r0, r4
 800732e:	f000 fb87 	bl	8007a40 <__mdiff>
 8007332:	68c2      	ldr	r2, [r0, #12]
 8007334:	9b08      	ldr	r3, [sp, #32]
 8007336:	4605      	mov	r5, r0
 8007338:	bb02      	cbnz	r2, 800737c <_dtoa_r+0xa7c>
 800733a:	4601      	mov	r1, r0
 800733c:	4658      	mov	r0, fp
 800733e:	f000 fb63 	bl	8007a08 <__mcmp>
 8007342:	9b08      	ldr	r3, [sp, #32]
 8007344:	4602      	mov	r2, r0
 8007346:	4629      	mov	r1, r5
 8007348:	4620      	mov	r0, r4
 800734a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800734e:	f000 f91d 	bl	800758c <_Bfree>
 8007352:	9b05      	ldr	r3, [sp, #20]
 8007354:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007356:	9d01      	ldr	r5, [sp, #4]
 8007358:	ea43 0102 	orr.w	r1, r3, r2
 800735c:	9b06      	ldr	r3, [sp, #24]
 800735e:	430b      	orrs	r3, r1
 8007360:	9b08      	ldr	r3, [sp, #32]
 8007362:	d10d      	bne.n	8007380 <_dtoa_r+0xa80>
 8007364:	2b39      	cmp	r3, #57	; 0x39
 8007366:	d029      	beq.n	80073bc <_dtoa_r+0xabc>
 8007368:	f1b9 0f00 	cmp.w	r9, #0
 800736c:	dd01      	ble.n	8007372 <_dtoa_r+0xa72>
 800736e:	9b04      	ldr	r3, [sp, #16]
 8007370:	3331      	adds	r3, #49	; 0x31
 8007372:	9a02      	ldr	r2, [sp, #8]
 8007374:	7013      	strb	r3, [r2, #0]
 8007376:	e774      	b.n	8007262 <_dtoa_r+0x962>
 8007378:	4638      	mov	r0, r7
 800737a:	e7b9      	b.n	80072f0 <_dtoa_r+0x9f0>
 800737c:	2201      	movs	r2, #1
 800737e:	e7e2      	b.n	8007346 <_dtoa_r+0xa46>
 8007380:	f1b9 0f00 	cmp.w	r9, #0
 8007384:	db06      	blt.n	8007394 <_dtoa_r+0xa94>
 8007386:	9905      	ldr	r1, [sp, #20]
 8007388:	ea41 0909 	orr.w	r9, r1, r9
 800738c:	9906      	ldr	r1, [sp, #24]
 800738e:	ea59 0101 	orrs.w	r1, r9, r1
 8007392:	d120      	bne.n	80073d6 <_dtoa_r+0xad6>
 8007394:	2a00      	cmp	r2, #0
 8007396:	ddec      	ble.n	8007372 <_dtoa_r+0xa72>
 8007398:	4659      	mov	r1, fp
 800739a:	2201      	movs	r2, #1
 800739c:	4620      	mov	r0, r4
 800739e:	9301      	str	r3, [sp, #4]
 80073a0:	f000 fac6 	bl	8007930 <__lshift>
 80073a4:	4631      	mov	r1, r6
 80073a6:	4683      	mov	fp, r0
 80073a8:	f000 fb2e 	bl	8007a08 <__mcmp>
 80073ac:	2800      	cmp	r0, #0
 80073ae:	9b01      	ldr	r3, [sp, #4]
 80073b0:	dc02      	bgt.n	80073b8 <_dtoa_r+0xab8>
 80073b2:	d1de      	bne.n	8007372 <_dtoa_r+0xa72>
 80073b4:	07da      	lsls	r2, r3, #31
 80073b6:	d5dc      	bpl.n	8007372 <_dtoa_r+0xa72>
 80073b8:	2b39      	cmp	r3, #57	; 0x39
 80073ba:	d1d8      	bne.n	800736e <_dtoa_r+0xa6e>
 80073bc:	9a02      	ldr	r2, [sp, #8]
 80073be:	2339      	movs	r3, #57	; 0x39
 80073c0:	7013      	strb	r3, [r2, #0]
 80073c2:	462b      	mov	r3, r5
 80073c4:	461d      	mov	r5, r3
 80073c6:	3b01      	subs	r3, #1
 80073c8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80073cc:	2a39      	cmp	r2, #57	; 0x39
 80073ce:	d050      	beq.n	8007472 <_dtoa_r+0xb72>
 80073d0:	3201      	adds	r2, #1
 80073d2:	701a      	strb	r2, [r3, #0]
 80073d4:	e745      	b.n	8007262 <_dtoa_r+0x962>
 80073d6:	2a00      	cmp	r2, #0
 80073d8:	dd03      	ble.n	80073e2 <_dtoa_r+0xae2>
 80073da:	2b39      	cmp	r3, #57	; 0x39
 80073dc:	d0ee      	beq.n	80073bc <_dtoa_r+0xabc>
 80073de:	3301      	adds	r3, #1
 80073e0:	e7c7      	b.n	8007372 <_dtoa_r+0xa72>
 80073e2:	9a01      	ldr	r2, [sp, #4]
 80073e4:	9907      	ldr	r1, [sp, #28]
 80073e6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80073ea:	428a      	cmp	r2, r1
 80073ec:	d02a      	beq.n	8007444 <_dtoa_r+0xb44>
 80073ee:	4659      	mov	r1, fp
 80073f0:	2300      	movs	r3, #0
 80073f2:	220a      	movs	r2, #10
 80073f4:	4620      	mov	r0, r4
 80073f6:	f000 f8eb 	bl	80075d0 <__multadd>
 80073fa:	45b8      	cmp	r8, r7
 80073fc:	4683      	mov	fp, r0
 80073fe:	f04f 0300 	mov.w	r3, #0
 8007402:	f04f 020a 	mov.w	r2, #10
 8007406:	4641      	mov	r1, r8
 8007408:	4620      	mov	r0, r4
 800740a:	d107      	bne.n	800741c <_dtoa_r+0xb1c>
 800740c:	f000 f8e0 	bl	80075d0 <__multadd>
 8007410:	4680      	mov	r8, r0
 8007412:	4607      	mov	r7, r0
 8007414:	9b01      	ldr	r3, [sp, #4]
 8007416:	3301      	adds	r3, #1
 8007418:	9301      	str	r3, [sp, #4]
 800741a:	e775      	b.n	8007308 <_dtoa_r+0xa08>
 800741c:	f000 f8d8 	bl	80075d0 <__multadd>
 8007420:	4639      	mov	r1, r7
 8007422:	4680      	mov	r8, r0
 8007424:	2300      	movs	r3, #0
 8007426:	220a      	movs	r2, #10
 8007428:	4620      	mov	r0, r4
 800742a:	f000 f8d1 	bl	80075d0 <__multadd>
 800742e:	4607      	mov	r7, r0
 8007430:	e7f0      	b.n	8007414 <_dtoa_r+0xb14>
 8007432:	f1b9 0f00 	cmp.w	r9, #0
 8007436:	9a00      	ldr	r2, [sp, #0]
 8007438:	bfcc      	ite	gt
 800743a:	464d      	movgt	r5, r9
 800743c:	2501      	movle	r5, #1
 800743e:	4415      	add	r5, r2
 8007440:	f04f 0800 	mov.w	r8, #0
 8007444:	4659      	mov	r1, fp
 8007446:	2201      	movs	r2, #1
 8007448:	4620      	mov	r0, r4
 800744a:	9301      	str	r3, [sp, #4]
 800744c:	f000 fa70 	bl	8007930 <__lshift>
 8007450:	4631      	mov	r1, r6
 8007452:	4683      	mov	fp, r0
 8007454:	f000 fad8 	bl	8007a08 <__mcmp>
 8007458:	2800      	cmp	r0, #0
 800745a:	dcb2      	bgt.n	80073c2 <_dtoa_r+0xac2>
 800745c:	d102      	bne.n	8007464 <_dtoa_r+0xb64>
 800745e:	9b01      	ldr	r3, [sp, #4]
 8007460:	07db      	lsls	r3, r3, #31
 8007462:	d4ae      	bmi.n	80073c2 <_dtoa_r+0xac2>
 8007464:	462b      	mov	r3, r5
 8007466:	461d      	mov	r5, r3
 8007468:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800746c:	2a30      	cmp	r2, #48	; 0x30
 800746e:	d0fa      	beq.n	8007466 <_dtoa_r+0xb66>
 8007470:	e6f7      	b.n	8007262 <_dtoa_r+0x962>
 8007472:	9a00      	ldr	r2, [sp, #0]
 8007474:	429a      	cmp	r2, r3
 8007476:	d1a5      	bne.n	80073c4 <_dtoa_r+0xac4>
 8007478:	f10a 0a01 	add.w	sl, sl, #1
 800747c:	2331      	movs	r3, #49	; 0x31
 800747e:	e779      	b.n	8007374 <_dtoa_r+0xa74>
 8007480:	4b13      	ldr	r3, [pc, #76]	; (80074d0 <_dtoa_r+0xbd0>)
 8007482:	f7ff baaf 	b.w	80069e4 <_dtoa_r+0xe4>
 8007486:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007488:	2b00      	cmp	r3, #0
 800748a:	f47f aa86 	bne.w	800699a <_dtoa_r+0x9a>
 800748e:	4b11      	ldr	r3, [pc, #68]	; (80074d4 <_dtoa_r+0xbd4>)
 8007490:	f7ff baa8 	b.w	80069e4 <_dtoa_r+0xe4>
 8007494:	f1b9 0f00 	cmp.w	r9, #0
 8007498:	dc03      	bgt.n	80074a2 <_dtoa_r+0xba2>
 800749a:	9b05      	ldr	r3, [sp, #20]
 800749c:	2b02      	cmp	r3, #2
 800749e:	f73f aec9 	bgt.w	8007234 <_dtoa_r+0x934>
 80074a2:	9d00      	ldr	r5, [sp, #0]
 80074a4:	4631      	mov	r1, r6
 80074a6:	4658      	mov	r0, fp
 80074a8:	f7ff f99e 	bl	80067e8 <quorem>
 80074ac:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80074b0:	f805 3b01 	strb.w	r3, [r5], #1
 80074b4:	9a00      	ldr	r2, [sp, #0]
 80074b6:	1aaa      	subs	r2, r5, r2
 80074b8:	4591      	cmp	r9, r2
 80074ba:	ddba      	ble.n	8007432 <_dtoa_r+0xb32>
 80074bc:	4659      	mov	r1, fp
 80074be:	2300      	movs	r3, #0
 80074c0:	220a      	movs	r2, #10
 80074c2:	4620      	mov	r0, r4
 80074c4:	f000 f884 	bl	80075d0 <__multadd>
 80074c8:	4683      	mov	fp, r0
 80074ca:	e7eb      	b.n	80074a4 <_dtoa_r+0xba4>
 80074cc:	08008d3f 	.word	0x08008d3f
 80074d0:	08008c98 	.word	0x08008c98
 80074d4:	08008cbc 	.word	0x08008cbc

080074d8 <_localeconv_r>:
 80074d8:	4800      	ldr	r0, [pc, #0]	; (80074dc <_localeconv_r+0x4>)
 80074da:	4770      	bx	lr
 80074dc:	2000017c 	.word	0x2000017c

080074e0 <malloc>:
 80074e0:	4b02      	ldr	r3, [pc, #8]	; (80074ec <malloc+0xc>)
 80074e2:	4601      	mov	r1, r0
 80074e4:	6818      	ldr	r0, [r3, #0]
 80074e6:	f000 bbef 	b.w	8007cc8 <_malloc_r>
 80074ea:	bf00      	nop
 80074ec:	20000028 	.word	0x20000028

080074f0 <memcpy>:
 80074f0:	440a      	add	r2, r1
 80074f2:	4291      	cmp	r1, r2
 80074f4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80074f8:	d100      	bne.n	80074fc <memcpy+0xc>
 80074fa:	4770      	bx	lr
 80074fc:	b510      	push	{r4, lr}
 80074fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007502:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007506:	4291      	cmp	r1, r2
 8007508:	d1f9      	bne.n	80074fe <memcpy+0xe>
 800750a:	bd10      	pop	{r4, pc}

0800750c <_Balloc>:
 800750c:	b570      	push	{r4, r5, r6, lr}
 800750e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007510:	4604      	mov	r4, r0
 8007512:	460d      	mov	r5, r1
 8007514:	b976      	cbnz	r6, 8007534 <_Balloc+0x28>
 8007516:	2010      	movs	r0, #16
 8007518:	f7ff ffe2 	bl	80074e0 <malloc>
 800751c:	4602      	mov	r2, r0
 800751e:	6260      	str	r0, [r4, #36]	; 0x24
 8007520:	b920      	cbnz	r0, 800752c <_Balloc+0x20>
 8007522:	4b18      	ldr	r3, [pc, #96]	; (8007584 <_Balloc+0x78>)
 8007524:	4818      	ldr	r0, [pc, #96]	; (8007588 <_Balloc+0x7c>)
 8007526:	2166      	movs	r1, #102	; 0x66
 8007528:	f000 fd94 	bl	8008054 <__assert_func>
 800752c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007530:	6006      	str	r6, [r0, #0]
 8007532:	60c6      	str	r6, [r0, #12]
 8007534:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007536:	68f3      	ldr	r3, [r6, #12]
 8007538:	b183      	cbz	r3, 800755c <_Balloc+0x50>
 800753a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800753c:	68db      	ldr	r3, [r3, #12]
 800753e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007542:	b9b8      	cbnz	r0, 8007574 <_Balloc+0x68>
 8007544:	2101      	movs	r1, #1
 8007546:	fa01 f605 	lsl.w	r6, r1, r5
 800754a:	1d72      	adds	r2, r6, #5
 800754c:	0092      	lsls	r2, r2, #2
 800754e:	4620      	mov	r0, r4
 8007550:	f000 fb5a 	bl	8007c08 <_calloc_r>
 8007554:	b160      	cbz	r0, 8007570 <_Balloc+0x64>
 8007556:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800755a:	e00e      	b.n	800757a <_Balloc+0x6e>
 800755c:	2221      	movs	r2, #33	; 0x21
 800755e:	2104      	movs	r1, #4
 8007560:	4620      	mov	r0, r4
 8007562:	f000 fb51 	bl	8007c08 <_calloc_r>
 8007566:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007568:	60f0      	str	r0, [r6, #12]
 800756a:	68db      	ldr	r3, [r3, #12]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d1e4      	bne.n	800753a <_Balloc+0x2e>
 8007570:	2000      	movs	r0, #0
 8007572:	bd70      	pop	{r4, r5, r6, pc}
 8007574:	6802      	ldr	r2, [r0, #0]
 8007576:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800757a:	2300      	movs	r3, #0
 800757c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007580:	e7f7      	b.n	8007572 <_Balloc+0x66>
 8007582:	bf00      	nop
 8007584:	08008cc9 	.word	0x08008cc9
 8007588:	08008d50 	.word	0x08008d50

0800758c <_Bfree>:
 800758c:	b570      	push	{r4, r5, r6, lr}
 800758e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007590:	4605      	mov	r5, r0
 8007592:	460c      	mov	r4, r1
 8007594:	b976      	cbnz	r6, 80075b4 <_Bfree+0x28>
 8007596:	2010      	movs	r0, #16
 8007598:	f7ff ffa2 	bl	80074e0 <malloc>
 800759c:	4602      	mov	r2, r0
 800759e:	6268      	str	r0, [r5, #36]	; 0x24
 80075a0:	b920      	cbnz	r0, 80075ac <_Bfree+0x20>
 80075a2:	4b09      	ldr	r3, [pc, #36]	; (80075c8 <_Bfree+0x3c>)
 80075a4:	4809      	ldr	r0, [pc, #36]	; (80075cc <_Bfree+0x40>)
 80075a6:	218a      	movs	r1, #138	; 0x8a
 80075a8:	f000 fd54 	bl	8008054 <__assert_func>
 80075ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80075b0:	6006      	str	r6, [r0, #0]
 80075b2:	60c6      	str	r6, [r0, #12]
 80075b4:	b13c      	cbz	r4, 80075c6 <_Bfree+0x3a>
 80075b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80075b8:	6862      	ldr	r2, [r4, #4]
 80075ba:	68db      	ldr	r3, [r3, #12]
 80075bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80075c0:	6021      	str	r1, [r4, #0]
 80075c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80075c6:	bd70      	pop	{r4, r5, r6, pc}
 80075c8:	08008cc9 	.word	0x08008cc9
 80075cc:	08008d50 	.word	0x08008d50

080075d0 <__multadd>:
 80075d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075d4:	690e      	ldr	r6, [r1, #16]
 80075d6:	4607      	mov	r7, r0
 80075d8:	4698      	mov	r8, r3
 80075da:	460c      	mov	r4, r1
 80075dc:	f101 0014 	add.w	r0, r1, #20
 80075e0:	2300      	movs	r3, #0
 80075e2:	6805      	ldr	r5, [r0, #0]
 80075e4:	b2a9      	uxth	r1, r5
 80075e6:	fb02 8101 	mla	r1, r2, r1, r8
 80075ea:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80075ee:	0c2d      	lsrs	r5, r5, #16
 80075f0:	fb02 c505 	mla	r5, r2, r5, ip
 80075f4:	b289      	uxth	r1, r1
 80075f6:	3301      	adds	r3, #1
 80075f8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80075fc:	429e      	cmp	r6, r3
 80075fe:	f840 1b04 	str.w	r1, [r0], #4
 8007602:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007606:	dcec      	bgt.n	80075e2 <__multadd+0x12>
 8007608:	f1b8 0f00 	cmp.w	r8, #0
 800760c:	d022      	beq.n	8007654 <__multadd+0x84>
 800760e:	68a3      	ldr	r3, [r4, #8]
 8007610:	42b3      	cmp	r3, r6
 8007612:	dc19      	bgt.n	8007648 <__multadd+0x78>
 8007614:	6861      	ldr	r1, [r4, #4]
 8007616:	4638      	mov	r0, r7
 8007618:	3101      	adds	r1, #1
 800761a:	f7ff ff77 	bl	800750c <_Balloc>
 800761e:	4605      	mov	r5, r0
 8007620:	b928      	cbnz	r0, 800762e <__multadd+0x5e>
 8007622:	4602      	mov	r2, r0
 8007624:	4b0d      	ldr	r3, [pc, #52]	; (800765c <__multadd+0x8c>)
 8007626:	480e      	ldr	r0, [pc, #56]	; (8007660 <__multadd+0x90>)
 8007628:	21b5      	movs	r1, #181	; 0xb5
 800762a:	f000 fd13 	bl	8008054 <__assert_func>
 800762e:	6922      	ldr	r2, [r4, #16]
 8007630:	3202      	adds	r2, #2
 8007632:	f104 010c 	add.w	r1, r4, #12
 8007636:	0092      	lsls	r2, r2, #2
 8007638:	300c      	adds	r0, #12
 800763a:	f7ff ff59 	bl	80074f0 <memcpy>
 800763e:	4621      	mov	r1, r4
 8007640:	4638      	mov	r0, r7
 8007642:	f7ff ffa3 	bl	800758c <_Bfree>
 8007646:	462c      	mov	r4, r5
 8007648:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800764c:	3601      	adds	r6, #1
 800764e:	f8c3 8014 	str.w	r8, [r3, #20]
 8007652:	6126      	str	r6, [r4, #16]
 8007654:	4620      	mov	r0, r4
 8007656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800765a:	bf00      	nop
 800765c:	08008d3f 	.word	0x08008d3f
 8007660:	08008d50 	.word	0x08008d50

08007664 <__hi0bits>:
 8007664:	0c03      	lsrs	r3, r0, #16
 8007666:	041b      	lsls	r3, r3, #16
 8007668:	b9d3      	cbnz	r3, 80076a0 <__hi0bits+0x3c>
 800766a:	0400      	lsls	r0, r0, #16
 800766c:	2310      	movs	r3, #16
 800766e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007672:	bf04      	itt	eq
 8007674:	0200      	lsleq	r0, r0, #8
 8007676:	3308      	addeq	r3, #8
 8007678:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800767c:	bf04      	itt	eq
 800767e:	0100      	lsleq	r0, r0, #4
 8007680:	3304      	addeq	r3, #4
 8007682:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007686:	bf04      	itt	eq
 8007688:	0080      	lsleq	r0, r0, #2
 800768a:	3302      	addeq	r3, #2
 800768c:	2800      	cmp	r0, #0
 800768e:	db05      	blt.n	800769c <__hi0bits+0x38>
 8007690:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007694:	f103 0301 	add.w	r3, r3, #1
 8007698:	bf08      	it	eq
 800769a:	2320      	moveq	r3, #32
 800769c:	4618      	mov	r0, r3
 800769e:	4770      	bx	lr
 80076a0:	2300      	movs	r3, #0
 80076a2:	e7e4      	b.n	800766e <__hi0bits+0xa>

080076a4 <__lo0bits>:
 80076a4:	6803      	ldr	r3, [r0, #0]
 80076a6:	f013 0207 	ands.w	r2, r3, #7
 80076aa:	4601      	mov	r1, r0
 80076ac:	d00b      	beq.n	80076c6 <__lo0bits+0x22>
 80076ae:	07da      	lsls	r2, r3, #31
 80076b0:	d424      	bmi.n	80076fc <__lo0bits+0x58>
 80076b2:	0798      	lsls	r0, r3, #30
 80076b4:	bf49      	itett	mi
 80076b6:	085b      	lsrmi	r3, r3, #1
 80076b8:	089b      	lsrpl	r3, r3, #2
 80076ba:	2001      	movmi	r0, #1
 80076bc:	600b      	strmi	r3, [r1, #0]
 80076be:	bf5c      	itt	pl
 80076c0:	600b      	strpl	r3, [r1, #0]
 80076c2:	2002      	movpl	r0, #2
 80076c4:	4770      	bx	lr
 80076c6:	b298      	uxth	r0, r3
 80076c8:	b9b0      	cbnz	r0, 80076f8 <__lo0bits+0x54>
 80076ca:	0c1b      	lsrs	r3, r3, #16
 80076cc:	2010      	movs	r0, #16
 80076ce:	f013 0fff 	tst.w	r3, #255	; 0xff
 80076d2:	bf04      	itt	eq
 80076d4:	0a1b      	lsreq	r3, r3, #8
 80076d6:	3008      	addeq	r0, #8
 80076d8:	071a      	lsls	r2, r3, #28
 80076da:	bf04      	itt	eq
 80076dc:	091b      	lsreq	r3, r3, #4
 80076de:	3004      	addeq	r0, #4
 80076e0:	079a      	lsls	r2, r3, #30
 80076e2:	bf04      	itt	eq
 80076e4:	089b      	lsreq	r3, r3, #2
 80076e6:	3002      	addeq	r0, #2
 80076e8:	07da      	lsls	r2, r3, #31
 80076ea:	d403      	bmi.n	80076f4 <__lo0bits+0x50>
 80076ec:	085b      	lsrs	r3, r3, #1
 80076ee:	f100 0001 	add.w	r0, r0, #1
 80076f2:	d005      	beq.n	8007700 <__lo0bits+0x5c>
 80076f4:	600b      	str	r3, [r1, #0]
 80076f6:	4770      	bx	lr
 80076f8:	4610      	mov	r0, r2
 80076fa:	e7e8      	b.n	80076ce <__lo0bits+0x2a>
 80076fc:	2000      	movs	r0, #0
 80076fe:	4770      	bx	lr
 8007700:	2020      	movs	r0, #32
 8007702:	4770      	bx	lr

08007704 <__i2b>:
 8007704:	b510      	push	{r4, lr}
 8007706:	460c      	mov	r4, r1
 8007708:	2101      	movs	r1, #1
 800770a:	f7ff feff 	bl	800750c <_Balloc>
 800770e:	4602      	mov	r2, r0
 8007710:	b928      	cbnz	r0, 800771e <__i2b+0x1a>
 8007712:	4b05      	ldr	r3, [pc, #20]	; (8007728 <__i2b+0x24>)
 8007714:	4805      	ldr	r0, [pc, #20]	; (800772c <__i2b+0x28>)
 8007716:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800771a:	f000 fc9b 	bl	8008054 <__assert_func>
 800771e:	2301      	movs	r3, #1
 8007720:	6144      	str	r4, [r0, #20]
 8007722:	6103      	str	r3, [r0, #16]
 8007724:	bd10      	pop	{r4, pc}
 8007726:	bf00      	nop
 8007728:	08008d3f 	.word	0x08008d3f
 800772c:	08008d50 	.word	0x08008d50

08007730 <__multiply>:
 8007730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007734:	4614      	mov	r4, r2
 8007736:	690a      	ldr	r2, [r1, #16]
 8007738:	6923      	ldr	r3, [r4, #16]
 800773a:	429a      	cmp	r2, r3
 800773c:	bfb8      	it	lt
 800773e:	460b      	movlt	r3, r1
 8007740:	460d      	mov	r5, r1
 8007742:	bfbc      	itt	lt
 8007744:	4625      	movlt	r5, r4
 8007746:	461c      	movlt	r4, r3
 8007748:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800774c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007750:	68ab      	ldr	r3, [r5, #8]
 8007752:	6869      	ldr	r1, [r5, #4]
 8007754:	eb0a 0709 	add.w	r7, sl, r9
 8007758:	42bb      	cmp	r3, r7
 800775a:	b085      	sub	sp, #20
 800775c:	bfb8      	it	lt
 800775e:	3101      	addlt	r1, #1
 8007760:	f7ff fed4 	bl	800750c <_Balloc>
 8007764:	b930      	cbnz	r0, 8007774 <__multiply+0x44>
 8007766:	4602      	mov	r2, r0
 8007768:	4b42      	ldr	r3, [pc, #264]	; (8007874 <__multiply+0x144>)
 800776a:	4843      	ldr	r0, [pc, #268]	; (8007878 <__multiply+0x148>)
 800776c:	f240 115d 	movw	r1, #349	; 0x15d
 8007770:	f000 fc70 	bl	8008054 <__assert_func>
 8007774:	f100 0614 	add.w	r6, r0, #20
 8007778:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800777c:	4633      	mov	r3, r6
 800777e:	2200      	movs	r2, #0
 8007780:	4543      	cmp	r3, r8
 8007782:	d31e      	bcc.n	80077c2 <__multiply+0x92>
 8007784:	f105 0c14 	add.w	ip, r5, #20
 8007788:	f104 0314 	add.w	r3, r4, #20
 800778c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007790:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007794:	9202      	str	r2, [sp, #8]
 8007796:	ebac 0205 	sub.w	r2, ip, r5
 800779a:	3a15      	subs	r2, #21
 800779c:	f022 0203 	bic.w	r2, r2, #3
 80077a0:	3204      	adds	r2, #4
 80077a2:	f105 0115 	add.w	r1, r5, #21
 80077a6:	458c      	cmp	ip, r1
 80077a8:	bf38      	it	cc
 80077aa:	2204      	movcc	r2, #4
 80077ac:	9201      	str	r2, [sp, #4]
 80077ae:	9a02      	ldr	r2, [sp, #8]
 80077b0:	9303      	str	r3, [sp, #12]
 80077b2:	429a      	cmp	r2, r3
 80077b4:	d808      	bhi.n	80077c8 <__multiply+0x98>
 80077b6:	2f00      	cmp	r7, #0
 80077b8:	dc55      	bgt.n	8007866 <__multiply+0x136>
 80077ba:	6107      	str	r7, [r0, #16]
 80077bc:	b005      	add	sp, #20
 80077be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077c2:	f843 2b04 	str.w	r2, [r3], #4
 80077c6:	e7db      	b.n	8007780 <__multiply+0x50>
 80077c8:	f8b3 a000 	ldrh.w	sl, [r3]
 80077cc:	f1ba 0f00 	cmp.w	sl, #0
 80077d0:	d020      	beq.n	8007814 <__multiply+0xe4>
 80077d2:	f105 0e14 	add.w	lr, r5, #20
 80077d6:	46b1      	mov	r9, r6
 80077d8:	2200      	movs	r2, #0
 80077da:	f85e 4b04 	ldr.w	r4, [lr], #4
 80077de:	f8d9 b000 	ldr.w	fp, [r9]
 80077e2:	b2a1      	uxth	r1, r4
 80077e4:	fa1f fb8b 	uxth.w	fp, fp
 80077e8:	fb0a b101 	mla	r1, sl, r1, fp
 80077ec:	4411      	add	r1, r2
 80077ee:	f8d9 2000 	ldr.w	r2, [r9]
 80077f2:	0c24      	lsrs	r4, r4, #16
 80077f4:	0c12      	lsrs	r2, r2, #16
 80077f6:	fb0a 2404 	mla	r4, sl, r4, r2
 80077fa:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80077fe:	b289      	uxth	r1, r1
 8007800:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007804:	45f4      	cmp	ip, lr
 8007806:	f849 1b04 	str.w	r1, [r9], #4
 800780a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800780e:	d8e4      	bhi.n	80077da <__multiply+0xaa>
 8007810:	9901      	ldr	r1, [sp, #4]
 8007812:	5072      	str	r2, [r6, r1]
 8007814:	9a03      	ldr	r2, [sp, #12]
 8007816:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800781a:	3304      	adds	r3, #4
 800781c:	f1b9 0f00 	cmp.w	r9, #0
 8007820:	d01f      	beq.n	8007862 <__multiply+0x132>
 8007822:	6834      	ldr	r4, [r6, #0]
 8007824:	f105 0114 	add.w	r1, r5, #20
 8007828:	46b6      	mov	lr, r6
 800782a:	f04f 0a00 	mov.w	sl, #0
 800782e:	880a      	ldrh	r2, [r1, #0]
 8007830:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007834:	fb09 b202 	mla	r2, r9, r2, fp
 8007838:	4492      	add	sl, r2
 800783a:	b2a4      	uxth	r4, r4
 800783c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007840:	f84e 4b04 	str.w	r4, [lr], #4
 8007844:	f851 4b04 	ldr.w	r4, [r1], #4
 8007848:	f8be 2000 	ldrh.w	r2, [lr]
 800784c:	0c24      	lsrs	r4, r4, #16
 800784e:	fb09 2404 	mla	r4, r9, r4, r2
 8007852:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007856:	458c      	cmp	ip, r1
 8007858:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800785c:	d8e7      	bhi.n	800782e <__multiply+0xfe>
 800785e:	9a01      	ldr	r2, [sp, #4]
 8007860:	50b4      	str	r4, [r6, r2]
 8007862:	3604      	adds	r6, #4
 8007864:	e7a3      	b.n	80077ae <__multiply+0x7e>
 8007866:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800786a:	2b00      	cmp	r3, #0
 800786c:	d1a5      	bne.n	80077ba <__multiply+0x8a>
 800786e:	3f01      	subs	r7, #1
 8007870:	e7a1      	b.n	80077b6 <__multiply+0x86>
 8007872:	bf00      	nop
 8007874:	08008d3f 	.word	0x08008d3f
 8007878:	08008d50 	.word	0x08008d50

0800787c <__pow5mult>:
 800787c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007880:	4615      	mov	r5, r2
 8007882:	f012 0203 	ands.w	r2, r2, #3
 8007886:	4606      	mov	r6, r0
 8007888:	460f      	mov	r7, r1
 800788a:	d007      	beq.n	800789c <__pow5mult+0x20>
 800788c:	4c25      	ldr	r4, [pc, #148]	; (8007924 <__pow5mult+0xa8>)
 800788e:	3a01      	subs	r2, #1
 8007890:	2300      	movs	r3, #0
 8007892:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007896:	f7ff fe9b 	bl	80075d0 <__multadd>
 800789a:	4607      	mov	r7, r0
 800789c:	10ad      	asrs	r5, r5, #2
 800789e:	d03d      	beq.n	800791c <__pow5mult+0xa0>
 80078a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80078a2:	b97c      	cbnz	r4, 80078c4 <__pow5mult+0x48>
 80078a4:	2010      	movs	r0, #16
 80078a6:	f7ff fe1b 	bl	80074e0 <malloc>
 80078aa:	4602      	mov	r2, r0
 80078ac:	6270      	str	r0, [r6, #36]	; 0x24
 80078ae:	b928      	cbnz	r0, 80078bc <__pow5mult+0x40>
 80078b0:	4b1d      	ldr	r3, [pc, #116]	; (8007928 <__pow5mult+0xac>)
 80078b2:	481e      	ldr	r0, [pc, #120]	; (800792c <__pow5mult+0xb0>)
 80078b4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80078b8:	f000 fbcc 	bl	8008054 <__assert_func>
 80078bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80078c0:	6004      	str	r4, [r0, #0]
 80078c2:	60c4      	str	r4, [r0, #12]
 80078c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80078c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80078cc:	b94c      	cbnz	r4, 80078e2 <__pow5mult+0x66>
 80078ce:	f240 2171 	movw	r1, #625	; 0x271
 80078d2:	4630      	mov	r0, r6
 80078d4:	f7ff ff16 	bl	8007704 <__i2b>
 80078d8:	2300      	movs	r3, #0
 80078da:	f8c8 0008 	str.w	r0, [r8, #8]
 80078de:	4604      	mov	r4, r0
 80078e0:	6003      	str	r3, [r0, #0]
 80078e2:	f04f 0900 	mov.w	r9, #0
 80078e6:	07eb      	lsls	r3, r5, #31
 80078e8:	d50a      	bpl.n	8007900 <__pow5mult+0x84>
 80078ea:	4639      	mov	r1, r7
 80078ec:	4622      	mov	r2, r4
 80078ee:	4630      	mov	r0, r6
 80078f0:	f7ff ff1e 	bl	8007730 <__multiply>
 80078f4:	4639      	mov	r1, r7
 80078f6:	4680      	mov	r8, r0
 80078f8:	4630      	mov	r0, r6
 80078fa:	f7ff fe47 	bl	800758c <_Bfree>
 80078fe:	4647      	mov	r7, r8
 8007900:	106d      	asrs	r5, r5, #1
 8007902:	d00b      	beq.n	800791c <__pow5mult+0xa0>
 8007904:	6820      	ldr	r0, [r4, #0]
 8007906:	b938      	cbnz	r0, 8007918 <__pow5mult+0x9c>
 8007908:	4622      	mov	r2, r4
 800790a:	4621      	mov	r1, r4
 800790c:	4630      	mov	r0, r6
 800790e:	f7ff ff0f 	bl	8007730 <__multiply>
 8007912:	6020      	str	r0, [r4, #0]
 8007914:	f8c0 9000 	str.w	r9, [r0]
 8007918:	4604      	mov	r4, r0
 800791a:	e7e4      	b.n	80078e6 <__pow5mult+0x6a>
 800791c:	4638      	mov	r0, r7
 800791e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007922:	bf00      	nop
 8007924:	08008ea0 	.word	0x08008ea0
 8007928:	08008cc9 	.word	0x08008cc9
 800792c:	08008d50 	.word	0x08008d50

08007930 <__lshift>:
 8007930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007934:	460c      	mov	r4, r1
 8007936:	6849      	ldr	r1, [r1, #4]
 8007938:	6923      	ldr	r3, [r4, #16]
 800793a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800793e:	68a3      	ldr	r3, [r4, #8]
 8007940:	4607      	mov	r7, r0
 8007942:	4691      	mov	r9, r2
 8007944:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007948:	f108 0601 	add.w	r6, r8, #1
 800794c:	42b3      	cmp	r3, r6
 800794e:	db0b      	blt.n	8007968 <__lshift+0x38>
 8007950:	4638      	mov	r0, r7
 8007952:	f7ff fddb 	bl	800750c <_Balloc>
 8007956:	4605      	mov	r5, r0
 8007958:	b948      	cbnz	r0, 800796e <__lshift+0x3e>
 800795a:	4602      	mov	r2, r0
 800795c:	4b28      	ldr	r3, [pc, #160]	; (8007a00 <__lshift+0xd0>)
 800795e:	4829      	ldr	r0, [pc, #164]	; (8007a04 <__lshift+0xd4>)
 8007960:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007964:	f000 fb76 	bl	8008054 <__assert_func>
 8007968:	3101      	adds	r1, #1
 800796a:	005b      	lsls	r3, r3, #1
 800796c:	e7ee      	b.n	800794c <__lshift+0x1c>
 800796e:	2300      	movs	r3, #0
 8007970:	f100 0114 	add.w	r1, r0, #20
 8007974:	f100 0210 	add.w	r2, r0, #16
 8007978:	4618      	mov	r0, r3
 800797a:	4553      	cmp	r3, sl
 800797c:	db33      	blt.n	80079e6 <__lshift+0xb6>
 800797e:	6920      	ldr	r0, [r4, #16]
 8007980:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007984:	f104 0314 	add.w	r3, r4, #20
 8007988:	f019 091f 	ands.w	r9, r9, #31
 800798c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007990:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007994:	d02b      	beq.n	80079ee <__lshift+0xbe>
 8007996:	f1c9 0e20 	rsb	lr, r9, #32
 800799a:	468a      	mov	sl, r1
 800799c:	2200      	movs	r2, #0
 800799e:	6818      	ldr	r0, [r3, #0]
 80079a0:	fa00 f009 	lsl.w	r0, r0, r9
 80079a4:	4302      	orrs	r2, r0
 80079a6:	f84a 2b04 	str.w	r2, [sl], #4
 80079aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80079ae:	459c      	cmp	ip, r3
 80079b0:	fa22 f20e 	lsr.w	r2, r2, lr
 80079b4:	d8f3      	bhi.n	800799e <__lshift+0x6e>
 80079b6:	ebac 0304 	sub.w	r3, ip, r4
 80079ba:	3b15      	subs	r3, #21
 80079bc:	f023 0303 	bic.w	r3, r3, #3
 80079c0:	3304      	adds	r3, #4
 80079c2:	f104 0015 	add.w	r0, r4, #21
 80079c6:	4584      	cmp	ip, r0
 80079c8:	bf38      	it	cc
 80079ca:	2304      	movcc	r3, #4
 80079cc:	50ca      	str	r2, [r1, r3]
 80079ce:	b10a      	cbz	r2, 80079d4 <__lshift+0xa4>
 80079d0:	f108 0602 	add.w	r6, r8, #2
 80079d4:	3e01      	subs	r6, #1
 80079d6:	4638      	mov	r0, r7
 80079d8:	612e      	str	r6, [r5, #16]
 80079da:	4621      	mov	r1, r4
 80079dc:	f7ff fdd6 	bl	800758c <_Bfree>
 80079e0:	4628      	mov	r0, r5
 80079e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079e6:	f842 0f04 	str.w	r0, [r2, #4]!
 80079ea:	3301      	adds	r3, #1
 80079ec:	e7c5      	b.n	800797a <__lshift+0x4a>
 80079ee:	3904      	subs	r1, #4
 80079f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80079f4:	f841 2f04 	str.w	r2, [r1, #4]!
 80079f8:	459c      	cmp	ip, r3
 80079fa:	d8f9      	bhi.n	80079f0 <__lshift+0xc0>
 80079fc:	e7ea      	b.n	80079d4 <__lshift+0xa4>
 80079fe:	bf00      	nop
 8007a00:	08008d3f 	.word	0x08008d3f
 8007a04:	08008d50 	.word	0x08008d50

08007a08 <__mcmp>:
 8007a08:	b530      	push	{r4, r5, lr}
 8007a0a:	6902      	ldr	r2, [r0, #16]
 8007a0c:	690c      	ldr	r4, [r1, #16]
 8007a0e:	1b12      	subs	r2, r2, r4
 8007a10:	d10e      	bne.n	8007a30 <__mcmp+0x28>
 8007a12:	f100 0314 	add.w	r3, r0, #20
 8007a16:	3114      	adds	r1, #20
 8007a18:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007a1c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007a20:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007a24:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007a28:	42a5      	cmp	r5, r4
 8007a2a:	d003      	beq.n	8007a34 <__mcmp+0x2c>
 8007a2c:	d305      	bcc.n	8007a3a <__mcmp+0x32>
 8007a2e:	2201      	movs	r2, #1
 8007a30:	4610      	mov	r0, r2
 8007a32:	bd30      	pop	{r4, r5, pc}
 8007a34:	4283      	cmp	r3, r0
 8007a36:	d3f3      	bcc.n	8007a20 <__mcmp+0x18>
 8007a38:	e7fa      	b.n	8007a30 <__mcmp+0x28>
 8007a3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a3e:	e7f7      	b.n	8007a30 <__mcmp+0x28>

08007a40 <__mdiff>:
 8007a40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a44:	460c      	mov	r4, r1
 8007a46:	4606      	mov	r6, r0
 8007a48:	4611      	mov	r1, r2
 8007a4a:	4620      	mov	r0, r4
 8007a4c:	4617      	mov	r7, r2
 8007a4e:	f7ff ffdb 	bl	8007a08 <__mcmp>
 8007a52:	1e05      	subs	r5, r0, #0
 8007a54:	d110      	bne.n	8007a78 <__mdiff+0x38>
 8007a56:	4629      	mov	r1, r5
 8007a58:	4630      	mov	r0, r6
 8007a5a:	f7ff fd57 	bl	800750c <_Balloc>
 8007a5e:	b930      	cbnz	r0, 8007a6e <__mdiff+0x2e>
 8007a60:	4b39      	ldr	r3, [pc, #228]	; (8007b48 <__mdiff+0x108>)
 8007a62:	4602      	mov	r2, r0
 8007a64:	f240 2132 	movw	r1, #562	; 0x232
 8007a68:	4838      	ldr	r0, [pc, #224]	; (8007b4c <__mdiff+0x10c>)
 8007a6a:	f000 faf3 	bl	8008054 <__assert_func>
 8007a6e:	2301      	movs	r3, #1
 8007a70:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007a74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a78:	bfa4      	itt	ge
 8007a7a:	463b      	movge	r3, r7
 8007a7c:	4627      	movge	r7, r4
 8007a7e:	4630      	mov	r0, r6
 8007a80:	6879      	ldr	r1, [r7, #4]
 8007a82:	bfa6      	itte	ge
 8007a84:	461c      	movge	r4, r3
 8007a86:	2500      	movge	r5, #0
 8007a88:	2501      	movlt	r5, #1
 8007a8a:	f7ff fd3f 	bl	800750c <_Balloc>
 8007a8e:	b920      	cbnz	r0, 8007a9a <__mdiff+0x5a>
 8007a90:	4b2d      	ldr	r3, [pc, #180]	; (8007b48 <__mdiff+0x108>)
 8007a92:	4602      	mov	r2, r0
 8007a94:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007a98:	e7e6      	b.n	8007a68 <__mdiff+0x28>
 8007a9a:	693e      	ldr	r6, [r7, #16]
 8007a9c:	60c5      	str	r5, [r0, #12]
 8007a9e:	6925      	ldr	r5, [r4, #16]
 8007aa0:	f107 0114 	add.w	r1, r7, #20
 8007aa4:	f104 0914 	add.w	r9, r4, #20
 8007aa8:	f100 0e14 	add.w	lr, r0, #20
 8007aac:	f107 0210 	add.w	r2, r7, #16
 8007ab0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007ab4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007ab8:	46f2      	mov	sl, lr
 8007aba:	2700      	movs	r7, #0
 8007abc:	f859 3b04 	ldr.w	r3, [r9], #4
 8007ac0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007ac4:	fa1f f883 	uxth.w	r8, r3
 8007ac8:	fa17 f78b 	uxtah	r7, r7, fp
 8007acc:	0c1b      	lsrs	r3, r3, #16
 8007ace:	eba7 0808 	sub.w	r8, r7, r8
 8007ad2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007ad6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007ada:	fa1f f888 	uxth.w	r8, r8
 8007ade:	141f      	asrs	r7, r3, #16
 8007ae0:	454d      	cmp	r5, r9
 8007ae2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007ae6:	f84a 3b04 	str.w	r3, [sl], #4
 8007aea:	d8e7      	bhi.n	8007abc <__mdiff+0x7c>
 8007aec:	1b2b      	subs	r3, r5, r4
 8007aee:	3b15      	subs	r3, #21
 8007af0:	f023 0303 	bic.w	r3, r3, #3
 8007af4:	3304      	adds	r3, #4
 8007af6:	3415      	adds	r4, #21
 8007af8:	42a5      	cmp	r5, r4
 8007afa:	bf38      	it	cc
 8007afc:	2304      	movcc	r3, #4
 8007afe:	4419      	add	r1, r3
 8007b00:	4473      	add	r3, lr
 8007b02:	469e      	mov	lr, r3
 8007b04:	460d      	mov	r5, r1
 8007b06:	4565      	cmp	r5, ip
 8007b08:	d30e      	bcc.n	8007b28 <__mdiff+0xe8>
 8007b0a:	f10c 0203 	add.w	r2, ip, #3
 8007b0e:	1a52      	subs	r2, r2, r1
 8007b10:	f022 0203 	bic.w	r2, r2, #3
 8007b14:	3903      	subs	r1, #3
 8007b16:	458c      	cmp	ip, r1
 8007b18:	bf38      	it	cc
 8007b1a:	2200      	movcc	r2, #0
 8007b1c:	441a      	add	r2, r3
 8007b1e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007b22:	b17b      	cbz	r3, 8007b44 <__mdiff+0x104>
 8007b24:	6106      	str	r6, [r0, #16]
 8007b26:	e7a5      	b.n	8007a74 <__mdiff+0x34>
 8007b28:	f855 8b04 	ldr.w	r8, [r5], #4
 8007b2c:	fa17 f488 	uxtah	r4, r7, r8
 8007b30:	1422      	asrs	r2, r4, #16
 8007b32:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8007b36:	b2a4      	uxth	r4, r4
 8007b38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007b3c:	f84e 4b04 	str.w	r4, [lr], #4
 8007b40:	1417      	asrs	r7, r2, #16
 8007b42:	e7e0      	b.n	8007b06 <__mdiff+0xc6>
 8007b44:	3e01      	subs	r6, #1
 8007b46:	e7ea      	b.n	8007b1e <__mdiff+0xde>
 8007b48:	08008d3f 	.word	0x08008d3f
 8007b4c:	08008d50 	.word	0x08008d50

08007b50 <__d2b>:
 8007b50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007b54:	4689      	mov	r9, r1
 8007b56:	2101      	movs	r1, #1
 8007b58:	ec57 6b10 	vmov	r6, r7, d0
 8007b5c:	4690      	mov	r8, r2
 8007b5e:	f7ff fcd5 	bl	800750c <_Balloc>
 8007b62:	4604      	mov	r4, r0
 8007b64:	b930      	cbnz	r0, 8007b74 <__d2b+0x24>
 8007b66:	4602      	mov	r2, r0
 8007b68:	4b25      	ldr	r3, [pc, #148]	; (8007c00 <__d2b+0xb0>)
 8007b6a:	4826      	ldr	r0, [pc, #152]	; (8007c04 <__d2b+0xb4>)
 8007b6c:	f240 310a 	movw	r1, #778	; 0x30a
 8007b70:	f000 fa70 	bl	8008054 <__assert_func>
 8007b74:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007b78:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007b7c:	bb35      	cbnz	r5, 8007bcc <__d2b+0x7c>
 8007b7e:	2e00      	cmp	r6, #0
 8007b80:	9301      	str	r3, [sp, #4]
 8007b82:	d028      	beq.n	8007bd6 <__d2b+0x86>
 8007b84:	4668      	mov	r0, sp
 8007b86:	9600      	str	r6, [sp, #0]
 8007b88:	f7ff fd8c 	bl	80076a4 <__lo0bits>
 8007b8c:	9900      	ldr	r1, [sp, #0]
 8007b8e:	b300      	cbz	r0, 8007bd2 <__d2b+0x82>
 8007b90:	9a01      	ldr	r2, [sp, #4]
 8007b92:	f1c0 0320 	rsb	r3, r0, #32
 8007b96:	fa02 f303 	lsl.w	r3, r2, r3
 8007b9a:	430b      	orrs	r3, r1
 8007b9c:	40c2      	lsrs	r2, r0
 8007b9e:	6163      	str	r3, [r4, #20]
 8007ba0:	9201      	str	r2, [sp, #4]
 8007ba2:	9b01      	ldr	r3, [sp, #4]
 8007ba4:	61a3      	str	r3, [r4, #24]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	bf14      	ite	ne
 8007baa:	2202      	movne	r2, #2
 8007bac:	2201      	moveq	r2, #1
 8007bae:	6122      	str	r2, [r4, #16]
 8007bb0:	b1d5      	cbz	r5, 8007be8 <__d2b+0x98>
 8007bb2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007bb6:	4405      	add	r5, r0
 8007bb8:	f8c9 5000 	str.w	r5, [r9]
 8007bbc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007bc0:	f8c8 0000 	str.w	r0, [r8]
 8007bc4:	4620      	mov	r0, r4
 8007bc6:	b003      	add	sp, #12
 8007bc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007bcc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007bd0:	e7d5      	b.n	8007b7e <__d2b+0x2e>
 8007bd2:	6161      	str	r1, [r4, #20]
 8007bd4:	e7e5      	b.n	8007ba2 <__d2b+0x52>
 8007bd6:	a801      	add	r0, sp, #4
 8007bd8:	f7ff fd64 	bl	80076a4 <__lo0bits>
 8007bdc:	9b01      	ldr	r3, [sp, #4]
 8007bde:	6163      	str	r3, [r4, #20]
 8007be0:	2201      	movs	r2, #1
 8007be2:	6122      	str	r2, [r4, #16]
 8007be4:	3020      	adds	r0, #32
 8007be6:	e7e3      	b.n	8007bb0 <__d2b+0x60>
 8007be8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007bec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007bf0:	f8c9 0000 	str.w	r0, [r9]
 8007bf4:	6918      	ldr	r0, [r3, #16]
 8007bf6:	f7ff fd35 	bl	8007664 <__hi0bits>
 8007bfa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007bfe:	e7df      	b.n	8007bc0 <__d2b+0x70>
 8007c00:	08008d3f 	.word	0x08008d3f
 8007c04:	08008d50 	.word	0x08008d50

08007c08 <_calloc_r>:
 8007c08:	b513      	push	{r0, r1, r4, lr}
 8007c0a:	434a      	muls	r2, r1
 8007c0c:	4611      	mov	r1, r2
 8007c0e:	9201      	str	r2, [sp, #4]
 8007c10:	f000 f85a 	bl	8007cc8 <_malloc_r>
 8007c14:	4604      	mov	r4, r0
 8007c16:	b118      	cbz	r0, 8007c20 <_calloc_r+0x18>
 8007c18:	9a01      	ldr	r2, [sp, #4]
 8007c1a:	2100      	movs	r1, #0
 8007c1c:	f7fe f932 	bl	8005e84 <memset>
 8007c20:	4620      	mov	r0, r4
 8007c22:	b002      	add	sp, #8
 8007c24:	bd10      	pop	{r4, pc}
	...

08007c28 <_free_r>:
 8007c28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c2a:	2900      	cmp	r1, #0
 8007c2c:	d048      	beq.n	8007cc0 <_free_r+0x98>
 8007c2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c32:	9001      	str	r0, [sp, #4]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	f1a1 0404 	sub.w	r4, r1, #4
 8007c3a:	bfb8      	it	lt
 8007c3c:	18e4      	addlt	r4, r4, r3
 8007c3e:	f000 fa65 	bl	800810c <__malloc_lock>
 8007c42:	4a20      	ldr	r2, [pc, #128]	; (8007cc4 <_free_r+0x9c>)
 8007c44:	9801      	ldr	r0, [sp, #4]
 8007c46:	6813      	ldr	r3, [r2, #0]
 8007c48:	4615      	mov	r5, r2
 8007c4a:	b933      	cbnz	r3, 8007c5a <_free_r+0x32>
 8007c4c:	6063      	str	r3, [r4, #4]
 8007c4e:	6014      	str	r4, [r2, #0]
 8007c50:	b003      	add	sp, #12
 8007c52:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007c56:	f000 ba5f 	b.w	8008118 <__malloc_unlock>
 8007c5a:	42a3      	cmp	r3, r4
 8007c5c:	d90b      	bls.n	8007c76 <_free_r+0x4e>
 8007c5e:	6821      	ldr	r1, [r4, #0]
 8007c60:	1862      	adds	r2, r4, r1
 8007c62:	4293      	cmp	r3, r2
 8007c64:	bf04      	itt	eq
 8007c66:	681a      	ldreq	r2, [r3, #0]
 8007c68:	685b      	ldreq	r3, [r3, #4]
 8007c6a:	6063      	str	r3, [r4, #4]
 8007c6c:	bf04      	itt	eq
 8007c6e:	1852      	addeq	r2, r2, r1
 8007c70:	6022      	streq	r2, [r4, #0]
 8007c72:	602c      	str	r4, [r5, #0]
 8007c74:	e7ec      	b.n	8007c50 <_free_r+0x28>
 8007c76:	461a      	mov	r2, r3
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	b10b      	cbz	r3, 8007c80 <_free_r+0x58>
 8007c7c:	42a3      	cmp	r3, r4
 8007c7e:	d9fa      	bls.n	8007c76 <_free_r+0x4e>
 8007c80:	6811      	ldr	r1, [r2, #0]
 8007c82:	1855      	adds	r5, r2, r1
 8007c84:	42a5      	cmp	r5, r4
 8007c86:	d10b      	bne.n	8007ca0 <_free_r+0x78>
 8007c88:	6824      	ldr	r4, [r4, #0]
 8007c8a:	4421      	add	r1, r4
 8007c8c:	1854      	adds	r4, r2, r1
 8007c8e:	42a3      	cmp	r3, r4
 8007c90:	6011      	str	r1, [r2, #0]
 8007c92:	d1dd      	bne.n	8007c50 <_free_r+0x28>
 8007c94:	681c      	ldr	r4, [r3, #0]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	6053      	str	r3, [r2, #4]
 8007c9a:	4421      	add	r1, r4
 8007c9c:	6011      	str	r1, [r2, #0]
 8007c9e:	e7d7      	b.n	8007c50 <_free_r+0x28>
 8007ca0:	d902      	bls.n	8007ca8 <_free_r+0x80>
 8007ca2:	230c      	movs	r3, #12
 8007ca4:	6003      	str	r3, [r0, #0]
 8007ca6:	e7d3      	b.n	8007c50 <_free_r+0x28>
 8007ca8:	6825      	ldr	r5, [r4, #0]
 8007caa:	1961      	adds	r1, r4, r5
 8007cac:	428b      	cmp	r3, r1
 8007cae:	bf04      	itt	eq
 8007cb0:	6819      	ldreq	r1, [r3, #0]
 8007cb2:	685b      	ldreq	r3, [r3, #4]
 8007cb4:	6063      	str	r3, [r4, #4]
 8007cb6:	bf04      	itt	eq
 8007cb8:	1949      	addeq	r1, r1, r5
 8007cba:	6021      	streq	r1, [r4, #0]
 8007cbc:	6054      	str	r4, [r2, #4]
 8007cbe:	e7c7      	b.n	8007c50 <_free_r+0x28>
 8007cc0:	b003      	add	sp, #12
 8007cc2:	bd30      	pop	{r4, r5, pc}
 8007cc4:	20000238 	.word	0x20000238

08007cc8 <_malloc_r>:
 8007cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cca:	1ccd      	adds	r5, r1, #3
 8007ccc:	f025 0503 	bic.w	r5, r5, #3
 8007cd0:	3508      	adds	r5, #8
 8007cd2:	2d0c      	cmp	r5, #12
 8007cd4:	bf38      	it	cc
 8007cd6:	250c      	movcc	r5, #12
 8007cd8:	2d00      	cmp	r5, #0
 8007cda:	4606      	mov	r6, r0
 8007cdc:	db01      	blt.n	8007ce2 <_malloc_r+0x1a>
 8007cde:	42a9      	cmp	r1, r5
 8007ce0:	d903      	bls.n	8007cea <_malloc_r+0x22>
 8007ce2:	230c      	movs	r3, #12
 8007ce4:	6033      	str	r3, [r6, #0]
 8007ce6:	2000      	movs	r0, #0
 8007ce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cea:	f000 fa0f 	bl	800810c <__malloc_lock>
 8007cee:	4921      	ldr	r1, [pc, #132]	; (8007d74 <_malloc_r+0xac>)
 8007cf0:	680a      	ldr	r2, [r1, #0]
 8007cf2:	4614      	mov	r4, r2
 8007cf4:	b99c      	cbnz	r4, 8007d1e <_malloc_r+0x56>
 8007cf6:	4f20      	ldr	r7, [pc, #128]	; (8007d78 <_malloc_r+0xb0>)
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	b923      	cbnz	r3, 8007d06 <_malloc_r+0x3e>
 8007cfc:	4621      	mov	r1, r4
 8007cfe:	4630      	mov	r0, r6
 8007d00:	f000 f998 	bl	8008034 <_sbrk_r>
 8007d04:	6038      	str	r0, [r7, #0]
 8007d06:	4629      	mov	r1, r5
 8007d08:	4630      	mov	r0, r6
 8007d0a:	f000 f993 	bl	8008034 <_sbrk_r>
 8007d0e:	1c43      	adds	r3, r0, #1
 8007d10:	d123      	bne.n	8007d5a <_malloc_r+0x92>
 8007d12:	230c      	movs	r3, #12
 8007d14:	6033      	str	r3, [r6, #0]
 8007d16:	4630      	mov	r0, r6
 8007d18:	f000 f9fe 	bl	8008118 <__malloc_unlock>
 8007d1c:	e7e3      	b.n	8007ce6 <_malloc_r+0x1e>
 8007d1e:	6823      	ldr	r3, [r4, #0]
 8007d20:	1b5b      	subs	r3, r3, r5
 8007d22:	d417      	bmi.n	8007d54 <_malloc_r+0x8c>
 8007d24:	2b0b      	cmp	r3, #11
 8007d26:	d903      	bls.n	8007d30 <_malloc_r+0x68>
 8007d28:	6023      	str	r3, [r4, #0]
 8007d2a:	441c      	add	r4, r3
 8007d2c:	6025      	str	r5, [r4, #0]
 8007d2e:	e004      	b.n	8007d3a <_malloc_r+0x72>
 8007d30:	6863      	ldr	r3, [r4, #4]
 8007d32:	42a2      	cmp	r2, r4
 8007d34:	bf0c      	ite	eq
 8007d36:	600b      	streq	r3, [r1, #0]
 8007d38:	6053      	strne	r3, [r2, #4]
 8007d3a:	4630      	mov	r0, r6
 8007d3c:	f000 f9ec 	bl	8008118 <__malloc_unlock>
 8007d40:	f104 000b 	add.w	r0, r4, #11
 8007d44:	1d23      	adds	r3, r4, #4
 8007d46:	f020 0007 	bic.w	r0, r0, #7
 8007d4a:	1ac2      	subs	r2, r0, r3
 8007d4c:	d0cc      	beq.n	8007ce8 <_malloc_r+0x20>
 8007d4e:	1a1b      	subs	r3, r3, r0
 8007d50:	50a3      	str	r3, [r4, r2]
 8007d52:	e7c9      	b.n	8007ce8 <_malloc_r+0x20>
 8007d54:	4622      	mov	r2, r4
 8007d56:	6864      	ldr	r4, [r4, #4]
 8007d58:	e7cc      	b.n	8007cf4 <_malloc_r+0x2c>
 8007d5a:	1cc4      	adds	r4, r0, #3
 8007d5c:	f024 0403 	bic.w	r4, r4, #3
 8007d60:	42a0      	cmp	r0, r4
 8007d62:	d0e3      	beq.n	8007d2c <_malloc_r+0x64>
 8007d64:	1a21      	subs	r1, r4, r0
 8007d66:	4630      	mov	r0, r6
 8007d68:	f000 f964 	bl	8008034 <_sbrk_r>
 8007d6c:	3001      	adds	r0, #1
 8007d6e:	d1dd      	bne.n	8007d2c <_malloc_r+0x64>
 8007d70:	e7cf      	b.n	8007d12 <_malloc_r+0x4a>
 8007d72:	bf00      	nop
 8007d74:	20000238 	.word	0x20000238
 8007d78:	2000023c 	.word	0x2000023c

08007d7c <__ssputs_r>:
 8007d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d80:	688e      	ldr	r6, [r1, #8]
 8007d82:	429e      	cmp	r6, r3
 8007d84:	4682      	mov	sl, r0
 8007d86:	460c      	mov	r4, r1
 8007d88:	4690      	mov	r8, r2
 8007d8a:	461f      	mov	r7, r3
 8007d8c:	d838      	bhi.n	8007e00 <__ssputs_r+0x84>
 8007d8e:	898a      	ldrh	r2, [r1, #12]
 8007d90:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007d94:	d032      	beq.n	8007dfc <__ssputs_r+0x80>
 8007d96:	6825      	ldr	r5, [r4, #0]
 8007d98:	6909      	ldr	r1, [r1, #16]
 8007d9a:	eba5 0901 	sub.w	r9, r5, r1
 8007d9e:	6965      	ldr	r5, [r4, #20]
 8007da0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007da4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007da8:	3301      	adds	r3, #1
 8007daa:	444b      	add	r3, r9
 8007dac:	106d      	asrs	r5, r5, #1
 8007dae:	429d      	cmp	r5, r3
 8007db0:	bf38      	it	cc
 8007db2:	461d      	movcc	r5, r3
 8007db4:	0553      	lsls	r3, r2, #21
 8007db6:	d531      	bpl.n	8007e1c <__ssputs_r+0xa0>
 8007db8:	4629      	mov	r1, r5
 8007dba:	f7ff ff85 	bl	8007cc8 <_malloc_r>
 8007dbe:	4606      	mov	r6, r0
 8007dc0:	b950      	cbnz	r0, 8007dd8 <__ssputs_r+0x5c>
 8007dc2:	230c      	movs	r3, #12
 8007dc4:	f8ca 3000 	str.w	r3, [sl]
 8007dc8:	89a3      	ldrh	r3, [r4, #12]
 8007dca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dce:	81a3      	strh	r3, [r4, #12]
 8007dd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dd8:	6921      	ldr	r1, [r4, #16]
 8007dda:	464a      	mov	r2, r9
 8007ddc:	f7ff fb88 	bl	80074f0 <memcpy>
 8007de0:	89a3      	ldrh	r3, [r4, #12]
 8007de2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007de6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dea:	81a3      	strh	r3, [r4, #12]
 8007dec:	6126      	str	r6, [r4, #16]
 8007dee:	6165      	str	r5, [r4, #20]
 8007df0:	444e      	add	r6, r9
 8007df2:	eba5 0509 	sub.w	r5, r5, r9
 8007df6:	6026      	str	r6, [r4, #0]
 8007df8:	60a5      	str	r5, [r4, #8]
 8007dfa:	463e      	mov	r6, r7
 8007dfc:	42be      	cmp	r6, r7
 8007dfe:	d900      	bls.n	8007e02 <__ssputs_r+0x86>
 8007e00:	463e      	mov	r6, r7
 8007e02:	4632      	mov	r2, r6
 8007e04:	6820      	ldr	r0, [r4, #0]
 8007e06:	4641      	mov	r1, r8
 8007e08:	f000 f966 	bl	80080d8 <memmove>
 8007e0c:	68a3      	ldr	r3, [r4, #8]
 8007e0e:	6822      	ldr	r2, [r4, #0]
 8007e10:	1b9b      	subs	r3, r3, r6
 8007e12:	4432      	add	r2, r6
 8007e14:	60a3      	str	r3, [r4, #8]
 8007e16:	6022      	str	r2, [r4, #0]
 8007e18:	2000      	movs	r0, #0
 8007e1a:	e7db      	b.n	8007dd4 <__ssputs_r+0x58>
 8007e1c:	462a      	mov	r2, r5
 8007e1e:	f000 f981 	bl	8008124 <_realloc_r>
 8007e22:	4606      	mov	r6, r0
 8007e24:	2800      	cmp	r0, #0
 8007e26:	d1e1      	bne.n	8007dec <__ssputs_r+0x70>
 8007e28:	6921      	ldr	r1, [r4, #16]
 8007e2a:	4650      	mov	r0, sl
 8007e2c:	f7ff fefc 	bl	8007c28 <_free_r>
 8007e30:	e7c7      	b.n	8007dc2 <__ssputs_r+0x46>
	...

08007e34 <_svfiprintf_r>:
 8007e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e38:	4698      	mov	r8, r3
 8007e3a:	898b      	ldrh	r3, [r1, #12]
 8007e3c:	061b      	lsls	r3, r3, #24
 8007e3e:	b09d      	sub	sp, #116	; 0x74
 8007e40:	4607      	mov	r7, r0
 8007e42:	460d      	mov	r5, r1
 8007e44:	4614      	mov	r4, r2
 8007e46:	d50e      	bpl.n	8007e66 <_svfiprintf_r+0x32>
 8007e48:	690b      	ldr	r3, [r1, #16]
 8007e4a:	b963      	cbnz	r3, 8007e66 <_svfiprintf_r+0x32>
 8007e4c:	2140      	movs	r1, #64	; 0x40
 8007e4e:	f7ff ff3b 	bl	8007cc8 <_malloc_r>
 8007e52:	6028      	str	r0, [r5, #0]
 8007e54:	6128      	str	r0, [r5, #16]
 8007e56:	b920      	cbnz	r0, 8007e62 <_svfiprintf_r+0x2e>
 8007e58:	230c      	movs	r3, #12
 8007e5a:	603b      	str	r3, [r7, #0]
 8007e5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e60:	e0d1      	b.n	8008006 <_svfiprintf_r+0x1d2>
 8007e62:	2340      	movs	r3, #64	; 0x40
 8007e64:	616b      	str	r3, [r5, #20]
 8007e66:	2300      	movs	r3, #0
 8007e68:	9309      	str	r3, [sp, #36]	; 0x24
 8007e6a:	2320      	movs	r3, #32
 8007e6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e70:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e74:	2330      	movs	r3, #48	; 0x30
 8007e76:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008020 <_svfiprintf_r+0x1ec>
 8007e7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e7e:	f04f 0901 	mov.w	r9, #1
 8007e82:	4623      	mov	r3, r4
 8007e84:	469a      	mov	sl, r3
 8007e86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e8a:	b10a      	cbz	r2, 8007e90 <_svfiprintf_r+0x5c>
 8007e8c:	2a25      	cmp	r2, #37	; 0x25
 8007e8e:	d1f9      	bne.n	8007e84 <_svfiprintf_r+0x50>
 8007e90:	ebba 0b04 	subs.w	fp, sl, r4
 8007e94:	d00b      	beq.n	8007eae <_svfiprintf_r+0x7a>
 8007e96:	465b      	mov	r3, fp
 8007e98:	4622      	mov	r2, r4
 8007e9a:	4629      	mov	r1, r5
 8007e9c:	4638      	mov	r0, r7
 8007e9e:	f7ff ff6d 	bl	8007d7c <__ssputs_r>
 8007ea2:	3001      	adds	r0, #1
 8007ea4:	f000 80aa 	beq.w	8007ffc <_svfiprintf_r+0x1c8>
 8007ea8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007eaa:	445a      	add	r2, fp
 8007eac:	9209      	str	r2, [sp, #36]	; 0x24
 8007eae:	f89a 3000 	ldrb.w	r3, [sl]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	f000 80a2 	beq.w	8007ffc <_svfiprintf_r+0x1c8>
 8007eb8:	2300      	movs	r3, #0
 8007eba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ebe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ec2:	f10a 0a01 	add.w	sl, sl, #1
 8007ec6:	9304      	str	r3, [sp, #16]
 8007ec8:	9307      	str	r3, [sp, #28]
 8007eca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ece:	931a      	str	r3, [sp, #104]	; 0x68
 8007ed0:	4654      	mov	r4, sl
 8007ed2:	2205      	movs	r2, #5
 8007ed4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ed8:	4851      	ldr	r0, [pc, #324]	; (8008020 <_svfiprintf_r+0x1ec>)
 8007eda:	f7f8 f989 	bl	80001f0 <memchr>
 8007ede:	9a04      	ldr	r2, [sp, #16]
 8007ee0:	b9d8      	cbnz	r0, 8007f1a <_svfiprintf_r+0xe6>
 8007ee2:	06d0      	lsls	r0, r2, #27
 8007ee4:	bf44      	itt	mi
 8007ee6:	2320      	movmi	r3, #32
 8007ee8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007eec:	0711      	lsls	r1, r2, #28
 8007eee:	bf44      	itt	mi
 8007ef0:	232b      	movmi	r3, #43	; 0x2b
 8007ef2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ef6:	f89a 3000 	ldrb.w	r3, [sl]
 8007efa:	2b2a      	cmp	r3, #42	; 0x2a
 8007efc:	d015      	beq.n	8007f2a <_svfiprintf_r+0xf6>
 8007efe:	9a07      	ldr	r2, [sp, #28]
 8007f00:	4654      	mov	r4, sl
 8007f02:	2000      	movs	r0, #0
 8007f04:	f04f 0c0a 	mov.w	ip, #10
 8007f08:	4621      	mov	r1, r4
 8007f0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f0e:	3b30      	subs	r3, #48	; 0x30
 8007f10:	2b09      	cmp	r3, #9
 8007f12:	d94e      	bls.n	8007fb2 <_svfiprintf_r+0x17e>
 8007f14:	b1b0      	cbz	r0, 8007f44 <_svfiprintf_r+0x110>
 8007f16:	9207      	str	r2, [sp, #28]
 8007f18:	e014      	b.n	8007f44 <_svfiprintf_r+0x110>
 8007f1a:	eba0 0308 	sub.w	r3, r0, r8
 8007f1e:	fa09 f303 	lsl.w	r3, r9, r3
 8007f22:	4313      	orrs	r3, r2
 8007f24:	9304      	str	r3, [sp, #16]
 8007f26:	46a2      	mov	sl, r4
 8007f28:	e7d2      	b.n	8007ed0 <_svfiprintf_r+0x9c>
 8007f2a:	9b03      	ldr	r3, [sp, #12]
 8007f2c:	1d19      	adds	r1, r3, #4
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	9103      	str	r1, [sp, #12]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	bfbb      	ittet	lt
 8007f36:	425b      	neglt	r3, r3
 8007f38:	f042 0202 	orrlt.w	r2, r2, #2
 8007f3c:	9307      	strge	r3, [sp, #28]
 8007f3e:	9307      	strlt	r3, [sp, #28]
 8007f40:	bfb8      	it	lt
 8007f42:	9204      	strlt	r2, [sp, #16]
 8007f44:	7823      	ldrb	r3, [r4, #0]
 8007f46:	2b2e      	cmp	r3, #46	; 0x2e
 8007f48:	d10c      	bne.n	8007f64 <_svfiprintf_r+0x130>
 8007f4a:	7863      	ldrb	r3, [r4, #1]
 8007f4c:	2b2a      	cmp	r3, #42	; 0x2a
 8007f4e:	d135      	bne.n	8007fbc <_svfiprintf_r+0x188>
 8007f50:	9b03      	ldr	r3, [sp, #12]
 8007f52:	1d1a      	adds	r2, r3, #4
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	9203      	str	r2, [sp, #12]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	bfb8      	it	lt
 8007f5c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007f60:	3402      	adds	r4, #2
 8007f62:	9305      	str	r3, [sp, #20]
 8007f64:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008030 <_svfiprintf_r+0x1fc>
 8007f68:	7821      	ldrb	r1, [r4, #0]
 8007f6a:	2203      	movs	r2, #3
 8007f6c:	4650      	mov	r0, sl
 8007f6e:	f7f8 f93f 	bl	80001f0 <memchr>
 8007f72:	b140      	cbz	r0, 8007f86 <_svfiprintf_r+0x152>
 8007f74:	2340      	movs	r3, #64	; 0x40
 8007f76:	eba0 000a 	sub.w	r0, r0, sl
 8007f7a:	fa03 f000 	lsl.w	r0, r3, r0
 8007f7e:	9b04      	ldr	r3, [sp, #16]
 8007f80:	4303      	orrs	r3, r0
 8007f82:	3401      	adds	r4, #1
 8007f84:	9304      	str	r3, [sp, #16]
 8007f86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f8a:	4826      	ldr	r0, [pc, #152]	; (8008024 <_svfiprintf_r+0x1f0>)
 8007f8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f90:	2206      	movs	r2, #6
 8007f92:	f7f8 f92d 	bl	80001f0 <memchr>
 8007f96:	2800      	cmp	r0, #0
 8007f98:	d038      	beq.n	800800c <_svfiprintf_r+0x1d8>
 8007f9a:	4b23      	ldr	r3, [pc, #140]	; (8008028 <_svfiprintf_r+0x1f4>)
 8007f9c:	bb1b      	cbnz	r3, 8007fe6 <_svfiprintf_r+0x1b2>
 8007f9e:	9b03      	ldr	r3, [sp, #12]
 8007fa0:	3307      	adds	r3, #7
 8007fa2:	f023 0307 	bic.w	r3, r3, #7
 8007fa6:	3308      	adds	r3, #8
 8007fa8:	9303      	str	r3, [sp, #12]
 8007faa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fac:	4433      	add	r3, r6
 8007fae:	9309      	str	r3, [sp, #36]	; 0x24
 8007fb0:	e767      	b.n	8007e82 <_svfiprintf_r+0x4e>
 8007fb2:	fb0c 3202 	mla	r2, ip, r2, r3
 8007fb6:	460c      	mov	r4, r1
 8007fb8:	2001      	movs	r0, #1
 8007fba:	e7a5      	b.n	8007f08 <_svfiprintf_r+0xd4>
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	3401      	adds	r4, #1
 8007fc0:	9305      	str	r3, [sp, #20]
 8007fc2:	4619      	mov	r1, r3
 8007fc4:	f04f 0c0a 	mov.w	ip, #10
 8007fc8:	4620      	mov	r0, r4
 8007fca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fce:	3a30      	subs	r2, #48	; 0x30
 8007fd0:	2a09      	cmp	r2, #9
 8007fd2:	d903      	bls.n	8007fdc <_svfiprintf_r+0x1a8>
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d0c5      	beq.n	8007f64 <_svfiprintf_r+0x130>
 8007fd8:	9105      	str	r1, [sp, #20]
 8007fda:	e7c3      	b.n	8007f64 <_svfiprintf_r+0x130>
 8007fdc:	fb0c 2101 	mla	r1, ip, r1, r2
 8007fe0:	4604      	mov	r4, r0
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	e7f0      	b.n	8007fc8 <_svfiprintf_r+0x194>
 8007fe6:	ab03      	add	r3, sp, #12
 8007fe8:	9300      	str	r3, [sp, #0]
 8007fea:	462a      	mov	r2, r5
 8007fec:	4b0f      	ldr	r3, [pc, #60]	; (800802c <_svfiprintf_r+0x1f8>)
 8007fee:	a904      	add	r1, sp, #16
 8007ff0:	4638      	mov	r0, r7
 8007ff2:	f7fd ffef 	bl	8005fd4 <_printf_float>
 8007ff6:	1c42      	adds	r2, r0, #1
 8007ff8:	4606      	mov	r6, r0
 8007ffa:	d1d6      	bne.n	8007faa <_svfiprintf_r+0x176>
 8007ffc:	89ab      	ldrh	r3, [r5, #12]
 8007ffe:	065b      	lsls	r3, r3, #25
 8008000:	f53f af2c 	bmi.w	8007e5c <_svfiprintf_r+0x28>
 8008004:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008006:	b01d      	add	sp, #116	; 0x74
 8008008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800800c:	ab03      	add	r3, sp, #12
 800800e:	9300      	str	r3, [sp, #0]
 8008010:	462a      	mov	r2, r5
 8008012:	4b06      	ldr	r3, [pc, #24]	; (800802c <_svfiprintf_r+0x1f8>)
 8008014:	a904      	add	r1, sp, #16
 8008016:	4638      	mov	r0, r7
 8008018:	f7fe fa80 	bl	800651c <_printf_i>
 800801c:	e7eb      	b.n	8007ff6 <_svfiprintf_r+0x1c2>
 800801e:	bf00      	nop
 8008020:	08008eac 	.word	0x08008eac
 8008024:	08008eb6 	.word	0x08008eb6
 8008028:	08005fd5 	.word	0x08005fd5
 800802c:	08007d7d 	.word	0x08007d7d
 8008030:	08008eb2 	.word	0x08008eb2

08008034 <_sbrk_r>:
 8008034:	b538      	push	{r3, r4, r5, lr}
 8008036:	4d06      	ldr	r5, [pc, #24]	; (8008050 <_sbrk_r+0x1c>)
 8008038:	2300      	movs	r3, #0
 800803a:	4604      	mov	r4, r0
 800803c:	4608      	mov	r0, r1
 800803e:	602b      	str	r3, [r5, #0]
 8008040:	f7fa f9ce 	bl	80023e0 <_sbrk>
 8008044:	1c43      	adds	r3, r0, #1
 8008046:	d102      	bne.n	800804e <_sbrk_r+0x1a>
 8008048:	682b      	ldr	r3, [r5, #0]
 800804a:	b103      	cbz	r3, 800804e <_sbrk_r+0x1a>
 800804c:	6023      	str	r3, [r4, #0]
 800804e:	bd38      	pop	{r3, r4, r5, pc}
 8008050:	20000440 	.word	0x20000440

08008054 <__assert_func>:
 8008054:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008056:	4614      	mov	r4, r2
 8008058:	461a      	mov	r2, r3
 800805a:	4b09      	ldr	r3, [pc, #36]	; (8008080 <__assert_func+0x2c>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4605      	mov	r5, r0
 8008060:	68d8      	ldr	r0, [r3, #12]
 8008062:	b14c      	cbz	r4, 8008078 <__assert_func+0x24>
 8008064:	4b07      	ldr	r3, [pc, #28]	; (8008084 <__assert_func+0x30>)
 8008066:	9100      	str	r1, [sp, #0]
 8008068:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800806c:	4906      	ldr	r1, [pc, #24]	; (8008088 <__assert_func+0x34>)
 800806e:	462b      	mov	r3, r5
 8008070:	f000 f80e 	bl	8008090 <fiprintf>
 8008074:	f000 faa4 	bl	80085c0 <abort>
 8008078:	4b04      	ldr	r3, [pc, #16]	; (800808c <__assert_func+0x38>)
 800807a:	461c      	mov	r4, r3
 800807c:	e7f3      	b.n	8008066 <__assert_func+0x12>
 800807e:	bf00      	nop
 8008080:	20000028 	.word	0x20000028
 8008084:	08008ebd 	.word	0x08008ebd
 8008088:	08008eca 	.word	0x08008eca
 800808c:	08008ef8 	.word	0x08008ef8

08008090 <fiprintf>:
 8008090:	b40e      	push	{r1, r2, r3}
 8008092:	b503      	push	{r0, r1, lr}
 8008094:	4601      	mov	r1, r0
 8008096:	ab03      	add	r3, sp, #12
 8008098:	4805      	ldr	r0, [pc, #20]	; (80080b0 <fiprintf+0x20>)
 800809a:	f853 2b04 	ldr.w	r2, [r3], #4
 800809e:	6800      	ldr	r0, [r0, #0]
 80080a0:	9301      	str	r3, [sp, #4]
 80080a2:	f000 f88f 	bl	80081c4 <_vfiprintf_r>
 80080a6:	b002      	add	sp, #8
 80080a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80080ac:	b003      	add	sp, #12
 80080ae:	4770      	bx	lr
 80080b0:	20000028 	.word	0x20000028

080080b4 <__ascii_mbtowc>:
 80080b4:	b082      	sub	sp, #8
 80080b6:	b901      	cbnz	r1, 80080ba <__ascii_mbtowc+0x6>
 80080b8:	a901      	add	r1, sp, #4
 80080ba:	b142      	cbz	r2, 80080ce <__ascii_mbtowc+0x1a>
 80080bc:	b14b      	cbz	r3, 80080d2 <__ascii_mbtowc+0x1e>
 80080be:	7813      	ldrb	r3, [r2, #0]
 80080c0:	600b      	str	r3, [r1, #0]
 80080c2:	7812      	ldrb	r2, [r2, #0]
 80080c4:	1e10      	subs	r0, r2, #0
 80080c6:	bf18      	it	ne
 80080c8:	2001      	movne	r0, #1
 80080ca:	b002      	add	sp, #8
 80080cc:	4770      	bx	lr
 80080ce:	4610      	mov	r0, r2
 80080d0:	e7fb      	b.n	80080ca <__ascii_mbtowc+0x16>
 80080d2:	f06f 0001 	mvn.w	r0, #1
 80080d6:	e7f8      	b.n	80080ca <__ascii_mbtowc+0x16>

080080d8 <memmove>:
 80080d8:	4288      	cmp	r0, r1
 80080da:	b510      	push	{r4, lr}
 80080dc:	eb01 0402 	add.w	r4, r1, r2
 80080e0:	d902      	bls.n	80080e8 <memmove+0x10>
 80080e2:	4284      	cmp	r4, r0
 80080e4:	4623      	mov	r3, r4
 80080e6:	d807      	bhi.n	80080f8 <memmove+0x20>
 80080e8:	1e43      	subs	r3, r0, #1
 80080ea:	42a1      	cmp	r1, r4
 80080ec:	d008      	beq.n	8008100 <memmove+0x28>
 80080ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80080f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80080f6:	e7f8      	b.n	80080ea <memmove+0x12>
 80080f8:	4402      	add	r2, r0
 80080fa:	4601      	mov	r1, r0
 80080fc:	428a      	cmp	r2, r1
 80080fe:	d100      	bne.n	8008102 <memmove+0x2a>
 8008100:	bd10      	pop	{r4, pc}
 8008102:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008106:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800810a:	e7f7      	b.n	80080fc <memmove+0x24>

0800810c <__malloc_lock>:
 800810c:	4801      	ldr	r0, [pc, #4]	; (8008114 <__malloc_lock+0x8>)
 800810e:	f000 bc17 	b.w	8008940 <__retarget_lock_acquire_recursive>
 8008112:	bf00      	nop
 8008114:	20000448 	.word	0x20000448

08008118 <__malloc_unlock>:
 8008118:	4801      	ldr	r0, [pc, #4]	; (8008120 <__malloc_unlock+0x8>)
 800811a:	f000 bc12 	b.w	8008942 <__retarget_lock_release_recursive>
 800811e:	bf00      	nop
 8008120:	20000448 	.word	0x20000448

08008124 <_realloc_r>:
 8008124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008126:	4607      	mov	r7, r0
 8008128:	4614      	mov	r4, r2
 800812a:	460e      	mov	r6, r1
 800812c:	b921      	cbnz	r1, 8008138 <_realloc_r+0x14>
 800812e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008132:	4611      	mov	r1, r2
 8008134:	f7ff bdc8 	b.w	8007cc8 <_malloc_r>
 8008138:	b922      	cbnz	r2, 8008144 <_realloc_r+0x20>
 800813a:	f7ff fd75 	bl	8007c28 <_free_r>
 800813e:	4625      	mov	r5, r4
 8008140:	4628      	mov	r0, r5
 8008142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008144:	f000 fc62 	bl	8008a0c <_malloc_usable_size_r>
 8008148:	42a0      	cmp	r0, r4
 800814a:	d20f      	bcs.n	800816c <_realloc_r+0x48>
 800814c:	4621      	mov	r1, r4
 800814e:	4638      	mov	r0, r7
 8008150:	f7ff fdba 	bl	8007cc8 <_malloc_r>
 8008154:	4605      	mov	r5, r0
 8008156:	2800      	cmp	r0, #0
 8008158:	d0f2      	beq.n	8008140 <_realloc_r+0x1c>
 800815a:	4631      	mov	r1, r6
 800815c:	4622      	mov	r2, r4
 800815e:	f7ff f9c7 	bl	80074f0 <memcpy>
 8008162:	4631      	mov	r1, r6
 8008164:	4638      	mov	r0, r7
 8008166:	f7ff fd5f 	bl	8007c28 <_free_r>
 800816a:	e7e9      	b.n	8008140 <_realloc_r+0x1c>
 800816c:	4635      	mov	r5, r6
 800816e:	e7e7      	b.n	8008140 <_realloc_r+0x1c>

08008170 <__sfputc_r>:
 8008170:	6893      	ldr	r3, [r2, #8]
 8008172:	3b01      	subs	r3, #1
 8008174:	2b00      	cmp	r3, #0
 8008176:	b410      	push	{r4}
 8008178:	6093      	str	r3, [r2, #8]
 800817a:	da08      	bge.n	800818e <__sfputc_r+0x1e>
 800817c:	6994      	ldr	r4, [r2, #24]
 800817e:	42a3      	cmp	r3, r4
 8008180:	db01      	blt.n	8008186 <__sfputc_r+0x16>
 8008182:	290a      	cmp	r1, #10
 8008184:	d103      	bne.n	800818e <__sfputc_r+0x1e>
 8008186:	f85d 4b04 	ldr.w	r4, [sp], #4
 800818a:	f000 b94b 	b.w	8008424 <__swbuf_r>
 800818e:	6813      	ldr	r3, [r2, #0]
 8008190:	1c58      	adds	r0, r3, #1
 8008192:	6010      	str	r0, [r2, #0]
 8008194:	7019      	strb	r1, [r3, #0]
 8008196:	4608      	mov	r0, r1
 8008198:	f85d 4b04 	ldr.w	r4, [sp], #4
 800819c:	4770      	bx	lr

0800819e <__sfputs_r>:
 800819e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081a0:	4606      	mov	r6, r0
 80081a2:	460f      	mov	r7, r1
 80081a4:	4614      	mov	r4, r2
 80081a6:	18d5      	adds	r5, r2, r3
 80081a8:	42ac      	cmp	r4, r5
 80081aa:	d101      	bne.n	80081b0 <__sfputs_r+0x12>
 80081ac:	2000      	movs	r0, #0
 80081ae:	e007      	b.n	80081c0 <__sfputs_r+0x22>
 80081b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081b4:	463a      	mov	r2, r7
 80081b6:	4630      	mov	r0, r6
 80081b8:	f7ff ffda 	bl	8008170 <__sfputc_r>
 80081bc:	1c43      	adds	r3, r0, #1
 80081be:	d1f3      	bne.n	80081a8 <__sfputs_r+0xa>
 80081c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080081c4 <_vfiprintf_r>:
 80081c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081c8:	460d      	mov	r5, r1
 80081ca:	b09d      	sub	sp, #116	; 0x74
 80081cc:	4614      	mov	r4, r2
 80081ce:	4698      	mov	r8, r3
 80081d0:	4606      	mov	r6, r0
 80081d2:	b118      	cbz	r0, 80081dc <_vfiprintf_r+0x18>
 80081d4:	6983      	ldr	r3, [r0, #24]
 80081d6:	b90b      	cbnz	r3, 80081dc <_vfiprintf_r+0x18>
 80081d8:	f000 fb14 	bl	8008804 <__sinit>
 80081dc:	4b89      	ldr	r3, [pc, #548]	; (8008404 <_vfiprintf_r+0x240>)
 80081de:	429d      	cmp	r5, r3
 80081e0:	d11b      	bne.n	800821a <_vfiprintf_r+0x56>
 80081e2:	6875      	ldr	r5, [r6, #4]
 80081e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80081e6:	07d9      	lsls	r1, r3, #31
 80081e8:	d405      	bmi.n	80081f6 <_vfiprintf_r+0x32>
 80081ea:	89ab      	ldrh	r3, [r5, #12]
 80081ec:	059a      	lsls	r2, r3, #22
 80081ee:	d402      	bmi.n	80081f6 <_vfiprintf_r+0x32>
 80081f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081f2:	f000 fba5 	bl	8008940 <__retarget_lock_acquire_recursive>
 80081f6:	89ab      	ldrh	r3, [r5, #12]
 80081f8:	071b      	lsls	r3, r3, #28
 80081fa:	d501      	bpl.n	8008200 <_vfiprintf_r+0x3c>
 80081fc:	692b      	ldr	r3, [r5, #16]
 80081fe:	b9eb      	cbnz	r3, 800823c <_vfiprintf_r+0x78>
 8008200:	4629      	mov	r1, r5
 8008202:	4630      	mov	r0, r6
 8008204:	f000 f96e 	bl	80084e4 <__swsetup_r>
 8008208:	b1c0      	cbz	r0, 800823c <_vfiprintf_r+0x78>
 800820a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800820c:	07dc      	lsls	r4, r3, #31
 800820e:	d50e      	bpl.n	800822e <_vfiprintf_r+0x6a>
 8008210:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008214:	b01d      	add	sp, #116	; 0x74
 8008216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800821a:	4b7b      	ldr	r3, [pc, #492]	; (8008408 <_vfiprintf_r+0x244>)
 800821c:	429d      	cmp	r5, r3
 800821e:	d101      	bne.n	8008224 <_vfiprintf_r+0x60>
 8008220:	68b5      	ldr	r5, [r6, #8]
 8008222:	e7df      	b.n	80081e4 <_vfiprintf_r+0x20>
 8008224:	4b79      	ldr	r3, [pc, #484]	; (800840c <_vfiprintf_r+0x248>)
 8008226:	429d      	cmp	r5, r3
 8008228:	bf08      	it	eq
 800822a:	68f5      	ldreq	r5, [r6, #12]
 800822c:	e7da      	b.n	80081e4 <_vfiprintf_r+0x20>
 800822e:	89ab      	ldrh	r3, [r5, #12]
 8008230:	0598      	lsls	r0, r3, #22
 8008232:	d4ed      	bmi.n	8008210 <_vfiprintf_r+0x4c>
 8008234:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008236:	f000 fb84 	bl	8008942 <__retarget_lock_release_recursive>
 800823a:	e7e9      	b.n	8008210 <_vfiprintf_r+0x4c>
 800823c:	2300      	movs	r3, #0
 800823e:	9309      	str	r3, [sp, #36]	; 0x24
 8008240:	2320      	movs	r3, #32
 8008242:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008246:	f8cd 800c 	str.w	r8, [sp, #12]
 800824a:	2330      	movs	r3, #48	; 0x30
 800824c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008410 <_vfiprintf_r+0x24c>
 8008250:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008254:	f04f 0901 	mov.w	r9, #1
 8008258:	4623      	mov	r3, r4
 800825a:	469a      	mov	sl, r3
 800825c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008260:	b10a      	cbz	r2, 8008266 <_vfiprintf_r+0xa2>
 8008262:	2a25      	cmp	r2, #37	; 0x25
 8008264:	d1f9      	bne.n	800825a <_vfiprintf_r+0x96>
 8008266:	ebba 0b04 	subs.w	fp, sl, r4
 800826a:	d00b      	beq.n	8008284 <_vfiprintf_r+0xc0>
 800826c:	465b      	mov	r3, fp
 800826e:	4622      	mov	r2, r4
 8008270:	4629      	mov	r1, r5
 8008272:	4630      	mov	r0, r6
 8008274:	f7ff ff93 	bl	800819e <__sfputs_r>
 8008278:	3001      	adds	r0, #1
 800827a:	f000 80aa 	beq.w	80083d2 <_vfiprintf_r+0x20e>
 800827e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008280:	445a      	add	r2, fp
 8008282:	9209      	str	r2, [sp, #36]	; 0x24
 8008284:	f89a 3000 	ldrb.w	r3, [sl]
 8008288:	2b00      	cmp	r3, #0
 800828a:	f000 80a2 	beq.w	80083d2 <_vfiprintf_r+0x20e>
 800828e:	2300      	movs	r3, #0
 8008290:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008294:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008298:	f10a 0a01 	add.w	sl, sl, #1
 800829c:	9304      	str	r3, [sp, #16]
 800829e:	9307      	str	r3, [sp, #28]
 80082a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80082a4:	931a      	str	r3, [sp, #104]	; 0x68
 80082a6:	4654      	mov	r4, sl
 80082a8:	2205      	movs	r2, #5
 80082aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082ae:	4858      	ldr	r0, [pc, #352]	; (8008410 <_vfiprintf_r+0x24c>)
 80082b0:	f7f7 ff9e 	bl	80001f0 <memchr>
 80082b4:	9a04      	ldr	r2, [sp, #16]
 80082b6:	b9d8      	cbnz	r0, 80082f0 <_vfiprintf_r+0x12c>
 80082b8:	06d1      	lsls	r1, r2, #27
 80082ba:	bf44      	itt	mi
 80082bc:	2320      	movmi	r3, #32
 80082be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082c2:	0713      	lsls	r3, r2, #28
 80082c4:	bf44      	itt	mi
 80082c6:	232b      	movmi	r3, #43	; 0x2b
 80082c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082cc:	f89a 3000 	ldrb.w	r3, [sl]
 80082d0:	2b2a      	cmp	r3, #42	; 0x2a
 80082d2:	d015      	beq.n	8008300 <_vfiprintf_r+0x13c>
 80082d4:	9a07      	ldr	r2, [sp, #28]
 80082d6:	4654      	mov	r4, sl
 80082d8:	2000      	movs	r0, #0
 80082da:	f04f 0c0a 	mov.w	ip, #10
 80082de:	4621      	mov	r1, r4
 80082e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082e4:	3b30      	subs	r3, #48	; 0x30
 80082e6:	2b09      	cmp	r3, #9
 80082e8:	d94e      	bls.n	8008388 <_vfiprintf_r+0x1c4>
 80082ea:	b1b0      	cbz	r0, 800831a <_vfiprintf_r+0x156>
 80082ec:	9207      	str	r2, [sp, #28]
 80082ee:	e014      	b.n	800831a <_vfiprintf_r+0x156>
 80082f0:	eba0 0308 	sub.w	r3, r0, r8
 80082f4:	fa09 f303 	lsl.w	r3, r9, r3
 80082f8:	4313      	orrs	r3, r2
 80082fa:	9304      	str	r3, [sp, #16]
 80082fc:	46a2      	mov	sl, r4
 80082fe:	e7d2      	b.n	80082a6 <_vfiprintf_r+0xe2>
 8008300:	9b03      	ldr	r3, [sp, #12]
 8008302:	1d19      	adds	r1, r3, #4
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	9103      	str	r1, [sp, #12]
 8008308:	2b00      	cmp	r3, #0
 800830a:	bfbb      	ittet	lt
 800830c:	425b      	neglt	r3, r3
 800830e:	f042 0202 	orrlt.w	r2, r2, #2
 8008312:	9307      	strge	r3, [sp, #28]
 8008314:	9307      	strlt	r3, [sp, #28]
 8008316:	bfb8      	it	lt
 8008318:	9204      	strlt	r2, [sp, #16]
 800831a:	7823      	ldrb	r3, [r4, #0]
 800831c:	2b2e      	cmp	r3, #46	; 0x2e
 800831e:	d10c      	bne.n	800833a <_vfiprintf_r+0x176>
 8008320:	7863      	ldrb	r3, [r4, #1]
 8008322:	2b2a      	cmp	r3, #42	; 0x2a
 8008324:	d135      	bne.n	8008392 <_vfiprintf_r+0x1ce>
 8008326:	9b03      	ldr	r3, [sp, #12]
 8008328:	1d1a      	adds	r2, r3, #4
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	9203      	str	r2, [sp, #12]
 800832e:	2b00      	cmp	r3, #0
 8008330:	bfb8      	it	lt
 8008332:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008336:	3402      	adds	r4, #2
 8008338:	9305      	str	r3, [sp, #20]
 800833a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008420 <_vfiprintf_r+0x25c>
 800833e:	7821      	ldrb	r1, [r4, #0]
 8008340:	2203      	movs	r2, #3
 8008342:	4650      	mov	r0, sl
 8008344:	f7f7 ff54 	bl	80001f0 <memchr>
 8008348:	b140      	cbz	r0, 800835c <_vfiprintf_r+0x198>
 800834a:	2340      	movs	r3, #64	; 0x40
 800834c:	eba0 000a 	sub.w	r0, r0, sl
 8008350:	fa03 f000 	lsl.w	r0, r3, r0
 8008354:	9b04      	ldr	r3, [sp, #16]
 8008356:	4303      	orrs	r3, r0
 8008358:	3401      	adds	r4, #1
 800835a:	9304      	str	r3, [sp, #16]
 800835c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008360:	482c      	ldr	r0, [pc, #176]	; (8008414 <_vfiprintf_r+0x250>)
 8008362:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008366:	2206      	movs	r2, #6
 8008368:	f7f7 ff42 	bl	80001f0 <memchr>
 800836c:	2800      	cmp	r0, #0
 800836e:	d03f      	beq.n	80083f0 <_vfiprintf_r+0x22c>
 8008370:	4b29      	ldr	r3, [pc, #164]	; (8008418 <_vfiprintf_r+0x254>)
 8008372:	bb1b      	cbnz	r3, 80083bc <_vfiprintf_r+0x1f8>
 8008374:	9b03      	ldr	r3, [sp, #12]
 8008376:	3307      	adds	r3, #7
 8008378:	f023 0307 	bic.w	r3, r3, #7
 800837c:	3308      	adds	r3, #8
 800837e:	9303      	str	r3, [sp, #12]
 8008380:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008382:	443b      	add	r3, r7
 8008384:	9309      	str	r3, [sp, #36]	; 0x24
 8008386:	e767      	b.n	8008258 <_vfiprintf_r+0x94>
 8008388:	fb0c 3202 	mla	r2, ip, r2, r3
 800838c:	460c      	mov	r4, r1
 800838e:	2001      	movs	r0, #1
 8008390:	e7a5      	b.n	80082de <_vfiprintf_r+0x11a>
 8008392:	2300      	movs	r3, #0
 8008394:	3401      	adds	r4, #1
 8008396:	9305      	str	r3, [sp, #20]
 8008398:	4619      	mov	r1, r3
 800839a:	f04f 0c0a 	mov.w	ip, #10
 800839e:	4620      	mov	r0, r4
 80083a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083a4:	3a30      	subs	r2, #48	; 0x30
 80083a6:	2a09      	cmp	r2, #9
 80083a8:	d903      	bls.n	80083b2 <_vfiprintf_r+0x1ee>
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d0c5      	beq.n	800833a <_vfiprintf_r+0x176>
 80083ae:	9105      	str	r1, [sp, #20]
 80083b0:	e7c3      	b.n	800833a <_vfiprintf_r+0x176>
 80083b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80083b6:	4604      	mov	r4, r0
 80083b8:	2301      	movs	r3, #1
 80083ba:	e7f0      	b.n	800839e <_vfiprintf_r+0x1da>
 80083bc:	ab03      	add	r3, sp, #12
 80083be:	9300      	str	r3, [sp, #0]
 80083c0:	462a      	mov	r2, r5
 80083c2:	4b16      	ldr	r3, [pc, #88]	; (800841c <_vfiprintf_r+0x258>)
 80083c4:	a904      	add	r1, sp, #16
 80083c6:	4630      	mov	r0, r6
 80083c8:	f7fd fe04 	bl	8005fd4 <_printf_float>
 80083cc:	4607      	mov	r7, r0
 80083ce:	1c78      	adds	r0, r7, #1
 80083d0:	d1d6      	bne.n	8008380 <_vfiprintf_r+0x1bc>
 80083d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80083d4:	07d9      	lsls	r1, r3, #31
 80083d6:	d405      	bmi.n	80083e4 <_vfiprintf_r+0x220>
 80083d8:	89ab      	ldrh	r3, [r5, #12]
 80083da:	059a      	lsls	r2, r3, #22
 80083dc:	d402      	bmi.n	80083e4 <_vfiprintf_r+0x220>
 80083de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80083e0:	f000 faaf 	bl	8008942 <__retarget_lock_release_recursive>
 80083e4:	89ab      	ldrh	r3, [r5, #12]
 80083e6:	065b      	lsls	r3, r3, #25
 80083e8:	f53f af12 	bmi.w	8008210 <_vfiprintf_r+0x4c>
 80083ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80083ee:	e711      	b.n	8008214 <_vfiprintf_r+0x50>
 80083f0:	ab03      	add	r3, sp, #12
 80083f2:	9300      	str	r3, [sp, #0]
 80083f4:	462a      	mov	r2, r5
 80083f6:	4b09      	ldr	r3, [pc, #36]	; (800841c <_vfiprintf_r+0x258>)
 80083f8:	a904      	add	r1, sp, #16
 80083fa:	4630      	mov	r0, r6
 80083fc:	f7fe f88e 	bl	800651c <_printf_i>
 8008400:	e7e4      	b.n	80083cc <_vfiprintf_r+0x208>
 8008402:	bf00      	nop
 8008404:	08009024 	.word	0x08009024
 8008408:	08009044 	.word	0x08009044
 800840c:	08009004 	.word	0x08009004
 8008410:	08008eac 	.word	0x08008eac
 8008414:	08008eb6 	.word	0x08008eb6
 8008418:	08005fd5 	.word	0x08005fd5
 800841c:	0800819f 	.word	0x0800819f
 8008420:	08008eb2 	.word	0x08008eb2

08008424 <__swbuf_r>:
 8008424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008426:	460e      	mov	r6, r1
 8008428:	4614      	mov	r4, r2
 800842a:	4605      	mov	r5, r0
 800842c:	b118      	cbz	r0, 8008436 <__swbuf_r+0x12>
 800842e:	6983      	ldr	r3, [r0, #24]
 8008430:	b90b      	cbnz	r3, 8008436 <__swbuf_r+0x12>
 8008432:	f000 f9e7 	bl	8008804 <__sinit>
 8008436:	4b21      	ldr	r3, [pc, #132]	; (80084bc <__swbuf_r+0x98>)
 8008438:	429c      	cmp	r4, r3
 800843a:	d12b      	bne.n	8008494 <__swbuf_r+0x70>
 800843c:	686c      	ldr	r4, [r5, #4]
 800843e:	69a3      	ldr	r3, [r4, #24]
 8008440:	60a3      	str	r3, [r4, #8]
 8008442:	89a3      	ldrh	r3, [r4, #12]
 8008444:	071a      	lsls	r2, r3, #28
 8008446:	d52f      	bpl.n	80084a8 <__swbuf_r+0x84>
 8008448:	6923      	ldr	r3, [r4, #16]
 800844a:	b36b      	cbz	r3, 80084a8 <__swbuf_r+0x84>
 800844c:	6923      	ldr	r3, [r4, #16]
 800844e:	6820      	ldr	r0, [r4, #0]
 8008450:	1ac0      	subs	r0, r0, r3
 8008452:	6963      	ldr	r3, [r4, #20]
 8008454:	b2f6      	uxtb	r6, r6
 8008456:	4283      	cmp	r3, r0
 8008458:	4637      	mov	r7, r6
 800845a:	dc04      	bgt.n	8008466 <__swbuf_r+0x42>
 800845c:	4621      	mov	r1, r4
 800845e:	4628      	mov	r0, r5
 8008460:	f000 f93c 	bl	80086dc <_fflush_r>
 8008464:	bb30      	cbnz	r0, 80084b4 <__swbuf_r+0x90>
 8008466:	68a3      	ldr	r3, [r4, #8]
 8008468:	3b01      	subs	r3, #1
 800846a:	60a3      	str	r3, [r4, #8]
 800846c:	6823      	ldr	r3, [r4, #0]
 800846e:	1c5a      	adds	r2, r3, #1
 8008470:	6022      	str	r2, [r4, #0]
 8008472:	701e      	strb	r6, [r3, #0]
 8008474:	6963      	ldr	r3, [r4, #20]
 8008476:	3001      	adds	r0, #1
 8008478:	4283      	cmp	r3, r0
 800847a:	d004      	beq.n	8008486 <__swbuf_r+0x62>
 800847c:	89a3      	ldrh	r3, [r4, #12]
 800847e:	07db      	lsls	r3, r3, #31
 8008480:	d506      	bpl.n	8008490 <__swbuf_r+0x6c>
 8008482:	2e0a      	cmp	r6, #10
 8008484:	d104      	bne.n	8008490 <__swbuf_r+0x6c>
 8008486:	4621      	mov	r1, r4
 8008488:	4628      	mov	r0, r5
 800848a:	f000 f927 	bl	80086dc <_fflush_r>
 800848e:	b988      	cbnz	r0, 80084b4 <__swbuf_r+0x90>
 8008490:	4638      	mov	r0, r7
 8008492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008494:	4b0a      	ldr	r3, [pc, #40]	; (80084c0 <__swbuf_r+0x9c>)
 8008496:	429c      	cmp	r4, r3
 8008498:	d101      	bne.n	800849e <__swbuf_r+0x7a>
 800849a:	68ac      	ldr	r4, [r5, #8]
 800849c:	e7cf      	b.n	800843e <__swbuf_r+0x1a>
 800849e:	4b09      	ldr	r3, [pc, #36]	; (80084c4 <__swbuf_r+0xa0>)
 80084a0:	429c      	cmp	r4, r3
 80084a2:	bf08      	it	eq
 80084a4:	68ec      	ldreq	r4, [r5, #12]
 80084a6:	e7ca      	b.n	800843e <__swbuf_r+0x1a>
 80084a8:	4621      	mov	r1, r4
 80084aa:	4628      	mov	r0, r5
 80084ac:	f000 f81a 	bl	80084e4 <__swsetup_r>
 80084b0:	2800      	cmp	r0, #0
 80084b2:	d0cb      	beq.n	800844c <__swbuf_r+0x28>
 80084b4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80084b8:	e7ea      	b.n	8008490 <__swbuf_r+0x6c>
 80084ba:	bf00      	nop
 80084bc:	08009024 	.word	0x08009024
 80084c0:	08009044 	.word	0x08009044
 80084c4:	08009004 	.word	0x08009004

080084c8 <__ascii_wctomb>:
 80084c8:	b149      	cbz	r1, 80084de <__ascii_wctomb+0x16>
 80084ca:	2aff      	cmp	r2, #255	; 0xff
 80084cc:	bf85      	ittet	hi
 80084ce:	238a      	movhi	r3, #138	; 0x8a
 80084d0:	6003      	strhi	r3, [r0, #0]
 80084d2:	700a      	strbls	r2, [r1, #0]
 80084d4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80084d8:	bf98      	it	ls
 80084da:	2001      	movls	r0, #1
 80084dc:	4770      	bx	lr
 80084de:	4608      	mov	r0, r1
 80084e0:	4770      	bx	lr
	...

080084e4 <__swsetup_r>:
 80084e4:	4b32      	ldr	r3, [pc, #200]	; (80085b0 <__swsetup_r+0xcc>)
 80084e6:	b570      	push	{r4, r5, r6, lr}
 80084e8:	681d      	ldr	r5, [r3, #0]
 80084ea:	4606      	mov	r6, r0
 80084ec:	460c      	mov	r4, r1
 80084ee:	b125      	cbz	r5, 80084fa <__swsetup_r+0x16>
 80084f0:	69ab      	ldr	r3, [r5, #24]
 80084f2:	b913      	cbnz	r3, 80084fa <__swsetup_r+0x16>
 80084f4:	4628      	mov	r0, r5
 80084f6:	f000 f985 	bl	8008804 <__sinit>
 80084fa:	4b2e      	ldr	r3, [pc, #184]	; (80085b4 <__swsetup_r+0xd0>)
 80084fc:	429c      	cmp	r4, r3
 80084fe:	d10f      	bne.n	8008520 <__swsetup_r+0x3c>
 8008500:	686c      	ldr	r4, [r5, #4]
 8008502:	89a3      	ldrh	r3, [r4, #12]
 8008504:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008508:	0719      	lsls	r1, r3, #28
 800850a:	d42c      	bmi.n	8008566 <__swsetup_r+0x82>
 800850c:	06dd      	lsls	r5, r3, #27
 800850e:	d411      	bmi.n	8008534 <__swsetup_r+0x50>
 8008510:	2309      	movs	r3, #9
 8008512:	6033      	str	r3, [r6, #0]
 8008514:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008518:	81a3      	strh	r3, [r4, #12]
 800851a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800851e:	e03e      	b.n	800859e <__swsetup_r+0xba>
 8008520:	4b25      	ldr	r3, [pc, #148]	; (80085b8 <__swsetup_r+0xd4>)
 8008522:	429c      	cmp	r4, r3
 8008524:	d101      	bne.n	800852a <__swsetup_r+0x46>
 8008526:	68ac      	ldr	r4, [r5, #8]
 8008528:	e7eb      	b.n	8008502 <__swsetup_r+0x1e>
 800852a:	4b24      	ldr	r3, [pc, #144]	; (80085bc <__swsetup_r+0xd8>)
 800852c:	429c      	cmp	r4, r3
 800852e:	bf08      	it	eq
 8008530:	68ec      	ldreq	r4, [r5, #12]
 8008532:	e7e6      	b.n	8008502 <__swsetup_r+0x1e>
 8008534:	0758      	lsls	r0, r3, #29
 8008536:	d512      	bpl.n	800855e <__swsetup_r+0x7a>
 8008538:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800853a:	b141      	cbz	r1, 800854e <__swsetup_r+0x6a>
 800853c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008540:	4299      	cmp	r1, r3
 8008542:	d002      	beq.n	800854a <__swsetup_r+0x66>
 8008544:	4630      	mov	r0, r6
 8008546:	f7ff fb6f 	bl	8007c28 <_free_r>
 800854a:	2300      	movs	r3, #0
 800854c:	6363      	str	r3, [r4, #52]	; 0x34
 800854e:	89a3      	ldrh	r3, [r4, #12]
 8008550:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008554:	81a3      	strh	r3, [r4, #12]
 8008556:	2300      	movs	r3, #0
 8008558:	6063      	str	r3, [r4, #4]
 800855a:	6923      	ldr	r3, [r4, #16]
 800855c:	6023      	str	r3, [r4, #0]
 800855e:	89a3      	ldrh	r3, [r4, #12]
 8008560:	f043 0308 	orr.w	r3, r3, #8
 8008564:	81a3      	strh	r3, [r4, #12]
 8008566:	6923      	ldr	r3, [r4, #16]
 8008568:	b94b      	cbnz	r3, 800857e <__swsetup_r+0x9a>
 800856a:	89a3      	ldrh	r3, [r4, #12]
 800856c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008570:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008574:	d003      	beq.n	800857e <__swsetup_r+0x9a>
 8008576:	4621      	mov	r1, r4
 8008578:	4630      	mov	r0, r6
 800857a:	f000 fa07 	bl	800898c <__smakebuf_r>
 800857e:	89a0      	ldrh	r0, [r4, #12]
 8008580:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008584:	f010 0301 	ands.w	r3, r0, #1
 8008588:	d00a      	beq.n	80085a0 <__swsetup_r+0xbc>
 800858a:	2300      	movs	r3, #0
 800858c:	60a3      	str	r3, [r4, #8]
 800858e:	6963      	ldr	r3, [r4, #20]
 8008590:	425b      	negs	r3, r3
 8008592:	61a3      	str	r3, [r4, #24]
 8008594:	6923      	ldr	r3, [r4, #16]
 8008596:	b943      	cbnz	r3, 80085aa <__swsetup_r+0xc6>
 8008598:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800859c:	d1ba      	bne.n	8008514 <__swsetup_r+0x30>
 800859e:	bd70      	pop	{r4, r5, r6, pc}
 80085a0:	0781      	lsls	r1, r0, #30
 80085a2:	bf58      	it	pl
 80085a4:	6963      	ldrpl	r3, [r4, #20]
 80085a6:	60a3      	str	r3, [r4, #8]
 80085a8:	e7f4      	b.n	8008594 <__swsetup_r+0xb0>
 80085aa:	2000      	movs	r0, #0
 80085ac:	e7f7      	b.n	800859e <__swsetup_r+0xba>
 80085ae:	bf00      	nop
 80085b0:	20000028 	.word	0x20000028
 80085b4:	08009024 	.word	0x08009024
 80085b8:	08009044 	.word	0x08009044
 80085bc:	08009004 	.word	0x08009004

080085c0 <abort>:
 80085c0:	b508      	push	{r3, lr}
 80085c2:	2006      	movs	r0, #6
 80085c4:	f000 fa52 	bl	8008a6c <raise>
 80085c8:	2001      	movs	r0, #1
 80085ca:	f7f9 fe91 	bl	80022f0 <_exit>
	...

080085d0 <__sflush_r>:
 80085d0:	898a      	ldrh	r2, [r1, #12]
 80085d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085d6:	4605      	mov	r5, r0
 80085d8:	0710      	lsls	r0, r2, #28
 80085da:	460c      	mov	r4, r1
 80085dc:	d458      	bmi.n	8008690 <__sflush_r+0xc0>
 80085de:	684b      	ldr	r3, [r1, #4]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	dc05      	bgt.n	80085f0 <__sflush_r+0x20>
 80085e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	dc02      	bgt.n	80085f0 <__sflush_r+0x20>
 80085ea:	2000      	movs	r0, #0
 80085ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80085f2:	2e00      	cmp	r6, #0
 80085f4:	d0f9      	beq.n	80085ea <__sflush_r+0x1a>
 80085f6:	2300      	movs	r3, #0
 80085f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80085fc:	682f      	ldr	r7, [r5, #0]
 80085fe:	602b      	str	r3, [r5, #0]
 8008600:	d032      	beq.n	8008668 <__sflush_r+0x98>
 8008602:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008604:	89a3      	ldrh	r3, [r4, #12]
 8008606:	075a      	lsls	r2, r3, #29
 8008608:	d505      	bpl.n	8008616 <__sflush_r+0x46>
 800860a:	6863      	ldr	r3, [r4, #4]
 800860c:	1ac0      	subs	r0, r0, r3
 800860e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008610:	b10b      	cbz	r3, 8008616 <__sflush_r+0x46>
 8008612:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008614:	1ac0      	subs	r0, r0, r3
 8008616:	2300      	movs	r3, #0
 8008618:	4602      	mov	r2, r0
 800861a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800861c:	6a21      	ldr	r1, [r4, #32]
 800861e:	4628      	mov	r0, r5
 8008620:	47b0      	blx	r6
 8008622:	1c43      	adds	r3, r0, #1
 8008624:	89a3      	ldrh	r3, [r4, #12]
 8008626:	d106      	bne.n	8008636 <__sflush_r+0x66>
 8008628:	6829      	ldr	r1, [r5, #0]
 800862a:	291d      	cmp	r1, #29
 800862c:	d82c      	bhi.n	8008688 <__sflush_r+0xb8>
 800862e:	4a2a      	ldr	r2, [pc, #168]	; (80086d8 <__sflush_r+0x108>)
 8008630:	40ca      	lsrs	r2, r1
 8008632:	07d6      	lsls	r6, r2, #31
 8008634:	d528      	bpl.n	8008688 <__sflush_r+0xb8>
 8008636:	2200      	movs	r2, #0
 8008638:	6062      	str	r2, [r4, #4]
 800863a:	04d9      	lsls	r1, r3, #19
 800863c:	6922      	ldr	r2, [r4, #16]
 800863e:	6022      	str	r2, [r4, #0]
 8008640:	d504      	bpl.n	800864c <__sflush_r+0x7c>
 8008642:	1c42      	adds	r2, r0, #1
 8008644:	d101      	bne.n	800864a <__sflush_r+0x7a>
 8008646:	682b      	ldr	r3, [r5, #0]
 8008648:	b903      	cbnz	r3, 800864c <__sflush_r+0x7c>
 800864a:	6560      	str	r0, [r4, #84]	; 0x54
 800864c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800864e:	602f      	str	r7, [r5, #0]
 8008650:	2900      	cmp	r1, #0
 8008652:	d0ca      	beq.n	80085ea <__sflush_r+0x1a>
 8008654:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008658:	4299      	cmp	r1, r3
 800865a:	d002      	beq.n	8008662 <__sflush_r+0x92>
 800865c:	4628      	mov	r0, r5
 800865e:	f7ff fae3 	bl	8007c28 <_free_r>
 8008662:	2000      	movs	r0, #0
 8008664:	6360      	str	r0, [r4, #52]	; 0x34
 8008666:	e7c1      	b.n	80085ec <__sflush_r+0x1c>
 8008668:	6a21      	ldr	r1, [r4, #32]
 800866a:	2301      	movs	r3, #1
 800866c:	4628      	mov	r0, r5
 800866e:	47b0      	blx	r6
 8008670:	1c41      	adds	r1, r0, #1
 8008672:	d1c7      	bne.n	8008604 <__sflush_r+0x34>
 8008674:	682b      	ldr	r3, [r5, #0]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d0c4      	beq.n	8008604 <__sflush_r+0x34>
 800867a:	2b1d      	cmp	r3, #29
 800867c:	d001      	beq.n	8008682 <__sflush_r+0xb2>
 800867e:	2b16      	cmp	r3, #22
 8008680:	d101      	bne.n	8008686 <__sflush_r+0xb6>
 8008682:	602f      	str	r7, [r5, #0]
 8008684:	e7b1      	b.n	80085ea <__sflush_r+0x1a>
 8008686:	89a3      	ldrh	r3, [r4, #12]
 8008688:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800868c:	81a3      	strh	r3, [r4, #12]
 800868e:	e7ad      	b.n	80085ec <__sflush_r+0x1c>
 8008690:	690f      	ldr	r7, [r1, #16]
 8008692:	2f00      	cmp	r7, #0
 8008694:	d0a9      	beq.n	80085ea <__sflush_r+0x1a>
 8008696:	0793      	lsls	r3, r2, #30
 8008698:	680e      	ldr	r6, [r1, #0]
 800869a:	bf08      	it	eq
 800869c:	694b      	ldreq	r3, [r1, #20]
 800869e:	600f      	str	r7, [r1, #0]
 80086a0:	bf18      	it	ne
 80086a2:	2300      	movne	r3, #0
 80086a4:	eba6 0807 	sub.w	r8, r6, r7
 80086a8:	608b      	str	r3, [r1, #8]
 80086aa:	f1b8 0f00 	cmp.w	r8, #0
 80086ae:	dd9c      	ble.n	80085ea <__sflush_r+0x1a>
 80086b0:	6a21      	ldr	r1, [r4, #32]
 80086b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80086b4:	4643      	mov	r3, r8
 80086b6:	463a      	mov	r2, r7
 80086b8:	4628      	mov	r0, r5
 80086ba:	47b0      	blx	r6
 80086bc:	2800      	cmp	r0, #0
 80086be:	dc06      	bgt.n	80086ce <__sflush_r+0xfe>
 80086c0:	89a3      	ldrh	r3, [r4, #12]
 80086c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086c6:	81a3      	strh	r3, [r4, #12]
 80086c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80086cc:	e78e      	b.n	80085ec <__sflush_r+0x1c>
 80086ce:	4407      	add	r7, r0
 80086d0:	eba8 0800 	sub.w	r8, r8, r0
 80086d4:	e7e9      	b.n	80086aa <__sflush_r+0xda>
 80086d6:	bf00      	nop
 80086d8:	20400001 	.word	0x20400001

080086dc <_fflush_r>:
 80086dc:	b538      	push	{r3, r4, r5, lr}
 80086de:	690b      	ldr	r3, [r1, #16]
 80086e0:	4605      	mov	r5, r0
 80086e2:	460c      	mov	r4, r1
 80086e4:	b913      	cbnz	r3, 80086ec <_fflush_r+0x10>
 80086e6:	2500      	movs	r5, #0
 80086e8:	4628      	mov	r0, r5
 80086ea:	bd38      	pop	{r3, r4, r5, pc}
 80086ec:	b118      	cbz	r0, 80086f6 <_fflush_r+0x1a>
 80086ee:	6983      	ldr	r3, [r0, #24]
 80086f0:	b90b      	cbnz	r3, 80086f6 <_fflush_r+0x1a>
 80086f2:	f000 f887 	bl	8008804 <__sinit>
 80086f6:	4b14      	ldr	r3, [pc, #80]	; (8008748 <_fflush_r+0x6c>)
 80086f8:	429c      	cmp	r4, r3
 80086fa:	d11b      	bne.n	8008734 <_fflush_r+0x58>
 80086fc:	686c      	ldr	r4, [r5, #4]
 80086fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d0ef      	beq.n	80086e6 <_fflush_r+0xa>
 8008706:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008708:	07d0      	lsls	r0, r2, #31
 800870a:	d404      	bmi.n	8008716 <_fflush_r+0x3a>
 800870c:	0599      	lsls	r1, r3, #22
 800870e:	d402      	bmi.n	8008716 <_fflush_r+0x3a>
 8008710:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008712:	f000 f915 	bl	8008940 <__retarget_lock_acquire_recursive>
 8008716:	4628      	mov	r0, r5
 8008718:	4621      	mov	r1, r4
 800871a:	f7ff ff59 	bl	80085d0 <__sflush_r>
 800871e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008720:	07da      	lsls	r2, r3, #31
 8008722:	4605      	mov	r5, r0
 8008724:	d4e0      	bmi.n	80086e8 <_fflush_r+0xc>
 8008726:	89a3      	ldrh	r3, [r4, #12]
 8008728:	059b      	lsls	r3, r3, #22
 800872a:	d4dd      	bmi.n	80086e8 <_fflush_r+0xc>
 800872c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800872e:	f000 f908 	bl	8008942 <__retarget_lock_release_recursive>
 8008732:	e7d9      	b.n	80086e8 <_fflush_r+0xc>
 8008734:	4b05      	ldr	r3, [pc, #20]	; (800874c <_fflush_r+0x70>)
 8008736:	429c      	cmp	r4, r3
 8008738:	d101      	bne.n	800873e <_fflush_r+0x62>
 800873a:	68ac      	ldr	r4, [r5, #8]
 800873c:	e7df      	b.n	80086fe <_fflush_r+0x22>
 800873e:	4b04      	ldr	r3, [pc, #16]	; (8008750 <_fflush_r+0x74>)
 8008740:	429c      	cmp	r4, r3
 8008742:	bf08      	it	eq
 8008744:	68ec      	ldreq	r4, [r5, #12]
 8008746:	e7da      	b.n	80086fe <_fflush_r+0x22>
 8008748:	08009024 	.word	0x08009024
 800874c:	08009044 	.word	0x08009044
 8008750:	08009004 	.word	0x08009004

08008754 <std>:
 8008754:	2300      	movs	r3, #0
 8008756:	b510      	push	{r4, lr}
 8008758:	4604      	mov	r4, r0
 800875a:	e9c0 3300 	strd	r3, r3, [r0]
 800875e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008762:	6083      	str	r3, [r0, #8]
 8008764:	8181      	strh	r1, [r0, #12]
 8008766:	6643      	str	r3, [r0, #100]	; 0x64
 8008768:	81c2      	strh	r2, [r0, #14]
 800876a:	6183      	str	r3, [r0, #24]
 800876c:	4619      	mov	r1, r3
 800876e:	2208      	movs	r2, #8
 8008770:	305c      	adds	r0, #92	; 0x5c
 8008772:	f7fd fb87 	bl	8005e84 <memset>
 8008776:	4b05      	ldr	r3, [pc, #20]	; (800878c <std+0x38>)
 8008778:	6263      	str	r3, [r4, #36]	; 0x24
 800877a:	4b05      	ldr	r3, [pc, #20]	; (8008790 <std+0x3c>)
 800877c:	62a3      	str	r3, [r4, #40]	; 0x28
 800877e:	4b05      	ldr	r3, [pc, #20]	; (8008794 <std+0x40>)
 8008780:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008782:	4b05      	ldr	r3, [pc, #20]	; (8008798 <std+0x44>)
 8008784:	6224      	str	r4, [r4, #32]
 8008786:	6323      	str	r3, [r4, #48]	; 0x30
 8008788:	bd10      	pop	{r4, pc}
 800878a:	bf00      	nop
 800878c:	08008aa5 	.word	0x08008aa5
 8008790:	08008ac7 	.word	0x08008ac7
 8008794:	08008aff 	.word	0x08008aff
 8008798:	08008b23 	.word	0x08008b23

0800879c <_cleanup_r>:
 800879c:	4901      	ldr	r1, [pc, #4]	; (80087a4 <_cleanup_r+0x8>)
 800879e:	f000 b8af 	b.w	8008900 <_fwalk_reent>
 80087a2:	bf00      	nop
 80087a4:	080086dd 	.word	0x080086dd

080087a8 <__sfmoreglue>:
 80087a8:	b570      	push	{r4, r5, r6, lr}
 80087aa:	1e4a      	subs	r2, r1, #1
 80087ac:	2568      	movs	r5, #104	; 0x68
 80087ae:	4355      	muls	r5, r2
 80087b0:	460e      	mov	r6, r1
 80087b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80087b6:	f7ff fa87 	bl	8007cc8 <_malloc_r>
 80087ba:	4604      	mov	r4, r0
 80087bc:	b140      	cbz	r0, 80087d0 <__sfmoreglue+0x28>
 80087be:	2100      	movs	r1, #0
 80087c0:	e9c0 1600 	strd	r1, r6, [r0]
 80087c4:	300c      	adds	r0, #12
 80087c6:	60a0      	str	r0, [r4, #8]
 80087c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80087cc:	f7fd fb5a 	bl	8005e84 <memset>
 80087d0:	4620      	mov	r0, r4
 80087d2:	bd70      	pop	{r4, r5, r6, pc}

080087d4 <__sfp_lock_acquire>:
 80087d4:	4801      	ldr	r0, [pc, #4]	; (80087dc <__sfp_lock_acquire+0x8>)
 80087d6:	f000 b8b3 	b.w	8008940 <__retarget_lock_acquire_recursive>
 80087da:	bf00      	nop
 80087dc:	2000044c 	.word	0x2000044c

080087e0 <__sfp_lock_release>:
 80087e0:	4801      	ldr	r0, [pc, #4]	; (80087e8 <__sfp_lock_release+0x8>)
 80087e2:	f000 b8ae 	b.w	8008942 <__retarget_lock_release_recursive>
 80087e6:	bf00      	nop
 80087e8:	2000044c 	.word	0x2000044c

080087ec <__sinit_lock_acquire>:
 80087ec:	4801      	ldr	r0, [pc, #4]	; (80087f4 <__sinit_lock_acquire+0x8>)
 80087ee:	f000 b8a7 	b.w	8008940 <__retarget_lock_acquire_recursive>
 80087f2:	bf00      	nop
 80087f4:	20000447 	.word	0x20000447

080087f8 <__sinit_lock_release>:
 80087f8:	4801      	ldr	r0, [pc, #4]	; (8008800 <__sinit_lock_release+0x8>)
 80087fa:	f000 b8a2 	b.w	8008942 <__retarget_lock_release_recursive>
 80087fe:	bf00      	nop
 8008800:	20000447 	.word	0x20000447

08008804 <__sinit>:
 8008804:	b510      	push	{r4, lr}
 8008806:	4604      	mov	r4, r0
 8008808:	f7ff fff0 	bl	80087ec <__sinit_lock_acquire>
 800880c:	69a3      	ldr	r3, [r4, #24]
 800880e:	b11b      	cbz	r3, 8008818 <__sinit+0x14>
 8008810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008814:	f7ff bff0 	b.w	80087f8 <__sinit_lock_release>
 8008818:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800881c:	6523      	str	r3, [r4, #80]	; 0x50
 800881e:	4b13      	ldr	r3, [pc, #76]	; (800886c <__sinit+0x68>)
 8008820:	4a13      	ldr	r2, [pc, #76]	; (8008870 <__sinit+0x6c>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	62a2      	str	r2, [r4, #40]	; 0x28
 8008826:	42a3      	cmp	r3, r4
 8008828:	bf04      	itt	eq
 800882a:	2301      	moveq	r3, #1
 800882c:	61a3      	streq	r3, [r4, #24]
 800882e:	4620      	mov	r0, r4
 8008830:	f000 f820 	bl	8008874 <__sfp>
 8008834:	6060      	str	r0, [r4, #4]
 8008836:	4620      	mov	r0, r4
 8008838:	f000 f81c 	bl	8008874 <__sfp>
 800883c:	60a0      	str	r0, [r4, #8]
 800883e:	4620      	mov	r0, r4
 8008840:	f000 f818 	bl	8008874 <__sfp>
 8008844:	2200      	movs	r2, #0
 8008846:	60e0      	str	r0, [r4, #12]
 8008848:	2104      	movs	r1, #4
 800884a:	6860      	ldr	r0, [r4, #4]
 800884c:	f7ff ff82 	bl	8008754 <std>
 8008850:	68a0      	ldr	r0, [r4, #8]
 8008852:	2201      	movs	r2, #1
 8008854:	2109      	movs	r1, #9
 8008856:	f7ff ff7d 	bl	8008754 <std>
 800885a:	68e0      	ldr	r0, [r4, #12]
 800885c:	2202      	movs	r2, #2
 800885e:	2112      	movs	r1, #18
 8008860:	f7ff ff78 	bl	8008754 <std>
 8008864:	2301      	movs	r3, #1
 8008866:	61a3      	str	r3, [r4, #24]
 8008868:	e7d2      	b.n	8008810 <__sinit+0xc>
 800886a:	bf00      	nop
 800886c:	08008c84 	.word	0x08008c84
 8008870:	0800879d 	.word	0x0800879d

08008874 <__sfp>:
 8008874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008876:	4607      	mov	r7, r0
 8008878:	f7ff ffac 	bl	80087d4 <__sfp_lock_acquire>
 800887c:	4b1e      	ldr	r3, [pc, #120]	; (80088f8 <__sfp+0x84>)
 800887e:	681e      	ldr	r6, [r3, #0]
 8008880:	69b3      	ldr	r3, [r6, #24]
 8008882:	b913      	cbnz	r3, 800888a <__sfp+0x16>
 8008884:	4630      	mov	r0, r6
 8008886:	f7ff ffbd 	bl	8008804 <__sinit>
 800888a:	3648      	adds	r6, #72	; 0x48
 800888c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008890:	3b01      	subs	r3, #1
 8008892:	d503      	bpl.n	800889c <__sfp+0x28>
 8008894:	6833      	ldr	r3, [r6, #0]
 8008896:	b30b      	cbz	r3, 80088dc <__sfp+0x68>
 8008898:	6836      	ldr	r6, [r6, #0]
 800889a:	e7f7      	b.n	800888c <__sfp+0x18>
 800889c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80088a0:	b9d5      	cbnz	r5, 80088d8 <__sfp+0x64>
 80088a2:	4b16      	ldr	r3, [pc, #88]	; (80088fc <__sfp+0x88>)
 80088a4:	60e3      	str	r3, [r4, #12]
 80088a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80088aa:	6665      	str	r5, [r4, #100]	; 0x64
 80088ac:	f000 f847 	bl	800893e <__retarget_lock_init_recursive>
 80088b0:	f7ff ff96 	bl	80087e0 <__sfp_lock_release>
 80088b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80088b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80088bc:	6025      	str	r5, [r4, #0]
 80088be:	61a5      	str	r5, [r4, #24]
 80088c0:	2208      	movs	r2, #8
 80088c2:	4629      	mov	r1, r5
 80088c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80088c8:	f7fd fadc 	bl	8005e84 <memset>
 80088cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80088d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80088d4:	4620      	mov	r0, r4
 80088d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088d8:	3468      	adds	r4, #104	; 0x68
 80088da:	e7d9      	b.n	8008890 <__sfp+0x1c>
 80088dc:	2104      	movs	r1, #4
 80088de:	4638      	mov	r0, r7
 80088e0:	f7ff ff62 	bl	80087a8 <__sfmoreglue>
 80088e4:	4604      	mov	r4, r0
 80088e6:	6030      	str	r0, [r6, #0]
 80088e8:	2800      	cmp	r0, #0
 80088ea:	d1d5      	bne.n	8008898 <__sfp+0x24>
 80088ec:	f7ff ff78 	bl	80087e0 <__sfp_lock_release>
 80088f0:	230c      	movs	r3, #12
 80088f2:	603b      	str	r3, [r7, #0]
 80088f4:	e7ee      	b.n	80088d4 <__sfp+0x60>
 80088f6:	bf00      	nop
 80088f8:	08008c84 	.word	0x08008c84
 80088fc:	ffff0001 	.word	0xffff0001

08008900 <_fwalk_reent>:
 8008900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008904:	4606      	mov	r6, r0
 8008906:	4688      	mov	r8, r1
 8008908:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800890c:	2700      	movs	r7, #0
 800890e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008912:	f1b9 0901 	subs.w	r9, r9, #1
 8008916:	d505      	bpl.n	8008924 <_fwalk_reent+0x24>
 8008918:	6824      	ldr	r4, [r4, #0]
 800891a:	2c00      	cmp	r4, #0
 800891c:	d1f7      	bne.n	800890e <_fwalk_reent+0xe>
 800891e:	4638      	mov	r0, r7
 8008920:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008924:	89ab      	ldrh	r3, [r5, #12]
 8008926:	2b01      	cmp	r3, #1
 8008928:	d907      	bls.n	800893a <_fwalk_reent+0x3a>
 800892a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800892e:	3301      	adds	r3, #1
 8008930:	d003      	beq.n	800893a <_fwalk_reent+0x3a>
 8008932:	4629      	mov	r1, r5
 8008934:	4630      	mov	r0, r6
 8008936:	47c0      	blx	r8
 8008938:	4307      	orrs	r7, r0
 800893a:	3568      	adds	r5, #104	; 0x68
 800893c:	e7e9      	b.n	8008912 <_fwalk_reent+0x12>

0800893e <__retarget_lock_init_recursive>:
 800893e:	4770      	bx	lr

08008940 <__retarget_lock_acquire_recursive>:
 8008940:	4770      	bx	lr

08008942 <__retarget_lock_release_recursive>:
 8008942:	4770      	bx	lr

08008944 <__swhatbuf_r>:
 8008944:	b570      	push	{r4, r5, r6, lr}
 8008946:	460e      	mov	r6, r1
 8008948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800894c:	2900      	cmp	r1, #0
 800894e:	b096      	sub	sp, #88	; 0x58
 8008950:	4614      	mov	r4, r2
 8008952:	461d      	mov	r5, r3
 8008954:	da07      	bge.n	8008966 <__swhatbuf_r+0x22>
 8008956:	2300      	movs	r3, #0
 8008958:	602b      	str	r3, [r5, #0]
 800895a:	89b3      	ldrh	r3, [r6, #12]
 800895c:	061a      	lsls	r2, r3, #24
 800895e:	d410      	bmi.n	8008982 <__swhatbuf_r+0x3e>
 8008960:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008964:	e00e      	b.n	8008984 <__swhatbuf_r+0x40>
 8008966:	466a      	mov	r2, sp
 8008968:	f000 f902 	bl	8008b70 <_fstat_r>
 800896c:	2800      	cmp	r0, #0
 800896e:	dbf2      	blt.n	8008956 <__swhatbuf_r+0x12>
 8008970:	9a01      	ldr	r2, [sp, #4]
 8008972:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008976:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800897a:	425a      	negs	r2, r3
 800897c:	415a      	adcs	r2, r3
 800897e:	602a      	str	r2, [r5, #0]
 8008980:	e7ee      	b.n	8008960 <__swhatbuf_r+0x1c>
 8008982:	2340      	movs	r3, #64	; 0x40
 8008984:	2000      	movs	r0, #0
 8008986:	6023      	str	r3, [r4, #0]
 8008988:	b016      	add	sp, #88	; 0x58
 800898a:	bd70      	pop	{r4, r5, r6, pc}

0800898c <__smakebuf_r>:
 800898c:	898b      	ldrh	r3, [r1, #12]
 800898e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008990:	079d      	lsls	r5, r3, #30
 8008992:	4606      	mov	r6, r0
 8008994:	460c      	mov	r4, r1
 8008996:	d507      	bpl.n	80089a8 <__smakebuf_r+0x1c>
 8008998:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800899c:	6023      	str	r3, [r4, #0]
 800899e:	6123      	str	r3, [r4, #16]
 80089a0:	2301      	movs	r3, #1
 80089a2:	6163      	str	r3, [r4, #20]
 80089a4:	b002      	add	sp, #8
 80089a6:	bd70      	pop	{r4, r5, r6, pc}
 80089a8:	ab01      	add	r3, sp, #4
 80089aa:	466a      	mov	r2, sp
 80089ac:	f7ff ffca 	bl	8008944 <__swhatbuf_r>
 80089b0:	9900      	ldr	r1, [sp, #0]
 80089b2:	4605      	mov	r5, r0
 80089b4:	4630      	mov	r0, r6
 80089b6:	f7ff f987 	bl	8007cc8 <_malloc_r>
 80089ba:	b948      	cbnz	r0, 80089d0 <__smakebuf_r+0x44>
 80089bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089c0:	059a      	lsls	r2, r3, #22
 80089c2:	d4ef      	bmi.n	80089a4 <__smakebuf_r+0x18>
 80089c4:	f023 0303 	bic.w	r3, r3, #3
 80089c8:	f043 0302 	orr.w	r3, r3, #2
 80089cc:	81a3      	strh	r3, [r4, #12]
 80089ce:	e7e3      	b.n	8008998 <__smakebuf_r+0xc>
 80089d0:	4b0d      	ldr	r3, [pc, #52]	; (8008a08 <__smakebuf_r+0x7c>)
 80089d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80089d4:	89a3      	ldrh	r3, [r4, #12]
 80089d6:	6020      	str	r0, [r4, #0]
 80089d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089dc:	81a3      	strh	r3, [r4, #12]
 80089de:	9b00      	ldr	r3, [sp, #0]
 80089e0:	6163      	str	r3, [r4, #20]
 80089e2:	9b01      	ldr	r3, [sp, #4]
 80089e4:	6120      	str	r0, [r4, #16]
 80089e6:	b15b      	cbz	r3, 8008a00 <__smakebuf_r+0x74>
 80089e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089ec:	4630      	mov	r0, r6
 80089ee:	f000 f8d1 	bl	8008b94 <_isatty_r>
 80089f2:	b128      	cbz	r0, 8008a00 <__smakebuf_r+0x74>
 80089f4:	89a3      	ldrh	r3, [r4, #12]
 80089f6:	f023 0303 	bic.w	r3, r3, #3
 80089fa:	f043 0301 	orr.w	r3, r3, #1
 80089fe:	81a3      	strh	r3, [r4, #12]
 8008a00:	89a0      	ldrh	r0, [r4, #12]
 8008a02:	4305      	orrs	r5, r0
 8008a04:	81a5      	strh	r5, [r4, #12]
 8008a06:	e7cd      	b.n	80089a4 <__smakebuf_r+0x18>
 8008a08:	0800879d 	.word	0x0800879d

08008a0c <_malloc_usable_size_r>:
 8008a0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a10:	1f18      	subs	r0, r3, #4
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	bfbc      	itt	lt
 8008a16:	580b      	ldrlt	r3, [r1, r0]
 8008a18:	18c0      	addlt	r0, r0, r3
 8008a1a:	4770      	bx	lr

08008a1c <_raise_r>:
 8008a1c:	291f      	cmp	r1, #31
 8008a1e:	b538      	push	{r3, r4, r5, lr}
 8008a20:	4604      	mov	r4, r0
 8008a22:	460d      	mov	r5, r1
 8008a24:	d904      	bls.n	8008a30 <_raise_r+0x14>
 8008a26:	2316      	movs	r3, #22
 8008a28:	6003      	str	r3, [r0, #0]
 8008a2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a2e:	bd38      	pop	{r3, r4, r5, pc}
 8008a30:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008a32:	b112      	cbz	r2, 8008a3a <_raise_r+0x1e>
 8008a34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008a38:	b94b      	cbnz	r3, 8008a4e <_raise_r+0x32>
 8008a3a:	4620      	mov	r0, r4
 8008a3c:	f000 f830 	bl	8008aa0 <_getpid_r>
 8008a40:	462a      	mov	r2, r5
 8008a42:	4601      	mov	r1, r0
 8008a44:	4620      	mov	r0, r4
 8008a46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a4a:	f000 b817 	b.w	8008a7c <_kill_r>
 8008a4e:	2b01      	cmp	r3, #1
 8008a50:	d00a      	beq.n	8008a68 <_raise_r+0x4c>
 8008a52:	1c59      	adds	r1, r3, #1
 8008a54:	d103      	bne.n	8008a5e <_raise_r+0x42>
 8008a56:	2316      	movs	r3, #22
 8008a58:	6003      	str	r3, [r0, #0]
 8008a5a:	2001      	movs	r0, #1
 8008a5c:	e7e7      	b.n	8008a2e <_raise_r+0x12>
 8008a5e:	2400      	movs	r4, #0
 8008a60:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008a64:	4628      	mov	r0, r5
 8008a66:	4798      	blx	r3
 8008a68:	2000      	movs	r0, #0
 8008a6a:	e7e0      	b.n	8008a2e <_raise_r+0x12>

08008a6c <raise>:
 8008a6c:	4b02      	ldr	r3, [pc, #8]	; (8008a78 <raise+0xc>)
 8008a6e:	4601      	mov	r1, r0
 8008a70:	6818      	ldr	r0, [r3, #0]
 8008a72:	f7ff bfd3 	b.w	8008a1c <_raise_r>
 8008a76:	bf00      	nop
 8008a78:	20000028 	.word	0x20000028

08008a7c <_kill_r>:
 8008a7c:	b538      	push	{r3, r4, r5, lr}
 8008a7e:	4d07      	ldr	r5, [pc, #28]	; (8008a9c <_kill_r+0x20>)
 8008a80:	2300      	movs	r3, #0
 8008a82:	4604      	mov	r4, r0
 8008a84:	4608      	mov	r0, r1
 8008a86:	4611      	mov	r1, r2
 8008a88:	602b      	str	r3, [r5, #0]
 8008a8a:	f7f9 fc21 	bl	80022d0 <_kill>
 8008a8e:	1c43      	adds	r3, r0, #1
 8008a90:	d102      	bne.n	8008a98 <_kill_r+0x1c>
 8008a92:	682b      	ldr	r3, [r5, #0]
 8008a94:	b103      	cbz	r3, 8008a98 <_kill_r+0x1c>
 8008a96:	6023      	str	r3, [r4, #0]
 8008a98:	bd38      	pop	{r3, r4, r5, pc}
 8008a9a:	bf00      	nop
 8008a9c:	20000440 	.word	0x20000440

08008aa0 <_getpid_r>:
 8008aa0:	f7f9 bc0e 	b.w	80022c0 <_getpid>

08008aa4 <__sread>:
 8008aa4:	b510      	push	{r4, lr}
 8008aa6:	460c      	mov	r4, r1
 8008aa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008aac:	f000 f894 	bl	8008bd8 <_read_r>
 8008ab0:	2800      	cmp	r0, #0
 8008ab2:	bfab      	itete	ge
 8008ab4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008ab6:	89a3      	ldrhlt	r3, [r4, #12]
 8008ab8:	181b      	addge	r3, r3, r0
 8008aba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008abe:	bfac      	ite	ge
 8008ac0:	6563      	strge	r3, [r4, #84]	; 0x54
 8008ac2:	81a3      	strhlt	r3, [r4, #12]
 8008ac4:	bd10      	pop	{r4, pc}

08008ac6 <__swrite>:
 8008ac6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008aca:	461f      	mov	r7, r3
 8008acc:	898b      	ldrh	r3, [r1, #12]
 8008ace:	05db      	lsls	r3, r3, #23
 8008ad0:	4605      	mov	r5, r0
 8008ad2:	460c      	mov	r4, r1
 8008ad4:	4616      	mov	r6, r2
 8008ad6:	d505      	bpl.n	8008ae4 <__swrite+0x1e>
 8008ad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008adc:	2302      	movs	r3, #2
 8008ade:	2200      	movs	r2, #0
 8008ae0:	f000 f868 	bl	8008bb4 <_lseek_r>
 8008ae4:	89a3      	ldrh	r3, [r4, #12]
 8008ae6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008aea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008aee:	81a3      	strh	r3, [r4, #12]
 8008af0:	4632      	mov	r2, r6
 8008af2:	463b      	mov	r3, r7
 8008af4:	4628      	mov	r0, r5
 8008af6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008afa:	f000 b817 	b.w	8008b2c <_write_r>

08008afe <__sseek>:
 8008afe:	b510      	push	{r4, lr}
 8008b00:	460c      	mov	r4, r1
 8008b02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b06:	f000 f855 	bl	8008bb4 <_lseek_r>
 8008b0a:	1c43      	adds	r3, r0, #1
 8008b0c:	89a3      	ldrh	r3, [r4, #12]
 8008b0e:	bf15      	itete	ne
 8008b10:	6560      	strne	r0, [r4, #84]	; 0x54
 8008b12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008b16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008b1a:	81a3      	strheq	r3, [r4, #12]
 8008b1c:	bf18      	it	ne
 8008b1e:	81a3      	strhne	r3, [r4, #12]
 8008b20:	bd10      	pop	{r4, pc}

08008b22 <__sclose>:
 8008b22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b26:	f000 b813 	b.w	8008b50 <_close_r>
	...

08008b2c <_write_r>:
 8008b2c:	b538      	push	{r3, r4, r5, lr}
 8008b2e:	4d07      	ldr	r5, [pc, #28]	; (8008b4c <_write_r+0x20>)
 8008b30:	4604      	mov	r4, r0
 8008b32:	4608      	mov	r0, r1
 8008b34:	4611      	mov	r1, r2
 8008b36:	2200      	movs	r2, #0
 8008b38:	602a      	str	r2, [r5, #0]
 8008b3a:	461a      	mov	r2, r3
 8008b3c:	f7f9 fbff 	bl	800233e <_write>
 8008b40:	1c43      	adds	r3, r0, #1
 8008b42:	d102      	bne.n	8008b4a <_write_r+0x1e>
 8008b44:	682b      	ldr	r3, [r5, #0]
 8008b46:	b103      	cbz	r3, 8008b4a <_write_r+0x1e>
 8008b48:	6023      	str	r3, [r4, #0]
 8008b4a:	bd38      	pop	{r3, r4, r5, pc}
 8008b4c:	20000440 	.word	0x20000440

08008b50 <_close_r>:
 8008b50:	b538      	push	{r3, r4, r5, lr}
 8008b52:	4d06      	ldr	r5, [pc, #24]	; (8008b6c <_close_r+0x1c>)
 8008b54:	2300      	movs	r3, #0
 8008b56:	4604      	mov	r4, r0
 8008b58:	4608      	mov	r0, r1
 8008b5a:	602b      	str	r3, [r5, #0]
 8008b5c:	f7f9 fc0b 	bl	8002376 <_close>
 8008b60:	1c43      	adds	r3, r0, #1
 8008b62:	d102      	bne.n	8008b6a <_close_r+0x1a>
 8008b64:	682b      	ldr	r3, [r5, #0]
 8008b66:	b103      	cbz	r3, 8008b6a <_close_r+0x1a>
 8008b68:	6023      	str	r3, [r4, #0]
 8008b6a:	bd38      	pop	{r3, r4, r5, pc}
 8008b6c:	20000440 	.word	0x20000440

08008b70 <_fstat_r>:
 8008b70:	b538      	push	{r3, r4, r5, lr}
 8008b72:	4d07      	ldr	r5, [pc, #28]	; (8008b90 <_fstat_r+0x20>)
 8008b74:	2300      	movs	r3, #0
 8008b76:	4604      	mov	r4, r0
 8008b78:	4608      	mov	r0, r1
 8008b7a:	4611      	mov	r1, r2
 8008b7c:	602b      	str	r3, [r5, #0]
 8008b7e:	f7f9 fc06 	bl	800238e <_fstat>
 8008b82:	1c43      	adds	r3, r0, #1
 8008b84:	d102      	bne.n	8008b8c <_fstat_r+0x1c>
 8008b86:	682b      	ldr	r3, [r5, #0]
 8008b88:	b103      	cbz	r3, 8008b8c <_fstat_r+0x1c>
 8008b8a:	6023      	str	r3, [r4, #0]
 8008b8c:	bd38      	pop	{r3, r4, r5, pc}
 8008b8e:	bf00      	nop
 8008b90:	20000440 	.word	0x20000440

08008b94 <_isatty_r>:
 8008b94:	b538      	push	{r3, r4, r5, lr}
 8008b96:	4d06      	ldr	r5, [pc, #24]	; (8008bb0 <_isatty_r+0x1c>)
 8008b98:	2300      	movs	r3, #0
 8008b9a:	4604      	mov	r4, r0
 8008b9c:	4608      	mov	r0, r1
 8008b9e:	602b      	str	r3, [r5, #0]
 8008ba0:	f7f9 fc05 	bl	80023ae <_isatty>
 8008ba4:	1c43      	adds	r3, r0, #1
 8008ba6:	d102      	bne.n	8008bae <_isatty_r+0x1a>
 8008ba8:	682b      	ldr	r3, [r5, #0]
 8008baa:	b103      	cbz	r3, 8008bae <_isatty_r+0x1a>
 8008bac:	6023      	str	r3, [r4, #0]
 8008bae:	bd38      	pop	{r3, r4, r5, pc}
 8008bb0:	20000440 	.word	0x20000440

08008bb4 <_lseek_r>:
 8008bb4:	b538      	push	{r3, r4, r5, lr}
 8008bb6:	4d07      	ldr	r5, [pc, #28]	; (8008bd4 <_lseek_r+0x20>)
 8008bb8:	4604      	mov	r4, r0
 8008bba:	4608      	mov	r0, r1
 8008bbc:	4611      	mov	r1, r2
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	602a      	str	r2, [r5, #0]
 8008bc2:	461a      	mov	r2, r3
 8008bc4:	f7f9 fbfe 	bl	80023c4 <_lseek>
 8008bc8:	1c43      	adds	r3, r0, #1
 8008bca:	d102      	bne.n	8008bd2 <_lseek_r+0x1e>
 8008bcc:	682b      	ldr	r3, [r5, #0]
 8008bce:	b103      	cbz	r3, 8008bd2 <_lseek_r+0x1e>
 8008bd0:	6023      	str	r3, [r4, #0]
 8008bd2:	bd38      	pop	{r3, r4, r5, pc}
 8008bd4:	20000440 	.word	0x20000440

08008bd8 <_read_r>:
 8008bd8:	b538      	push	{r3, r4, r5, lr}
 8008bda:	4d07      	ldr	r5, [pc, #28]	; (8008bf8 <_read_r+0x20>)
 8008bdc:	4604      	mov	r4, r0
 8008bde:	4608      	mov	r0, r1
 8008be0:	4611      	mov	r1, r2
 8008be2:	2200      	movs	r2, #0
 8008be4:	602a      	str	r2, [r5, #0]
 8008be6:	461a      	mov	r2, r3
 8008be8:	f7f9 fb8c 	bl	8002304 <_read>
 8008bec:	1c43      	adds	r3, r0, #1
 8008bee:	d102      	bne.n	8008bf6 <_read_r+0x1e>
 8008bf0:	682b      	ldr	r3, [r5, #0]
 8008bf2:	b103      	cbz	r3, 8008bf6 <_read_r+0x1e>
 8008bf4:	6023      	str	r3, [r4, #0]
 8008bf6:	bd38      	pop	{r3, r4, r5, pc}
 8008bf8:	20000440 	.word	0x20000440

08008bfc <_init>:
 8008bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bfe:	bf00      	nop
 8008c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c02:	bc08      	pop	{r3}
 8008c04:	469e      	mov	lr, r3
 8008c06:	4770      	bx	lr

08008c08 <_fini>:
 8008c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c0a:	bf00      	nop
 8008c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c0e:	bc08      	pop	{r3}
 8008c10:	469e      	mov	lr, r3
 8008c12:	4770      	bx	lr
