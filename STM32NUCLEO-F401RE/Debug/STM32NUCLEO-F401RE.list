
STM32NUCLEO-F401RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068cc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08006a70  08006a70  00016a70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e9c  08006e9c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08006e9c  08006e9c  00016e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ea4  08006ea4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ea4  08006ea4  00016ea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ea8  08006ea8  00016ea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08006eac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a8  200001e0  0800708c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000388  0800708c  00020388  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f58e  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fe9  00000000  00000000  0002f79e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da8  00000000  00000000  00031788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ce8  00000000  00000000  00032530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000175e3  00000000  00000000  00033218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f2d7  00000000  00000000  0004a7fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f328  00000000  00000000  00059ad2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e8dfa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b04  00000000  00000000  000e8e50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006a54 	.word	0x08006a54

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	08006a54 	.word	0x08006a54

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bcc:	f000 b96e 	b.w	8000eac <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468c      	mov	ip, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f040 8083 	bne.w	8000cfe <__udivmoddi4+0x116>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d947      	bls.n	8000c8e <__udivmoddi4+0xa6>
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	b142      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	f1c2 0020 	rsb	r0, r2, #32
 8000c08:	fa24 f000 	lsr.w	r0, r4, r0
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	4097      	lsls	r7, r2
 8000c10:	ea40 0c01 	orr.w	ip, r0, r1
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c20:	fa1f fe87 	uxth.w	lr, r7
 8000c24:	fb08 c116 	mls	r1, r8, r6, ip
 8000c28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c3a:	f080 8119 	bcs.w	8000e70 <__udivmoddi4+0x288>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8116 	bls.w	8000e70 <__udivmoddi4+0x288>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	443b      	add	r3, r7
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c50:	fb08 3310 	mls	r3, r8, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	193c      	adds	r4, r7, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c66:	f080 8105 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	f240 8102 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c70:	3802      	subs	r0, #2
 8000c72:	443c      	add	r4, r7
 8000c74:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c78:	eba4 040e 	sub.w	r4, r4, lr
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	b11d      	cbz	r5, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c5 4300 	strd	r4, r3, [r5]
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	b902      	cbnz	r2, 8000c92 <__udivmoddi4+0xaa>
 8000c90:	deff      	udf	#255	; 0xff
 8000c92:	fab2 f282 	clz	r2, r2
 8000c96:	2a00      	cmp	r2, #0
 8000c98:	d150      	bne.n	8000d3c <__udivmoddi4+0x154>
 8000c9a:	1bcb      	subs	r3, r1, r7
 8000c9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca0:	fa1f f887 	uxth.w	r8, r7
 8000ca4:	2601      	movs	r6, #1
 8000ca6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000caa:	0c21      	lsrs	r1, r4, #16
 8000cac:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000cbc:	1879      	adds	r1, r7, r1
 8000cbe:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0xe2>
 8000cc4:	428b      	cmp	r3, r1
 8000cc6:	f200 80e9 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000cca:	4684      	mov	ip, r0
 8000ccc:	1ac9      	subs	r1, r1, r3
 8000cce:	b2a3      	uxth	r3, r4
 8000cd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cd8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cdc:	fb08 f800 	mul.w	r8, r8, r0
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x10c>
 8000ce4:	193c      	adds	r4, r7, r4
 8000ce6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x10a>
 8000cec:	45a0      	cmp	r8, r4
 8000cee:	f200 80d9 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	eba4 0408 	sub.w	r4, r4, r8
 8000cf8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cfc:	e7bf      	b.n	8000c7e <__udivmoddi4+0x96>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x12e>
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	f000 80b1 	beq.w	8000e6a <__udivmoddi4+0x282>
 8000d08:	2600      	movs	r6, #0
 8000d0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0e:	4630      	mov	r0, r6
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f683 	clz	r6, r3
 8000d1a:	2e00      	cmp	r6, #0
 8000d1c:	d14a      	bne.n	8000db4 <__udivmoddi4+0x1cc>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0x140>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80b8 	bhi.w	8000e98 <__udivmoddi4+0x2b0>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	468c      	mov	ip, r1
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	d0a8      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000d36:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d3a:	e7a5      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000d3c:	f1c2 0320 	rsb	r3, r2, #32
 8000d40:	fa20 f603 	lsr.w	r6, r0, r3
 8000d44:	4097      	lsls	r7, r2
 8000d46:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4e:	40d9      	lsrs	r1, r3
 8000d50:	4330      	orrs	r0, r6
 8000d52:	0c03      	lsrs	r3, r0, #16
 8000d54:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d58:	fa1f f887 	uxth.w	r8, r7
 8000d5c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb06 f108 	mul.w	r1, r6, r8
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x19c>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d76:	f080 808d 	bcs.w	8000e94 <__udivmoddi4+0x2ac>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 808a 	bls.w	8000e94 <__udivmoddi4+0x2ac>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b281      	uxth	r1, r0
 8000d88:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb00 f308 	mul.w	r3, r0, r8
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x1c4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000da2:	d273      	bcs.n	8000e8c <__udivmoddi4+0x2a4>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	d971      	bls.n	8000e8c <__udivmoddi4+0x2a4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	4439      	add	r1, r7
 8000dac:	1acb      	subs	r3, r1, r3
 8000dae:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000db2:	e778      	b.n	8000ca6 <__udivmoddi4+0xbe>
 8000db4:	f1c6 0c20 	rsb	ip, r6, #32
 8000db8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dbc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dc0:	431c      	orrs	r4, r3
 8000dc2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dc6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dca:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dce:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	0c3b      	lsrs	r3, r7, #16
 8000dd6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dda:	fa1f f884 	uxth.w	r8, r4
 8000dde:	fb0e 1119 	mls	r1, lr, r9, r1
 8000de2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000de6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dea:	458a      	cmp	sl, r1
 8000dec:	fa02 f206 	lsl.w	r2, r2, r6
 8000df0:	fa00 f306 	lsl.w	r3, r0, r6
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x220>
 8000df6:	1861      	adds	r1, r4, r1
 8000df8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000dfc:	d248      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000dfe:	458a      	cmp	sl, r1
 8000e00:	d946      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4421      	add	r1, r4
 8000e08:	eba1 010a 	sub.w	r1, r1, sl
 8000e0c:	b2bf      	uxth	r7, r7
 8000e0e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e12:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e16:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e1a:	fb00 f808 	mul.w	r8, r0, r8
 8000e1e:	45b8      	cmp	r8, r7
 8000e20:	d907      	bls.n	8000e32 <__udivmoddi4+0x24a>
 8000e22:	19e7      	adds	r7, r4, r7
 8000e24:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e28:	d22e      	bcs.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2a:	45b8      	cmp	r8, r7
 8000e2c:	d92c      	bls.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4427      	add	r7, r4
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	eba7 0708 	sub.w	r7, r7, r8
 8000e3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3e:	454f      	cmp	r7, r9
 8000e40:	46c6      	mov	lr, r8
 8000e42:	4649      	mov	r1, r9
 8000e44:	d31a      	bcc.n	8000e7c <__udivmoddi4+0x294>
 8000e46:	d017      	beq.n	8000e78 <__udivmoddi4+0x290>
 8000e48:	b15d      	cbz	r5, 8000e62 <__udivmoddi4+0x27a>
 8000e4a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e4e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e52:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e56:	40f2      	lsrs	r2, r6
 8000e58:	ea4c 0202 	orr.w	r2, ip, r2
 8000e5c:	40f7      	lsrs	r7, r6
 8000e5e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e62:	2600      	movs	r6, #0
 8000e64:	4631      	mov	r1, r6
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e70b      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e9      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6fd      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e78:	4543      	cmp	r3, r8
 8000e7a:	d2e5      	bcs.n	8000e48 <__udivmoddi4+0x260>
 8000e7c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e80:	eb69 0104 	sbc.w	r1, r9, r4
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7df      	b.n	8000e48 <__udivmoddi4+0x260>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e7d2      	b.n	8000e32 <__udivmoddi4+0x24a>
 8000e8c:	4660      	mov	r0, ip
 8000e8e:	e78d      	b.n	8000dac <__udivmoddi4+0x1c4>
 8000e90:	4681      	mov	r9, r0
 8000e92:	e7b9      	b.n	8000e08 <__udivmoddi4+0x220>
 8000e94:	4666      	mov	r6, ip
 8000e96:	e775      	b.n	8000d84 <__udivmoddi4+0x19c>
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e74a      	b.n	8000d32 <__udivmoddi4+0x14a>
 8000e9c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea0:	4439      	add	r1, r7
 8000ea2:	e713      	b.n	8000ccc <__udivmoddi4+0xe4>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	443c      	add	r4, r7
 8000ea8:	e724      	b.n	8000cf4 <__udivmoddi4+0x10c>
 8000eaa:	bf00      	nop

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <lcd16x2_i2c_sendCommand>:
#define LCD_I2C_SLAVE_ADDRESS_0  0x4E
#define LCD_I2C_SLAVE_ADDRESS_1  0x7E

/* Private functions */
static void lcd16x2_i2c_sendCommand(uint8_t command)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af02      	add	r7, sp, #8
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	71fb      	strb	r3, [r7, #7]
  const uint8_t command_0_3 = (0xF0 & (command<<4));
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	011b      	lsls	r3, r3, #4
 8000ebe:	73fb      	strb	r3, [r7, #15]
  const uint8_t command_4_7 = (0xF0 & command);
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	f023 030f 	bic.w	r3, r3, #15
 8000ec6:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 8000ec8:	7bbb      	ldrb	r3, [r7, #14]
 8000eca:	f043 030c 	orr.w	r3, r3, #12
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	723b      	strb	r3, [r7, #8]
 8000ed2:	7bbb      	ldrb	r3, [r7, #14]
 8000ed4:	f043 0308 	orr.w	r3, r3, #8
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	727b      	strb	r3, [r7, #9]
 8000edc:	7bfb      	ldrb	r3, [r7, #15]
 8000ede:	f043 030c 	orr.w	r3, r3, #12
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	72bb      	strb	r3, [r7, #10]
 8000ee6:	7bfb      	ldrb	r3, [r7, #15]
 8000ee8:	f043 0308 	orr.w	r3, r3, #8
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	72fb      	strb	r3, [r7, #11]
      command_4_7 | LCD_EN | LCD_BK_LIGHT,
      command_4_7 | LCD_BK_LIGHT,
      command_0_3 | LCD_EN | LCD_BK_LIGHT,
      command_0_3 | LCD_BK_LIGHT,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 8000ef0:	4b07      	ldr	r3, [pc, #28]	; (8000f10 <lcd16x2_i2c_sendCommand+0x60>)
 8000ef2:	6818      	ldr	r0, [r3, #0]
 8000ef4:	4b07      	ldr	r3, [pc, #28]	; (8000f14 <lcd16x2_i2c_sendCommand+0x64>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	b299      	uxth	r1, r3
 8000efa:	f107 0208 	add.w	r2, r7, #8
 8000efe:	23c8      	movs	r3, #200	; 0xc8
 8000f00:	9300      	str	r3, [sp, #0]
 8000f02:	2304      	movs	r3, #4
 8000f04:	f001 fb8c 	bl	8002620 <HAL_I2C_Master_Transmit>
}
 8000f08:	bf00      	nop
 8000f0a:	3710      	adds	r7, #16
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	200001fc 	.word	0x200001fc
 8000f14:	20000200 	.word	0x20000200

08000f18 <lcd16x2_i2c_sendData>:

static void lcd16x2_i2c_sendData(uint8_t data)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af02      	add	r7, sp, #8
 8000f1e:	4603      	mov	r3, r0
 8000f20:	71fb      	strb	r3, [r7, #7]
  const uint8_t data_0_3 = (0xF0 & (data<<4));
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	011b      	lsls	r3, r3, #4
 8000f26:	73fb      	strb	r3, [r7, #15]
  const uint8_t data_4_7 = (0xF0 & data);
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	f023 030f 	bic.w	r3, r3, #15
 8000f2e:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 8000f30:	7bbb      	ldrb	r3, [r7, #14]
 8000f32:	f043 030d 	orr.w	r3, r3, #13
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	723b      	strb	r3, [r7, #8]
 8000f3a:	7bbb      	ldrb	r3, [r7, #14]
 8000f3c:	f043 0309 	orr.w	r3, r3, #9
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	727b      	strb	r3, [r7, #9]
 8000f44:	7bfb      	ldrb	r3, [r7, #15]
 8000f46:	f043 030d 	orr.w	r3, r3, #13
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	72bb      	strb	r3, [r7, #10]
 8000f4e:	7bfb      	ldrb	r3, [r7, #15]
 8000f50:	f043 0309 	orr.w	r3, r3, #9
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	72fb      	strb	r3, [r7, #11]
      data_4_7 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_4_7 | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_BK_LIGHT | LCD_RS,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 8000f58:	4b07      	ldr	r3, [pc, #28]	; (8000f78 <lcd16x2_i2c_sendData+0x60>)
 8000f5a:	6818      	ldr	r0, [r3, #0]
 8000f5c:	4b07      	ldr	r3, [pc, #28]	; (8000f7c <lcd16x2_i2c_sendData+0x64>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	b299      	uxth	r1, r3
 8000f62:	f107 0208 	add.w	r2, r7, #8
 8000f66:	23c8      	movs	r3, #200	; 0xc8
 8000f68:	9300      	str	r3, [sp, #0]
 8000f6a:	2304      	movs	r3, #4
 8000f6c:	f001 fb58 	bl	8002620 <HAL_I2C_Master_Transmit>
}
 8000f70:	bf00      	nop
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	200001fc 	.word	0x200001fc
 8000f7c:	20000200 	.word	0x20000200

08000f80 <lcd16x2_i2c_init>:
/**
 * @brief Initialise LCD16x2
 * @param[in] *pI2cHandle - pointer to HAL I2C handle
 */
bool lcd16x2_i2c_init(I2C_HandleTypeDef *pI2cHandle)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  HAL_Delay(50);
 8000f88:	2032      	movs	r0, #50	; 0x32
 8000f8a:	f000 ff2f 	bl	8001dec <HAL_Delay>
  lcd16x2_i2cHandle = pI2cHandle;
 8000f8e:	4a30      	ldr	r2, [pc, #192]	; (8001050 <lcd16x2_i2c_init+0xd0>)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6013      	str	r3, [r2, #0]
  if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_0, 5, 500) != HAL_OK)
 8000f94:	4b2e      	ldr	r3, [pc, #184]	; (8001050 <lcd16x2_i2c_init+0xd0>)
 8000f96:	6818      	ldr	r0, [r3, #0]
 8000f98:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000f9c:	2205      	movs	r2, #5
 8000f9e:	214e      	movs	r1, #78	; 0x4e
 8000fa0:	f001 fc3c 	bl	800281c <HAL_I2C_IsDeviceReady>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d010      	beq.n	8000fcc <lcd16x2_i2c_init+0x4c>
  {
    if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_1, 5, 500) != HAL_OK)
 8000faa:	4b29      	ldr	r3, [pc, #164]	; (8001050 <lcd16x2_i2c_init+0xd0>)
 8000fac:	6818      	ldr	r0, [r3, #0]
 8000fae:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000fb2:	2205      	movs	r2, #5
 8000fb4:	217e      	movs	r1, #126	; 0x7e
 8000fb6:	f001 fc31 	bl	800281c <HAL_I2C_IsDeviceReady>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <lcd16x2_i2c_init+0x44>
    {
      return false;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	e040      	b.n	8001046 <lcd16x2_i2c_init+0xc6>
    }
    else
    {
      LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_1;
 8000fc4:	4b23      	ldr	r3, [pc, #140]	; (8001054 <lcd16x2_i2c_init+0xd4>)
 8000fc6:	227e      	movs	r2, #126	; 0x7e
 8000fc8:	701a      	strb	r2, [r3, #0]
 8000fca:	e002      	b.n	8000fd2 <lcd16x2_i2c_init+0x52>
    }
  }
  else
  {
    LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_0;
 8000fcc:	4b21      	ldr	r3, [pc, #132]	; (8001054 <lcd16x2_i2c_init+0xd4>)
 8000fce:	224e      	movs	r2, #78	; 0x4e
 8000fd0:	701a      	strb	r2, [r3, #0]
  }
  //Initialise LCD for 4-bit operation
  //1. Wait at least 15ms
  HAL_Delay(45);
 8000fd2:	202d      	movs	r0, #45	; 0x2d
 8000fd4:	f000 ff0a 	bl	8001dec <HAL_Delay>
  //2. Attentions sequence
  lcd16x2_i2c_sendCommand(0x30);
 8000fd8:	2030      	movs	r0, #48	; 0x30
 8000fda:	f7ff ff69 	bl	8000eb0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(5);
 8000fde:	2005      	movs	r0, #5
 8000fe0:	f000 ff04 	bl	8001dec <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 8000fe4:	2030      	movs	r0, #48	; 0x30
 8000fe6:	f7ff ff63 	bl	8000eb0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 8000fea:	2001      	movs	r0, #1
 8000fec:	f000 fefe 	bl	8001dec <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 8000ff0:	2030      	movs	r0, #48	; 0x30
 8000ff2:	f7ff ff5d 	bl	8000eb0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 8000ff6:	2008      	movs	r0, #8
 8000ff8:	f000 fef8 	bl	8001dec <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x20);
 8000ffc:	2020      	movs	r0, #32
 8000ffe:	f7ff ff57 	bl	8000eb0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 8001002:	2008      	movs	r0, #8
 8001004:	f000 fef2 	bl	8001dec <HAL_Delay>

  lcd16x2_i2c_sendCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 8001008:	2028      	movs	r0, #40	; 0x28
 800100a:	f7ff ff51 	bl	8000eb0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 800100e:	2001      	movs	r0, #1
 8001010:	f000 feec 	bl	8001dec <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL);
 8001014:	2008      	movs	r0, #8
 8001016:	f7ff ff4b 	bl	8000eb0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 800101a:	2001      	movs	r0, #1
 800101c:	f000 fee6 	bl	8001dec <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_CLEARDISPLAY);
 8001020:	2001      	movs	r0, #1
 8001022:	f7ff ff45 	bl	8000eb0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 8001026:	2003      	movs	r0, #3
 8001028:	f000 fee0 	bl	8001dec <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x04 | LCD_ENTRY_ID);
 800102c:	2006      	movs	r0, #6
 800102e:	f7ff ff3f 	bl	8000eb0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f000 feda 	bl	8001dec <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_D);
 8001038:	200c      	movs	r0, #12
 800103a:	f7ff ff39 	bl	8000eb0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 800103e:	2003      	movs	r0, #3
 8001040:	f000 fed4 	bl	8001dec <HAL_Delay>

  return true;
 8001044:	2301      	movs	r3, #1
}
 8001046:	4618      	mov	r0, r3
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	200001fc 	.word	0x200001fc
 8001054:	20000200 	.word	0x20000200

08001058 <lcd16x2_i2c_setCursor>:
 * @brief Set cursor position
 * @param[in] row - 0 or 1 for line1 or line2
 * @param[in] col - 0 - 15 (16 columns LCD)
 */
void lcd16x2_i2c_setCursor(uint8_t row, uint8_t col)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	460a      	mov	r2, r1
 8001062:	71fb      	strb	r3, [r7, #7]
 8001064:	4613      	mov	r3, r2
 8001066:	71bb      	strb	r3, [r7, #6]
  uint8_t maskData;
  maskData = (col)&0x0F;
 8001068:	79bb      	ldrb	r3, [r7, #6]
 800106a:	f003 030f 	and.w	r3, r3, #15
 800106e:	73fb      	strb	r3, [r7, #15]
  if(row==0)
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d108      	bne.n	8001088 <lcd16x2_i2c_setCursor+0x30>
  {
    maskData |= (0x80);
 8001076:	7bfb      	ldrb	r3, [r7, #15]
 8001078:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800107c:	73fb      	strb	r3, [r7, #15]
    lcd16x2_i2c_sendCommand(maskData);
 800107e:	7bfb      	ldrb	r3, [r7, #15]
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff ff15 	bl	8000eb0 <lcd16x2_i2c_sendCommand>
  else
  {
    maskData |= (0xc0);
    lcd16x2_i2c_sendCommand(maskData);
  }
}
 8001086:	e007      	b.n	8001098 <lcd16x2_i2c_setCursor+0x40>
    maskData |= (0xc0);
 8001088:	7bfb      	ldrb	r3, [r7, #15]
 800108a:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800108e:	73fb      	strb	r3, [r7, #15]
    lcd16x2_i2c_sendCommand(maskData);
 8001090:	7bfb      	ldrb	r3, [r7, #15]
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff ff0c 	bl	8000eb0 <lcd16x2_i2c_sendCommand>
}
 8001098:	bf00      	nop
 800109a:	3710      	adds	r7, #16
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <lcd16x2_i2c_clear>:

/**
 * @brief Display clear
 */
void lcd16x2_i2c_clear(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  lcd16x2_i2c_sendCommand(LCD_CLEARDISPLAY);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff03 	bl	8000eb0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 80010aa:	2003      	movs	r0, #3
 80010ac:	f000 fe9e 	bl	8001dec <HAL_Delay>
}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <lcd16x2_i2c_printf>:

/**
 * @brief Print to display
 */
void lcd16x2_i2c_printf(const char* str, ...)
{
 80010b4:	b40f      	push	{r0, r1, r2, r3}
 80010b6:	b590      	push	{r4, r7, lr}
 80010b8:	b089      	sub	sp, #36	; 0x24
 80010ba:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;
  va_start(args, str);
 80010bc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80010c0:	607b      	str	r3, [r7, #4]
  vsprintf(stringArray, str, args);
 80010c2:	f107 0308 	add.w	r3, r7, #8
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80010ca:	4618      	mov	r0, r3
 80010cc:	f003 faac 	bl	8004628 <vsiprintf>
  va_end(args);
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 80010d0:	2300      	movs	r3, #0
 80010d2:	77fb      	strb	r3, [r7, #31]
 80010d4:	e00b      	b.n	80010ee <lcd16x2_i2c_printf+0x3a>
  {
    lcd16x2_i2c_sendData((uint8_t)stringArray[i]);
 80010d6:	7ffb      	ldrb	r3, [r7, #31]
 80010d8:	f107 0220 	add.w	r2, r7, #32
 80010dc:	4413      	add	r3, r2
 80010de:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff ff18 	bl	8000f18 <lcd16x2_i2c_sendData>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 80010e8:	7ffb      	ldrb	r3, [r7, #31]
 80010ea:	3301      	adds	r3, #1
 80010ec:	77fb      	strb	r3, [r7, #31]
 80010ee:	7ffc      	ldrb	r4, [r7, #31]
 80010f0:	f107 0308 	add.w	r3, r7, #8
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff f873 	bl	80001e0 <strlen>
 80010fa:	4603      	mov	r3, r0
 80010fc:	429c      	cmp	r4, r3
 80010fe:	d202      	bcs.n	8001106 <lcd16x2_i2c_printf+0x52>
 8001100:	7ffb      	ldrb	r3, [r7, #31]
 8001102:	2b0f      	cmp	r3, #15
 8001104:	d9e7      	bls.n	80010d6 <lcd16x2_i2c_printf+0x22>
  }
}
 8001106:	bf00      	nop
 8001108:	3724      	adds	r7, #36	; 0x24
 800110a:	46bd      	mov	sp, r7
 800110c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001110:	b004      	add	sp, #16
 8001112:	4770      	bx	lr

08001114 <Seg_Off>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim);
void Seg_Off(void){
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOA, A_Pin|B_Pin|C_Pin|D_Pin|E_Pin|F_Pin|G_Pin, 0); //세그먼트 구성 핀 모두 끄기
 8001118:	2200      	movs	r2, #0
 800111a:	f44f 61fe 	mov.w	r1, #2032	; 0x7f0
 800111e:	4805      	ldr	r0, [pc, #20]	; (8001134 <Seg_Off+0x20>)
 8001120:	f001 f906 	bl	8002330 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, Dig1_Pin|Dig2_Pin|Dig3_Pin|Dig4_Pin, 1); //세그먼트 Dgit핀 모두 끄기
 8001124:	2201      	movs	r2, #1
 8001126:	210f      	movs	r1, #15
 8001128:	4803      	ldr	r0, [pc, #12]	; (8001138 <Seg_Off+0x24>)
 800112a:	f001 f901 	bl	8002330 <HAL_GPIO_WritePin>

}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40020000 	.word	0x40020000
 8001138:	40020400 	.word	0x40020400

0800113c <Segment>:

int segdig = 0;//세그먼트 출력 자릿수 저장을 위한 전역변수
void Segment() {
 800113c:	b580      	push	{r7, lr}
 800113e:	b08a      	sub	sp, #40	; 0x28
 8001140:	af00      	add	r7, sp, #0
	unsigned char List_Of_Segment_Info[10] = { 0xC0, 0xF9, 0xA4, 0xB0, 0x99,
 8001142:	4a43      	ldr	r2, [pc, #268]	; (8001250 <Segment+0x114>)
 8001144:	f107 031c 	add.w	r3, r7, #28
 8001148:	ca07      	ldmia	r2, {r0, r1, r2}
 800114a:	c303      	stmia	r3!, {r0, r1}
 800114c:	801a      	strh	r2, [r3, #0]
	 		  0x92, 0x82, 0xD8, 0x80, 0x98 };
	int addr[4];
	Seg_Off(); // 모든 세그먼트 끄기
 800114e:	f7ff ffe1 	bl	8001114 <Seg_Off>

	addr[0] = Seg_Out / 1000;
 8001152:	4b40      	ldr	r3, [pc, #256]	; (8001254 <Segment+0x118>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a40      	ldr	r2, [pc, #256]	; (8001258 <Segment+0x11c>)
 8001158:	fb82 1203 	smull	r1, r2, r2, r3
 800115c:	1192      	asrs	r2, r2, #6
 800115e:	17db      	asrs	r3, r3, #31
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	60fb      	str	r3, [r7, #12]
	addr[1] = Seg_Out % 1000 / 100;
 8001164:	4b3b      	ldr	r3, [pc, #236]	; (8001254 <Segment+0x118>)
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	4b3b      	ldr	r3, [pc, #236]	; (8001258 <Segment+0x11c>)
 800116a:	fb83 1302 	smull	r1, r3, r3, r2
 800116e:	1199      	asrs	r1, r3, #6
 8001170:	17d3      	asrs	r3, r2, #31
 8001172:	1acb      	subs	r3, r1, r3
 8001174:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001178:	fb01 f303 	mul.w	r3, r1, r3
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	4a37      	ldr	r2, [pc, #220]	; (800125c <Segment+0x120>)
 8001180:	fb82 1203 	smull	r1, r2, r2, r3
 8001184:	1152      	asrs	r2, r2, #5
 8001186:	17db      	asrs	r3, r3, #31
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	613b      	str	r3, [r7, #16]
	addr[2] = Seg_Out % 100 / 10;
 800118c:	4b31      	ldr	r3, [pc, #196]	; (8001254 <Segment+0x118>)
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	4b32      	ldr	r3, [pc, #200]	; (800125c <Segment+0x120>)
 8001192:	fb83 1302 	smull	r1, r3, r3, r2
 8001196:	1159      	asrs	r1, r3, #5
 8001198:	17d3      	asrs	r3, r2, #31
 800119a:	1acb      	subs	r3, r1, r3
 800119c:	2164      	movs	r1, #100	; 0x64
 800119e:	fb01 f303 	mul.w	r3, r1, r3
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	4a2e      	ldr	r2, [pc, #184]	; (8001260 <Segment+0x124>)
 80011a6:	fb82 1203 	smull	r1, r2, r2, r3
 80011aa:	1092      	asrs	r2, r2, #2
 80011ac:	17db      	asrs	r3, r3, #31
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	617b      	str	r3, [r7, #20]
	addr[3] = Seg_Out % 10;
 80011b2:	4b28      	ldr	r3, [pc, #160]	; (8001254 <Segment+0x118>)
 80011b4:	6819      	ldr	r1, [r3, #0]
 80011b6:	4b2a      	ldr	r3, [pc, #168]	; (8001260 <Segment+0x124>)
 80011b8:	fb83 2301 	smull	r2, r3, r3, r1
 80011bc:	109a      	asrs	r2, r3, #2
 80011be:	17cb      	asrs	r3, r1, #31
 80011c0:	1ad2      	subs	r2, r2, r3
 80011c2:	4613      	mov	r3, r2
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	4413      	add	r3, r2
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	1aca      	subs	r2, r1, r3
 80011cc:	61ba      	str	r2, [r7, #24]

	uint16_t i[4] = {1,2,4,8}; //세그먼트 Dgit 조정
 80011ce:	4a25      	ldr	r2, [pc, #148]	; (8001264 <Segment+0x128>)
 80011d0:	1d3b      	adds	r3, r7, #4
 80011d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011d6:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_GPIO_WritePin(GPIOB, i[segdig], 0);
 80011da:	4b23      	ldr	r3, [pc, #140]	; (8001268 <Segment+0x12c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80011e4:	4413      	add	r3, r2
 80011e6:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80011ea:	2200      	movs	r2, #0
 80011ec:	4619      	mov	r1, r3
 80011ee:	481f      	ldr	r0, [pc, #124]	; (800126c <Segment+0x130>)
 80011f0:	f001 f89e 	bl	8002330 <HAL_GPIO_WritePin>

	uint16_t j = 0;//출력 핀과 입력 값의 비트연산을 위한 변수
 80011f4:	2300      	movs	r3, #0
 80011f6:	84fb      	strh	r3, [r7, #38]	; 0x26

	j |= (~(List_Of_Segment_Info[addr[segdig]]&0xFF))<<4; //PA4 부터로 옮기고시프 4로 변경
 80011f8:	4b1b      	ldr	r3, [pc, #108]	; (8001268 <Segment+0x12c>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001202:	4413      	add	r3, r2
 8001204:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8001208:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800120c:	4413      	add	r3, r2
 800120e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001212:	43db      	mvns	r3, r3
 8001214:	011b      	lsls	r3, r3, #4
 8001216:	b21a      	sxth	r2, r3
 8001218:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800121c:	4313      	orrs	r3, r2
 800121e:	b21b      	sxth	r3, r3
 8001220:	84fb      	strh	r3, [r7, #38]	; 0x26
	HAL_GPIO_WritePin(GPIOA, j, 1);
 8001222:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001224:	2201      	movs	r2, #1
 8001226:	4619      	mov	r1, r3
 8001228:	4811      	ldr	r0, [pc, #68]	; (8001270 <Segment+0x134>)
 800122a:	f001 f881 	bl	8002330 <HAL_GPIO_WritePin>

	segdig++;
 800122e:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <Segment+0x12c>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	3301      	adds	r3, #1
 8001234:	4a0c      	ldr	r2, [pc, #48]	; (8001268 <Segment+0x12c>)
 8001236:	6013      	str	r3, [r2, #0]
	if (segdig == 4){
 8001238:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <Segment+0x12c>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2b04      	cmp	r3, #4
 800123e:	d102      	bne.n	8001246 <Segment+0x10a>
		segdig = 0;
 8001240:	4b09      	ldr	r3, [pc, #36]	; (8001268 <Segment+0x12c>)
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
	}

}
 8001246:	bf00      	nop
 8001248:	3728      	adds	r7, #40	; 0x28
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	08006a70 	.word	0x08006a70
 8001254:	20000000 	.word	0x20000000
 8001258:	10624dd3 	.word	0x10624dd3
 800125c:	51eb851f 	.word	0x51eb851f
 8001260:	66666667 	.word	0x66666667
 8001264:	08006a7c 	.word	0x08006a7c
 8001268:	20000208 	.word	0x20000208
 800126c:	40020400 	.word	0x40020400
 8001270:	40020000 	.word	0x40020000

08001274 <check_CO2>:
char rerising_check = 0;
int TH; // high level output time during cycle
int TL; // low level output time during cycle
char CO2_Pin_State= 0;
char OLD_CO2_Pin_State = 0;
void check_CO2(){
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
//	rising_time = CO2ms;
//	TL = rising_time - falling_time;
//
//	C = 2000*(TH-2)/(TH+TL-4);

	TH =  falling_time - rising_time;
 800127a:	4b18      	ldr	r3, [pc, #96]	; (80012dc <check_CO2+0x68>)
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	4b18      	ldr	r3, [pc, #96]	; (80012e0 <check_CO2+0x6c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	4a17      	ldr	r2, [pc, #92]	; (80012e4 <check_CO2+0x70>)
 8001286:	6013      	str	r3, [r2, #0]
	TL = rerising_time - falling_time;
 8001288:	4b17      	ldr	r3, [pc, #92]	; (80012e8 <check_CO2+0x74>)
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	4b13      	ldr	r3, [pc, #76]	; (80012dc <check_CO2+0x68>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	4a16      	ldr	r2, [pc, #88]	; (80012ec <check_CO2+0x78>)
 8001294:	6013      	str	r3, [r2, #0]
	C = 2000*(TH-2)/(TH+TL-4);
 8001296:	4b13      	ldr	r3, [pc, #76]	; (80012e4 <check_CO2+0x70>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	3b02      	subs	r3, #2
 800129c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80012a0:	fb02 f203 	mul.w	r2, r2, r3
 80012a4:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <check_CO2+0x70>)
 80012a6:	6819      	ldr	r1, [r3, #0]
 80012a8:	4b10      	ldr	r3, [pc, #64]	; (80012ec <check_CO2+0x78>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	440b      	add	r3, r1
 80012ae:	3b04      	subs	r3, #4
 80012b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80012b4:	4a0e      	ldr	r2, [pc, #56]	; (80012f0 <check_CO2+0x7c>)
 80012b6:	6013      	str	r3, [r2, #0]

	int a = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	607b      	str	r3, [r7, #4]
	rising_time = 0;
 80012bc:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <check_CO2+0x6c>)
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
	falling_time  = 0;
 80012c2:	4b06      	ldr	r3, [pc, #24]	; (80012dc <check_CO2+0x68>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
	rerising_time = 0;
 80012c8:	4b07      	ldr	r3, [pc, #28]	; (80012e8 <check_CO2+0x74>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]



}
 80012ce:	bf00      	nop
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	20000320 	.word	0x20000320
 80012e0:	20000324 	.word	0x20000324
 80012e4:	2000031c 	.word	0x2000031c
 80012e8:	20000328 	.word	0x20000328
 80012ec:	20000318 	.word	0x20000318
 80012f0:	200002cc 	.word	0x200002cc
 80012f4:	00000000 	.word	0x00000000

080012f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012fc:	f000 fd34 	bl	8001d68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001300:	f000 f894 	bl	800142c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001304:	f000 f97e 	bl	8001604 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001308:	f000 f906 	bl	8001518 <MX_I2C1_Init>
  MX_TIM10_Init();
 800130c:	f000 f932 	bl	8001574 <MX_TIM10_Init>
  MX_TIM11_Init();
 8001310:	f000 f954 	bl	80015bc <MX_TIM11_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001314:	f000 f8f4 	bl	8001500 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim10);
 8001318:	4835      	ldr	r0, [pc, #212]	; (80013f0 <main+0xf8>)
 800131a:	f002 faad 	bl	8003878 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);
 800131e:	4835      	ldr	r0, [pc, #212]	; (80013f4 <main+0xfc>)
 8001320:	f002 faaa 	bl	8003878 <HAL_TIM_Base_Start_IT>
  if(lcd16x2_i2c_init(&hi2c1)){
 8001324:	4834      	ldr	r0, [pc, #208]	; (80013f8 <main+0x100>)
 8001326:	f7ff fe2b 	bl	8000f80 <lcd16x2_i2c_init>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d005      	beq.n	800133c <main+0x44>
 	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 1);
 8001330:	2201      	movs	r2, #1
 8001332:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001336:	4831      	ldr	r0, [pc, #196]	; (80013fc <main+0x104>)
 8001338:	f000 fffa 	bl	8002330 <HAL_GPIO_WritePin>
  }
  lcd16x2_i2c_clear();
 800133c:	f7ff feb0 	bl	80010a0 <lcd16x2_i2c_clear>
  rising_check = 1;
 8001340:	4b2f      	ldr	r3, [pc, #188]	; (8001400 <main+0x108>)
 8001342:	2201      	movs	r2, #1
 8001344:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (rising_time < falling_time && falling_time < rerising_time){
 8001346:	4b2f      	ldr	r3, [pc, #188]	; (8001404 <main+0x10c>)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	4b2f      	ldr	r3, [pc, #188]	; (8001408 <main+0x110>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	429a      	cmp	r2, r3
 8001350:	da07      	bge.n	8001362 <main+0x6a>
 8001352:	4b2d      	ldr	r3, [pc, #180]	; (8001408 <main+0x110>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	4b2d      	ldr	r3, [pc, #180]	; (800140c <main+0x114>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	429a      	cmp	r2, r3
 800135c:	da01      	bge.n	8001362 <main+0x6a>
		  check_CO2();
 800135e:	f7ff ff89 	bl	8001274 <check_CO2>
	  }

	  if (ms > 1){
 8001362:	4b2b      	ldr	r3, [pc, #172]	; (8001410 <main+0x118>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b01      	cmp	r3, #1
 8001368:	d904      	bls.n	8001374 <main+0x7c>
	  		  Segment();//3ms마다 세븐세그먼트를 출력
 800136a:	f7ff fee7 	bl	800113c <Segment>
	  		  ms = 0;
 800136e:	4b28      	ldr	r3, [pc, #160]	; (8001410 <main+0x118>)
 8001370:	2200      	movs	r2, #0
 8001372:	701a      	strb	r2, [r3, #0]
	  	  }

	  if (lcd > 5){
 8001374:	4b27      	ldr	r3, [pc, #156]	; (8001414 <main+0x11c>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b05      	cmp	r3, #5
 800137a:	d9e4      	bls.n	8001346 <main+0x4e>
		  lcd16x2_i2c_clear();
 800137c:	f7ff fe90 	bl	80010a0 <lcd16x2_i2c_clear>
		  lcd16x2_i2c_setCursor(0,0);
 8001380:	2100      	movs	r1, #0
 8001382:	2000      	movs	r0, #0
 8001384:	f7ff fe68 	bl	8001058 <lcd16x2_i2c_setCursor>
		  lcd16x2_i2c_printf("T: %.2f",1.23);
 8001388:	a313      	add	r3, pc, #76	; (adr r3, 80013d8 <main+0xe0>)
 800138a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138e:	4822      	ldr	r0, [pc, #136]	; (8001418 <main+0x120>)
 8001390:	f7ff fe90 	bl	80010b4 <lcd16x2_i2c_printf>
		  lcd16x2_i2c_setCursor(0,9);
 8001394:	2109      	movs	r1, #9
 8001396:	2000      	movs	r0, #0
 8001398:	f7ff fe5e 	bl	8001058 <lcd16x2_i2c_setCursor>
		  lcd16x2_i2c_printf("D: %.2f",1.24);
 800139c:	a310      	add	r3, pc, #64	; (adr r3, 80013e0 <main+0xe8>)
 800139e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a2:	481e      	ldr	r0, [pc, #120]	; (800141c <main+0x124>)
 80013a4:	f7ff fe86 	bl	80010b4 <lcd16x2_i2c_printf>
		  lcd16x2_i2c_setCursor(1,0);
 80013a8:	2100      	movs	r1, #0
 80013aa:	2001      	movs	r0, #1
 80013ac:	f7ff fe54 	bl	8001058 <lcd16x2_i2c_setCursor>
		  lcd16x2_i2c_printf("H: %.2f",11.26);
 80013b0:	a30d      	add	r3, pc, #52	; (adr r3, 80013e8 <main+0xf0>)
 80013b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b6:	481a      	ldr	r0, [pc, #104]	; (8001420 <main+0x128>)
 80013b8:	f7ff fe7c 	bl	80010b4 <lcd16x2_i2c_printf>
		  lcd16x2_i2c_setCursor(1,9);
 80013bc:	2109      	movs	r1, #9
 80013be:	2001      	movs	r0, #1
 80013c0:	f7ff fe4a 	bl	8001058 <lcd16x2_i2c_setCursor>
		  lcd16x2_i2c_printf("C: %d",C);
 80013c4:	4b17      	ldr	r3, [pc, #92]	; (8001424 <main+0x12c>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4619      	mov	r1, r3
 80013ca:	4817      	ldr	r0, [pc, #92]	; (8001428 <main+0x130>)
 80013cc:	f7ff fe72 	bl	80010b4 <lcd16x2_i2c_printf>
		  lcd = 0;
 80013d0:	4b10      	ldr	r3, [pc, #64]	; (8001414 <main+0x11c>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	701a      	strb	r2, [r3, #0]
	  if (rising_time < falling_time && falling_time < rerising_time){
 80013d6:	e7b6      	b.n	8001346 <main+0x4e>
 80013d8:	7ae147ae 	.word	0x7ae147ae
 80013dc:	3ff3ae14 	.word	0x3ff3ae14
 80013e0:	3d70a3d7 	.word	0x3d70a3d7
 80013e4:	3ff3d70a 	.word	0x3ff3d70a
 80013e8:	b851eb85 	.word	0xb851eb85
 80013ec:	4026851e 	.word	0x4026851e
 80013f0:	20000274 	.word	0x20000274
 80013f4:	200002d0 	.word	0x200002d0
 80013f8:	20000220 	.word	0x20000220
 80013fc:	40020800 	.word	0x40020800
 8001400:	2000020c 	.word	0x2000020c
 8001404:	20000324 	.word	0x20000324
 8001408:	20000320 	.word	0x20000320
 800140c:	20000328 	.word	0x20000328
 8001410:	20000201 	.word	0x20000201
 8001414:	20000202 	.word	0x20000202
 8001418:	08006a84 	.word	0x08006a84
 800141c:	08006a8c 	.word	0x08006a8c
 8001420:	08006a94 	.word	0x08006a94
 8001424:	200002cc 	.word	0x200002cc
 8001428:	08006a9c 	.word	0x08006a9c

0800142c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b094      	sub	sp, #80	; 0x50
 8001430:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001432:	f107 0320 	add.w	r3, r7, #32
 8001436:	2230      	movs	r2, #48	; 0x30
 8001438:	2100      	movs	r1, #0
 800143a:	4618      	mov	r0, r3
 800143c:	f002 fc6c 	bl	8003d18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001440:	f107 030c 	add.w	r3, r7, #12
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001450:	2300      	movs	r3, #0
 8001452:	60bb      	str	r3, [r7, #8]
 8001454:	4b28      	ldr	r3, [pc, #160]	; (80014f8 <SystemClock_Config+0xcc>)
 8001456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001458:	4a27      	ldr	r2, [pc, #156]	; (80014f8 <SystemClock_Config+0xcc>)
 800145a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800145e:	6413      	str	r3, [r2, #64]	; 0x40
 8001460:	4b25      	ldr	r3, [pc, #148]	; (80014f8 <SystemClock_Config+0xcc>)
 8001462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001468:	60bb      	str	r3, [r7, #8]
 800146a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800146c:	2300      	movs	r3, #0
 800146e:	607b      	str	r3, [r7, #4]
 8001470:	4b22      	ldr	r3, [pc, #136]	; (80014fc <SystemClock_Config+0xd0>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001478:	4a20      	ldr	r2, [pc, #128]	; (80014fc <SystemClock_Config+0xd0>)
 800147a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800147e:	6013      	str	r3, [r2, #0]
 8001480:	4b1e      	ldr	r3, [pc, #120]	; (80014fc <SystemClock_Config+0xd0>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001488:	607b      	str	r3, [r7, #4]
 800148a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800148c:	2301      	movs	r3, #1
 800148e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001490:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001494:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001496:	2302      	movs	r3, #2
 8001498:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800149a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800149e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80014a0:	2304      	movs	r3, #4
 80014a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80014a4:	2354      	movs	r3, #84	; 0x54
 80014a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014a8:	2302      	movs	r3, #2
 80014aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80014ac:	2307      	movs	r3, #7
 80014ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014b0:	f107 0320 	add.w	r3, r7, #32
 80014b4:	4618      	mov	r0, r3
 80014b6:	f001 fce9 	bl	8002e8c <HAL_RCC_OscConfig>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80014c0:	f000 f9f2 	bl	80018a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014c4:	230f      	movs	r3, #15
 80014c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014c8:	2302      	movs	r3, #2
 80014ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014d6:	2300      	movs	r3, #0
 80014d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014da:	f107 030c 	add.w	r3, r7, #12
 80014de:	2102      	movs	r1, #2
 80014e0:	4618      	mov	r0, r3
 80014e2:	f001 ff4b 	bl	800337c <HAL_RCC_ClockConfig>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80014ec:	f000 f9dc 	bl	80018a8 <Error_Handler>
  }
}
 80014f0:	bf00      	nop
 80014f2:	3750      	adds	r7, #80	; 0x50
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40023800 	.word	0x40023800
 80014fc:	40007000 	.word	0x40007000

08001500 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* TIM1_TRG_COM_TIM11_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001504:	2200      	movs	r2, #0
 8001506:	2100      	movs	r1, #0
 8001508:	201a      	movs	r0, #26
 800150a:	f000 fd4b 	bl	8001fa4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800150e:	201a      	movs	r0, #26
 8001510:	f000 fd64 	bl	8001fdc <HAL_NVIC_EnableIRQ>
}
 8001514:	bf00      	nop
 8001516:	bd80      	pop	{r7, pc}

08001518 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800151c:	4b12      	ldr	r3, [pc, #72]	; (8001568 <MX_I2C1_Init+0x50>)
 800151e:	4a13      	ldr	r2, [pc, #76]	; (800156c <MX_I2C1_Init+0x54>)
 8001520:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001522:	4b11      	ldr	r3, [pc, #68]	; (8001568 <MX_I2C1_Init+0x50>)
 8001524:	4a12      	ldr	r2, [pc, #72]	; (8001570 <MX_I2C1_Init+0x58>)
 8001526:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001528:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <MX_I2C1_Init+0x50>)
 800152a:	2200      	movs	r2, #0
 800152c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800152e:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <MX_I2C1_Init+0x50>)
 8001530:	2200      	movs	r2, #0
 8001532:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001534:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <MX_I2C1_Init+0x50>)
 8001536:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800153a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800153c:	4b0a      	ldr	r3, [pc, #40]	; (8001568 <MX_I2C1_Init+0x50>)
 800153e:	2200      	movs	r2, #0
 8001540:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001542:	4b09      	ldr	r3, [pc, #36]	; (8001568 <MX_I2C1_Init+0x50>)
 8001544:	2200      	movs	r2, #0
 8001546:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001548:	4b07      	ldr	r3, [pc, #28]	; (8001568 <MX_I2C1_Init+0x50>)
 800154a:	2200      	movs	r2, #0
 800154c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800154e:	4b06      	ldr	r3, [pc, #24]	; (8001568 <MX_I2C1_Init+0x50>)
 8001550:	2200      	movs	r2, #0
 8001552:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001554:	4804      	ldr	r0, [pc, #16]	; (8001568 <MX_I2C1_Init+0x50>)
 8001556:	f000 ff1f 	bl	8002398 <HAL_I2C_Init>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001560:	f000 f9a2 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001564:	bf00      	nop
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20000220 	.word	0x20000220
 800156c:	40005400 	.word	0x40005400
 8001570:	000186a0 	.word	0x000186a0

08001574 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001578:	4b0e      	ldr	r3, [pc, #56]	; (80015b4 <MX_TIM10_Init+0x40>)
 800157a:	4a0f      	ldr	r2, [pc, #60]	; (80015b8 <MX_TIM10_Init+0x44>)
 800157c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 10000-1;
 800157e:	4b0d      	ldr	r3, [pc, #52]	; (80015b4 <MX_TIM10_Init+0x40>)
 8001580:	f242 720f 	movw	r2, #9999	; 0x270f
 8001584:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001586:	4b0b      	ldr	r3, [pc, #44]	; (80015b4 <MX_TIM10_Init+0x40>)
 8001588:	2200      	movs	r2, #0
 800158a:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 8400-1;
 800158c:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <MX_TIM10_Init+0x40>)
 800158e:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001592:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001594:	4b07      	ldr	r3, [pc, #28]	; (80015b4 <MX_TIM10_Init+0x40>)
 8001596:	2200      	movs	r2, #0
 8001598:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800159a:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <MX_TIM10_Init+0x40>)
 800159c:	2200      	movs	r2, #0
 800159e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80015a0:	4804      	ldr	r0, [pc, #16]	; (80015b4 <MX_TIM10_Init+0x40>)
 80015a2:	f002 f919 	bl	80037d8 <HAL_TIM_Base_Init>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80015ac:	f000 f97c 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80015b0:	bf00      	nop
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	20000274 	.word	0x20000274
 80015b8:	40014400 	.word	0x40014400

080015bc <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80015c0:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <MX_TIM11_Init+0x40>)
 80015c2:	4a0f      	ldr	r2, [pc, #60]	; (8001600 <MX_TIM11_Init+0x44>)
 80015c4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 100-1;
 80015c6:	4b0d      	ldr	r3, [pc, #52]	; (80015fc <MX_TIM11_Init+0x40>)
 80015c8:	2263      	movs	r2, #99	; 0x63
 80015ca:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015cc:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <MX_TIM11_Init+0x40>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 840-1;
 80015d2:	4b0a      	ldr	r3, [pc, #40]	; (80015fc <MX_TIM11_Init+0x40>)
 80015d4:	f240 3247 	movw	r2, #839	; 0x347
 80015d8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015da:	4b08      	ldr	r3, [pc, #32]	; (80015fc <MX_TIM11_Init+0x40>)
 80015dc:	2200      	movs	r2, #0
 80015de:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e0:	4b06      	ldr	r3, [pc, #24]	; (80015fc <MX_TIM11_Init+0x40>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80015e6:	4805      	ldr	r0, [pc, #20]	; (80015fc <MX_TIM11_Init+0x40>)
 80015e8:	f002 f8f6 	bl	80037d8 <HAL_TIM_Base_Init>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80015f2:	f000 f959 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	200002d0 	.word	0x200002d0
 8001600:	40014800 	.word	0x40014800

08001604 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08a      	sub	sp, #40	; 0x28
 8001608:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160a:	f107 0314 	add.w	r3, r7, #20
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	605a      	str	r2, [r3, #4]
 8001614:	609a      	str	r2, [r3, #8]
 8001616:	60da      	str	r2, [r3, #12]
 8001618:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	613b      	str	r3, [r7, #16]
 800161e:	4b42      	ldr	r3, [pc, #264]	; (8001728 <MX_GPIO_Init+0x124>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	4a41      	ldr	r2, [pc, #260]	; (8001728 <MX_GPIO_Init+0x124>)
 8001624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001628:	6313      	str	r3, [r2, #48]	; 0x30
 800162a:	4b3f      	ldr	r3, [pc, #252]	; (8001728 <MX_GPIO_Init+0x124>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001632:	613b      	str	r3, [r7, #16]
 8001634:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	4b3b      	ldr	r3, [pc, #236]	; (8001728 <MX_GPIO_Init+0x124>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	4a3a      	ldr	r2, [pc, #232]	; (8001728 <MX_GPIO_Init+0x124>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	6313      	str	r3, [r2, #48]	; 0x30
 8001646:	4b38      	ldr	r3, [pc, #224]	; (8001728 <MX_GPIO_Init+0x124>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	60bb      	str	r3, [r7, #8]
 8001656:	4b34      	ldr	r3, [pc, #208]	; (8001728 <MX_GPIO_Init+0x124>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	4a33      	ldr	r2, [pc, #204]	; (8001728 <MX_GPIO_Init+0x124>)
 800165c:	f043 0304 	orr.w	r3, r3, #4
 8001660:	6313      	str	r3, [r2, #48]	; 0x30
 8001662:	4b31      	ldr	r3, [pc, #196]	; (8001728 <MX_GPIO_Init+0x124>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	f003 0304 	and.w	r3, r3, #4
 800166a:	60bb      	str	r3, [r7, #8]
 800166c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	607b      	str	r3, [r7, #4]
 8001672:	4b2d      	ldr	r3, [pc, #180]	; (8001728 <MX_GPIO_Init+0x124>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	4a2c      	ldr	r2, [pc, #176]	; (8001728 <MX_GPIO_Init+0x124>)
 8001678:	f043 0302 	orr.w	r3, r3, #2
 800167c:	6313      	str	r3, [r2, #48]	; 0x30
 800167e:	4b2a      	ldr	r3, [pc, #168]	; (8001728 <MX_GPIO_Init+0x124>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	607b      	str	r3, [r7, #4]
 8001688:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, A_Pin|B_Pin|C_Pin|D_Pin
 800168a:	2200      	movs	r2, #0
 800168c:	f44f 617f 	mov.w	r1, #4080	; 0xff0
 8001690:	4826      	ldr	r0, [pc, #152]	; (800172c <MX_GPIO_Init+0x128>)
 8001692:	f000 fe4d 	bl	8002330 <HAL_GPIO_WritePin>
                          |E_Pin|F_Pin|G_Pin|DotT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Dig1_Pin|Dig2_Pin|Dig3_Pin|Dig4_Pin, GPIO_PIN_RESET);
 8001696:	2200      	movs	r2, #0
 8001698:	210f      	movs	r1, #15
 800169a:	4825      	ldr	r0, [pc, #148]	; (8001730 <MX_GPIO_Init+0x12c>)
 800169c:	f000 fe48 	bl	8002330 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DHT_Pin|Test_Pin, GPIO_PIN_RESET);
 80016a0:	2200      	movs	r2, #0
 80016a2:	f44f 6188 	mov.w	r1, #1088	; 0x440
 80016a6:	4823      	ldr	r0, [pc, #140]	; (8001734 <MX_GPIO_Init+0x130>)
 80016a8:	f000 fe42 	bl	8002330 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A_Pin B_Pin C_Pin D_Pin
                           E_Pin F_Pin G_Pin DotT_Pin */
  GPIO_InitStruct.Pin = A_Pin|B_Pin|C_Pin|D_Pin
 80016ac:	f44f 637f 	mov.w	r3, #4080	; 0xff0
 80016b0:	617b      	str	r3, [r7, #20]
                          |E_Pin|F_Pin|G_Pin|DotT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b2:	2301      	movs	r3, #1
 80016b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ba:	2300      	movs	r3, #0
 80016bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016be:	f107 0314 	add.w	r3, r7, #20
 80016c2:	4619      	mov	r1, r3
 80016c4:	4819      	ldr	r0, [pc, #100]	; (800172c <MX_GPIO_Init+0x128>)
 80016c6:	f000 fc97 	bl	8001ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DUST_Pin CO2_Pin */
  GPIO_InitStruct.Pin = DUST_Pin|CO2_Pin;
 80016ca:	f44f 7390 	mov.w	r3, #288	; 0x120
 80016ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016d0:	2300      	movs	r3, #0
 80016d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	4619      	mov	r1, r3
 80016de:	4815      	ldr	r0, [pc, #84]	; (8001734 <MX_GPIO_Init+0x130>)
 80016e0:	f000 fc8a 	bl	8001ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Dig1_Pin Dig2_Pin Dig3_Pin Dig4_Pin */
  GPIO_InitStruct.Pin = Dig1_Pin|Dig2_Pin|Dig3_Pin|Dig4_Pin;
 80016e4:	230f      	movs	r3, #15
 80016e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e8:	2301      	movs	r3, #1
 80016ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f0:	2300      	movs	r3, #0
 80016f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f4:	f107 0314 	add.w	r3, r7, #20
 80016f8:	4619      	mov	r1, r3
 80016fa:	480d      	ldr	r0, [pc, #52]	; (8001730 <MX_GPIO_Init+0x12c>)
 80016fc:	f000 fc7c 	bl	8001ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DHT_Pin Test_Pin */
  GPIO_InitStruct.Pin = DHT_Pin|Test_Pin;
 8001700:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8001704:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001706:	2301      	movs	r3, #1
 8001708:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170e:	2300      	movs	r3, #0
 8001710:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001712:	f107 0314 	add.w	r3, r7, #20
 8001716:	4619      	mov	r1, r3
 8001718:	4806      	ldr	r0, [pc, #24]	; (8001734 <MX_GPIO_Init+0x130>)
 800171a:	f000 fc6d 	bl	8001ff8 <HAL_GPIO_Init>

}
 800171e:	bf00      	nop
 8001720:	3728      	adds	r7, #40	; 0x28
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40023800 	.word	0x40023800
 800172c:	40020000 	.word	0x40020000
 8001730:	40020400 	.word	0x40020400
 8001734:	40020800 	.word	0x40020800

08001738 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

	if(htim->Instance == TIM10){//타이머6 인터럽트 실행(1초)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a47      	ldr	r2, [pc, #284]	; (8001864 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d10f      	bne.n	800176a <HAL_TIM_PeriodElapsedCallback+0x32>
	  HAL_GPIO_TogglePin(GPIOA, DotT_Pin);
 800174a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800174e:	4846      	ldr	r0, [pc, #280]	; (8001868 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001750:	f000 fe07 	bl	8002362 <HAL_GPIO_TogglePin>
	  Seg_Out++;
 8001754:	4b45      	ldr	r3, [pc, #276]	; (800186c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	3301      	adds	r3, #1
 800175a:	4a44      	ldr	r2, [pc, #272]	; (800186c <HAL_TIM_PeriodElapsedCallback+0x134>)
 800175c:	6013      	str	r3, [r2, #0]
	  lcd++;
 800175e:	4b44      	ldr	r3, [pc, #272]	; (8001870 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	3301      	adds	r3, #1
 8001764:	b2da      	uxtb	r2, r3
 8001766:	4b42      	ldr	r3, [pc, #264]	; (8001870 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001768:	701a      	strb	r2, [r3, #0]

	}
	if(htim->Instance == TIM11){//타이머6 인터럽트 실행(1ms)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a41      	ldr	r2, [pc, #260]	; (8001874 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d16b      	bne.n	800184c <HAL_TIM_PeriodElapsedCallback+0x114>
		CO2_Pin_State = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8);
 8001774:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001778:	483f      	ldr	r0, [pc, #252]	; (8001878 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800177a:	f000 fdc1 	bl	8002300 <HAL_GPIO_ReadPin>
 800177e:	4603      	mov	r3, r0
 8001780:	461a      	mov	r2, r3
 8001782:	4b3e      	ldr	r3, [pc, #248]	; (800187c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001784:	701a      	strb	r2, [r3, #0]
//		if (CO2_Pin_State != OLD_CO2_Pin_State && CO2_Pin_State == 0){
//			rising_check = 1;
//		}

		if (rising_check == 1 && CO2_Pin_State != OLD_CO2_Pin_State && CO2_Pin_State == 1){ //라이징 엣지
 8001786:	4b3e      	ldr	r3, [pc, #248]	; (8001880 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d11a      	bne.n	80017c4 <HAL_TIM_PeriodElapsedCallback+0x8c>
 800178e:	4b3b      	ldr	r3, [pc, #236]	; (800187c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001790:	781a      	ldrb	r2, [r3, #0]
 8001792:	4b3c      	ldr	r3, [pc, #240]	; (8001884 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	429a      	cmp	r2, r3
 8001798:	d014      	beq.n	80017c4 <HAL_TIM_PeriodElapsedCallback+0x8c>
 800179a:	4b38      	ldr	r3, [pc, #224]	; (800187c <HAL_TIM_PeriodElapsedCallback+0x144>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d110      	bne.n	80017c4 <HAL_TIM_PeriodElapsedCallback+0x8c>
			CO2ms = 0;
 80017a2:	4b39      	ldr	r3, [pc, #228]	; (8001888 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
			rising_time = CO2ms;
 80017a8:	4b37      	ldr	r3, [pc, #220]	; (8001888 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	461a      	mov	r2, r3
 80017ae:	4b37      	ldr	r3, [pc, #220]	; (800188c <HAL_TIM_PeriodElapsedCallback+0x154>)
 80017b0:	601a      	str	r2, [r3, #0]
			rising_check = 0;
 80017b2:	4b33      	ldr	r3, [pc, #204]	; (8001880 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	701a      	strb	r2, [r3, #0]
			falling_time = 0;
 80017b8:	4b35      	ldr	r3, [pc, #212]	; (8001890 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
			falling_check = 1;
 80017be:	4b35      	ldr	r3, [pc, #212]	; (8001894 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80017c0:	2201      	movs	r2, #1
 80017c2:	701a      	strb	r2, [r3, #0]
		}

		if (falling_check && CO2_Pin_State != OLD_CO2_Pin_State && CO2_Pin_State == 0){ //폴링 엣지
 80017c4:	4b33      	ldr	r3, [pc, #204]	; (8001894 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d017      	beq.n	80017fc <HAL_TIM_PeriodElapsedCallback+0xc4>
 80017cc:	4b2b      	ldr	r3, [pc, #172]	; (800187c <HAL_TIM_PeriodElapsedCallback+0x144>)
 80017ce:	781a      	ldrb	r2, [r3, #0]
 80017d0:	4b2c      	ldr	r3, [pc, #176]	; (8001884 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d011      	beq.n	80017fc <HAL_TIM_PeriodElapsedCallback+0xc4>
 80017d8:	4b28      	ldr	r3, [pc, #160]	; (800187c <HAL_TIM_PeriodElapsedCallback+0x144>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d10d      	bne.n	80017fc <HAL_TIM_PeriodElapsedCallback+0xc4>
			falling_check = 0;
 80017e0:	4b2c      	ldr	r3, [pc, #176]	; (8001894 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	701a      	strb	r2, [r3, #0]
			falling_time = CO2ms;
 80017e6:	4b28      	ldr	r3, [pc, #160]	; (8001888 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	461a      	mov	r2, r3
 80017ec:	4b28      	ldr	r3, [pc, #160]	; (8001890 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80017ee:	601a      	str	r2, [r3, #0]
			rerising_time = 0;
 80017f0:	4b29      	ldr	r3, [pc, #164]	; (8001898 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
			rerising_check = 1;
 80017f6:	4b29      	ldr	r3, [pc, #164]	; (800189c <HAL_TIM_PeriodElapsedCallback+0x164>)
 80017f8:	2201      	movs	r2, #1
 80017fa:	701a      	strb	r2, [r3, #0]
		}
		if (rerising_check == 1 && CO2_Pin_State != OLD_CO2_Pin_State && CO2_Pin_State == 1){
 80017fc:	4b27      	ldr	r3, [pc, #156]	; (800189c <HAL_TIM_PeriodElapsedCallback+0x164>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d114      	bne.n	800182e <HAL_TIM_PeriodElapsedCallback+0xf6>
 8001804:	4b1d      	ldr	r3, [pc, #116]	; (800187c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001806:	781a      	ldrb	r2, [r3, #0]
 8001808:	4b1e      	ldr	r3, [pc, #120]	; (8001884 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	429a      	cmp	r2, r3
 800180e:	d00e      	beq.n	800182e <HAL_TIM_PeriodElapsedCallback+0xf6>
 8001810:	4b1a      	ldr	r3, [pc, #104]	; (800187c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d10a      	bne.n	800182e <HAL_TIM_PeriodElapsedCallback+0xf6>
			rerising_time = CO2ms;
 8001818:	4b1b      	ldr	r3, [pc, #108]	; (8001888 <HAL_TIM_PeriodElapsedCallback+0x150>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	461a      	mov	r2, r3
 800181e:	4b1e      	ldr	r3, [pc, #120]	; (8001898 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001820:	601a      	str	r2, [r3, #0]
			rerising_check = 0;
 8001822:	4b1e      	ldr	r3, [pc, #120]	; (800189c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001824:	2200      	movs	r2, #0
 8001826:	701a      	strb	r2, [r3, #0]
			rising_check = 1;
 8001828:	4b15      	ldr	r3, [pc, #84]	; (8001880 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800182a:	2201      	movs	r2, #1
 800182c:	701a      	strb	r2, [r3, #0]

		}



		OLD_CO2_Pin_State = CO2_Pin_State;
 800182e:	4b13      	ldr	r3, [pc, #76]	; (800187c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001830:	781a      	ldrb	r2, [r3, #0]
 8001832:	4b14      	ldr	r3, [pc, #80]	; (8001884 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001834:	701a      	strb	r2, [r3, #0]

		ms++;
 8001836:	4b1a      	ldr	r3, [pc, #104]	; (80018a0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	3301      	adds	r3, #1
 800183c:	b2da      	uxtb	r2, r3
 800183e:	4b18      	ldr	r3, [pc, #96]	; (80018a0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001840:	701a      	strb	r2, [r3, #0]
		CO2ms++;
 8001842:	4b11      	ldr	r3, [pc, #68]	; (8001888 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	3301      	adds	r3, #1
 8001848:	4a0f      	ldr	r2, [pc, #60]	; (8001888 <HAL_TIM_PeriodElapsedCallback+0x150>)
 800184a:	6013      	str	r3, [r2, #0]
		}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a14      	ldr	r2, [pc, #80]	; (80018a4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d101      	bne.n	800185a <HAL_TIM_PeriodElapsedCallback+0x122>
    HAL_IncTick();
 8001856:	f000 faa9 	bl	8001dac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800185a:	bf00      	nop
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40014400 	.word	0x40014400
 8001868:	40020000 	.word	0x40020000
 800186c:	20000000 	.word	0x20000000
 8001870:	20000202 	.word	0x20000202
 8001874:	40014800 	.word	0x40014800
 8001878:	40020800 	.word	0x40020800
 800187c:	2000020f 	.word	0x2000020f
 8001880:	2000020c 	.word	0x2000020c
 8001884:	20000210 	.word	0x20000210
 8001888:	20000204 	.word	0x20000204
 800188c:	20000324 	.word	0x20000324
 8001890:	20000320 	.word	0x20000320
 8001894:	2000020d 	.word	0x2000020d
 8001898:	20000328 	.word	0x20000328
 800189c:	2000020e 	.word	0x2000020e
 80018a0:	20000201 	.word	0x20000201
 80018a4:	40010000 	.word	0x40010000

080018a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018ac:	b672      	cpsid	i
}
 80018ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018b0:	e7fe      	b.n	80018b0 <Error_Handler+0x8>
	...

080018b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	607b      	str	r3, [r7, #4]
 80018be:	4b14      	ldr	r3, [pc, #80]	; (8001910 <HAL_MspInit+0x5c>)
 80018c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c2:	4a13      	ldr	r2, [pc, #76]	; (8001910 <HAL_MspInit+0x5c>)
 80018c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018c8:	6453      	str	r3, [r2, #68]	; 0x44
 80018ca:	4b11      	ldr	r3, [pc, #68]	; (8001910 <HAL_MspInit+0x5c>)
 80018cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018d2:	607b      	str	r3, [r7, #4]
 80018d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	603b      	str	r3, [r7, #0]
 80018da:	4b0d      	ldr	r3, [pc, #52]	; (8001910 <HAL_MspInit+0x5c>)
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	4a0c      	ldr	r2, [pc, #48]	; (8001910 <HAL_MspInit+0x5c>)
 80018e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018e4:	6413      	str	r3, [r2, #64]	; 0x40
 80018e6:	4b0a      	ldr	r3, [pc, #40]	; (8001910 <HAL_MspInit+0x5c>)
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ee:	603b      	str	r3, [r7, #0]
 80018f0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80018f2:	2007      	movs	r0, #7
 80018f4:	f000 fb4b 	bl	8001f8e <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80018f8:	2200      	movs	r2, #0
 80018fa:	2100      	movs	r1, #0
 80018fc:	2005      	movs	r0, #5
 80018fe:	f000 fb51 	bl	8001fa4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001902:	2005      	movs	r0, #5
 8001904:	f000 fb6a 	bl	8001fdc <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001908:	bf00      	nop
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40023800 	.word	0x40023800

08001914 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b08a      	sub	sp, #40	; 0x28
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191c:	f107 0314 	add.w	r3, r7, #20
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	60da      	str	r2, [r3, #12]
 800192a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a19      	ldr	r2, [pc, #100]	; (8001998 <HAL_I2C_MspInit+0x84>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d12b      	bne.n	800198e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	613b      	str	r3, [r7, #16]
 800193a:	4b18      	ldr	r3, [pc, #96]	; (800199c <HAL_I2C_MspInit+0x88>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	4a17      	ldr	r2, [pc, #92]	; (800199c <HAL_I2C_MspInit+0x88>)
 8001940:	f043 0302 	orr.w	r3, r3, #2
 8001944:	6313      	str	r3, [r2, #48]	; 0x30
 8001946:	4b15      	ldr	r3, [pc, #84]	; (800199c <HAL_I2C_MspInit+0x88>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	613b      	str	r3, [r7, #16]
 8001950:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001952:	23c0      	movs	r3, #192	; 0xc0
 8001954:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001956:	2312      	movs	r3, #18
 8001958:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800195a:	2301      	movs	r3, #1
 800195c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800195e:	2303      	movs	r3, #3
 8001960:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001962:	2304      	movs	r3, #4
 8001964:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001966:	f107 0314 	add.w	r3, r7, #20
 800196a:	4619      	mov	r1, r3
 800196c:	480c      	ldr	r0, [pc, #48]	; (80019a0 <HAL_I2C_MspInit+0x8c>)
 800196e:	f000 fb43 	bl	8001ff8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	4b09      	ldr	r3, [pc, #36]	; (800199c <HAL_I2C_MspInit+0x88>)
 8001978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197a:	4a08      	ldr	r2, [pc, #32]	; (800199c <HAL_I2C_MspInit+0x88>)
 800197c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001980:	6413      	str	r3, [r2, #64]	; 0x40
 8001982:	4b06      	ldr	r3, [pc, #24]	; (800199c <HAL_I2C_MspInit+0x88>)
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800198e:	bf00      	nop
 8001990:	3728      	adds	r7, #40	; 0x28
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40005400 	.word	0x40005400
 800199c:	40023800 	.word	0x40023800
 80019a0:	40020400 	.word	0x40020400

080019a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a18      	ldr	r2, [pc, #96]	; (8001a14 <HAL_TIM_Base_MspInit+0x70>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d116      	bne.n	80019e4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	4b17      	ldr	r3, [pc, #92]	; (8001a18 <HAL_TIM_Base_MspInit+0x74>)
 80019bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019be:	4a16      	ldr	r2, [pc, #88]	; (8001a18 <HAL_TIM_Base_MspInit+0x74>)
 80019c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019c4:	6453      	str	r3, [r2, #68]	; 0x44
 80019c6:	4b14      	ldr	r3, [pc, #80]	; (8001a18 <HAL_TIM_Base_MspInit+0x74>)
 80019c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80019d2:	2200      	movs	r2, #0
 80019d4:	2100      	movs	r1, #0
 80019d6:	2019      	movs	r0, #25
 80019d8:	f000 fae4 	bl	8001fa4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80019dc:	2019      	movs	r0, #25
 80019de:	f000 fafd 	bl	8001fdc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80019e2:	e012      	b.n	8001a0a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM11)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a0c      	ldr	r2, [pc, #48]	; (8001a1c <HAL_TIM_Base_MspInit+0x78>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d10d      	bne.n	8001a0a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	60bb      	str	r3, [r7, #8]
 80019f2:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <HAL_TIM_Base_MspInit+0x74>)
 80019f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f6:	4a08      	ldr	r2, [pc, #32]	; (8001a18 <HAL_TIM_Base_MspInit+0x74>)
 80019f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019fc:	6453      	str	r3, [r2, #68]	; 0x44
 80019fe:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <HAL_TIM_Base_MspInit+0x74>)
 8001a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a06:	60bb      	str	r3, [r7, #8]
 8001a08:	68bb      	ldr	r3, [r7, #8]
}
 8001a0a:	bf00      	nop
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40014400 	.word	0x40014400
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	40014800 	.word	0x40014800

08001a20 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08c      	sub	sp, #48	; 0x30
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001a30:	2200      	movs	r2, #0
 8001a32:	6879      	ldr	r1, [r7, #4]
 8001a34:	2019      	movs	r0, #25
 8001a36:	f000 fab5 	bl	8001fa4 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001a3a:	2019      	movs	r0, #25
 8001a3c:	f000 face 	bl	8001fdc <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001a40:	2300      	movs	r3, #0
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	4b1e      	ldr	r3, [pc, #120]	; (8001ac0 <HAL_InitTick+0xa0>)
 8001a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a48:	4a1d      	ldr	r2, [pc, #116]	; (8001ac0 <HAL_InitTick+0xa0>)
 8001a4a:	f043 0301 	orr.w	r3, r3, #1
 8001a4e:	6453      	str	r3, [r2, #68]	; 0x44
 8001a50:	4b1b      	ldr	r3, [pc, #108]	; (8001ac0 <HAL_InitTick+0xa0>)
 8001a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a54:	f003 0301 	and.w	r3, r3, #1
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a5c:	f107 0210 	add.w	r2, r7, #16
 8001a60:	f107 0314 	add.w	r3, r7, #20
 8001a64:	4611      	mov	r1, r2
 8001a66:	4618      	mov	r0, r3
 8001a68:	f001 fe84 	bl	8003774 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001a6c:	f001 fe6e 	bl	800374c <HAL_RCC_GetPCLK2Freq>
 8001a70:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a74:	4a13      	ldr	r2, [pc, #76]	; (8001ac4 <HAL_InitTick+0xa4>)
 8001a76:	fba2 2303 	umull	r2, r3, r2, r3
 8001a7a:	0c9b      	lsrs	r3, r3, #18
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001a80:	4b11      	ldr	r3, [pc, #68]	; (8001ac8 <HAL_InitTick+0xa8>)
 8001a82:	4a12      	ldr	r2, [pc, #72]	; (8001acc <HAL_InitTick+0xac>)
 8001a84:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001a86:	4b10      	ldr	r3, [pc, #64]	; (8001ac8 <HAL_InitTick+0xa8>)
 8001a88:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a8c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001a8e:	4a0e      	ldr	r2, [pc, #56]	; (8001ac8 <HAL_InitTick+0xa8>)
 8001a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a92:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001a94:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <HAL_InitTick+0xa8>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a9a:	4b0b      	ldr	r3, [pc, #44]	; (8001ac8 <HAL_InitTick+0xa8>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001aa0:	4809      	ldr	r0, [pc, #36]	; (8001ac8 <HAL_InitTick+0xa8>)
 8001aa2:	f001 fe99 	bl	80037d8 <HAL_TIM_Base_Init>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d104      	bne.n	8001ab6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001aac:	4806      	ldr	r0, [pc, #24]	; (8001ac8 <HAL_InitTick+0xa8>)
 8001aae:	f001 fee3 	bl	8003878 <HAL_TIM_Base_Start_IT>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	e000      	b.n	8001ab8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3730      	adds	r7, #48	; 0x30
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	431bde83 	.word	0x431bde83
 8001ac8:	2000032c 	.word	0x2000032c
 8001acc:	40010000 	.word	0x40010000

08001ad0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ad4:	e7fe      	b.n	8001ad4 <NMI_Handler+0x4>

08001ad6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ada:	e7fe      	b.n	8001ada <HardFault_Handler+0x4>

08001adc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ae0:	e7fe      	b.n	8001ae0 <MemManage_Handler+0x4>

08001ae2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ae6:	e7fe      	b.n	8001ae6 <BusFault_Handler+0x4>

08001ae8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aec:	e7fe      	b.n	8001aec <UsageFault_Handler+0x4>

08001aee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aee:	b480      	push	{r7}
 8001af0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b00:	bf00      	nop
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b1c:	bf00      	nop
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001b26:	b480      	push	{r7}
 8001b28:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b38:	4803      	ldr	r0, [pc, #12]	; (8001b48 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8001b3a:	f001 feff 	bl	800393c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8001b3e:	4803      	ldr	r0, [pc, #12]	; (8001b4c <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001b40:	f001 fefc 	bl	800393c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001b44:	bf00      	nop
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	2000032c 	.word	0x2000032c
 8001b4c:	20000274 	.word	0x20000274

08001b50 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001b54:	4802      	ldr	r0, [pc, #8]	; (8001b60 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001b56:	f001 fef1 	bl	800393c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	200002d0 	.word	0x200002d0

08001b64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
	return 1;
 8001b68:	2301      	movs	r3, #1
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <_kill>:

int _kill(int pid, int sig)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b7e:	f002 f8a1 	bl	8003cc4 <__errno>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2216      	movs	r2, #22
 8001b86:	601a      	str	r2, [r3, #0]
	return -1;
 8001b88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <_exit>:

void _exit (int status)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f7ff ffe7 	bl	8001b74 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ba6:	e7fe      	b.n	8001ba6 <_exit+0x12>

08001ba8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]
 8001bb8:	e00a      	b.n	8001bd0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001bba:	f3af 8000 	nop.w
 8001bbe:	4601      	mov	r1, r0
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	1c5a      	adds	r2, r3, #1
 8001bc4:	60ba      	str	r2, [r7, #8]
 8001bc6:	b2ca      	uxtb	r2, r1
 8001bc8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	617b      	str	r3, [r7, #20]
 8001bd0:	697a      	ldr	r2, [r7, #20]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	dbf0      	blt.n	8001bba <_read+0x12>
	}

return len;
 8001bd8:	687b      	ldr	r3, [r7, #4]
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b086      	sub	sp, #24
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	60f8      	str	r0, [r7, #12]
 8001bea:	60b9      	str	r1, [r7, #8]
 8001bec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bee:	2300      	movs	r3, #0
 8001bf0:	617b      	str	r3, [r7, #20]
 8001bf2:	e009      	b.n	8001c08 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	1c5a      	adds	r2, r3, #1
 8001bf8:	60ba      	str	r2, [r7, #8]
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	3301      	adds	r3, #1
 8001c06:	617b      	str	r3, [r7, #20]
 8001c08:	697a      	ldr	r2, [r7, #20]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	dbf1      	blt.n	8001bf4 <_write+0x12>
	}
	return len;
 8001c10:	687b      	ldr	r3, [r7, #4]
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3718      	adds	r7, #24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <_close>:

int _close(int file)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
	return -1;
 8001c22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr

08001c32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c32:	b480      	push	{r7}
 8001c34:	b083      	sub	sp, #12
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
 8001c3a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c42:	605a      	str	r2, [r3, #4]
	return 0;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <_isatty>:

int _isatty(int file)
{
 8001c52:	b480      	push	{r7}
 8001c54:	b083      	sub	sp, #12
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
	return 1;
 8001c5a:	2301      	movs	r3, #1
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
	return 0;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3714      	adds	r7, #20
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
	...

08001c84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c8c:	4a14      	ldr	r2, [pc, #80]	; (8001ce0 <_sbrk+0x5c>)
 8001c8e:	4b15      	ldr	r3, [pc, #84]	; (8001ce4 <_sbrk+0x60>)
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c98:	4b13      	ldr	r3, [pc, #76]	; (8001ce8 <_sbrk+0x64>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d102      	bne.n	8001ca6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ca0:	4b11      	ldr	r3, [pc, #68]	; (8001ce8 <_sbrk+0x64>)
 8001ca2:	4a12      	ldr	r2, [pc, #72]	; (8001cec <_sbrk+0x68>)
 8001ca4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ca6:	4b10      	ldr	r3, [pc, #64]	; (8001ce8 <_sbrk+0x64>)
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4413      	add	r3, r2
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d207      	bcs.n	8001cc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cb4:	f002 f806 	bl	8003cc4 <__errno>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	220c      	movs	r2, #12
 8001cbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cc2:	e009      	b.n	8001cd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cc4:	4b08      	ldr	r3, [pc, #32]	; (8001ce8 <_sbrk+0x64>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cca:	4b07      	ldr	r3, [pc, #28]	; (8001ce8 <_sbrk+0x64>)
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	4a05      	ldr	r2, [pc, #20]	; (8001ce8 <_sbrk+0x64>)
 8001cd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3718      	adds	r7, #24
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	20018000 	.word	0x20018000
 8001ce4:	00000400 	.word	0x00000400
 8001ce8:	20000214 	.word	0x20000214
 8001cec:	20000388 	.word	0x20000388

08001cf0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cf4:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <SystemInit+0x20>)
 8001cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cfa:	4a05      	ldr	r2, [pc, #20]	; (8001d10 <SystemInit+0x20>)
 8001cfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d04:	bf00      	nop
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	e000ed00 	.word	0xe000ed00

08001d14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d4c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d18:	480d      	ldr	r0, [pc, #52]	; (8001d50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d1a:	490e      	ldr	r1, [pc, #56]	; (8001d54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d1c:	4a0e      	ldr	r2, [pc, #56]	; (8001d58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d20:	e002      	b.n	8001d28 <LoopCopyDataInit>

08001d22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d26:	3304      	adds	r3, #4

08001d28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d2c:	d3f9      	bcc.n	8001d22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d2e:	4a0b      	ldr	r2, [pc, #44]	; (8001d5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d30:	4c0b      	ldr	r4, [pc, #44]	; (8001d60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d34:	e001      	b.n	8001d3a <LoopFillZerobss>

08001d36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d38:	3204      	adds	r2, #4

08001d3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d3c:	d3fb      	bcc.n	8001d36 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d3e:	f7ff ffd7 	bl	8001cf0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d42:	f001 ffc5 	bl	8003cd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d46:	f7ff fad7 	bl	80012f8 <main>
  bx  lr    
 8001d4a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d4c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001d50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d54:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001d58:	08006eac 	.word	0x08006eac
  ldr r2, =_sbss
 8001d5c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001d60:	20000388 	.word	0x20000388

08001d64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d64:	e7fe      	b.n	8001d64 <ADC_IRQHandler>
	...

08001d68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d6c:	4b0e      	ldr	r3, [pc, #56]	; (8001da8 <HAL_Init+0x40>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a0d      	ldr	r2, [pc, #52]	; (8001da8 <HAL_Init+0x40>)
 8001d72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d78:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <HAL_Init+0x40>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a0a      	ldr	r2, [pc, #40]	; (8001da8 <HAL_Init+0x40>)
 8001d7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d84:	4b08      	ldr	r3, [pc, #32]	; (8001da8 <HAL_Init+0x40>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a07      	ldr	r2, [pc, #28]	; (8001da8 <HAL_Init+0x40>)
 8001d8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d90:	2003      	movs	r0, #3
 8001d92:	f000 f8fc 	bl	8001f8e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d96:	2000      	movs	r0, #0
 8001d98:	f7ff fe42 	bl	8001a20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d9c:	f7ff fd8a 	bl	80018b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	40023c00 	.word	0x40023c00

08001dac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001db0:	4b06      	ldr	r3, [pc, #24]	; (8001dcc <HAL_IncTick+0x20>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	461a      	mov	r2, r3
 8001db6:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <HAL_IncTick+0x24>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4413      	add	r3, r2
 8001dbc:	4a04      	ldr	r2, [pc, #16]	; (8001dd0 <HAL_IncTick+0x24>)
 8001dbe:	6013      	str	r3, [r2, #0]
}
 8001dc0:	bf00      	nop
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	2000000c 	.word	0x2000000c
 8001dd0:	20000374 	.word	0x20000374

08001dd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  return uwTick;
 8001dd8:	4b03      	ldr	r3, [pc, #12]	; (8001de8 <HAL_GetTick+0x14>)
 8001dda:	681b      	ldr	r3, [r3, #0]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	20000374 	.word	0x20000374

08001dec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001df4:	f7ff ffee 	bl	8001dd4 <HAL_GetTick>
 8001df8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e04:	d005      	beq.n	8001e12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e06:	4b0a      	ldr	r3, [pc, #40]	; (8001e30 <HAL_Delay+0x44>)
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	4413      	add	r3, r2
 8001e10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e12:	bf00      	nop
 8001e14:	f7ff ffde 	bl	8001dd4 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d8f7      	bhi.n	8001e14 <HAL_Delay+0x28>
  {
  }
}
 8001e24:	bf00      	nop
 8001e26:	bf00      	nop
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	2000000c 	.word	0x2000000c

08001e34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f003 0307 	and.w	r3, r3, #7
 8001e42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e44:	4b0c      	ldr	r3, [pc, #48]	; (8001e78 <__NVIC_SetPriorityGrouping+0x44>)
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e4a:	68ba      	ldr	r2, [r7, #8]
 8001e4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e50:	4013      	ands	r3, r2
 8001e52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e66:	4a04      	ldr	r2, [pc, #16]	; (8001e78 <__NVIC_SetPriorityGrouping+0x44>)
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	60d3      	str	r3, [r2, #12]
}
 8001e6c:	bf00      	nop
 8001e6e:	3714      	adds	r7, #20
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	e000ed00 	.word	0xe000ed00

08001e7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e80:	4b04      	ldr	r3, [pc, #16]	; (8001e94 <__NVIC_GetPriorityGrouping+0x18>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	0a1b      	lsrs	r3, r3, #8
 8001e86:	f003 0307 	and.w	r3, r3, #7
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	e000ed00 	.word	0xe000ed00

08001e98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	db0b      	blt.n	8001ec2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eaa:	79fb      	ldrb	r3, [r7, #7]
 8001eac:	f003 021f 	and.w	r2, r3, #31
 8001eb0:	4907      	ldr	r1, [pc, #28]	; (8001ed0 <__NVIC_EnableIRQ+0x38>)
 8001eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb6:	095b      	lsrs	r3, r3, #5
 8001eb8:	2001      	movs	r0, #1
 8001eba:	fa00 f202 	lsl.w	r2, r0, r2
 8001ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ec2:	bf00      	nop
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	e000e100 	.word	0xe000e100

08001ed4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	4603      	mov	r3, r0
 8001edc:	6039      	str	r1, [r7, #0]
 8001ede:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	db0a      	blt.n	8001efe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	b2da      	uxtb	r2, r3
 8001eec:	490c      	ldr	r1, [pc, #48]	; (8001f20 <__NVIC_SetPriority+0x4c>)
 8001eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef2:	0112      	lsls	r2, r2, #4
 8001ef4:	b2d2      	uxtb	r2, r2
 8001ef6:	440b      	add	r3, r1
 8001ef8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001efc:	e00a      	b.n	8001f14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	4908      	ldr	r1, [pc, #32]	; (8001f24 <__NVIC_SetPriority+0x50>)
 8001f04:	79fb      	ldrb	r3, [r7, #7]
 8001f06:	f003 030f 	and.w	r3, r3, #15
 8001f0a:	3b04      	subs	r3, #4
 8001f0c:	0112      	lsls	r2, r2, #4
 8001f0e:	b2d2      	uxtb	r2, r2
 8001f10:	440b      	add	r3, r1
 8001f12:	761a      	strb	r2, [r3, #24]
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	e000e100 	.word	0xe000e100
 8001f24:	e000ed00 	.word	0xe000ed00

08001f28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b089      	sub	sp, #36	; 0x24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	f1c3 0307 	rsb	r3, r3, #7
 8001f42:	2b04      	cmp	r3, #4
 8001f44:	bf28      	it	cs
 8001f46:	2304      	movcs	r3, #4
 8001f48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	3304      	adds	r3, #4
 8001f4e:	2b06      	cmp	r3, #6
 8001f50:	d902      	bls.n	8001f58 <NVIC_EncodePriority+0x30>
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	3b03      	subs	r3, #3
 8001f56:	e000      	b.n	8001f5a <NVIC_EncodePriority+0x32>
 8001f58:	2300      	movs	r3, #0
 8001f5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	43da      	mvns	r2, r3
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	401a      	ands	r2, r3
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7a:	43d9      	mvns	r1, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f80:	4313      	orrs	r3, r2
         );
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3724      	adds	r7, #36	; 0x24
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b082      	sub	sp, #8
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f7ff ff4c 	bl	8001e34 <__NVIC_SetPriorityGrouping>
}
 8001f9c:	bf00      	nop
 8001f9e:	3708      	adds	r7, #8
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	4603      	mov	r3, r0
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
 8001fb0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fb6:	f7ff ff61 	bl	8001e7c <__NVIC_GetPriorityGrouping>
 8001fba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	68b9      	ldr	r1, [r7, #8]
 8001fc0:	6978      	ldr	r0, [r7, #20]
 8001fc2:	f7ff ffb1 	bl	8001f28 <NVIC_EncodePriority>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fcc:	4611      	mov	r1, r2
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff ff80 	bl	8001ed4 <__NVIC_SetPriority>
}
 8001fd4:	bf00      	nop
 8001fd6:	3718      	adds	r7, #24
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff ff54 	bl	8001e98 <__NVIC_EnableIRQ>
}
 8001ff0:	bf00      	nop
 8001ff2:	3708      	adds	r7, #8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b089      	sub	sp, #36	; 0x24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002002:	2300      	movs	r3, #0
 8002004:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002006:	2300      	movs	r3, #0
 8002008:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800200a:	2300      	movs	r3, #0
 800200c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800200e:	2300      	movs	r3, #0
 8002010:	61fb      	str	r3, [r7, #28]
 8002012:	e159      	b.n	80022c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002014:	2201      	movs	r2, #1
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	697a      	ldr	r2, [r7, #20]
 8002024:	4013      	ands	r3, r2
 8002026:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	429a      	cmp	r2, r3
 800202e:	f040 8148 	bne.w	80022c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f003 0303 	and.w	r3, r3, #3
 800203a:	2b01      	cmp	r3, #1
 800203c:	d005      	beq.n	800204a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002046:	2b02      	cmp	r3, #2
 8002048:	d130      	bne.n	80020ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	2203      	movs	r2, #3
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	43db      	mvns	r3, r3
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	4013      	ands	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	68da      	ldr	r2, [r3, #12]
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	4313      	orrs	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002080:	2201      	movs	r2, #1
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	43db      	mvns	r3, r3
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	4013      	ands	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	091b      	lsrs	r3, r3, #4
 8002096:	f003 0201 	and.w	r2, r3, #1
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f003 0303 	and.w	r3, r3, #3
 80020b4:	2b03      	cmp	r3, #3
 80020b6:	d017      	beq.n	80020e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	2203      	movs	r2, #3
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	43db      	mvns	r3, r3
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	4013      	ands	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	689a      	ldr	r2, [r3, #8]
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4313      	orrs	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f003 0303 	and.w	r3, r3, #3
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d123      	bne.n	800213c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	08da      	lsrs	r2, r3, #3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	3208      	adds	r2, #8
 80020fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002100:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	f003 0307 	and.w	r3, r3, #7
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	220f      	movs	r2, #15
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	43db      	mvns	r3, r3
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	4013      	ands	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	691a      	ldr	r2, [r3, #16]
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	f003 0307 	and.w	r3, r3, #7
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	4313      	orrs	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	08da      	lsrs	r2, r3, #3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	3208      	adds	r2, #8
 8002136:	69b9      	ldr	r1, [r7, #24]
 8002138:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	2203      	movs	r2, #3
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	43db      	mvns	r3, r3
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	4013      	ands	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f003 0203 	and.w	r2, r3, #3
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	4313      	orrs	r3, r2
 8002168:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002178:	2b00      	cmp	r3, #0
 800217a:	f000 80a2 	beq.w	80022c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	4b57      	ldr	r3, [pc, #348]	; (80022e0 <HAL_GPIO_Init+0x2e8>)
 8002184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002186:	4a56      	ldr	r2, [pc, #344]	; (80022e0 <HAL_GPIO_Init+0x2e8>)
 8002188:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800218c:	6453      	str	r3, [r2, #68]	; 0x44
 800218e:	4b54      	ldr	r3, [pc, #336]	; (80022e0 <HAL_GPIO_Init+0x2e8>)
 8002190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002192:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800219a:	4a52      	ldr	r2, [pc, #328]	; (80022e4 <HAL_GPIO_Init+0x2ec>)
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	089b      	lsrs	r3, r3, #2
 80021a0:	3302      	adds	r3, #2
 80021a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	f003 0303 	and.w	r3, r3, #3
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	220f      	movs	r2, #15
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	43db      	mvns	r3, r3
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	4013      	ands	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a49      	ldr	r2, [pc, #292]	; (80022e8 <HAL_GPIO_Init+0x2f0>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d019      	beq.n	80021fa <HAL_GPIO_Init+0x202>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a48      	ldr	r2, [pc, #288]	; (80022ec <HAL_GPIO_Init+0x2f4>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d013      	beq.n	80021f6 <HAL_GPIO_Init+0x1fe>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a47      	ldr	r2, [pc, #284]	; (80022f0 <HAL_GPIO_Init+0x2f8>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d00d      	beq.n	80021f2 <HAL_GPIO_Init+0x1fa>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a46      	ldr	r2, [pc, #280]	; (80022f4 <HAL_GPIO_Init+0x2fc>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d007      	beq.n	80021ee <HAL_GPIO_Init+0x1f6>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a45      	ldr	r2, [pc, #276]	; (80022f8 <HAL_GPIO_Init+0x300>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d101      	bne.n	80021ea <HAL_GPIO_Init+0x1f2>
 80021e6:	2304      	movs	r3, #4
 80021e8:	e008      	b.n	80021fc <HAL_GPIO_Init+0x204>
 80021ea:	2307      	movs	r3, #7
 80021ec:	e006      	b.n	80021fc <HAL_GPIO_Init+0x204>
 80021ee:	2303      	movs	r3, #3
 80021f0:	e004      	b.n	80021fc <HAL_GPIO_Init+0x204>
 80021f2:	2302      	movs	r3, #2
 80021f4:	e002      	b.n	80021fc <HAL_GPIO_Init+0x204>
 80021f6:	2301      	movs	r3, #1
 80021f8:	e000      	b.n	80021fc <HAL_GPIO_Init+0x204>
 80021fa:	2300      	movs	r3, #0
 80021fc:	69fa      	ldr	r2, [r7, #28]
 80021fe:	f002 0203 	and.w	r2, r2, #3
 8002202:	0092      	lsls	r2, r2, #2
 8002204:	4093      	lsls	r3, r2
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	4313      	orrs	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800220c:	4935      	ldr	r1, [pc, #212]	; (80022e4 <HAL_GPIO_Init+0x2ec>)
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	089b      	lsrs	r3, r3, #2
 8002212:	3302      	adds	r3, #2
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800221a:	4b38      	ldr	r3, [pc, #224]	; (80022fc <HAL_GPIO_Init+0x304>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	43db      	mvns	r3, r3
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	4013      	ands	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d003      	beq.n	800223e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	4313      	orrs	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800223e:	4a2f      	ldr	r2, [pc, #188]	; (80022fc <HAL_GPIO_Init+0x304>)
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002244:	4b2d      	ldr	r3, [pc, #180]	; (80022fc <HAL_GPIO_Init+0x304>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	43db      	mvns	r3, r3
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	4013      	ands	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d003      	beq.n	8002268 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	4313      	orrs	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002268:	4a24      	ldr	r2, [pc, #144]	; (80022fc <HAL_GPIO_Init+0x304>)
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800226e:	4b23      	ldr	r3, [pc, #140]	; (80022fc <HAL_GPIO_Init+0x304>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	43db      	mvns	r3, r3
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	4013      	ands	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d003      	beq.n	8002292 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	4313      	orrs	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002292:	4a1a      	ldr	r2, [pc, #104]	; (80022fc <HAL_GPIO_Init+0x304>)
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002298:	4b18      	ldr	r3, [pc, #96]	; (80022fc <HAL_GPIO_Init+0x304>)
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	43db      	mvns	r3, r3
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4013      	ands	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d003      	beq.n	80022bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022bc:	4a0f      	ldr	r2, [pc, #60]	; (80022fc <HAL_GPIO_Init+0x304>)
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	3301      	adds	r3, #1
 80022c6:	61fb      	str	r3, [r7, #28]
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	2b0f      	cmp	r3, #15
 80022cc:	f67f aea2 	bls.w	8002014 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022d0:	bf00      	nop
 80022d2:	bf00      	nop
 80022d4:	3724      	adds	r7, #36	; 0x24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	40023800 	.word	0x40023800
 80022e4:	40013800 	.word	0x40013800
 80022e8:	40020000 	.word	0x40020000
 80022ec:	40020400 	.word	0x40020400
 80022f0:	40020800 	.word	0x40020800
 80022f4:	40020c00 	.word	0x40020c00
 80022f8:	40021000 	.word	0x40021000
 80022fc:	40013c00 	.word	0x40013c00

08002300 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	460b      	mov	r3, r1
 800230a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	691a      	ldr	r2, [r3, #16]
 8002310:	887b      	ldrh	r3, [r7, #2]
 8002312:	4013      	ands	r3, r2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d002      	beq.n	800231e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002318:	2301      	movs	r3, #1
 800231a:	73fb      	strb	r3, [r7, #15]
 800231c:	e001      	b.n	8002322 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800231e:	2300      	movs	r3, #0
 8002320:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002322:	7bfb      	ldrb	r3, [r7, #15]
}
 8002324:	4618      	mov	r0, r3
 8002326:	3714      	adds	r7, #20
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	460b      	mov	r3, r1
 800233a:	807b      	strh	r3, [r7, #2]
 800233c:	4613      	mov	r3, r2
 800233e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002340:	787b      	ldrb	r3, [r7, #1]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d003      	beq.n	800234e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002346:	887a      	ldrh	r2, [r7, #2]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800234c:	e003      	b.n	8002356 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800234e:	887b      	ldrh	r3, [r7, #2]
 8002350:	041a      	lsls	r2, r3, #16
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	619a      	str	r2, [r3, #24]
}
 8002356:	bf00      	nop
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr

08002362 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002362:	b480      	push	{r7}
 8002364:	b085      	sub	sp, #20
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
 800236a:	460b      	mov	r3, r1
 800236c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002374:	887a      	ldrh	r2, [r7, #2]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	4013      	ands	r3, r2
 800237a:	041a      	lsls	r2, r3, #16
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	43d9      	mvns	r1, r3
 8002380:	887b      	ldrh	r3, [r7, #2]
 8002382:	400b      	ands	r3, r1
 8002384:	431a      	orrs	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	619a      	str	r2, [r3, #24]
}
 800238a:	bf00      	nop
 800238c:	3714      	adds	r7, #20
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
	...

08002398 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d101      	bne.n	80023aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e12b      	b.n	8002602 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d106      	bne.n	80023c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f7ff faa8 	bl	8001914 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2224      	movs	r2, #36	; 0x24
 80023c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f022 0201 	bic.w	r2, r2, #1
 80023da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80023fc:	f001 f992 	bl	8003724 <HAL_RCC_GetPCLK1Freq>
 8002400:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	4a81      	ldr	r2, [pc, #516]	; (800260c <HAL_I2C_Init+0x274>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d807      	bhi.n	800241c <HAL_I2C_Init+0x84>
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	4a80      	ldr	r2, [pc, #512]	; (8002610 <HAL_I2C_Init+0x278>)
 8002410:	4293      	cmp	r3, r2
 8002412:	bf94      	ite	ls
 8002414:	2301      	movls	r3, #1
 8002416:	2300      	movhi	r3, #0
 8002418:	b2db      	uxtb	r3, r3
 800241a:	e006      	b.n	800242a <HAL_I2C_Init+0x92>
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	4a7d      	ldr	r2, [pc, #500]	; (8002614 <HAL_I2C_Init+0x27c>)
 8002420:	4293      	cmp	r3, r2
 8002422:	bf94      	ite	ls
 8002424:	2301      	movls	r3, #1
 8002426:	2300      	movhi	r3, #0
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e0e7      	b.n	8002602 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	4a78      	ldr	r2, [pc, #480]	; (8002618 <HAL_I2C_Init+0x280>)
 8002436:	fba2 2303 	umull	r2, r3, r2, r3
 800243a:	0c9b      	lsrs	r3, r3, #18
 800243c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68ba      	ldr	r2, [r7, #8]
 800244e:	430a      	orrs	r2, r1
 8002450:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	6a1b      	ldr	r3, [r3, #32]
 8002458:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	4a6a      	ldr	r2, [pc, #424]	; (800260c <HAL_I2C_Init+0x274>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d802      	bhi.n	800246c <HAL_I2C_Init+0xd4>
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	3301      	adds	r3, #1
 800246a:	e009      	b.n	8002480 <HAL_I2C_Init+0xe8>
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002472:	fb02 f303 	mul.w	r3, r2, r3
 8002476:	4a69      	ldr	r2, [pc, #420]	; (800261c <HAL_I2C_Init+0x284>)
 8002478:	fba2 2303 	umull	r2, r3, r2, r3
 800247c:	099b      	lsrs	r3, r3, #6
 800247e:	3301      	adds	r3, #1
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	6812      	ldr	r2, [r2, #0]
 8002484:	430b      	orrs	r3, r1
 8002486:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	69db      	ldr	r3, [r3, #28]
 800248e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002492:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	495c      	ldr	r1, [pc, #368]	; (800260c <HAL_I2C_Init+0x274>)
 800249c:	428b      	cmp	r3, r1
 800249e:	d819      	bhi.n	80024d4 <HAL_I2C_Init+0x13c>
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	1e59      	subs	r1, r3, #1
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80024ae:	1c59      	adds	r1, r3, #1
 80024b0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80024b4:	400b      	ands	r3, r1
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d00a      	beq.n	80024d0 <HAL_I2C_Init+0x138>
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	1e59      	subs	r1, r3, #1
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80024c8:	3301      	adds	r3, #1
 80024ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024ce:	e051      	b.n	8002574 <HAL_I2C_Init+0x1dc>
 80024d0:	2304      	movs	r3, #4
 80024d2:	e04f      	b.n	8002574 <HAL_I2C_Init+0x1dc>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d111      	bne.n	8002500 <HAL_I2C_Init+0x168>
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	1e58      	subs	r0, r3, #1
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6859      	ldr	r1, [r3, #4]
 80024e4:	460b      	mov	r3, r1
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	440b      	add	r3, r1
 80024ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80024ee:	3301      	adds	r3, #1
 80024f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	bf0c      	ite	eq
 80024f8:	2301      	moveq	r3, #1
 80024fa:	2300      	movne	r3, #0
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	e012      	b.n	8002526 <HAL_I2C_Init+0x18e>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	1e58      	subs	r0, r3, #1
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6859      	ldr	r1, [r3, #4]
 8002508:	460b      	mov	r3, r1
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	440b      	add	r3, r1
 800250e:	0099      	lsls	r1, r3, #2
 8002510:	440b      	add	r3, r1
 8002512:	fbb0 f3f3 	udiv	r3, r0, r3
 8002516:	3301      	adds	r3, #1
 8002518:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800251c:	2b00      	cmp	r3, #0
 800251e:	bf0c      	ite	eq
 8002520:	2301      	moveq	r3, #1
 8002522:	2300      	movne	r3, #0
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <HAL_I2C_Init+0x196>
 800252a:	2301      	movs	r3, #1
 800252c:	e022      	b.n	8002574 <HAL_I2C_Init+0x1dc>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d10e      	bne.n	8002554 <HAL_I2C_Init+0x1bc>
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	1e58      	subs	r0, r3, #1
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6859      	ldr	r1, [r3, #4]
 800253e:	460b      	mov	r3, r1
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	440b      	add	r3, r1
 8002544:	fbb0 f3f3 	udiv	r3, r0, r3
 8002548:	3301      	adds	r3, #1
 800254a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800254e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002552:	e00f      	b.n	8002574 <HAL_I2C_Init+0x1dc>
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	1e58      	subs	r0, r3, #1
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6859      	ldr	r1, [r3, #4]
 800255c:	460b      	mov	r3, r1
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	440b      	add	r3, r1
 8002562:	0099      	lsls	r1, r3, #2
 8002564:	440b      	add	r3, r1
 8002566:	fbb0 f3f3 	udiv	r3, r0, r3
 800256a:	3301      	adds	r3, #1
 800256c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002570:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002574:	6879      	ldr	r1, [r7, #4]
 8002576:	6809      	ldr	r1, [r1, #0]
 8002578:	4313      	orrs	r3, r2
 800257a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	69da      	ldr	r2, [r3, #28]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a1b      	ldr	r3, [r3, #32]
 800258e:	431a      	orrs	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	430a      	orrs	r2, r1
 8002596:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80025a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	6911      	ldr	r1, [r2, #16]
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	68d2      	ldr	r2, [r2, #12]
 80025ae:	4311      	orrs	r1, r2
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	6812      	ldr	r2, [r2, #0]
 80025b4:	430b      	orrs	r3, r1
 80025b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	695a      	ldr	r2, [r3, #20]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	431a      	orrs	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	430a      	orrs	r2, r1
 80025d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f042 0201 	orr.w	r2, r2, #1
 80025e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2220      	movs	r2, #32
 80025ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	000186a0 	.word	0x000186a0
 8002610:	001e847f 	.word	0x001e847f
 8002614:	003d08ff 	.word	0x003d08ff
 8002618:	431bde83 	.word	0x431bde83
 800261c:	10624dd3 	.word	0x10624dd3

08002620 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b088      	sub	sp, #32
 8002624:	af02      	add	r7, sp, #8
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	607a      	str	r2, [r7, #4]
 800262a:	461a      	mov	r2, r3
 800262c:	460b      	mov	r3, r1
 800262e:	817b      	strh	r3, [r7, #10]
 8002630:	4613      	mov	r3, r2
 8002632:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002634:	f7ff fbce 	bl	8001dd4 <HAL_GetTick>
 8002638:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b20      	cmp	r3, #32
 8002644:	f040 80e0 	bne.w	8002808 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	9300      	str	r3, [sp, #0]
 800264c:	2319      	movs	r3, #25
 800264e:	2201      	movs	r2, #1
 8002650:	4970      	ldr	r1, [pc, #448]	; (8002814 <HAL_I2C_Master_Transmit+0x1f4>)
 8002652:	68f8      	ldr	r0, [r7, #12]
 8002654:	f000 fa92 	bl	8002b7c <I2C_WaitOnFlagUntilTimeout>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800265e:	2302      	movs	r3, #2
 8002660:	e0d3      	b.n	800280a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002668:	2b01      	cmp	r3, #1
 800266a:	d101      	bne.n	8002670 <HAL_I2C_Master_Transmit+0x50>
 800266c:	2302      	movs	r3, #2
 800266e:	e0cc      	b.n	800280a <HAL_I2C_Master_Transmit+0x1ea>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	2b01      	cmp	r3, #1
 8002684:	d007      	beq.n	8002696 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f042 0201 	orr.w	r2, r2, #1
 8002694:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2221      	movs	r2, #33	; 0x21
 80026aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2210      	movs	r2, #16
 80026b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	893a      	ldrh	r2, [r7, #8]
 80026c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	4a50      	ldr	r2, [pc, #320]	; (8002818 <HAL_I2C_Master_Transmit+0x1f8>)
 80026d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80026d8:	8979      	ldrh	r1, [r7, #10]
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	6a3a      	ldr	r2, [r7, #32]
 80026de:	68f8      	ldr	r0, [r7, #12]
 80026e0:	f000 f9ca 	bl	8002a78 <I2C_MasterRequestWrite>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e08d      	b.n	800280a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026ee:	2300      	movs	r3, #0
 80026f0:	613b      	str	r3, [r7, #16]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	695b      	ldr	r3, [r3, #20]
 80026f8:	613b      	str	r3, [r7, #16]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	613b      	str	r3, [r7, #16]
 8002702:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002704:	e066      	b.n	80027d4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002706:	697a      	ldr	r2, [r7, #20]
 8002708:	6a39      	ldr	r1, [r7, #32]
 800270a:	68f8      	ldr	r0, [r7, #12]
 800270c:	f000 fb0c 	bl	8002d28 <I2C_WaitOnTXEFlagUntilTimeout>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00d      	beq.n	8002732 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	2b04      	cmp	r3, #4
 800271c:	d107      	bne.n	800272e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800272c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e06b      	b.n	800280a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002736:	781a      	ldrb	r2, [r3, #0]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002742:	1c5a      	adds	r2, r3, #1
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800274c:	b29b      	uxth	r3, r3
 800274e:	3b01      	subs	r3, #1
 8002750:	b29a      	uxth	r2, r3
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800275a:	3b01      	subs	r3, #1
 800275c:	b29a      	uxth	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	695b      	ldr	r3, [r3, #20]
 8002768:	f003 0304 	and.w	r3, r3, #4
 800276c:	2b04      	cmp	r3, #4
 800276e:	d11b      	bne.n	80027a8 <HAL_I2C_Master_Transmit+0x188>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002774:	2b00      	cmp	r3, #0
 8002776:	d017      	beq.n	80027a8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277c:	781a      	ldrb	r2, [r3, #0]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002788:	1c5a      	adds	r2, r3, #1
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002792:	b29b      	uxth	r3, r3
 8002794:	3b01      	subs	r3, #1
 8002796:	b29a      	uxth	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a0:	3b01      	subs	r3, #1
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027a8:	697a      	ldr	r2, [r7, #20]
 80027aa:	6a39      	ldr	r1, [r7, #32]
 80027ac:	68f8      	ldr	r0, [r7, #12]
 80027ae:	f000 fafc 	bl	8002daa <I2C_WaitOnBTFFlagUntilTimeout>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d00d      	beq.n	80027d4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027bc:	2b04      	cmp	r3, #4
 80027be:	d107      	bne.n	80027d0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027ce:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e01a      	b.n	800280a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d194      	bne.n	8002706 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2220      	movs	r2, #32
 80027f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002804:	2300      	movs	r3, #0
 8002806:	e000      	b.n	800280a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002808:	2302      	movs	r3, #2
  }
}
 800280a:	4618      	mov	r0, r3
 800280c:	3718      	adds	r7, #24
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	00100002 	.word	0x00100002
 8002818:	ffff0000 	.word	0xffff0000

0800281c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b08a      	sub	sp, #40	; 0x28
 8002820:	af02      	add	r7, sp, #8
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	607a      	str	r2, [r7, #4]
 8002826:	603b      	str	r3, [r7, #0]
 8002828:	460b      	mov	r3, r1
 800282a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800282c:	f7ff fad2 	bl	8001dd4 <HAL_GetTick>
 8002830:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002832:	2301      	movs	r3, #1
 8002834:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b20      	cmp	r3, #32
 8002840:	f040 8111 	bne.w	8002a66 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	9300      	str	r3, [sp, #0]
 8002848:	2319      	movs	r3, #25
 800284a:	2201      	movs	r2, #1
 800284c:	4988      	ldr	r1, [pc, #544]	; (8002a70 <HAL_I2C_IsDeviceReady+0x254>)
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f000 f994 	bl	8002b7c <I2C_WaitOnFlagUntilTimeout>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800285a:	2302      	movs	r3, #2
 800285c:	e104      	b.n	8002a68 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002864:	2b01      	cmp	r3, #1
 8002866:	d101      	bne.n	800286c <HAL_I2C_IsDeviceReady+0x50>
 8002868:	2302      	movs	r3, #2
 800286a:	e0fd      	b.n	8002a68 <HAL_I2C_IsDeviceReady+0x24c>
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	2b01      	cmp	r3, #1
 8002880:	d007      	beq.n	8002892 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f042 0201 	orr.w	r2, r2, #1
 8002890:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028a0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2224      	movs	r2, #36	; 0x24
 80028a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2200      	movs	r2, #0
 80028ae:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	4a70      	ldr	r2, [pc, #448]	; (8002a74 <HAL_I2C_IsDeviceReady+0x258>)
 80028b4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028c4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	9300      	str	r3, [sp, #0]
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028d2:	68f8      	ldr	r0, [r7, #12]
 80028d4:	f000 f952 	bl	8002b7c <I2C_WaitOnFlagUntilTimeout>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00d      	beq.n	80028fa <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028ec:	d103      	bne.n	80028f6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028f4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e0b6      	b.n	8002a68 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028fa:	897b      	ldrh	r3, [r7, #10]
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	461a      	mov	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002908:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800290a:	f7ff fa63 	bl	8001dd4 <HAL_GetTick>
 800290e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b02      	cmp	r3, #2
 800291c:	bf0c      	ite	eq
 800291e:	2301      	moveq	r3, #1
 8002920:	2300      	movne	r3, #0
 8002922:	b2db      	uxtb	r3, r3
 8002924:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	695b      	ldr	r3, [r3, #20]
 800292c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002930:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002934:	bf0c      	ite	eq
 8002936:	2301      	moveq	r3, #1
 8002938:	2300      	movne	r3, #0
 800293a:	b2db      	uxtb	r3, r3
 800293c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800293e:	e025      	b.n	800298c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002940:	f7ff fa48 	bl	8001dd4 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	429a      	cmp	r2, r3
 800294e:	d302      	bcc.n	8002956 <HAL_I2C_IsDeviceReady+0x13a>
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d103      	bne.n	800295e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	22a0      	movs	r2, #160	; 0xa0
 800295a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	695b      	ldr	r3, [r3, #20]
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b02      	cmp	r3, #2
 800296a:	bf0c      	ite	eq
 800296c:	2301      	moveq	r3, #1
 800296e:	2300      	movne	r3, #0
 8002970:	b2db      	uxtb	r3, r3
 8002972:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800297e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002982:	bf0c      	ite	eq
 8002984:	2301      	moveq	r3, #1
 8002986:	2300      	movne	r3, #0
 8002988:	b2db      	uxtb	r3, r3
 800298a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002992:	b2db      	uxtb	r3, r3
 8002994:	2ba0      	cmp	r3, #160	; 0xa0
 8002996:	d005      	beq.n	80029a4 <HAL_I2C_IsDeviceReady+0x188>
 8002998:	7dfb      	ldrb	r3, [r7, #23]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d102      	bne.n	80029a4 <HAL_I2C_IsDeviceReady+0x188>
 800299e:	7dbb      	ldrb	r3, [r7, #22]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d0cd      	beq.n	8002940 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2220      	movs	r2, #32
 80029a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d129      	bne.n	8002a0e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029c8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029ca:	2300      	movs	r3, #0
 80029cc:	613b      	str	r3, [r7, #16]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	695b      	ldr	r3, [r3, #20]
 80029d4:	613b      	str	r3, [r7, #16]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	699b      	ldr	r3, [r3, #24]
 80029dc:	613b      	str	r3, [r7, #16]
 80029de:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	9300      	str	r3, [sp, #0]
 80029e4:	2319      	movs	r3, #25
 80029e6:	2201      	movs	r2, #1
 80029e8:	4921      	ldr	r1, [pc, #132]	; (8002a70 <HAL_I2C_IsDeviceReady+0x254>)
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f000 f8c6 	bl	8002b7c <I2C_WaitOnFlagUntilTimeout>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e036      	b.n	8002a68 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2220      	movs	r2, #32
 80029fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	e02c      	b.n	8002a68 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a1c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a26:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	9300      	str	r3, [sp, #0]
 8002a2c:	2319      	movs	r3, #25
 8002a2e:	2201      	movs	r2, #1
 8002a30:	490f      	ldr	r1, [pc, #60]	; (8002a70 <HAL_I2C_IsDeviceReady+0x254>)
 8002a32:	68f8      	ldr	r0, [r7, #12]
 8002a34:	f000 f8a2 	bl	8002b7c <I2C_WaitOnFlagUntilTimeout>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e012      	b.n	8002a68 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	3301      	adds	r3, #1
 8002a46:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	f4ff af32 	bcc.w	80028b6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2220      	movs	r2, #32
 8002a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e000      	b.n	8002a68 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002a66:	2302      	movs	r3, #2
  }
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3720      	adds	r7, #32
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	00100002 	.word	0x00100002
 8002a74:	ffff0000 	.word	0xffff0000

08002a78 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b088      	sub	sp, #32
 8002a7c:	af02      	add	r7, sp, #8
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	607a      	str	r2, [r7, #4]
 8002a82:	603b      	str	r3, [r7, #0]
 8002a84:	460b      	mov	r3, r1
 8002a86:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	2b08      	cmp	r3, #8
 8002a92:	d006      	beq.n	8002aa2 <I2C_MasterRequestWrite+0x2a>
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d003      	beq.n	8002aa2 <I2C_MasterRequestWrite+0x2a>
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002aa0:	d108      	bne.n	8002ab4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ab0:	601a      	str	r2, [r3, #0]
 8002ab2:	e00b      	b.n	8002acc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab8:	2b12      	cmp	r3, #18
 8002aba:	d107      	bne.n	8002acc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002aca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	9300      	str	r3, [sp, #0]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	f000 f84f 	bl	8002b7c <I2C_WaitOnFlagUntilTimeout>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d00d      	beq.n	8002b00 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002af2:	d103      	bne.n	8002afc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002afa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e035      	b.n	8002b6c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b08:	d108      	bne.n	8002b1c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b0a:	897b      	ldrh	r3, [r7, #10]
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	461a      	mov	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b18:	611a      	str	r2, [r3, #16]
 8002b1a:	e01b      	b.n	8002b54 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002b1c:	897b      	ldrh	r3, [r7, #10]
 8002b1e:	11db      	asrs	r3, r3, #7
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	f003 0306 	and.w	r3, r3, #6
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	f063 030f 	orn	r3, r3, #15
 8002b2c:	b2da      	uxtb	r2, r3
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	490e      	ldr	r1, [pc, #56]	; (8002b74 <I2C_MasterRequestWrite+0xfc>)
 8002b3a:	68f8      	ldr	r0, [r7, #12]
 8002b3c:	f000 f875 	bl	8002c2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e010      	b.n	8002b6c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002b4a:	897b      	ldrh	r3, [r7, #10]
 8002b4c:	b2da      	uxtb	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	4907      	ldr	r1, [pc, #28]	; (8002b78 <I2C_MasterRequestWrite+0x100>)
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f000 f865 	bl	8002c2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e000      	b.n	8002b6c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3718      	adds	r7, #24
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	00010008 	.word	0x00010008
 8002b78:	00010002 	.word	0x00010002

08002b7c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	603b      	str	r3, [r7, #0]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b8c:	e025      	b.n	8002bda <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b94:	d021      	beq.n	8002bda <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b96:	f7ff f91d 	bl	8001dd4 <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	683a      	ldr	r2, [r7, #0]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d302      	bcc.n	8002bac <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d116      	bne.n	8002bda <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2220      	movs	r2, #32
 8002bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc6:	f043 0220 	orr.w	r2, r3, #32
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e023      	b.n	8002c22 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	0c1b      	lsrs	r3, r3, #16
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d10d      	bne.n	8002c00 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	43da      	mvns	r2, r3
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	4013      	ands	r3, r2
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	bf0c      	ite	eq
 8002bf6:	2301      	moveq	r3, #1
 8002bf8:	2300      	movne	r3, #0
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	e00c      	b.n	8002c1a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	43da      	mvns	r2, r3
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	bf0c      	ite	eq
 8002c12:	2301      	moveq	r3, #1
 8002c14:	2300      	movne	r3, #0
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	461a      	mov	r2, r3
 8002c1a:	79fb      	ldrb	r3, [r7, #7]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d0b6      	beq.n	8002b8e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b084      	sub	sp, #16
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	60f8      	str	r0, [r7, #12]
 8002c32:	60b9      	str	r1, [r7, #8]
 8002c34:	607a      	str	r2, [r7, #4]
 8002c36:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c38:	e051      	b.n	8002cde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	695b      	ldr	r3, [r3, #20]
 8002c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c48:	d123      	bne.n	8002c92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c58:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c62:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2220      	movs	r2, #32
 8002c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	f043 0204 	orr.w	r2, r3, #4
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e046      	b.n	8002d20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c98:	d021      	beq.n	8002cde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c9a:	f7ff f89b 	bl	8001dd4 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d302      	bcc.n	8002cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d116      	bne.n	8002cde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2220      	movs	r2, #32
 8002cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	f043 0220 	orr.w	r2, r3, #32
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e020      	b.n	8002d20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	0c1b      	lsrs	r3, r3, #16
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d10c      	bne.n	8002d02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	695b      	ldr	r3, [r3, #20]
 8002cee:	43da      	mvns	r2, r3
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	bf14      	ite	ne
 8002cfa:	2301      	movne	r3, #1
 8002cfc:	2300      	moveq	r3, #0
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	e00b      	b.n	8002d1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	43da      	mvns	r2, r3
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	bf14      	ite	ne
 8002d14:	2301      	movne	r3, #1
 8002d16:	2300      	moveq	r3, #0
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d18d      	bne.n	8002c3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d34:	e02d      	b.n	8002d92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f000 f878 	bl	8002e2c <I2C_IsAcknowledgeFailed>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e02d      	b.n	8002da2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d4c:	d021      	beq.n	8002d92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d4e:	f7ff f841 	bl	8001dd4 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	68ba      	ldr	r2, [r7, #8]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d302      	bcc.n	8002d64 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d116      	bne.n	8002d92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2220      	movs	r2, #32
 8002d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7e:	f043 0220 	orr.w	r2, r3, #32
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e007      	b.n	8002da2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	695b      	ldr	r3, [r3, #20]
 8002d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d9c:	2b80      	cmp	r3, #128	; 0x80
 8002d9e:	d1ca      	bne.n	8002d36 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3710      	adds	r7, #16
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b084      	sub	sp, #16
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	60f8      	str	r0, [r7, #12]
 8002db2:	60b9      	str	r1, [r7, #8]
 8002db4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002db6:	e02d      	b.n	8002e14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002db8:	68f8      	ldr	r0, [r7, #12]
 8002dba:	f000 f837 	bl	8002e2c <I2C_IsAcknowledgeFailed>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e02d      	b.n	8002e24 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dce:	d021      	beq.n	8002e14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dd0:	f7ff f800 	bl	8001dd4 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	68ba      	ldr	r2, [r7, #8]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d302      	bcc.n	8002de6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d116      	bne.n	8002e14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2200      	movs	r2, #0
 8002dea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2220      	movs	r2, #32
 8002df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e00:	f043 0220 	orr.w	r2, r3, #32
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e007      	b.n	8002e24 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	f003 0304 	and.w	r3, r3, #4
 8002e1e:	2b04      	cmp	r3, #4
 8002e20:	d1ca      	bne.n	8002db8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3710      	adds	r7, #16
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e42:	d11b      	bne.n	8002e7c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e4c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2220      	movs	r2, #32
 8002e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e68:	f043 0204 	orr.w	r2, r3, #4
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e000      	b.n	8002e7e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
	...

08002e8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e264      	b.n	8003368 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d075      	beq.n	8002f96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002eaa:	4ba3      	ldr	r3, [pc, #652]	; (8003138 <HAL_RCC_OscConfig+0x2ac>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f003 030c 	and.w	r3, r3, #12
 8002eb2:	2b04      	cmp	r3, #4
 8002eb4:	d00c      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eb6:	4ba0      	ldr	r3, [pc, #640]	; (8003138 <HAL_RCC_OscConfig+0x2ac>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ebe:	2b08      	cmp	r3, #8
 8002ec0:	d112      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ec2:	4b9d      	ldr	r3, [pc, #628]	; (8003138 <HAL_RCC_OscConfig+0x2ac>)
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ece:	d10b      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ed0:	4b99      	ldr	r3, [pc, #612]	; (8003138 <HAL_RCC_OscConfig+0x2ac>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d05b      	beq.n	8002f94 <HAL_RCC_OscConfig+0x108>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d157      	bne.n	8002f94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e23f      	b.n	8003368 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ef0:	d106      	bne.n	8002f00 <HAL_RCC_OscConfig+0x74>
 8002ef2:	4b91      	ldr	r3, [pc, #580]	; (8003138 <HAL_RCC_OscConfig+0x2ac>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a90      	ldr	r2, [pc, #576]	; (8003138 <HAL_RCC_OscConfig+0x2ac>)
 8002ef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002efc:	6013      	str	r3, [r2, #0]
 8002efe:	e01d      	b.n	8002f3c <HAL_RCC_OscConfig+0xb0>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f08:	d10c      	bne.n	8002f24 <HAL_RCC_OscConfig+0x98>
 8002f0a:	4b8b      	ldr	r3, [pc, #556]	; (8003138 <HAL_RCC_OscConfig+0x2ac>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a8a      	ldr	r2, [pc, #552]	; (8003138 <HAL_RCC_OscConfig+0x2ac>)
 8002f10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f14:	6013      	str	r3, [r2, #0]
 8002f16:	4b88      	ldr	r3, [pc, #544]	; (8003138 <HAL_RCC_OscConfig+0x2ac>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a87      	ldr	r2, [pc, #540]	; (8003138 <HAL_RCC_OscConfig+0x2ac>)
 8002f1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f20:	6013      	str	r3, [r2, #0]
 8002f22:	e00b      	b.n	8002f3c <HAL_RCC_OscConfig+0xb0>
 8002f24:	4b84      	ldr	r3, [pc, #528]	; (8003138 <HAL_RCC_OscConfig+0x2ac>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a83      	ldr	r2, [pc, #524]	; (8003138 <HAL_RCC_OscConfig+0x2ac>)
 8002f2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f2e:	6013      	str	r3, [r2, #0]
 8002f30:	4b81      	ldr	r3, [pc, #516]	; (8003138 <HAL_RCC_OscConfig+0x2ac>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a80      	ldr	r2, [pc, #512]	; (8003138 <HAL_RCC_OscConfig+0x2ac>)
 8002f36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d013      	beq.n	8002f6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f44:	f7fe ff46 	bl	8001dd4 <HAL_GetTick>
 8002f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f4a:	e008      	b.n	8002f5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f4c:	f7fe ff42 	bl	8001dd4 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b64      	cmp	r3, #100	; 0x64
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e204      	b.n	8003368 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f5e:	4b76      	ldr	r3, [pc, #472]	; (8003138 <HAL_RCC_OscConfig+0x2ac>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d0f0      	beq.n	8002f4c <HAL_RCC_OscConfig+0xc0>
 8002f6a:	e014      	b.n	8002f96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f6c:	f7fe ff32 	bl	8001dd4 <HAL_GetTick>
 8002f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f72:	e008      	b.n	8002f86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f74:	f7fe ff2e 	bl	8001dd4 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b64      	cmp	r3, #100	; 0x64
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e1f0      	b.n	8003368 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f86:	4b6c      	ldr	r3, [pc, #432]	; (8003138 <HAL_RCC_OscConfig+0x2ac>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1f0      	bne.n	8002f74 <HAL_RCC_OscConfig+0xe8>
 8002f92:	e000      	b.n	8002f96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d063      	beq.n	800306a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fa2:	4b65      	ldr	r3, [pc, #404]	; (8003138 <HAL_RCC_OscConfig+0x2ac>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f003 030c 	and.w	r3, r3, #12
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00b      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fae:	4b62      	ldr	r3, [pc, #392]	; (8003138 <HAL_RCC_OscConfig+0x2ac>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fb6:	2b08      	cmp	r3, #8
 8002fb8:	d11c      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fba:	4b5f      	ldr	r3, [pc, #380]	; (8003138 <HAL_RCC_OscConfig+0x2ac>)
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d116      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fc6:	4b5c      	ldr	r3, [pc, #368]	; (8003138 <HAL_RCC_OscConfig+0x2ac>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d005      	beq.n	8002fde <HAL_RCC_OscConfig+0x152>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d001      	beq.n	8002fde <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e1c4      	b.n	8003368 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fde:	4b56      	ldr	r3, [pc, #344]	; (8003138 <HAL_RCC_OscConfig+0x2ac>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	4952      	ldr	r1, [pc, #328]	; (8003138 <HAL_RCC_OscConfig+0x2ac>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ff2:	e03a      	b.n	800306a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d020      	beq.n	800303e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ffc:	4b4f      	ldr	r3, [pc, #316]	; (800313c <HAL_RCC_OscConfig+0x2b0>)
 8002ffe:	2201      	movs	r2, #1
 8003000:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003002:	f7fe fee7 	bl	8001dd4 <HAL_GetTick>
 8003006:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003008:	e008      	b.n	800301c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800300a:	f7fe fee3 	bl	8001dd4 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	2b02      	cmp	r3, #2
 8003016:	d901      	bls.n	800301c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e1a5      	b.n	8003368 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800301c:	4b46      	ldr	r3, [pc, #280]	; (8003138 <HAL_RCC_OscConfig+0x2ac>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0302 	and.w	r3, r3, #2
 8003024:	2b00      	cmp	r3, #0
 8003026:	d0f0      	beq.n	800300a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003028:	4b43      	ldr	r3, [pc, #268]	; (8003138 <HAL_RCC_OscConfig+0x2ac>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	691b      	ldr	r3, [r3, #16]
 8003034:	00db      	lsls	r3, r3, #3
 8003036:	4940      	ldr	r1, [pc, #256]	; (8003138 <HAL_RCC_OscConfig+0x2ac>)
 8003038:	4313      	orrs	r3, r2
 800303a:	600b      	str	r3, [r1, #0]
 800303c:	e015      	b.n	800306a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800303e:	4b3f      	ldr	r3, [pc, #252]	; (800313c <HAL_RCC_OscConfig+0x2b0>)
 8003040:	2200      	movs	r2, #0
 8003042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003044:	f7fe fec6 	bl	8001dd4 <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800304c:	f7fe fec2 	bl	8001dd4 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e184      	b.n	8003368 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800305e:	4b36      	ldr	r3, [pc, #216]	; (8003138 <HAL_RCC_OscConfig+0x2ac>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1f0      	bne.n	800304c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0308 	and.w	r3, r3, #8
 8003072:	2b00      	cmp	r3, #0
 8003074:	d030      	beq.n	80030d8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d016      	beq.n	80030ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800307e:	4b30      	ldr	r3, [pc, #192]	; (8003140 <HAL_RCC_OscConfig+0x2b4>)
 8003080:	2201      	movs	r2, #1
 8003082:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003084:	f7fe fea6 	bl	8001dd4 <HAL_GetTick>
 8003088:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800308a:	e008      	b.n	800309e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800308c:	f7fe fea2 	bl	8001dd4 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b02      	cmp	r3, #2
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e164      	b.n	8003368 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800309e:	4b26      	ldr	r3, [pc, #152]	; (8003138 <HAL_RCC_OscConfig+0x2ac>)
 80030a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d0f0      	beq.n	800308c <HAL_RCC_OscConfig+0x200>
 80030aa:	e015      	b.n	80030d8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030ac:	4b24      	ldr	r3, [pc, #144]	; (8003140 <HAL_RCC_OscConfig+0x2b4>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030b2:	f7fe fe8f 	bl	8001dd4 <HAL_GetTick>
 80030b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030b8:	e008      	b.n	80030cc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030ba:	f7fe fe8b 	bl	8001dd4 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d901      	bls.n	80030cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e14d      	b.n	8003368 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030cc:	4b1a      	ldr	r3, [pc, #104]	; (8003138 <HAL_RCC_OscConfig+0x2ac>)
 80030ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d1f0      	bne.n	80030ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0304 	and.w	r3, r3, #4
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f000 80a0 	beq.w	8003226 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030e6:	2300      	movs	r3, #0
 80030e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030ea:	4b13      	ldr	r3, [pc, #76]	; (8003138 <HAL_RCC_OscConfig+0x2ac>)
 80030ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d10f      	bne.n	8003116 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030f6:	2300      	movs	r3, #0
 80030f8:	60bb      	str	r3, [r7, #8]
 80030fa:	4b0f      	ldr	r3, [pc, #60]	; (8003138 <HAL_RCC_OscConfig+0x2ac>)
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	4a0e      	ldr	r2, [pc, #56]	; (8003138 <HAL_RCC_OscConfig+0x2ac>)
 8003100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003104:	6413      	str	r3, [r2, #64]	; 0x40
 8003106:	4b0c      	ldr	r3, [pc, #48]	; (8003138 <HAL_RCC_OscConfig+0x2ac>)
 8003108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800310e:	60bb      	str	r3, [r7, #8]
 8003110:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003112:	2301      	movs	r3, #1
 8003114:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003116:	4b0b      	ldr	r3, [pc, #44]	; (8003144 <HAL_RCC_OscConfig+0x2b8>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800311e:	2b00      	cmp	r3, #0
 8003120:	d121      	bne.n	8003166 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003122:	4b08      	ldr	r3, [pc, #32]	; (8003144 <HAL_RCC_OscConfig+0x2b8>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a07      	ldr	r2, [pc, #28]	; (8003144 <HAL_RCC_OscConfig+0x2b8>)
 8003128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800312c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800312e:	f7fe fe51 	bl	8001dd4 <HAL_GetTick>
 8003132:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003134:	e011      	b.n	800315a <HAL_RCC_OscConfig+0x2ce>
 8003136:	bf00      	nop
 8003138:	40023800 	.word	0x40023800
 800313c:	42470000 	.word	0x42470000
 8003140:	42470e80 	.word	0x42470e80
 8003144:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003148:	f7fe fe44 	bl	8001dd4 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e106      	b.n	8003368 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800315a:	4b85      	ldr	r3, [pc, #532]	; (8003370 <HAL_RCC_OscConfig+0x4e4>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003162:	2b00      	cmp	r3, #0
 8003164:	d0f0      	beq.n	8003148 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d106      	bne.n	800317c <HAL_RCC_OscConfig+0x2f0>
 800316e:	4b81      	ldr	r3, [pc, #516]	; (8003374 <HAL_RCC_OscConfig+0x4e8>)
 8003170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003172:	4a80      	ldr	r2, [pc, #512]	; (8003374 <HAL_RCC_OscConfig+0x4e8>)
 8003174:	f043 0301 	orr.w	r3, r3, #1
 8003178:	6713      	str	r3, [r2, #112]	; 0x70
 800317a:	e01c      	b.n	80031b6 <HAL_RCC_OscConfig+0x32a>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	2b05      	cmp	r3, #5
 8003182:	d10c      	bne.n	800319e <HAL_RCC_OscConfig+0x312>
 8003184:	4b7b      	ldr	r3, [pc, #492]	; (8003374 <HAL_RCC_OscConfig+0x4e8>)
 8003186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003188:	4a7a      	ldr	r2, [pc, #488]	; (8003374 <HAL_RCC_OscConfig+0x4e8>)
 800318a:	f043 0304 	orr.w	r3, r3, #4
 800318e:	6713      	str	r3, [r2, #112]	; 0x70
 8003190:	4b78      	ldr	r3, [pc, #480]	; (8003374 <HAL_RCC_OscConfig+0x4e8>)
 8003192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003194:	4a77      	ldr	r2, [pc, #476]	; (8003374 <HAL_RCC_OscConfig+0x4e8>)
 8003196:	f043 0301 	orr.w	r3, r3, #1
 800319a:	6713      	str	r3, [r2, #112]	; 0x70
 800319c:	e00b      	b.n	80031b6 <HAL_RCC_OscConfig+0x32a>
 800319e:	4b75      	ldr	r3, [pc, #468]	; (8003374 <HAL_RCC_OscConfig+0x4e8>)
 80031a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a2:	4a74      	ldr	r2, [pc, #464]	; (8003374 <HAL_RCC_OscConfig+0x4e8>)
 80031a4:	f023 0301 	bic.w	r3, r3, #1
 80031a8:	6713      	str	r3, [r2, #112]	; 0x70
 80031aa:	4b72      	ldr	r3, [pc, #456]	; (8003374 <HAL_RCC_OscConfig+0x4e8>)
 80031ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ae:	4a71      	ldr	r2, [pc, #452]	; (8003374 <HAL_RCC_OscConfig+0x4e8>)
 80031b0:	f023 0304 	bic.w	r3, r3, #4
 80031b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d015      	beq.n	80031ea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031be:	f7fe fe09 	bl	8001dd4 <HAL_GetTick>
 80031c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031c4:	e00a      	b.n	80031dc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031c6:	f7fe fe05 	bl	8001dd4 <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d901      	bls.n	80031dc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e0c5      	b.n	8003368 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031dc:	4b65      	ldr	r3, [pc, #404]	; (8003374 <HAL_RCC_OscConfig+0x4e8>)
 80031de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e0:	f003 0302 	and.w	r3, r3, #2
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d0ee      	beq.n	80031c6 <HAL_RCC_OscConfig+0x33a>
 80031e8:	e014      	b.n	8003214 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ea:	f7fe fdf3 	bl	8001dd4 <HAL_GetTick>
 80031ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031f0:	e00a      	b.n	8003208 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031f2:	f7fe fdef 	bl	8001dd4 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003200:	4293      	cmp	r3, r2
 8003202:	d901      	bls.n	8003208 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e0af      	b.n	8003368 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003208:	4b5a      	ldr	r3, [pc, #360]	; (8003374 <HAL_RCC_OscConfig+0x4e8>)
 800320a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800320c:	f003 0302 	and.w	r3, r3, #2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d1ee      	bne.n	80031f2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003214:	7dfb      	ldrb	r3, [r7, #23]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d105      	bne.n	8003226 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800321a:	4b56      	ldr	r3, [pc, #344]	; (8003374 <HAL_RCC_OscConfig+0x4e8>)
 800321c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321e:	4a55      	ldr	r2, [pc, #340]	; (8003374 <HAL_RCC_OscConfig+0x4e8>)
 8003220:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003224:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	2b00      	cmp	r3, #0
 800322c:	f000 809b 	beq.w	8003366 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003230:	4b50      	ldr	r3, [pc, #320]	; (8003374 <HAL_RCC_OscConfig+0x4e8>)
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f003 030c 	and.w	r3, r3, #12
 8003238:	2b08      	cmp	r3, #8
 800323a:	d05c      	beq.n	80032f6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	2b02      	cmp	r3, #2
 8003242:	d141      	bne.n	80032c8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003244:	4b4c      	ldr	r3, [pc, #304]	; (8003378 <HAL_RCC_OscConfig+0x4ec>)
 8003246:	2200      	movs	r2, #0
 8003248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800324a:	f7fe fdc3 	bl	8001dd4 <HAL_GetTick>
 800324e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003250:	e008      	b.n	8003264 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003252:	f7fe fdbf 	bl	8001dd4 <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	2b02      	cmp	r3, #2
 800325e:	d901      	bls.n	8003264 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e081      	b.n	8003368 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003264:	4b43      	ldr	r3, [pc, #268]	; (8003374 <HAL_RCC_OscConfig+0x4e8>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1f0      	bne.n	8003252 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	69da      	ldr	r2, [r3, #28]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a1b      	ldr	r3, [r3, #32]
 8003278:	431a      	orrs	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327e:	019b      	lsls	r3, r3, #6
 8003280:	431a      	orrs	r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003286:	085b      	lsrs	r3, r3, #1
 8003288:	3b01      	subs	r3, #1
 800328a:	041b      	lsls	r3, r3, #16
 800328c:	431a      	orrs	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003292:	061b      	lsls	r3, r3, #24
 8003294:	4937      	ldr	r1, [pc, #220]	; (8003374 <HAL_RCC_OscConfig+0x4e8>)
 8003296:	4313      	orrs	r3, r2
 8003298:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800329a:	4b37      	ldr	r3, [pc, #220]	; (8003378 <HAL_RCC_OscConfig+0x4ec>)
 800329c:	2201      	movs	r2, #1
 800329e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a0:	f7fe fd98 	bl	8001dd4 <HAL_GetTick>
 80032a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032a6:	e008      	b.n	80032ba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032a8:	f7fe fd94 	bl	8001dd4 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e056      	b.n	8003368 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ba:	4b2e      	ldr	r3, [pc, #184]	; (8003374 <HAL_RCC_OscConfig+0x4e8>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d0f0      	beq.n	80032a8 <HAL_RCC_OscConfig+0x41c>
 80032c6:	e04e      	b.n	8003366 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032c8:	4b2b      	ldr	r3, [pc, #172]	; (8003378 <HAL_RCC_OscConfig+0x4ec>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ce:	f7fe fd81 	bl	8001dd4 <HAL_GetTick>
 80032d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032d4:	e008      	b.n	80032e8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032d6:	f7fe fd7d 	bl	8001dd4 <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d901      	bls.n	80032e8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e03f      	b.n	8003368 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032e8:	4b22      	ldr	r3, [pc, #136]	; (8003374 <HAL_RCC_OscConfig+0x4e8>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d1f0      	bne.n	80032d6 <HAL_RCC_OscConfig+0x44a>
 80032f4:	e037      	b.n	8003366 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d101      	bne.n	8003302 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e032      	b.n	8003368 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003302:	4b1c      	ldr	r3, [pc, #112]	; (8003374 <HAL_RCC_OscConfig+0x4e8>)
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d028      	beq.n	8003362 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800331a:	429a      	cmp	r2, r3
 800331c:	d121      	bne.n	8003362 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003328:	429a      	cmp	r2, r3
 800332a:	d11a      	bne.n	8003362 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003332:	4013      	ands	r3, r2
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003338:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800333a:	4293      	cmp	r3, r2
 800333c:	d111      	bne.n	8003362 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003348:	085b      	lsrs	r3, r3, #1
 800334a:	3b01      	subs	r3, #1
 800334c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800334e:	429a      	cmp	r2, r3
 8003350:	d107      	bne.n	8003362 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800335e:	429a      	cmp	r2, r3
 8003360:	d001      	beq.n	8003366 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e000      	b.n	8003368 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3718      	adds	r7, #24
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	40007000 	.word	0x40007000
 8003374:	40023800 	.word	0x40023800
 8003378:	42470060 	.word	0x42470060

0800337c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d101      	bne.n	8003390 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e0cc      	b.n	800352a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003390:	4b68      	ldr	r3, [pc, #416]	; (8003534 <HAL_RCC_ClockConfig+0x1b8>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0307 	and.w	r3, r3, #7
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	429a      	cmp	r2, r3
 800339c:	d90c      	bls.n	80033b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800339e:	4b65      	ldr	r3, [pc, #404]	; (8003534 <HAL_RCC_ClockConfig+0x1b8>)
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	b2d2      	uxtb	r2, r2
 80033a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033a6:	4b63      	ldr	r3, [pc, #396]	; (8003534 <HAL_RCC_ClockConfig+0x1b8>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0307 	and.w	r3, r3, #7
 80033ae:	683a      	ldr	r2, [r7, #0]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d001      	beq.n	80033b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e0b8      	b.n	800352a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d020      	beq.n	8003406 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0304 	and.w	r3, r3, #4
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d005      	beq.n	80033dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033d0:	4b59      	ldr	r3, [pc, #356]	; (8003538 <HAL_RCC_ClockConfig+0x1bc>)
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	4a58      	ldr	r2, [pc, #352]	; (8003538 <HAL_RCC_ClockConfig+0x1bc>)
 80033d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0308 	and.w	r3, r3, #8
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d005      	beq.n	80033f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033e8:	4b53      	ldr	r3, [pc, #332]	; (8003538 <HAL_RCC_ClockConfig+0x1bc>)
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	4a52      	ldr	r2, [pc, #328]	; (8003538 <HAL_RCC_ClockConfig+0x1bc>)
 80033ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033f4:	4b50      	ldr	r3, [pc, #320]	; (8003538 <HAL_RCC_ClockConfig+0x1bc>)
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	494d      	ldr	r1, [pc, #308]	; (8003538 <HAL_RCC_ClockConfig+0x1bc>)
 8003402:	4313      	orrs	r3, r2
 8003404:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b00      	cmp	r3, #0
 8003410:	d044      	beq.n	800349c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d107      	bne.n	800342a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800341a:	4b47      	ldr	r3, [pc, #284]	; (8003538 <HAL_RCC_ClockConfig+0x1bc>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d119      	bne.n	800345a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e07f      	b.n	800352a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	2b02      	cmp	r3, #2
 8003430:	d003      	beq.n	800343a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003436:	2b03      	cmp	r3, #3
 8003438:	d107      	bne.n	800344a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800343a:	4b3f      	ldr	r3, [pc, #252]	; (8003538 <HAL_RCC_ClockConfig+0x1bc>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d109      	bne.n	800345a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e06f      	b.n	800352a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800344a:	4b3b      	ldr	r3, [pc, #236]	; (8003538 <HAL_RCC_ClockConfig+0x1bc>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e067      	b.n	800352a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800345a:	4b37      	ldr	r3, [pc, #220]	; (8003538 <HAL_RCC_ClockConfig+0x1bc>)
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f023 0203 	bic.w	r2, r3, #3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	4934      	ldr	r1, [pc, #208]	; (8003538 <HAL_RCC_ClockConfig+0x1bc>)
 8003468:	4313      	orrs	r3, r2
 800346a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800346c:	f7fe fcb2 	bl	8001dd4 <HAL_GetTick>
 8003470:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003472:	e00a      	b.n	800348a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003474:	f7fe fcae 	bl	8001dd4 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003482:	4293      	cmp	r3, r2
 8003484:	d901      	bls.n	800348a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e04f      	b.n	800352a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800348a:	4b2b      	ldr	r3, [pc, #172]	; (8003538 <HAL_RCC_ClockConfig+0x1bc>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f003 020c 	and.w	r2, r3, #12
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	429a      	cmp	r2, r3
 800349a:	d1eb      	bne.n	8003474 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800349c:	4b25      	ldr	r3, [pc, #148]	; (8003534 <HAL_RCC_ClockConfig+0x1b8>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0307 	and.w	r3, r3, #7
 80034a4:	683a      	ldr	r2, [r7, #0]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d20c      	bcs.n	80034c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034aa:	4b22      	ldr	r3, [pc, #136]	; (8003534 <HAL_RCC_ClockConfig+0x1b8>)
 80034ac:	683a      	ldr	r2, [r7, #0]
 80034ae:	b2d2      	uxtb	r2, r2
 80034b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034b2:	4b20      	ldr	r3, [pc, #128]	; (8003534 <HAL_RCC_ClockConfig+0x1b8>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0307 	and.w	r3, r3, #7
 80034ba:	683a      	ldr	r2, [r7, #0]
 80034bc:	429a      	cmp	r2, r3
 80034be:	d001      	beq.n	80034c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e032      	b.n	800352a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0304 	and.w	r3, r3, #4
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d008      	beq.n	80034e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034d0:	4b19      	ldr	r3, [pc, #100]	; (8003538 <HAL_RCC_ClockConfig+0x1bc>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	4916      	ldr	r1, [pc, #88]	; (8003538 <HAL_RCC_ClockConfig+0x1bc>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0308 	and.w	r3, r3, #8
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d009      	beq.n	8003502 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034ee:	4b12      	ldr	r3, [pc, #72]	; (8003538 <HAL_RCC_ClockConfig+0x1bc>)
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	00db      	lsls	r3, r3, #3
 80034fc:	490e      	ldr	r1, [pc, #56]	; (8003538 <HAL_RCC_ClockConfig+0x1bc>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003502:	f000 f821 	bl	8003548 <HAL_RCC_GetSysClockFreq>
 8003506:	4602      	mov	r2, r0
 8003508:	4b0b      	ldr	r3, [pc, #44]	; (8003538 <HAL_RCC_ClockConfig+0x1bc>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	091b      	lsrs	r3, r3, #4
 800350e:	f003 030f 	and.w	r3, r3, #15
 8003512:	490a      	ldr	r1, [pc, #40]	; (800353c <HAL_RCC_ClockConfig+0x1c0>)
 8003514:	5ccb      	ldrb	r3, [r1, r3]
 8003516:	fa22 f303 	lsr.w	r3, r2, r3
 800351a:	4a09      	ldr	r2, [pc, #36]	; (8003540 <HAL_RCC_ClockConfig+0x1c4>)
 800351c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800351e:	4b09      	ldr	r3, [pc, #36]	; (8003544 <HAL_RCC_ClockConfig+0x1c8>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4618      	mov	r0, r3
 8003524:	f7fe fa7c 	bl	8001a20 <HAL_InitTick>

  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3710      	adds	r7, #16
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	40023c00 	.word	0x40023c00
 8003538:	40023800 	.word	0x40023800
 800353c:	08006aa4 	.word	0x08006aa4
 8003540:	20000004 	.word	0x20000004
 8003544:	20000008 	.word	0x20000008

08003548 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003548:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800354c:	b084      	sub	sp, #16
 800354e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003550:	2300      	movs	r3, #0
 8003552:	607b      	str	r3, [r7, #4]
 8003554:	2300      	movs	r3, #0
 8003556:	60fb      	str	r3, [r7, #12]
 8003558:	2300      	movs	r3, #0
 800355a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800355c:	2300      	movs	r3, #0
 800355e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003560:	4b67      	ldr	r3, [pc, #412]	; (8003700 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	f003 030c 	and.w	r3, r3, #12
 8003568:	2b08      	cmp	r3, #8
 800356a:	d00d      	beq.n	8003588 <HAL_RCC_GetSysClockFreq+0x40>
 800356c:	2b08      	cmp	r3, #8
 800356e:	f200 80bd 	bhi.w	80036ec <HAL_RCC_GetSysClockFreq+0x1a4>
 8003572:	2b00      	cmp	r3, #0
 8003574:	d002      	beq.n	800357c <HAL_RCC_GetSysClockFreq+0x34>
 8003576:	2b04      	cmp	r3, #4
 8003578:	d003      	beq.n	8003582 <HAL_RCC_GetSysClockFreq+0x3a>
 800357a:	e0b7      	b.n	80036ec <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800357c:	4b61      	ldr	r3, [pc, #388]	; (8003704 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800357e:	60bb      	str	r3, [r7, #8]
       break;
 8003580:	e0b7      	b.n	80036f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003582:	4b61      	ldr	r3, [pc, #388]	; (8003708 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003584:	60bb      	str	r3, [r7, #8]
      break;
 8003586:	e0b4      	b.n	80036f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003588:	4b5d      	ldr	r3, [pc, #372]	; (8003700 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003590:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003592:	4b5b      	ldr	r3, [pc, #364]	; (8003700 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d04d      	beq.n	800363a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800359e:	4b58      	ldr	r3, [pc, #352]	; (8003700 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	099b      	lsrs	r3, r3, #6
 80035a4:	461a      	mov	r2, r3
 80035a6:	f04f 0300 	mov.w	r3, #0
 80035aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80035ae:	f04f 0100 	mov.w	r1, #0
 80035b2:	ea02 0800 	and.w	r8, r2, r0
 80035b6:	ea03 0901 	and.w	r9, r3, r1
 80035ba:	4640      	mov	r0, r8
 80035bc:	4649      	mov	r1, r9
 80035be:	f04f 0200 	mov.w	r2, #0
 80035c2:	f04f 0300 	mov.w	r3, #0
 80035c6:	014b      	lsls	r3, r1, #5
 80035c8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80035cc:	0142      	lsls	r2, r0, #5
 80035ce:	4610      	mov	r0, r2
 80035d0:	4619      	mov	r1, r3
 80035d2:	ebb0 0008 	subs.w	r0, r0, r8
 80035d6:	eb61 0109 	sbc.w	r1, r1, r9
 80035da:	f04f 0200 	mov.w	r2, #0
 80035de:	f04f 0300 	mov.w	r3, #0
 80035e2:	018b      	lsls	r3, r1, #6
 80035e4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80035e8:	0182      	lsls	r2, r0, #6
 80035ea:	1a12      	subs	r2, r2, r0
 80035ec:	eb63 0301 	sbc.w	r3, r3, r1
 80035f0:	f04f 0000 	mov.w	r0, #0
 80035f4:	f04f 0100 	mov.w	r1, #0
 80035f8:	00d9      	lsls	r1, r3, #3
 80035fa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80035fe:	00d0      	lsls	r0, r2, #3
 8003600:	4602      	mov	r2, r0
 8003602:	460b      	mov	r3, r1
 8003604:	eb12 0208 	adds.w	r2, r2, r8
 8003608:	eb43 0309 	adc.w	r3, r3, r9
 800360c:	f04f 0000 	mov.w	r0, #0
 8003610:	f04f 0100 	mov.w	r1, #0
 8003614:	0259      	lsls	r1, r3, #9
 8003616:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800361a:	0250      	lsls	r0, r2, #9
 800361c:	4602      	mov	r2, r0
 800361e:	460b      	mov	r3, r1
 8003620:	4610      	mov	r0, r2
 8003622:	4619      	mov	r1, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	461a      	mov	r2, r3
 8003628:	f04f 0300 	mov.w	r3, #0
 800362c:	f7fd fac4 	bl	8000bb8 <__aeabi_uldivmod>
 8003630:	4602      	mov	r2, r0
 8003632:	460b      	mov	r3, r1
 8003634:	4613      	mov	r3, r2
 8003636:	60fb      	str	r3, [r7, #12]
 8003638:	e04a      	b.n	80036d0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800363a:	4b31      	ldr	r3, [pc, #196]	; (8003700 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	099b      	lsrs	r3, r3, #6
 8003640:	461a      	mov	r2, r3
 8003642:	f04f 0300 	mov.w	r3, #0
 8003646:	f240 10ff 	movw	r0, #511	; 0x1ff
 800364a:	f04f 0100 	mov.w	r1, #0
 800364e:	ea02 0400 	and.w	r4, r2, r0
 8003652:	ea03 0501 	and.w	r5, r3, r1
 8003656:	4620      	mov	r0, r4
 8003658:	4629      	mov	r1, r5
 800365a:	f04f 0200 	mov.w	r2, #0
 800365e:	f04f 0300 	mov.w	r3, #0
 8003662:	014b      	lsls	r3, r1, #5
 8003664:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003668:	0142      	lsls	r2, r0, #5
 800366a:	4610      	mov	r0, r2
 800366c:	4619      	mov	r1, r3
 800366e:	1b00      	subs	r0, r0, r4
 8003670:	eb61 0105 	sbc.w	r1, r1, r5
 8003674:	f04f 0200 	mov.w	r2, #0
 8003678:	f04f 0300 	mov.w	r3, #0
 800367c:	018b      	lsls	r3, r1, #6
 800367e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003682:	0182      	lsls	r2, r0, #6
 8003684:	1a12      	subs	r2, r2, r0
 8003686:	eb63 0301 	sbc.w	r3, r3, r1
 800368a:	f04f 0000 	mov.w	r0, #0
 800368e:	f04f 0100 	mov.w	r1, #0
 8003692:	00d9      	lsls	r1, r3, #3
 8003694:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003698:	00d0      	lsls	r0, r2, #3
 800369a:	4602      	mov	r2, r0
 800369c:	460b      	mov	r3, r1
 800369e:	1912      	adds	r2, r2, r4
 80036a0:	eb45 0303 	adc.w	r3, r5, r3
 80036a4:	f04f 0000 	mov.w	r0, #0
 80036a8:	f04f 0100 	mov.w	r1, #0
 80036ac:	0299      	lsls	r1, r3, #10
 80036ae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80036b2:	0290      	lsls	r0, r2, #10
 80036b4:	4602      	mov	r2, r0
 80036b6:	460b      	mov	r3, r1
 80036b8:	4610      	mov	r0, r2
 80036ba:	4619      	mov	r1, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	461a      	mov	r2, r3
 80036c0:	f04f 0300 	mov.w	r3, #0
 80036c4:	f7fd fa78 	bl	8000bb8 <__aeabi_uldivmod>
 80036c8:	4602      	mov	r2, r0
 80036ca:	460b      	mov	r3, r1
 80036cc:	4613      	mov	r3, r2
 80036ce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036d0:	4b0b      	ldr	r3, [pc, #44]	; (8003700 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	0c1b      	lsrs	r3, r3, #16
 80036d6:	f003 0303 	and.w	r3, r3, #3
 80036da:	3301      	adds	r3, #1
 80036dc:	005b      	lsls	r3, r3, #1
 80036de:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e8:	60bb      	str	r3, [r7, #8]
      break;
 80036ea:	e002      	b.n	80036f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036ec:	4b05      	ldr	r3, [pc, #20]	; (8003704 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80036ee:	60bb      	str	r3, [r7, #8]
      break;
 80036f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036f2:	68bb      	ldr	r3, [r7, #8]
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3710      	adds	r7, #16
 80036f8:	46bd      	mov	sp, r7
 80036fa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80036fe:	bf00      	nop
 8003700:	40023800 	.word	0x40023800
 8003704:	00f42400 	.word	0x00f42400
 8003708:	007a1200 	.word	0x007a1200

0800370c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003710:	4b03      	ldr	r3, [pc, #12]	; (8003720 <HAL_RCC_GetHCLKFreq+0x14>)
 8003712:	681b      	ldr	r3, [r3, #0]
}
 8003714:	4618      	mov	r0, r3
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	20000004 	.word	0x20000004

08003724 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003728:	f7ff fff0 	bl	800370c <HAL_RCC_GetHCLKFreq>
 800372c:	4602      	mov	r2, r0
 800372e:	4b05      	ldr	r3, [pc, #20]	; (8003744 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	0a9b      	lsrs	r3, r3, #10
 8003734:	f003 0307 	and.w	r3, r3, #7
 8003738:	4903      	ldr	r1, [pc, #12]	; (8003748 <HAL_RCC_GetPCLK1Freq+0x24>)
 800373a:	5ccb      	ldrb	r3, [r1, r3]
 800373c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003740:	4618      	mov	r0, r3
 8003742:	bd80      	pop	{r7, pc}
 8003744:	40023800 	.word	0x40023800
 8003748:	08006ab4 	.word	0x08006ab4

0800374c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003750:	f7ff ffdc 	bl	800370c <HAL_RCC_GetHCLKFreq>
 8003754:	4602      	mov	r2, r0
 8003756:	4b05      	ldr	r3, [pc, #20]	; (800376c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	0b5b      	lsrs	r3, r3, #13
 800375c:	f003 0307 	and.w	r3, r3, #7
 8003760:	4903      	ldr	r1, [pc, #12]	; (8003770 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003762:	5ccb      	ldrb	r3, [r1, r3]
 8003764:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003768:	4618      	mov	r0, r3
 800376a:	bd80      	pop	{r7, pc}
 800376c:	40023800 	.word	0x40023800
 8003770:	08006ab4 	.word	0x08006ab4

08003774 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	220f      	movs	r2, #15
 8003782:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003784:	4b12      	ldr	r3, [pc, #72]	; (80037d0 <HAL_RCC_GetClockConfig+0x5c>)
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f003 0203 	and.w	r2, r3, #3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003790:	4b0f      	ldr	r3, [pc, #60]	; (80037d0 <HAL_RCC_GetClockConfig+0x5c>)
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800379c:	4b0c      	ldr	r3, [pc, #48]	; (80037d0 <HAL_RCC_GetClockConfig+0x5c>)
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80037a8:	4b09      	ldr	r3, [pc, #36]	; (80037d0 <HAL_RCC_GetClockConfig+0x5c>)
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	08db      	lsrs	r3, r3, #3
 80037ae:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80037b6:	4b07      	ldr	r3, [pc, #28]	; (80037d4 <HAL_RCC_GetClockConfig+0x60>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0207 	and.w	r2, r3, #7
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	601a      	str	r2, [r3, #0]
}
 80037c2:	bf00      	nop
 80037c4:	370c      	adds	r7, #12
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	40023800 	.word	0x40023800
 80037d4:	40023c00 	.word	0x40023c00

080037d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d101      	bne.n	80037ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e041      	b.n	800386e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d106      	bne.n	8003804 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f7fe f8d0 	bl	80019a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2202      	movs	r2, #2
 8003808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	3304      	adds	r3, #4
 8003814:	4619      	mov	r1, r3
 8003816:	4610      	mov	r0, r2
 8003818:	f000 f9c0 	bl	8003b9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
	...

08003878 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003878:	b480      	push	{r7}
 800387a:	b085      	sub	sp, #20
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003886:	b2db      	uxtb	r3, r3
 8003888:	2b01      	cmp	r3, #1
 800388a:	d001      	beq.n	8003890 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e044      	b.n	800391a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2202      	movs	r2, #2
 8003894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68da      	ldr	r2, [r3, #12]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f042 0201 	orr.w	r2, r2, #1
 80038a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a1e      	ldr	r2, [pc, #120]	; (8003928 <HAL_TIM_Base_Start_IT+0xb0>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d018      	beq.n	80038e4 <HAL_TIM_Base_Start_IT+0x6c>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038ba:	d013      	beq.n	80038e4 <HAL_TIM_Base_Start_IT+0x6c>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a1a      	ldr	r2, [pc, #104]	; (800392c <HAL_TIM_Base_Start_IT+0xb4>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d00e      	beq.n	80038e4 <HAL_TIM_Base_Start_IT+0x6c>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a19      	ldr	r2, [pc, #100]	; (8003930 <HAL_TIM_Base_Start_IT+0xb8>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d009      	beq.n	80038e4 <HAL_TIM_Base_Start_IT+0x6c>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a17      	ldr	r2, [pc, #92]	; (8003934 <HAL_TIM_Base_Start_IT+0xbc>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d004      	beq.n	80038e4 <HAL_TIM_Base_Start_IT+0x6c>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a16      	ldr	r2, [pc, #88]	; (8003938 <HAL_TIM_Base_Start_IT+0xc0>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d111      	bne.n	8003908 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f003 0307 	and.w	r3, r3, #7
 80038ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2b06      	cmp	r3, #6
 80038f4:	d010      	beq.n	8003918 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f042 0201 	orr.w	r2, r2, #1
 8003904:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003906:	e007      	b.n	8003918 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f042 0201 	orr.w	r2, r2, #1
 8003916:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3714      	adds	r7, #20
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	40010000 	.word	0x40010000
 800392c:	40000400 	.word	0x40000400
 8003930:	40000800 	.word	0x40000800
 8003934:	40000c00 	.word	0x40000c00
 8003938:	40014000 	.word	0x40014000

0800393c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b02      	cmp	r3, #2
 8003950:	d122      	bne.n	8003998 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	f003 0302 	and.w	r3, r3, #2
 800395c:	2b02      	cmp	r3, #2
 800395e:	d11b      	bne.n	8003998 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f06f 0202 	mvn.w	r2, #2
 8003968:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2201      	movs	r2, #1
 800396e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	f003 0303 	and.w	r3, r3, #3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d003      	beq.n	8003986 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 f8ee 	bl	8003b60 <HAL_TIM_IC_CaptureCallback>
 8003984:	e005      	b.n	8003992 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 f8e0 	bl	8003b4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f000 f8f1 	bl	8003b74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	f003 0304 	and.w	r3, r3, #4
 80039a2:	2b04      	cmp	r3, #4
 80039a4:	d122      	bne.n	80039ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	f003 0304 	and.w	r3, r3, #4
 80039b0:	2b04      	cmp	r3, #4
 80039b2:	d11b      	bne.n	80039ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f06f 0204 	mvn.w	r2, #4
 80039bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2202      	movs	r2, #2
 80039c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 f8c4 	bl	8003b60 <HAL_TIM_IC_CaptureCallback>
 80039d8:	e005      	b.n	80039e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 f8b6 	bl	8003b4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f000 f8c7 	bl	8003b74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	f003 0308 	and.w	r3, r3, #8
 80039f6:	2b08      	cmp	r3, #8
 80039f8:	d122      	bne.n	8003a40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	f003 0308 	and.w	r3, r3, #8
 8003a04:	2b08      	cmp	r3, #8
 8003a06:	d11b      	bne.n	8003a40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f06f 0208 	mvn.w	r2, #8
 8003a10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2204      	movs	r2, #4
 8003a16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	69db      	ldr	r3, [r3, #28]
 8003a1e:	f003 0303 	and.w	r3, r3, #3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d003      	beq.n	8003a2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f89a 	bl	8003b60 <HAL_TIM_IC_CaptureCallback>
 8003a2c:	e005      	b.n	8003a3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 f88c 	bl	8003b4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f000 f89d 	bl	8003b74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	f003 0310 	and.w	r3, r3, #16
 8003a4a:	2b10      	cmp	r3, #16
 8003a4c:	d122      	bne.n	8003a94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	f003 0310 	and.w	r3, r3, #16
 8003a58:	2b10      	cmp	r3, #16
 8003a5a:	d11b      	bne.n	8003a94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f06f 0210 	mvn.w	r2, #16
 8003a64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2208      	movs	r2, #8
 8003a6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	69db      	ldr	r3, [r3, #28]
 8003a72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d003      	beq.n	8003a82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 f870 	bl	8003b60 <HAL_TIM_IC_CaptureCallback>
 8003a80:	e005      	b.n	8003a8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 f862 	bl	8003b4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f000 f873 	bl	8003b74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	f003 0301 	and.w	r3, r3, #1
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d10e      	bne.n	8003ac0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	f003 0301 	and.w	r3, r3, #1
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d107      	bne.n	8003ac0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f06f 0201 	mvn.w	r2, #1
 8003ab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f7fd fe3c 	bl	8001738 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aca:	2b80      	cmp	r3, #128	; 0x80
 8003acc:	d10e      	bne.n	8003aec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad8:	2b80      	cmp	r3, #128	; 0x80
 8003ada:	d107      	bne.n	8003aec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 f8e2 	bl	8003cb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af6:	2b40      	cmp	r3, #64	; 0x40
 8003af8:	d10e      	bne.n	8003b18 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b04:	2b40      	cmp	r3, #64	; 0x40
 8003b06:	d107      	bne.n	8003b18 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 f838 	bl	8003b88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	f003 0320 	and.w	r3, r3, #32
 8003b22:	2b20      	cmp	r3, #32
 8003b24:	d10e      	bne.n	8003b44 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	f003 0320 	and.w	r3, r3, #32
 8003b30:	2b20      	cmp	r3, #32
 8003b32:	d107      	bne.n	8003b44 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f06f 0220 	mvn.w	r2, #32
 8003b3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 f8ac 	bl	8003c9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b44:	bf00      	nop
 8003b46:	3708      	adds	r7, #8
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b54:	bf00      	nop
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b90:	bf00      	nop
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a34      	ldr	r2, [pc, #208]	; (8003c80 <TIM_Base_SetConfig+0xe4>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d00f      	beq.n	8003bd4 <TIM_Base_SetConfig+0x38>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bba:	d00b      	beq.n	8003bd4 <TIM_Base_SetConfig+0x38>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a31      	ldr	r2, [pc, #196]	; (8003c84 <TIM_Base_SetConfig+0xe8>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d007      	beq.n	8003bd4 <TIM_Base_SetConfig+0x38>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a30      	ldr	r2, [pc, #192]	; (8003c88 <TIM_Base_SetConfig+0xec>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d003      	beq.n	8003bd4 <TIM_Base_SetConfig+0x38>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a2f      	ldr	r2, [pc, #188]	; (8003c8c <TIM_Base_SetConfig+0xf0>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d108      	bne.n	8003be6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a25      	ldr	r2, [pc, #148]	; (8003c80 <TIM_Base_SetConfig+0xe4>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d01b      	beq.n	8003c26 <TIM_Base_SetConfig+0x8a>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bf4:	d017      	beq.n	8003c26 <TIM_Base_SetConfig+0x8a>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a22      	ldr	r2, [pc, #136]	; (8003c84 <TIM_Base_SetConfig+0xe8>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d013      	beq.n	8003c26 <TIM_Base_SetConfig+0x8a>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a21      	ldr	r2, [pc, #132]	; (8003c88 <TIM_Base_SetConfig+0xec>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d00f      	beq.n	8003c26 <TIM_Base_SetConfig+0x8a>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a20      	ldr	r2, [pc, #128]	; (8003c8c <TIM_Base_SetConfig+0xf0>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d00b      	beq.n	8003c26 <TIM_Base_SetConfig+0x8a>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a1f      	ldr	r2, [pc, #124]	; (8003c90 <TIM_Base_SetConfig+0xf4>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d007      	beq.n	8003c26 <TIM_Base_SetConfig+0x8a>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a1e      	ldr	r2, [pc, #120]	; (8003c94 <TIM_Base_SetConfig+0xf8>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d003      	beq.n	8003c26 <TIM_Base_SetConfig+0x8a>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a1d      	ldr	r2, [pc, #116]	; (8003c98 <TIM_Base_SetConfig+0xfc>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d108      	bne.n	8003c38 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	689a      	ldr	r2, [r3, #8]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4a08      	ldr	r2, [pc, #32]	; (8003c80 <TIM_Base_SetConfig+0xe4>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d103      	bne.n	8003c6c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	691a      	ldr	r2, [r3, #16]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	615a      	str	r2, [r3, #20]
}
 8003c72:	bf00      	nop
 8003c74:	3714      	adds	r7, #20
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	40010000 	.word	0x40010000
 8003c84:	40000400 	.word	0x40000400
 8003c88:	40000800 	.word	0x40000800
 8003c8c:	40000c00 	.word	0x40000c00
 8003c90:	40014000 	.word	0x40014000
 8003c94:	40014400 	.word	0x40014400
 8003c98:	40014800 	.word	0x40014800

08003c9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ca4:	bf00      	nop
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cb8:	bf00      	nop
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <__errno>:
 8003cc4:	4b01      	ldr	r3, [pc, #4]	; (8003ccc <__errno+0x8>)
 8003cc6:	6818      	ldr	r0, [r3, #0]
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	20000010 	.word	0x20000010

08003cd0 <__libc_init_array>:
 8003cd0:	b570      	push	{r4, r5, r6, lr}
 8003cd2:	4d0d      	ldr	r5, [pc, #52]	; (8003d08 <__libc_init_array+0x38>)
 8003cd4:	4c0d      	ldr	r4, [pc, #52]	; (8003d0c <__libc_init_array+0x3c>)
 8003cd6:	1b64      	subs	r4, r4, r5
 8003cd8:	10a4      	asrs	r4, r4, #2
 8003cda:	2600      	movs	r6, #0
 8003cdc:	42a6      	cmp	r6, r4
 8003cde:	d109      	bne.n	8003cf4 <__libc_init_array+0x24>
 8003ce0:	4d0b      	ldr	r5, [pc, #44]	; (8003d10 <__libc_init_array+0x40>)
 8003ce2:	4c0c      	ldr	r4, [pc, #48]	; (8003d14 <__libc_init_array+0x44>)
 8003ce4:	f002 feb6 	bl	8006a54 <_init>
 8003ce8:	1b64      	subs	r4, r4, r5
 8003cea:	10a4      	asrs	r4, r4, #2
 8003cec:	2600      	movs	r6, #0
 8003cee:	42a6      	cmp	r6, r4
 8003cf0:	d105      	bne.n	8003cfe <__libc_init_array+0x2e>
 8003cf2:	bd70      	pop	{r4, r5, r6, pc}
 8003cf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cf8:	4798      	blx	r3
 8003cfa:	3601      	adds	r6, #1
 8003cfc:	e7ee      	b.n	8003cdc <__libc_init_array+0xc>
 8003cfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d02:	4798      	blx	r3
 8003d04:	3601      	adds	r6, #1
 8003d06:	e7f2      	b.n	8003cee <__libc_init_array+0x1e>
 8003d08:	08006ea4 	.word	0x08006ea4
 8003d0c:	08006ea4 	.word	0x08006ea4
 8003d10:	08006ea4 	.word	0x08006ea4
 8003d14:	08006ea8 	.word	0x08006ea8

08003d18 <memset>:
 8003d18:	4402      	add	r2, r0
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d100      	bne.n	8003d22 <memset+0xa>
 8003d20:	4770      	bx	lr
 8003d22:	f803 1b01 	strb.w	r1, [r3], #1
 8003d26:	e7f9      	b.n	8003d1c <memset+0x4>

08003d28 <__cvt>:
 8003d28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d2c:	ec55 4b10 	vmov	r4, r5, d0
 8003d30:	2d00      	cmp	r5, #0
 8003d32:	460e      	mov	r6, r1
 8003d34:	4619      	mov	r1, r3
 8003d36:	462b      	mov	r3, r5
 8003d38:	bfbb      	ittet	lt
 8003d3a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003d3e:	461d      	movlt	r5, r3
 8003d40:	2300      	movge	r3, #0
 8003d42:	232d      	movlt	r3, #45	; 0x2d
 8003d44:	700b      	strb	r3, [r1, #0]
 8003d46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003d48:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003d4c:	4691      	mov	r9, r2
 8003d4e:	f023 0820 	bic.w	r8, r3, #32
 8003d52:	bfbc      	itt	lt
 8003d54:	4622      	movlt	r2, r4
 8003d56:	4614      	movlt	r4, r2
 8003d58:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003d5c:	d005      	beq.n	8003d6a <__cvt+0x42>
 8003d5e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003d62:	d100      	bne.n	8003d66 <__cvt+0x3e>
 8003d64:	3601      	adds	r6, #1
 8003d66:	2102      	movs	r1, #2
 8003d68:	e000      	b.n	8003d6c <__cvt+0x44>
 8003d6a:	2103      	movs	r1, #3
 8003d6c:	ab03      	add	r3, sp, #12
 8003d6e:	9301      	str	r3, [sp, #4]
 8003d70:	ab02      	add	r3, sp, #8
 8003d72:	9300      	str	r3, [sp, #0]
 8003d74:	ec45 4b10 	vmov	d0, r4, r5
 8003d78:	4653      	mov	r3, sl
 8003d7a:	4632      	mov	r2, r6
 8003d7c:	f000 fcec 	bl	8004758 <_dtoa_r>
 8003d80:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003d84:	4607      	mov	r7, r0
 8003d86:	d102      	bne.n	8003d8e <__cvt+0x66>
 8003d88:	f019 0f01 	tst.w	r9, #1
 8003d8c:	d022      	beq.n	8003dd4 <__cvt+0xac>
 8003d8e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003d92:	eb07 0906 	add.w	r9, r7, r6
 8003d96:	d110      	bne.n	8003dba <__cvt+0x92>
 8003d98:	783b      	ldrb	r3, [r7, #0]
 8003d9a:	2b30      	cmp	r3, #48	; 0x30
 8003d9c:	d10a      	bne.n	8003db4 <__cvt+0x8c>
 8003d9e:	2200      	movs	r2, #0
 8003da0:	2300      	movs	r3, #0
 8003da2:	4620      	mov	r0, r4
 8003da4:	4629      	mov	r1, r5
 8003da6:	f7fc fe97 	bl	8000ad8 <__aeabi_dcmpeq>
 8003daa:	b918      	cbnz	r0, 8003db4 <__cvt+0x8c>
 8003dac:	f1c6 0601 	rsb	r6, r6, #1
 8003db0:	f8ca 6000 	str.w	r6, [sl]
 8003db4:	f8da 3000 	ldr.w	r3, [sl]
 8003db8:	4499      	add	r9, r3
 8003dba:	2200      	movs	r2, #0
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	4620      	mov	r0, r4
 8003dc0:	4629      	mov	r1, r5
 8003dc2:	f7fc fe89 	bl	8000ad8 <__aeabi_dcmpeq>
 8003dc6:	b108      	cbz	r0, 8003dcc <__cvt+0xa4>
 8003dc8:	f8cd 900c 	str.w	r9, [sp, #12]
 8003dcc:	2230      	movs	r2, #48	; 0x30
 8003dce:	9b03      	ldr	r3, [sp, #12]
 8003dd0:	454b      	cmp	r3, r9
 8003dd2:	d307      	bcc.n	8003de4 <__cvt+0xbc>
 8003dd4:	9b03      	ldr	r3, [sp, #12]
 8003dd6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003dd8:	1bdb      	subs	r3, r3, r7
 8003dda:	4638      	mov	r0, r7
 8003ddc:	6013      	str	r3, [r2, #0]
 8003dde:	b004      	add	sp, #16
 8003de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003de4:	1c59      	adds	r1, r3, #1
 8003de6:	9103      	str	r1, [sp, #12]
 8003de8:	701a      	strb	r2, [r3, #0]
 8003dea:	e7f0      	b.n	8003dce <__cvt+0xa6>

08003dec <__exponent>:
 8003dec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003dee:	4603      	mov	r3, r0
 8003df0:	2900      	cmp	r1, #0
 8003df2:	bfb8      	it	lt
 8003df4:	4249      	neglt	r1, r1
 8003df6:	f803 2b02 	strb.w	r2, [r3], #2
 8003dfa:	bfb4      	ite	lt
 8003dfc:	222d      	movlt	r2, #45	; 0x2d
 8003dfe:	222b      	movge	r2, #43	; 0x2b
 8003e00:	2909      	cmp	r1, #9
 8003e02:	7042      	strb	r2, [r0, #1]
 8003e04:	dd2a      	ble.n	8003e5c <__exponent+0x70>
 8003e06:	f10d 0407 	add.w	r4, sp, #7
 8003e0a:	46a4      	mov	ip, r4
 8003e0c:	270a      	movs	r7, #10
 8003e0e:	46a6      	mov	lr, r4
 8003e10:	460a      	mov	r2, r1
 8003e12:	fb91 f6f7 	sdiv	r6, r1, r7
 8003e16:	fb07 1516 	mls	r5, r7, r6, r1
 8003e1a:	3530      	adds	r5, #48	; 0x30
 8003e1c:	2a63      	cmp	r2, #99	; 0x63
 8003e1e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8003e22:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003e26:	4631      	mov	r1, r6
 8003e28:	dcf1      	bgt.n	8003e0e <__exponent+0x22>
 8003e2a:	3130      	adds	r1, #48	; 0x30
 8003e2c:	f1ae 0502 	sub.w	r5, lr, #2
 8003e30:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003e34:	1c44      	adds	r4, r0, #1
 8003e36:	4629      	mov	r1, r5
 8003e38:	4561      	cmp	r1, ip
 8003e3a:	d30a      	bcc.n	8003e52 <__exponent+0x66>
 8003e3c:	f10d 0209 	add.w	r2, sp, #9
 8003e40:	eba2 020e 	sub.w	r2, r2, lr
 8003e44:	4565      	cmp	r5, ip
 8003e46:	bf88      	it	hi
 8003e48:	2200      	movhi	r2, #0
 8003e4a:	4413      	add	r3, r2
 8003e4c:	1a18      	subs	r0, r3, r0
 8003e4e:	b003      	add	sp, #12
 8003e50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e56:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003e5a:	e7ed      	b.n	8003e38 <__exponent+0x4c>
 8003e5c:	2330      	movs	r3, #48	; 0x30
 8003e5e:	3130      	adds	r1, #48	; 0x30
 8003e60:	7083      	strb	r3, [r0, #2]
 8003e62:	70c1      	strb	r1, [r0, #3]
 8003e64:	1d03      	adds	r3, r0, #4
 8003e66:	e7f1      	b.n	8003e4c <__exponent+0x60>

08003e68 <_printf_float>:
 8003e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e6c:	ed2d 8b02 	vpush	{d8}
 8003e70:	b08d      	sub	sp, #52	; 0x34
 8003e72:	460c      	mov	r4, r1
 8003e74:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003e78:	4616      	mov	r6, r2
 8003e7a:	461f      	mov	r7, r3
 8003e7c:	4605      	mov	r5, r0
 8003e7e:	f001 fa57 	bl	8005330 <_localeconv_r>
 8003e82:	f8d0 a000 	ldr.w	sl, [r0]
 8003e86:	4650      	mov	r0, sl
 8003e88:	f7fc f9aa 	bl	80001e0 <strlen>
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	930a      	str	r3, [sp, #40]	; 0x28
 8003e90:	6823      	ldr	r3, [r4, #0]
 8003e92:	9305      	str	r3, [sp, #20]
 8003e94:	f8d8 3000 	ldr.w	r3, [r8]
 8003e98:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003e9c:	3307      	adds	r3, #7
 8003e9e:	f023 0307 	bic.w	r3, r3, #7
 8003ea2:	f103 0208 	add.w	r2, r3, #8
 8003ea6:	f8c8 2000 	str.w	r2, [r8]
 8003eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eae:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003eb2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003eb6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003eba:	9307      	str	r3, [sp, #28]
 8003ebc:	f8cd 8018 	str.w	r8, [sp, #24]
 8003ec0:	ee08 0a10 	vmov	s16, r0
 8003ec4:	4b9f      	ldr	r3, [pc, #636]	; (8004144 <_printf_float+0x2dc>)
 8003ec6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003eca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ece:	f7fc fe35 	bl	8000b3c <__aeabi_dcmpun>
 8003ed2:	bb88      	cbnz	r0, 8003f38 <_printf_float+0xd0>
 8003ed4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003ed8:	4b9a      	ldr	r3, [pc, #616]	; (8004144 <_printf_float+0x2dc>)
 8003eda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ede:	f7fc fe0f 	bl	8000b00 <__aeabi_dcmple>
 8003ee2:	bb48      	cbnz	r0, 8003f38 <_printf_float+0xd0>
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	4640      	mov	r0, r8
 8003eea:	4649      	mov	r1, r9
 8003eec:	f7fc fdfe 	bl	8000aec <__aeabi_dcmplt>
 8003ef0:	b110      	cbz	r0, 8003ef8 <_printf_float+0x90>
 8003ef2:	232d      	movs	r3, #45	; 0x2d
 8003ef4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ef8:	4b93      	ldr	r3, [pc, #588]	; (8004148 <_printf_float+0x2e0>)
 8003efa:	4894      	ldr	r0, [pc, #592]	; (800414c <_printf_float+0x2e4>)
 8003efc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003f00:	bf94      	ite	ls
 8003f02:	4698      	movls	r8, r3
 8003f04:	4680      	movhi	r8, r0
 8003f06:	2303      	movs	r3, #3
 8003f08:	6123      	str	r3, [r4, #16]
 8003f0a:	9b05      	ldr	r3, [sp, #20]
 8003f0c:	f023 0204 	bic.w	r2, r3, #4
 8003f10:	6022      	str	r2, [r4, #0]
 8003f12:	f04f 0900 	mov.w	r9, #0
 8003f16:	9700      	str	r7, [sp, #0]
 8003f18:	4633      	mov	r3, r6
 8003f1a:	aa0b      	add	r2, sp, #44	; 0x2c
 8003f1c:	4621      	mov	r1, r4
 8003f1e:	4628      	mov	r0, r5
 8003f20:	f000 f9d8 	bl	80042d4 <_printf_common>
 8003f24:	3001      	adds	r0, #1
 8003f26:	f040 8090 	bne.w	800404a <_printf_float+0x1e2>
 8003f2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f2e:	b00d      	add	sp, #52	; 0x34
 8003f30:	ecbd 8b02 	vpop	{d8}
 8003f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f38:	4642      	mov	r2, r8
 8003f3a:	464b      	mov	r3, r9
 8003f3c:	4640      	mov	r0, r8
 8003f3e:	4649      	mov	r1, r9
 8003f40:	f7fc fdfc 	bl	8000b3c <__aeabi_dcmpun>
 8003f44:	b140      	cbz	r0, 8003f58 <_printf_float+0xf0>
 8003f46:	464b      	mov	r3, r9
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	bfbc      	itt	lt
 8003f4c:	232d      	movlt	r3, #45	; 0x2d
 8003f4e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003f52:	487f      	ldr	r0, [pc, #508]	; (8004150 <_printf_float+0x2e8>)
 8003f54:	4b7f      	ldr	r3, [pc, #508]	; (8004154 <_printf_float+0x2ec>)
 8003f56:	e7d1      	b.n	8003efc <_printf_float+0x94>
 8003f58:	6863      	ldr	r3, [r4, #4]
 8003f5a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003f5e:	9206      	str	r2, [sp, #24]
 8003f60:	1c5a      	adds	r2, r3, #1
 8003f62:	d13f      	bne.n	8003fe4 <_printf_float+0x17c>
 8003f64:	2306      	movs	r3, #6
 8003f66:	6063      	str	r3, [r4, #4]
 8003f68:	9b05      	ldr	r3, [sp, #20]
 8003f6a:	6861      	ldr	r1, [r4, #4]
 8003f6c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003f70:	2300      	movs	r3, #0
 8003f72:	9303      	str	r3, [sp, #12]
 8003f74:	ab0a      	add	r3, sp, #40	; 0x28
 8003f76:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003f7a:	ab09      	add	r3, sp, #36	; 0x24
 8003f7c:	ec49 8b10 	vmov	d0, r8, r9
 8003f80:	9300      	str	r3, [sp, #0]
 8003f82:	6022      	str	r2, [r4, #0]
 8003f84:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003f88:	4628      	mov	r0, r5
 8003f8a:	f7ff fecd 	bl	8003d28 <__cvt>
 8003f8e:	9b06      	ldr	r3, [sp, #24]
 8003f90:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003f92:	2b47      	cmp	r3, #71	; 0x47
 8003f94:	4680      	mov	r8, r0
 8003f96:	d108      	bne.n	8003faa <_printf_float+0x142>
 8003f98:	1cc8      	adds	r0, r1, #3
 8003f9a:	db02      	blt.n	8003fa2 <_printf_float+0x13a>
 8003f9c:	6863      	ldr	r3, [r4, #4]
 8003f9e:	4299      	cmp	r1, r3
 8003fa0:	dd41      	ble.n	8004026 <_printf_float+0x1be>
 8003fa2:	f1ab 0b02 	sub.w	fp, fp, #2
 8003fa6:	fa5f fb8b 	uxtb.w	fp, fp
 8003faa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003fae:	d820      	bhi.n	8003ff2 <_printf_float+0x18a>
 8003fb0:	3901      	subs	r1, #1
 8003fb2:	465a      	mov	r2, fp
 8003fb4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003fb8:	9109      	str	r1, [sp, #36]	; 0x24
 8003fba:	f7ff ff17 	bl	8003dec <__exponent>
 8003fbe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003fc0:	1813      	adds	r3, r2, r0
 8003fc2:	2a01      	cmp	r2, #1
 8003fc4:	4681      	mov	r9, r0
 8003fc6:	6123      	str	r3, [r4, #16]
 8003fc8:	dc02      	bgt.n	8003fd0 <_printf_float+0x168>
 8003fca:	6822      	ldr	r2, [r4, #0]
 8003fcc:	07d2      	lsls	r2, r2, #31
 8003fce:	d501      	bpl.n	8003fd4 <_printf_float+0x16c>
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	6123      	str	r3, [r4, #16]
 8003fd4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d09c      	beq.n	8003f16 <_printf_float+0xae>
 8003fdc:	232d      	movs	r3, #45	; 0x2d
 8003fde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fe2:	e798      	b.n	8003f16 <_printf_float+0xae>
 8003fe4:	9a06      	ldr	r2, [sp, #24]
 8003fe6:	2a47      	cmp	r2, #71	; 0x47
 8003fe8:	d1be      	bne.n	8003f68 <_printf_float+0x100>
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1bc      	bne.n	8003f68 <_printf_float+0x100>
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e7b9      	b.n	8003f66 <_printf_float+0xfe>
 8003ff2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003ff6:	d118      	bne.n	800402a <_printf_float+0x1c2>
 8003ff8:	2900      	cmp	r1, #0
 8003ffa:	6863      	ldr	r3, [r4, #4]
 8003ffc:	dd0b      	ble.n	8004016 <_printf_float+0x1ae>
 8003ffe:	6121      	str	r1, [r4, #16]
 8004000:	b913      	cbnz	r3, 8004008 <_printf_float+0x1a0>
 8004002:	6822      	ldr	r2, [r4, #0]
 8004004:	07d0      	lsls	r0, r2, #31
 8004006:	d502      	bpl.n	800400e <_printf_float+0x1a6>
 8004008:	3301      	adds	r3, #1
 800400a:	440b      	add	r3, r1
 800400c:	6123      	str	r3, [r4, #16]
 800400e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004010:	f04f 0900 	mov.w	r9, #0
 8004014:	e7de      	b.n	8003fd4 <_printf_float+0x16c>
 8004016:	b913      	cbnz	r3, 800401e <_printf_float+0x1b6>
 8004018:	6822      	ldr	r2, [r4, #0]
 800401a:	07d2      	lsls	r2, r2, #31
 800401c:	d501      	bpl.n	8004022 <_printf_float+0x1ba>
 800401e:	3302      	adds	r3, #2
 8004020:	e7f4      	b.n	800400c <_printf_float+0x1a4>
 8004022:	2301      	movs	r3, #1
 8004024:	e7f2      	b.n	800400c <_printf_float+0x1a4>
 8004026:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800402a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800402c:	4299      	cmp	r1, r3
 800402e:	db05      	blt.n	800403c <_printf_float+0x1d4>
 8004030:	6823      	ldr	r3, [r4, #0]
 8004032:	6121      	str	r1, [r4, #16]
 8004034:	07d8      	lsls	r0, r3, #31
 8004036:	d5ea      	bpl.n	800400e <_printf_float+0x1a6>
 8004038:	1c4b      	adds	r3, r1, #1
 800403a:	e7e7      	b.n	800400c <_printf_float+0x1a4>
 800403c:	2900      	cmp	r1, #0
 800403e:	bfd4      	ite	le
 8004040:	f1c1 0202 	rsble	r2, r1, #2
 8004044:	2201      	movgt	r2, #1
 8004046:	4413      	add	r3, r2
 8004048:	e7e0      	b.n	800400c <_printf_float+0x1a4>
 800404a:	6823      	ldr	r3, [r4, #0]
 800404c:	055a      	lsls	r2, r3, #21
 800404e:	d407      	bmi.n	8004060 <_printf_float+0x1f8>
 8004050:	6923      	ldr	r3, [r4, #16]
 8004052:	4642      	mov	r2, r8
 8004054:	4631      	mov	r1, r6
 8004056:	4628      	mov	r0, r5
 8004058:	47b8      	blx	r7
 800405a:	3001      	adds	r0, #1
 800405c:	d12c      	bne.n	80040b8 <_printf_float+0x250>
 800405e:	e764      	b.n	8003f2a <_printf_float+0xc2>
 8004060:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004064:	f240 80e0 	bls.w	8004228 <_printf_float+0x3c0>
 8004068:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800406c:	2200      	movs	r2, #0
 800406e:	2300      	movs	r3, #0
 8004070:	f7fc fd32 	bl	8000ad8 <__aeabi_dcmpeq>
 8004074:	2800      	cmp	r0, #0
 8004076:	d034      	beq.n	80040e2 <_printf_float+0x27a>
 8004078:	4a37      	ldr	r2, [pc, #220]	; (8004158 <_printf_float+0x2f0>)
 800407a:	2301      	movs	r3, #1
 800407c:	4631      	mov	r1, r6
 800407e:	4628      	mov	r0, r5
 8004080:	47b8      	blx	r7
 8004082:	3001      	adds	r0, #1
 8004084:	f43f af51 	beq.w	8003f2a <_printf_float+0xc2>
 8004088:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800408c:	429a      	cmp	r2, r3
 800408e:	db02      	blt.n	8004096 <_printf_float+0x22e>
 8004090:	6823      	ldr	r3, [r4, #0]
 8004092:	07d8      	lsls	r0, r3, #31
 8004094:	d510      	bpl.n	80040b8 <_printf_float+0x250>
 8004096:	ee18 3a10 	vmov	r3, s16
 800409a:	4652      	mov	r2, sl
 800409c:	4631      	mov	r1, r6
 800409e:	4628      	mov	r0, r5
 80040a0:	47b8      	blx	r7
 80040a2:	3001      	adds	r0, #1
 80040a4:	f43f af41 	beq.w	8003f2a <_printf_float+0xc2>
 80040a8:	f04f 0800 	mov.w	r8, #0
 80040ac:	f104 091a 	add.w	r9, r4, #26
 80040b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80040b2:	3b01      	subs	r3, #1
 80040b4:	4543      	cmp	r3, r8
 80040b6:	dc09      	bgt.n	80040cc <_printf_float+0x264>
 80040b8:	6823      	ldr	r3, [r4, #0]
 80040ba:	079b      	lsls	r3, r3, #30
 80040bc:	f100 8105 	bmi.w	80042ca <_printf_float+0x462>
 80040c0:	68e0      	ldr	r0, [r4, #12]
 80040c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80040c4:	4298      	cmp	r0, r3
 80040c6:	bfb8      	it	lt
 80040c8:	4618      	movlt	r0, r3
 80040ca:	e730      	b.n	8003f2e <_printf_float+0xc6>
 80040cc:	2301      	movs	r3, #1
 80040ce:	464a      	mov	r2, r9
 80040d0:	4631      	mov	r1, r6
 80040d2:	4628      	mov	r0, r5
 80040d4:	47b8      	blx	r7
 80040d6:	3001      	adds	r0, #1
 80040d8:	f43f af27 	beq.w	8003f2a <_printf_float+0xc2>
 80040dc:	f108 0801 	add.w	r8, r8, #1
 80040e0:	e7e6      	b.n	80040b0 <_printf_float+0x248>
 80040e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	dc39      	bgt.n	800415c <_printf_float+0x2f4>
 80040e8:	4a1b      	ldr	r2, [pc, #108]	; (8004158 <_printf_float+0x2f0>)
 80040ea:	2301      	movs	r3, #1
 80040ec:	4631      	mov	r1, r6
 80040ee:	4628      	mov	r0, r5
 80040f0:	47b8      	blx	r7
 80040f2:	3001      	adds	r0, #1
 80040f4:	f43f af19 	beq.w	8003f2a <_printf_float+0xc2>
 80040f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80040fc:	4313      	orrs	r3, r2
 80040fe:	d102      	bne.n	8004106 <_printf_float+0x29e>
 8004100:	6823      	ldr	r3, [r4, #0]
 8004102:	07d9      	lsls	r1, r3, #31
 8004104:	d5d8      	bpl.n	80040b8 <_printf_float+0x250>
 8004106:	ee18 3a10 	vmov	r3, s16
 800410a:	4652      	mov	r2, sl
 800410c:	4631      	mov	r1, r6
 800410e:	4628      	mov	r0, r5
 8004110:	47b8      	blx	r7
 8004112:	3001      	adds	r0, #1
 8004114:	f43f af09 	beq.w	8003f2a <_printf_float+0xc2>
 8004118:	f04f 0900 	mov.w	r9, #0
 800411c:	f104 0a1a 	add.w	sl, r4, #26
 8004120:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004122:	425b      	negs	r3, r3
 8004124:	454b      	cmp	r3, r9
 8004126:	dc01      	bgt.n	800412c <_printf_float+0x2c4>
 8004128:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800412a:	e792      	b.n	8004052 <_printf_float+0x1ea>
 800412c:	2301      	movs	r3, #1
 800412e:	4652      	mov	r2, sl
 8004130:	4631      	mov	r1, r6
 8004132:	4628      	mov	r0, r5
 8004134:	47b8      	blx	r7
 8004136:	3001      	adds	r0, #1
 8004138:	f43f aef7 	beq.w	8003f2a <_printf_float+0xc2>
 800413c:	f109 0901 	add.w	r9, r9, #1
 8004140:	e7ee      	b.n	8004120 <_printf_float+0x2b8>
 8004142:	bf00      	nop
 8004144:	7fefffff 	.word	0x7fefffff
 8004148:	08006ac0 	.word	0x08006ac0
 800414c:	08006ac4 	.word	0x08006ac4
 8004150:	08006acc 	.word	0x08006acc
 8004154:	08006ac8 	.word	0x08006ac8
 8004158:	08006ad0 	.word	0x08006ad0
 800415c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800415e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004160:	429a      	cmp	r2, r3
 8004162:	bfa8      	it	ge
 8004164:	461a      	movge	r2, r3
 8004166:	2a00      	cmp	r2, #0
 8004168:	4691      	mov	r9, r2
 800416a:	dc37      	bgt.n	80041dc <_printf_float+0x374>
 800416c:	f04f 0b00 	mov.w	fp, #0
 8004170:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004174:	f104 021a 	add.w	r2, r4, #26
 8004178:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800417a:	9305      	str	r3, [sp, #20]
 800417c:	eba3 0309 	sub.w	r3, r3, r9
 8004180:	455b      	cmp	r3, fp
 8004182:	dc33      	bgt.n	80041ec <_printf_float+0x384>
 8004184:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004188:	429a      	cmp	r2, r3
 800418a:	db3b      	blt.n	8004204 <_printf_float+0x39c>
 800418c:	6823      	ldr	r3, [r4, #0]
 800418e:	07da      	lsls	r2, r3, #31
 8004190:	d438      	bmi.n	8004204 <_printf_float+0x39c>
 8004192:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004194:	9b05      	ldr	r3, [sp, #20]
 8004196:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	eba2 0901 	sub.w	r9, r2, r1
 800419e:	4599      	cmp	r9, r3
 80041a0:	bfa8      	it	ge
 80041a2:	4699      	movge	r9, r3
 80041a4:	f1b9 0f00 	cmp.w	r9, #0
 80041a8:	dc35      	bgt.n	8004216 <_printf_float+0x3ae>
 80041aa:	f04f 0800 	mov.w	r8, #0
 80041ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80041b2:	f104 0a1a 	add.w	sl, r4, #26
 80041b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80041ba:	1a9b      	subs	r3, r3, r2
 80041bc:	eba3 0309 	sub.w	r3, r3, r9
 80041c0:	4543      	cmp	r3, r8
 80041c2:	f77f af79 	ble.w	80040b8 <_printf_float+0x250>
 80041c6:	2301      	movs	r3, #1
 80041c8:	4652      	mov	r2, sl
 80041ca:	4631      	mov	r1, r6
 80041cc:	4628      	mov	r0, r5
 80041ce:	47b8      	blx	r7
 80041d0:	3001      	adds	r0, #1
 80041d2:	f43f aeaa 	beq.w	8003f2a <_printf_float+0xc2>
 80041d6:	f108 0801 	add.w	r8, r8, #1
 80041da:	e7ec      	b.n	80041b6 <_printf_float+0x34e>
 80041dc:	4613      	mov	r3, r2
 80041de:	4631      	mov	r1, r6
 80041e0:	4642      	mov	r2, r8
 80041e2:	4628      	mov	r0, r5
 80041e4:	47b8      	blx	r7
 80041e6:	3001      	adds	r0, #1
 80041e8:	d1c0      	bne.n	800416c <_printf_float+0x304>
 80041ea:	e69e      	b.n	8003f2a <_printf_float+0xc2>
 80041ec:	2301      	movs	r3, #1
 80041ee:	4631      	mov	r1, r6
 80041f0:	4628      	mov	r0, r5
 80041f2:	9205      	str	r2, [sp, #20]
 80041f4:	47b8      	blx	r7
 80041f6:	3001      	adds	r0, #1
 80041f8:	f43f ae97 	beq.w	8003f2a <_printf_float+0xc2>
 80041fc:	9a05      	ldr	r2, [sp, #20]
 80041fe:	f10b 0b01 	add.w	fp, fp, #1
 8004202:	e7b9      	b.n	8004178 <_printf_float+0x310>
 8004204:	ee18 3a10 	vmov	r3, s16
 8004208:	4652      	mov	r2, sl
 800420a:	4631      	mov	r1, r6
 800420c:	4628      	mov	r0, r5
 800420e:	47b8      	blx	r7
 8004210:	3001      	adds	r0, #1
 8004212:	d1be      	bne.n	8004192 <_printf_float+0x32a>
 8004214:	e689      	b.n	8003f2a <_printf_float+0xc2>
 8004216:	9a05      	ldr	r2, [sp, #20]
 8004218:	464b      	mov	r3, r9
 800421a:	4442      	add	r2, r8
 800421c:	4631      	mov	r1, r6
 800421e:	4628      	mov	r0, r5
 8004220:	47b8      	blx	r7
 8004222:	3001      	adds	r0, #1
 8004224:	d1c1      	bne.n	80041aa <_printf_float+0x342>
 8004226:	e680      	b.n	8003f2a <_printf_float+0xc2>
 8004228:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800422a:	2a01      	cmp	r2, #1
 800422c:	dc01      	bgt.n	8004232 <_printf_float+0x3ca>
 800422e:	07db      	lsls	r3, r3, #31
 8004230:	d538      	bpl.n	80042a4 <_printf_float+0x43c>
 8004232:	2301      	movs	r3, #1
 8004234:	4642      	mov	r2, r8
 8004236:	4631      	mov	r1, r6
 8004238:	4628      	mov	r0, r5
 800423a:	47b8      	blx	r7
 800423c:	3001      	adds	r0, #1
 800423e:	f43f ae74 	beq.w	8003f2a <_printf_float+0xc2>
 8004242:	ee18 3a10 	vmov	r3, s16
 8004246:	4652      	mov	r2, sl
 8004248:	4631      	mov	r1, r6
 800424a:	4628      	mov	r0, r5
 800424c:	47b8      	blx	r7
 800424e:	3001      	adds	r0, #1
 8004250:	f43f ae6b 	beq.w	8003f2a <_printf_float+0xc2>
 8004254:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004258:	2200      	movs	r2, #0
 800425a:	2300      	movs	r3, #0
 800425c:	f7fc fc3c 	bl	8000ad8 <__aeabi_dcmpeq>
 8004260:	b9d8      	cbnz	r0, 800429a <_printf_float+0x432>
 8004262:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004264:	f108 0201 	add.w	r2, r8, #1
 8004268:	3b01      	subs	r3, #1
 800426a:	4631      	mov	r1, r6
 800426c:	4628      	mov	r0, r5
 800426e:	47b8      	blx	r7
 8004270:	3001      	adds	r0, #1
 8004272:	d10e      	bne.n	8004292 <_printf_float+0x42a>
 8004274:	e659      	b.n	8003f2a <_printf_float+0xc2>
 8004276:	2301      	movs	r3, #1
 8004278:	4652      	mov	r2, sl
 800427a:	4631      	mov	r1, r6
 800427c:	4628      	mov	r0, r5
 800427e:	47b8      	blx	r7
 8004280:	3001      	adds	r0, #1
 8004282:	f43f ae52 	beq.w	8003f2a <_printf_float+0xc2>
 8004286:	f108 0801 	add.w	r8, r8, #1
 800428a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800428c:	3b01      	subs	r3, #1
 800428e:	4543      	cmp	r3, r8
 8004290:	dcf1      	bgt.n	8004276 <_printf_float+0x40e>
 8004292:	464b      	mov	r3, r9
 8004294:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004298:	e6dc      	b.n	8004054 <_printf_float+0x1ec>
 800429a:	f04f 0800 	mov.w	r8, #0
 800429e:	f104 0a1a 	add.w	sl, r4, #26
 80042a2:	e7f2      	b.n	800428a <_printf_float+0x422>
 80042a4:	2301      	movs	r3, #1
 80042a6:	4642      	mov	r2, r8
 80042a8:	e7df      	b.n	800426a <_printf_float+0x402>
 80042aa:	2301      	movs	r3, #1
 80042ac:	464a      	mov	r2, r9
 80042ae:	4631      	mov	r1, r6
 80042b0:	4628      	mov	r0, r5
 80042b2:	47b8      	blx	r7
 80042b4:	3001      	adds	r0, #1
 80042b6:	f43f ae38 	beq.w	8003f2a <_printf_float+0xc2>
 80042ba:	f108 0801 	add.w	r8, r8, #1
 80042be:	68e3      	ldr	r3, [r4, #12]
 80042c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80042c2:	1a5b      	subs	r3, r3, r1
 80042c4:	4543      	cmp	r3, r8
 80042c6:	dcf0      	bgt.n	80042aa <_printf_float+0x442>
 80042c8:	e6fa      	b.n	80040c0 <_printf_float+0x258>
 80042ca:	f04f 0800 	mov.w	r8, #0
 80042ce:	f104 0919 	add.w	r9, r4, #25
 80042d2:	e7f4      	b.n	80042be <_printf_float+0x456>

080042d4 <_printf_common>:
 80042d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042d8:	4616      	mov	r6, r2
 80042da:	4699      	mov	r9, r3
 80042dc:	688a      	ldr	r2, [r1, #8]
 80042de:	690b      	ldr	r3, [r1, #16]
 80042e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80042e4:	4293      	cmp	r3, r2
 80042e6:	bfb8      	it	lt
 80042e8:	4613      	movlt	r3, r2
 80042ea:	6033      	str	r3, [r6, #0]
 80042ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80042f0:	4607      	mov	r7, r0
 80042f2:	460c      	mov	r4, r1
 80042f4:	b10a      	cbz	r2, 80042fa <_printf_common+0x26>
 80042f6:	3301      	adds	r3, #1
 80042f8:	6033      	str	r3, [r6, #0]
 80042fa:	6823      	ldr	r3, [r4, #0]
 80042fc:	0699      	lsls	r1, r3, #26
 80042fe:	bf42      	ittt	mi
 8004300:	6833      	ldrmi	r3, [r6, #0]
 8004302:	3302      	addmi	r3, #2
 8004304:	6033      	strmi	r3, [r6, #0]
 8004306:	6825      	ldr	r5, [r4, #0]
 8004308:	f015 0506 	ands.w	r5, r5, #6
 800430c:	d106      	bne.n	800431c <_printf_common+0x48>
 800430e:	f104 0a19 	add.w	sl, r4, #25
 8004312:	68e3      	ldr	r3, [r4, #12]
 8004314:	6832      	ldr	r2, [r6, #0]
 8004316:	1a9b      	subs	r3, r3, r2
 8004318:	42ab      	cmp	r3, r5
 800431a:	dc26      	bgt.n	800436a <_printf_common+0x96>
 800431c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004320:	1e13      	subs	r3, r2, #0
 8004322:	6822      	ldr	r2, [r4, #0]
 8004324:	bf18      	it	ne
 8004326:	2301      	movne	r3, #1
 8004328:	0692      	lsls	r2, r2, #26
 800432a:	d42b      	bmi.n	8004384 <_printf_common+0xb0>
 800432c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004330:	4649      	mov	r1, r9
 8004332:	4638      	mov	r0, r7
 8004334:	47c0      	blx	r8
 8004336:	3001      	adds	r0, #1
 8004338:	d01e      	beq.n	8004378 <_printf_common+0xa4>
 800433a:	6823      	ldr	r3, [r4, #0]
 800433c:	68e5      	ldr	r5, [r4, #12]
 800433e:	6832      	ldr	r2, [r6, #0]
 8004340:	f003 0306 	and.w	r3, r3, #6
 8004344:	2b04      	cmp	r3, #4
 8004346:	bf08      	it	eq
 8004348:	1aad      	subeq	r5, r5, r2
 800434a:	68a3      	ldr	r3, [r4, #8]
 800434c:	6922      	ldr	r2, [r4, #16]
 800434e:	bf0c      	ite	eq
 8004350:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004354:	2500      	movne	r5, #0
 8004356:	4293      	cmp	r3, r2
 8004358:	bfc4      	itt	gt
 800435a:	1a9b      	subgt	r3, r3, r2
 800435c:	18ed      	addgt	r5, r5, r3
 800435e:	2600      	movs	r6, #0
 8004360:	341a      	adds	r4, #26
 8004362:	42b5      	cmp	r5, r6
 8004364:	d11a      	bne.n	800439c <_printf_common+0xc8>
 8004366:	2000      	movs	r0, #0
 8004368:	e008      	b.n	800437c <_printf_common+0xa8>
 800436a:	2301      	movs	r3, #1
 800436c:	4652      	mov	r2, sl
 800436e:	4649      	mov	r1, r9
 8004370:	4638      	mov	r0, r7
 8004372:	47c0      	blx	r8
 8004374:	3001      	adds	r0, #1
 8004376:	d103      	bne.n	8004380 <_printf_common+0xac>
 8004378:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800437c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004380:	3501      	adds	r5, #1
 8004382:	e7c6      	b.n	8004312 <_printf_common+0x3e>
 8004384:	18e1      	adds	r1, r4, r3
 8004386:	1c5a      	adds	r2, r3, #1
 8004388:	2030      	movs	r0, #48	; 0x30
 800438a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800438e:	4422      	add	r2, r4
 8004390:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004394:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004398:	3302      	adds	r3, #2
 800439a:	e7c7      	b.n	800432c <_printf_common+0x58>
 800439c:	2301      	movs	r3, #1
 800439e:	4622      	mov	r2, r4
 80043a0:	4649      	mov	r1, r9
 80043a2:	4638      	mov	r0, r7
 80043a4:	47c0      	blx	r8
 80043a6:	3001      	adds	r0, #1
 80043a8:	d0e6      	beq.n	8004378 <_printf_common+0xa4>
 80043aa:	3601      	adds	r6, #1
 80043ac:	e7d9      	b.n	8004362 <_printf_common+0x8e>
	...

080043b0 <_printf_i>:
 80043b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80043b4:	460c      	mov	r4, r1
 80043b6:	4691      	mov	r9, r2
 80043b8:	7e27      	ldrb	r7, [r4, #24]
 80043ba:	990c      	ldr	r1, [sp, #48]	; 0x30
 80043bc:	2f78      	cmp	r7, #120	; 0x78
 80043be:	4680      	mov	r8, r0
 80043c0:	469a      	mov	sl, r3
 80043c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80043c6:	d807      	bhi.n	80043d8 <_printf_i+0x28>
 80043c8:	2f62      	cmp	r7, #98	; 0x62
 80043ca:	d80a      	bhi.n	80043e2 <_printf_i+0x32>
 80043cc:	2f00      	cmp	r7, #0
 80043ce:	f000 80d8 	beq.w	8004582 <_printf_i+0x1d2>
 80043d2:	2f58      	cmp	r7, #88	; 0x58
 80043d4:	f000 80a3 	beq.w	800451e <_printf_i+0x16e>
 80043d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80043dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80043e0:	e03a      	b.n	8004458 <_printf_i+0xa8>
 80043e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80043e6:	2b15      	cmp	r3, #21
 80043e8:	d8f6      	bhi.n	80043d8 <_printf_i+0x28>
 80043ea:	a001      	add	r0, pc, #4	; (adr r0, 80043f0 <_printf_i+0x40>)
 80043ec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80043f0:	08004449 	.word	0x08004449
 80043f4:	0800445d 	.word	0x0800445d
 80043f8:	080043d9 	.word	0x080043d9
 80043fc:	080043d9 	.word	0x080043d9
 8004400:	080043d9 	.word	0x080043d9
 8004404:	080043d9 	.word	0x080043d9
 8004408:	0800445d 	.word	0x0800445d
 800440c:	080043d9 	.word	0x080043d9
 8004410:	080043d9 	.word	0x080043d9
 8004414:	080043d9 	.word	0x080043d9
 8004418:	080043d9 	.word	0x080043d9
 800441c:	08004569 	.word	0x08004569
 8004420:	0800448d 	.word	0x0800448d
 8004424:	0800454b 	.word	0x0800454b
 8004428:	080043d9 	.word	0x080043d9
 800442c:	080043d9 	.word	0x080043d9
 8004430:	0800458b 	.word	0x0800458b
 8004434:	080043d9 	.word	0x080043d9
 8004438:	0800448d 	.word	0x0800448d
 800443c:	080043d9 	.word	0x080043d9
 8004440:	080043d9 	.word	0x080043d9
 8004444:	08004553 	.word	0x08004553
 8004448:	680b      	ldr	r3, [r1, #0]
 800444a:	1d1a      	adds	r2, r3, #4
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	600a      	str	r2, [r1, #0]
 8004450:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004454:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004458:	2301      	movs	r3, #1
 800445a:	e0a3      	b.n	80045a4 <_printf_i+0x1f4>
 800445c:	6825      	ldr	r5, [r4, #0]
 800445e:	6808      	ldr	r0, [r1, #0]
 8004460:	062e      	lsls	r6, r5, #24
 8004462:	f100 0304 	add.w	r3, r0, #4
 8004466:	d50a      	bpl.n	800447e <_printf_i+0xce>
 8004468:	6805      	ldr	r5, [r0, #0]
 800446a:	600b      	str	r3, [r1, #0]
 800446c:	2d00      	cmp	r5, #0
 800446e:	da03      	bge.n	8004478 <_printf_i+0xc8>
 8004470:	232d      	movs	r3, #45	; 0x2d
 8004472:	426d      	negs	r5, r5
 8004474:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004478:	485e      	ldr	r0, [pc, #376]	; (80045f4 <_printf_i+0x244>)
 800447a:	230a      	movs	r3, #10
 800447c:	e019      	b.n	80044b2 <_printf_i+0x102>
 800447e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004482:	6805      	ldr	r5, [r0, #0]
 8004484:	600b      	str	r3, [r1, #0]
 8004486:	bf18      	it	ne
 8004488:	b22d      	sxthne	r5, r5
 800448a:	e7ef      	b.n	800446c <_printf_i+0xbc>
 800448c:	680b      	ldr	r3, [r1, #0]
 800448e:	6825      	ldr	r5, [r4, #0]
 8004490:	1d18      	adds	r0, r3, #4
 8004492:	6008      	str	r0, [r1, #0]
 8004494:	0628      	lsls	r0, r5, #24
 8004496:	d501      	bpl.n	800449c <_printf_i+0xec>
 8004498:	681d      	ldr	r5, [r3, #0]
 800449a:	e002      	b.n	80044a2 <_printf_i+0xf2>
 800449c:	0669      	lsls	r1, r5, #25
 800449e:	d5fb      	bpl.n	8004498 <_printf_i+0xe8>
 80044a0:	881d      	ldrh	r5, [r3, #0]
 80044a2:	4854      	ldr	r0, [pc, #336]	; (80045f4 <_printf_i+0x244>)
 80044a4:	2f6f      	cmp	r7, #111	; 0x6f
 80044a6:	bf0c      	ite	eq
 80044a8:	2308      	moveq	r3, #8
 80044aa:	230a      	movne	r3, #10
 80044ac:	2100      	movs	r1, #0
 80044ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80044b2:	6866      	ldr	r6, [r4, #4]
 80044b4:	60a6      	str	r6, [r4, #8]
 80044b6:	2e00      	cmp	r6, #0
 80044b8:	bfa2      	ittt	ge
 80044ba:	6821      	ldrge	r1, [r4, #0]
 80044bc:	f021 0104 	bicge.w	r1, r1, #4
 80044c0:	6021      	strge	r1, [r4, #0]
 80044c2:	b90d      	cbnz	r5, 80044c8 <_printf_i+0x118>
 80044c4:	2e00      	cmp	r6, #0
 80044c6:	d04d      	beq.n	8004564 <_printf_i+0x1b4>
 80044c8:	4616      	mov	r6, r2
 80044ca:	fbb5 f1f3 	udiv	r1, r5, r3
 80044ce:	fb03 5711 	mls	r7, r3, r1, r5
 80044d2:	5dc7      	ldrb	r7, [r0, r7]
 80044d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80044d8:	462f      	mov	r7, r5
 80044da:	42bb      	cmp	r3, r7
 80044dc:	460d      	mov	r5, r1
 80044de:	d9f4      	bls.n	80044ca <_printf_i+0x11a>
 80044e0:	2b08      	cmp	r3, #8
 80044e2:	d10b      	bne.n	80044fc <_printf_i+0x14c>
 80044e4:	6823      	ldr	r3, [r4, #0]
 80044e6:	07df      	lsls	r7, r3, #31
 80044e8:	d508      	bpl.n	80044fc <_printf_i+0x14c>
 80044ea:	6923      	ldr	r3, [r4, #16]
 80044ec:	6861      	ldr	r1, [r4, #4]
 80044ee:	4299      	cmp	r1, r3
 80044f0:	bfde      	ittt	le
 80044f2:	2330      	movle	r3, #48	; 0x30
 80044f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80044f8:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80044fc:	1b92      	subs	r2, r2, r6
 80044fe:	6122      	str	r2, [r4, #16]
 8004500:	f8cd a000 	str.w	sl, [sp]
 8004504:	464b      	mov	r3, r9
 8004506:	aa03      	add	r2, sp, #12
 8004508:	4621      	mov	r1, r4
 800450a:	4640      	mov	r0, r8
 800450c:	f7ff fee2 	bl	80042d4 <_printf_common>
 8004510:	3001      	adds	r0, #1
 8004512:	d14c      	bne.n	80045ae <_printf_i+0x1fe>
 8004514:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004518:	b004      	add	sp, #16
 800451a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800451e:	4835      	ldr	r0, [pc, #212]	; (80045f4 <_printf_i+0x244>)
 8004520:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004524:	6823      	ldr	r3, [r4, #0]
 8004526:	680e      	ldr	r6, [r1, #0]
 8004528:	061f      	lsls	r7, r3, #24
 800452a:	f856 5b04 	ldr.w	r5, [r6], #4
 800452e:	600e      	str	r6, [r1, #0]
 8004530:	d514      	bpl.n	800455c <_printf_i+0x1ac>
 8004532:	07d9      	lsls	r1, r3, #31
 8004534:	bf44      	itt	mi
 8004536:	f043 0320 	orrmi.w	r3, r3, #32
 800453a:	6023      	strmi	r3, [r4, #0]
 800453c:	b91d      	cbnz	r5, 8004546 <_printf_i+0x196>
 800453e:	6823      	ldr	r3, [r4, #0]
 8004540:	f023 0320 	bic.w	r3, r3, #32
 8004544:	6023      	str	r3, [r4, #0]
 8004546:	2310      	movs	r3, #16
 8004548:	e7b0      	b.n	80044ac <_printf_i+0xfc>
 800454a:	6823      	ldr	r3, [r4, #0]
 800454c:	f043 0320 	orr.w	r3, r3, #32
 8004550:	6023      	str	r3, [r4, #0]
 8004552:	2378      	movs	r3, #120	; 0x78
 8004554:	4828      	ldr	r0, [pc, #160]	; (80045f8 <_printf_i+0x248>)
 8004556:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800455a:	e7e3      	b.n	8004524 <_printf_i+0x174>
 800455c:	065e      	lsls	r6, r3, #25
 800455e:	bf48      	it	mi
 8004560:	b2ad      	uxthmi	r5, r5
 8004562:	e7e6      	b.n	8004532 <_printf_i+0x182>
 8004564:	4616      	mov	r6, r2
 8004566:	e7bb      	b.n	80044e0 <_printf_i+0x130>
 8004568:	680b      	ldr	r3, [r1, #0]
 800456a:	6826      	ldr	r6, [r4, #0]
 800456c:	6960      	ldr	r0, [r4, #20]
 800456e:	1d1d      	adds	r5, r3, #4
 8004570:	600d      	str	r5, [r1, #0]
 8004572:	0635      	lsls	r5, r6, #24
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	d501      	bpl.n	800457c <_printf_i+0x1cc>
 8004578:	6018      	str	r0, [r3, #0]
 800457a:	e002      	b.n	8004582 <_printf_i+0x1d2>
 800457c:	0671      	lsls	r1, r6, #25
 800457e:	d5fb      	bpl.n	8004578 <_printf_i+0x1c8>
 8004580:	8018      	strh	r0, [r3, #0]
 8004582:	2300      	movs	r3, #0
 8004584:	6123      	str	r3, [r4, #16]
 8004586:	4616      	mov	r6, r2
 8004588:	e7ba      	b.n	8004500 <_printf_i+0x150>
 800458a:	680b      	ldr	r3, [r1, #0]
 800458c:	1d1a      	adds	r2, r3, #4
 800458e:	600a      	str	r2, [r1, #0]
 8004590:	681e      	ldr	r6, [r3, #0]
 8004592:	6862      	ldr	r2, [r4, #4]
 8004594:	2100      	movs	r1, #0
 8004596:	4630      	mov	r0, r6
 8004598:	f7fb fe2a 	bl	80001f0 <memchr>
 800459c:	b108      	cbz	r0, 80045a2 <_printf_i+0x1f2>
 800459e:	1b80      	subs	r0, r0, r6
 80045a0:	6060      	str	r0, [r4, #4]
 80045a2:	6863      	ldr	r3, [r4, #4]
 80045a4:	6123      	str	r3, [r4, #16]
 80045a6:	2300      	movs	r3, #0
 80045a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045ac:	e7a8      	b.n	8004500 <_printf_i+0x150>
 80045ae:	6923      	ldr	r3, [r4, #16]
 80045b0:	4632      	mov	r2, r6
 80045b2:	4649      	mov	r1, r9
 80045b4:	4640      	mov	r0, r8
 80045b6:	47d0      	blx	sl
 80045b8:	3001      	adds	r0, #1
 80045ba:	d0ab      	beq.n	8004514 <_printf_i+0x164>
 80045bc:	6823      	ldr	r3, [r4, #0]
 80045be:	079b      	lsls	r3, r3, #30
 80045c0:	d413      	bmi.n	80045ea <_printf_i+0x23a>
 80045c2:	68e0      	ldr	r0, [r4, #12]
 80045c4:	9b03      	ldr	r3, [sp, #12]
 80045c6:	4298      	cmp	r0, r3
 80045c8:	bfb8      	it	lt
 80045ca:	4618      	movlt	r0, r3
 80045cc:	e7a4      	b.n	8004518 <_printf_i+0x168>
 80045ce:	2301      	movs	r3, #1
 80045d0:	4632      	mov	r2, r6
 80045d2:	4649      	mov	r1, r9
 80045d4:	4640      	mov	r0, r8
 80045d6:	47d0      	blx	sl
 80045d8:	3001      	adds	r0, #1
 80045da:	d09b      	beq.n	8004514 <_printf_i+0x164>
 80045dc:	3501      	adds	r5, #1
 80045de:	68e3      	ldr	r3, [r4, #12]
 80045e0:	9903      	ldr	r1, [sp, #12]
 80045e2:	1a5b      	subs	r3, r3, r1
 80045e4:	42ab      	cmp	r3, r5
 80045e6:	dcf2      	bgt.n	80045ce <_printf_i+0x21e>
 80045e8:	e7eb      	b.n	80045c2 <_printf_i+0x212>
 80045ea:	2500      	movs	r5, #0
 80045ec:	f104 0619 	add.w	r6, r4, #25
 80045f0:	e7f5      	b.n	80045de <_printf_i+0x22e>
 80045f2:	bf00      	nop
 80045f4:	08006ad2 	.word	0x08006ad2
 80045f8:	08006ae3 	.word	0x08006ae3

080045fc <_vsiprintf_r>:
 80045fc:	b500      	push	{lr}
 80045fe:	b09b      	sub	sp, #108	; 0x6c
 8004600:	9100      	str	r1, [sp, #0]
 8004602:	9104      	str	r1, [sp, #16]
 8004604:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004608:	9105      	str	r1, [sp, #20]
 800460a:	9102      	str	r1, [sp, #8]
 800460c:	4905      	ldr	r1, [pc, #20]	; (8004624 <_vsiprintf_r+0x28>)
 800460e:	9103      	str	r1, [sp, #12]
 8004610:	4669      	mov	r1, sp
 8004612:	f001 fb3b 	bl	8005c8c <_svfiprintf_r>
 8004616:	9b00      	ldr	r3, [sp, #0]
 8004618:	2200      	movs	r2, #0
 800461a:	701a      	strb	r2, [r3, #0]
 800461c:	b01b      	add	sp, #108	; 0x6c
 800461e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004622:	bf00      	nop
 8004624:	ffff0208 	.word	0xffff0208

08004628 <vsiprintf>:
 8004628:	4613      	mov	r3, r2
 800462a:	460a      	mov	r2, r1
 800462c:	4601      	mov	r1, r0
 800462e:	4802      	ldr	r0, [pc, #8]	; (8004638 <vsiprintf+0x10>)
 8004630:	6800      	ldr	r0, [r0, #0]
 8004632:	f7ff bfe3 	b.w	80045fc <_vsiprintf_r>
 8004636:	bf00      	nop
 8004638:	20000010 	.word	0x20000010

0800463c <quorem>:
 800463c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004640:	6903      	ldr	r3, [r0, #16]
 8004642:	690c      	ldr	r4, [r1, #16]
 8004644:	42a3      	cmp	r3, r4
 8004646:	4607      	mov	r7, r0
 8004648:	f2c0 8081 	blt.w	800474e <quorem+0x112>
 800464c:	3c01      	subs	r4, #1
 800464e:	f101 0814 	add.w	r8, r1, #20
 8004652:	f100 0514 	add.w	r5, r0, #20
 8004656:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800465a:	9301      	str	r3, [sp, #4]
 800465c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004660:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004664:	3301      	adds	r3, #1
 8004666:	429a      	cmp	r2, r3
 8004668:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800466c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004670:	fbb2 f6f3 	udiv	r6, r2, r3
 8004674:	d331      	bcc.n	80046da <quorem+0x9e>
 8004676:	f04f 0e00 	mov.w	lr, #0
 800467a:	4640      	mov	r0, r8
 800467c:	46ac      	mov	ip, r5
 800467e:	46f2      	mov	sl, lr
 8004680:	f850 2b04 	ldr.w	r2, [r0], #4
 8004684:	b293      	uxth	r3, r2
 8004686:	fb06 e303 	mla	r3, r6, r3, lr
 800468a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800468e:	b29b      	uxth	r3, r3
 8004690:	ebaa 0303 	sub.w	r3, sl, r3
 8004694:	0c12      	lsrs	r2, r2, #16
 8004696:	f8dc a000 	ldr.w	sl, [ip]
 800469a:	fb06 e202 	mla	r2, r6, r2, lr
 800469e:	fa13 f38a 	uxtah	r3, r3, sl
 80046a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80046a6:	fa1f fa82 	uxth.w	sl, r2
 80046aa:	f8dc 2000 	ldr.w	r2, [ip]
 80046ae:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80046b2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80046bc:	4581      	cmp	r9, r0
 80046be:	f84c 3b04 	str.w	r3, [ip], #4
 80046c2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80046c6:	d2db      	bcs.n	8004680 <quorem+0x44>
 80046c8:	f855 300b 	ldr.w	r3, [r5, fp]
 80046cc:	b92b      	cbnz	r3, 80046da <quorem+0x9e>
 80046ce:	9b01      	ldr	r3, [sp, #4]
 80046d0:	3b04      	subs	r3, #4
 80046d2:	429d      	cmp	r5, r3
 80046d4:	461a      	mov	r2, r3
 80046d6:	d32e      	bcc.n	8004736 <quorem+0xfa>
 80046d8:	613c      	str	r4, [r7, #16]
 80046da:	4638      	mov	r0, r7
 80046dc:	f001 f8c0 	bl	8005860 <__mcmp>
 80046e0:	2800      	cmp	r0, #0
 80046e2:	db24      	blt.n	800472e <quorem+0xf2>
 80046e4:	3601      	adds	r6, #1
 80046e6:	4628      	mov	r0, r5
 80046e8:	f04f 0c00 	mov.w	ip, #0
 80046ec:	f858 2b04 	ldr.w	r2, [r8], #4
 80046f0:	f8d0 e000 	ldr.w	lr, [r0]
 80046f4:	b293      	uxth	r3, r2
 80046f6:	ebac 0303 	sub.w	r3, ip, r3
 80046fa:	0c12      	lsrs	r2, r2, #16
 80046fc:	fa13 f38e 	uxtah	r3, r3, lr
 8004700:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004704:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004708:	b29b      	uxth	r3, r3
 800470a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800470e:	45c1      	cmp	r9, r8
 8004710:	f840 3b04 	str.w	r3, [r0], #4
 8004714:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004718:	d2e8      	bcs.n	80046ec <quorem+0xb0>
 800471a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800471e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004722:	b922      	cbnz	r2, 800472e <quorem+0xf2>
 8004724:	3b04      	subs	r3, #4
 8004726:	429d      	cmp	r5, r3
 8004728:	461a      	mov	r2, r3
 800472a:	d30a      	bcc.n	8004742 <quorem+0x106>
 800472c:	613c      	str	r4, [r7, #16]
 800472e:	4630      	mov	r0, r6
 8004730:	b003      	add	sp, #12
 8004732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004736:	6812      	ldr	r2, [r2, #0]
 8004738:	3b04      	subs	r3, #4
 800473a:	2a00      	cmp	r2, #0
 800473c:	d1cc      	bne.n	80046d8 <quorem+0x9c>
 800473e:	3c01      	subs	r4, #1
 8004740:	e7c7      	b.n	80046d2 <quorem+0x96>
 8004742:	6812      	ldr	r2, [r2, #0]
 8004744:	3b04      	subs	r3, #4
 8004746:	2a00      	cmp	r2, #0
 8004748:	d1f0      	bne.n	800472c <quorem+0xf0>
 800474a:	3c01      	subs	r4, #1
 800474c:	e7eb      	b.n	8004726 <quorem+0xea>
 800474e:	2000      	movs	r0, #0
 8004750:	e7ee      	b.n	8004730 <quorem+0xf4>
 8004752:	0000      	movs	r0, r0
 8004754:	0000      	movs	r0, r0
	...

08004758 <_dtoa_r>:
 8004758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800475c:	ed2d 8b02 	vpush	{d8}
 8004760:	ec57 6b10 	vmov	r6, r7, d0
 8004764:	b095      	sub	sp, #84	; 0x54
 8004766:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004768:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800476c:	9105      	str	r1, [sp, #20]
 800476e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004772:	4604      	mov	r4, r0
 8004774:	9209      	str	r2, [sp, #36]	; 0x24
 8004776:	930f      	str	r3, [sp, #60]	; 0x3c
 8004778:	b975      	cbnz	r5, 8004798 <_dtoa_r+0x40>
 800477a:	2010      	movs	r0, #16
 800477c:	f000 fddc 	bl	8005338 <malloc>
 8004780:	4602      	mov	r2, r0
 8004782:	6260      	str	r0, [r4, #36]	; 0x24
 8004784:	b920      	cbnz	r0, 8004790 <_dtoa_r+0x38>
 8004786:	4bb2      	ldr	r3, [pc, #712]	; (8004a50 <_dtoa_r+0x2f8>)
 8004788:	21ea      	movs	r1, #234	; 0xea
 800478a:	48b2      	ldr	r0, [pc, #712]	; (8004a54 <_dtoa_r+0x2fc>)
 800478c:	f001 fb8e 	bl	8005eac <__assert_func>
 8004790:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004794:	6005      	str	r5, [r0, #0]
 8004796:	60c5      	str	r5, [r0, #12]
 8004798:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800479a:	6819      	ldr	r1, [r3, #0]
 800479c:	b151      	cbz	r1, 80047b4 <_dtoa_r+0x5c>
 800479e:	685a      	ldr	r2, [r3, #4]
 80047a0:	604a      	str	r2, [r1, #4]
 80047a2:	2301      	movs	r3, #1
 80047a4:	4093      	lsls	r3, r2
 80047a6:	608b      	str	r3, [r1, #8]
 80047a8:	4620      	mov	r0, r4
 80047aa:	f000 fe1b 	bl	80053e4 <_Bfree>
 80047ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80047b0:	2200      	movs	r2, #0
 80047b2:	601a      	str	r2, [r3, #0]
 80047b4:	1e3b      	subs	r3, r7, #0
 80047b6:	bfb9      	ittee	lt
 80047b8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80047bc:	9303      	strlt	r3, [sp, #12]
 80047be:	2300      	movge	r3, #0
 80047c0:	f8c8 3000 	strge.w	r3, [r8]
 80047c4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80047c8:	4ba3      	ldr	r3, [pc, #652]	; (8004a58 <_dtoa_r+0x300>)
 80047ca:	bfbc      	itt	lt
 80047cc:	2201      	movlt	r2, #1
 80047ce:	f8c8 2000 	strlt.w	r2, [r8]
 80047d2:	ea33 0309 	bics.w	r3, r3, r9
 80047d6:	d11b      	bne.n	8004810 <_dtoa_r+0xb8>
 80047d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80047da:	f242 730f 	movw	r3, #9999	; 0x270f
 80047de:	6013      	str	r3, [r2, #0]
 80047e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80047e4:	4333      	orrs	r3, r6
 80047e6:	f000 857a 	beq.w	80052de <_dtoa_r+0xb86>
 80047ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80047ec:	b963      	cbnz	r3, 8004808 <_dtoa_r+0xb0>
 80047ee:	4b9b      	ldr	r3, [pc, #620]	; (8004a5c <_dtoa_r+0x304>)
 80047f0:	e024      	b.n	800483c <_dtoa_r+0xe4>
 80047f2:	4b9b      	ldr	r3, [pc, #620]	; (8004a60 <_dtoa_r+0x308>)
 80047f4:	9300      	str	r3, [sp, #0]
 80047f6:	3308      	adds	r3, #8
 80047f8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80047fa:	6013      	str	r3, [r2, #0]
 80047fc:	9800      	ldr	r0, [sp, #0]
 80047fe:	b015      	add	sp, #84	; 0x54
 8004800:	ecbd 8b02 	vpop	{d8}
 8004804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004808:	4b94      	ldr	r3, [pc, #592]	; (8004a5c <_dtoa_r+0x304>)
 800480a:	9300      	str	r3, [sp, #0]
 800480c:	3303      	adds	r3, #3
 800480e:	e7f3      	b.n	80047f8 <_dtoa_r+0xa0>
 8004810:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004814:	2200      	movs	r2, #0
 8004816:	ec51 0b17 	vmov	r0, r1, d7
 800481a:	2300      	movs	r3, #0
 800481c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8004820:	f7fc f95a 	bl	8000ad8 <__aeabi_dcmpeq>
 8004824:	4680      	mov	r8, r0
 8004826:	b158      	cbz	r0, 8004840 <_dtoa_r+0xe8>
 8004828:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800482a:	2301      	movs	r3, #1
 800482c:	6013      	str	r3, [r2, #0]
 800482e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004830:	2b00      	cmp	r3, #0
 8004832:	f000 8551 	beq.w	80052d8 <_dtoa_r+0xb80>
 8004836:	488b      	ldr	r0, [pc, #556]	; (8004a64 <_dtoa_r+0x30c>)
 8004838:	6018      	str	r0, [r3, #0]
 800483a:	1e43      	subs	r3, r0, #1
 800483c:	9300      	str	r3, [sp, #0]
 800483e:	e7dd      	b.n	80047fc <_dtoa_r+0xa4>
 8004840:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8004844:	aa12      	add	r2, sp, #72	; 0x48
 8004846:	a913      	add	r1, sp, #76	; 0x4c
 8004848:	4620      	mov	r0, r4
 800484a:	f001 f8ad 	bl	80059a8 <__d2b>
 800484e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004852:	4683      	mov	fp, r0
 8004854:	2d00      	cmp	r5, #0
 8004856:	d07c      	beq.n	8004952 <_dtoa_r+0x1fa>
 8004858:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800485a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800485e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004862:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8004866:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800486a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800486e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004872:	4b7d      	ldr	r3, [pc, #500]	; (8004a68 <_dtoa_r+0x310>)
 8004874:	2200      	movs	r2, #0
 8004876:	4630      	mov	r0, r6
 8004878:	4639      	mov	r1, r7
 800487a:	f7fb fd0d 	bl	8000298 <__aeabi_dsub>
 800487e:	a36e      	add	r3, pc, #440	; (adr r3, 8004a38 <_dtoa_r+0x2e0>)
 8004880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004884:	f7fb fec0 	bl	8000608 <__aeabi_dmul>
 8004888:	a36d      	add	r3, pc, #436	; (adr r3, 8004a40 <_dtoa_r+0x2e8>)
 800488a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800488e:	f7fb fd05 	bl	800029c <__adddf3>
 8004892:	4606      	mov	r6, r0
 8004894:	4628      	mov	r0, r5
 8004896:	460f      	mov	r7, r1
 8004898:	f7fb fe4c 	bl	8000534 <__aeabi_i2d>
 800489c:	a36a      	add	r3, pc, #424	; (adr r3, 8004a48 <_dtoa_r+0x2f0>)
 800489e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a2:	f7fb feb1 	bl	8000608 <__aeabi_dmul>
 80048a6:	4602      	mov	r2, r0
 80048a8:	460b      	mov	r3, r1
 80048aa:	4630      	mov	r0, r6
 80048ac:	4639      	mov	r1, r7
 80048ae:	f7fb fcf5 	bl	800029c <__adddf3>
 80048b2:	4606      	mov	r6, r0
 80048b4:	460f      	mov	r7, r1
 80048b6:	f7fc f957 	bl	8000b68 <__aeabi_d2iz>
 80048ba:	2200      	movs	r2, #0
 80048bc:	4682      	mov	sl, r0
 80048be:	2300      	movs	r3, #0
 80048c0:	4630      	mov	r0, r6
 80048c2:	4639      	mov	r1, r7
 80048c4:	f7fc f912 	bl	8000aec <__aeabi_dcmplt>
 80048c8:	b148      	cbz	r0, 80048de <_dtoa_r+0x186>
 80048ca:	4650      	mov	r0, sl
 80048cc:	f7fb fe32 	bl	8000534 <__aeabi_i2d>
 80048d0:	4632      	mov	r2, r6
 80048d2:	463b      	mov	r3, r7
 80048d4:	f7fc f900 	bl	8000ad8 <__aeabi_dcmpeq>
 80048d8:	b908      	cbnz	r0, 80048de <_dtoa_r+0x186>
 80048da:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80048de:	f1ba 0f16 	cmp.w	sl, #22
 80048e2:	d854      	bhi.n	800498e <_dtoa_r+0x236>
 80048e4:	4b61      	ldr	r3, [pc, #388]	; (8004a6c <_dtoa_r+0x314>)
 80048e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80048ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80048f2:	f7fc f8fb 	bl	8000aec <__aeabi_dcmplt>
 80048f6:	2800      	cmp	r0, #0
 80048f8:	d04b      	beq.n	8004992 <_dtoa_r+0x23a>
 80048fa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80048fe:	2300      	movs	r3, #0
 8004900:	930e      	str	r3, [sp, #56]	; 0x38
 8004902:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004904:	1b5d      	subs	r5, r3, r5
 8004906:	1e6b      	subs	r3, r5, #1
 8004908:	9304      	str	r3, [sp, #16]
 800490a:	bf43      	ittte	mi
 800490c:	2300      	movmi	r3, #0
 800490e:	f1c5 0801 	rsbmi	r8, r5, #1
 8004912:	9304      	strmi	r3, [sp, #16]
 8004914:	f04f 0800 	movpl.w	r8, #0
 8004918:	f1ba 0f00 	cmp.w	sl, #0
 800491c:	db3b      	blt.n	8004996 <_dtoa_r+0x23e>
 800491e:	9b04      	ldr	r3, [sp, #16]
 8004920:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8004924:	4453      	add	r3, sl
 8004926:	9304      	str	r3, [sp, #16]
 8004928:	2300      	movs	r3, #0
 800492a:	9306      	str	r3, [sp, #24]
 800492c:	9b05      	ldr	r3, [sp, #20]
 800492e:	2b09      	cmp	r3, #9
 8004930:	d869      	bhi.n	8004a06 <_dtoa_r+0x2ae>
 8004932:	2b05      	cmp	r3, #5
 8004934:	bfc4      	itt	gt
 8004936:	3b04      	subgt	r3, #4
 8004938:	9305      	strgt	r3, [sp, #20]
 800493a:	9b05      	ldr	r3, [sp, #20]
 800493c:	f1a3 0302 	sub.w	r3, r3, #2
 8004940:	bfcc      	ite	gt
 8004942:	2500      	movgt	r5, #0
 8004944:	2501      	movle	r5, #1
 8004946:	2b03      	cmp	r3, #3
 8004948:	d869      	bhi.n	8004a1e <_dtoa_r+0x2c6>
 800494a:	e8df f003 	tbb	[pc, r3]
 800494e:	4e2c      	.short	0x4e2c
 8004950:	5a4c      	.short	0x5a4c
 8004952:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8004956:	441d      	add	r5, r3
 8004958:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800495c:	2b20      	cmp	r3, #32
 800495e:	bfc1      	itttt	gt
 8004960:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004964:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004968:	fa09 f303 	lslgt.w	r3, r9, r3
 800496c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004970:	bfda      	itte	le
 8004972:	f1c3 0320 	rsble	r3, r3, #32
 8004976:	fa06 f003 	lslle.w	r0, r6, r3
 800497a:	4318      	orrgt	r0, r3
 800497c:	f7fb fdca 	bl	8000514 <__aeabi_ui2d>
 8004980:	2301      	movs	r3, #1
 8004982:	4606      	mov	r6, r0
 8004984:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004988:	3d01      	subs	r5, #1
 800498a:	9310      	str	r3, [sp, #64]	; 0x40
 800498c:	e771      	b.n	8004872 <_dtoa_r+0x11a>
 800498e:	2301      	movs	r3, #1
 8004990:	e7b6      	b.n	8004900 <_dtoa_r+0x1a8>
 8004992:	900e      	str	r0, [sp, #56]	; 0x38
 8004994:	e7b5      	b.n	8004902 <_dtoa_r+0x1aa>
 8004996:	f1ca 0300 	rsb	r3, sl, #0
 800499a:	9306      	str	r3, [sp, #24]
 800499c:	2300      	movs	r3, #0
 800499e:	eba8 080a 	sub.w	r8, r8, sl
 80049a2:	930d      	str	r3, [sp, #52]	; 0x34
 80049a4:	e7c2      	b.n	800492c <_dtoa_r+0x1d4>
 80049a6:	2300      	movs	r3, #0
 80049a8:	9308      	str	r3, [sp, #32]
 80049aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	dc39      	bgt.n	8004a24 <_dtoa_r+0x2cc>
 80049b0:	f04f 0901 	mov.w	r9, #1
 80049b4:	f8cd 9004 	str.w	r9, [sp, #4]
 80049b8:	464b      	mov	r3, r9
 80049ba:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80049be:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80049c0:	2200      	movs	r2, #0
 80049c2:	6042      	str	r2, [r0, #4]
 80049c4:	2204      	movs	r2, #4
 80049c6:	f102 0614 	add.w	r6, r2, #20
 80049ca:	429e      	cmp	r6, r3
 80049cc:	6841      	ldr	r1, [r0, #4]
 80049ce:	d92f      	bls.n	8004a30 <_dtoa_r+0x2d8>
 80049d0:	4620      	mov	r0, r4
 80049d2:	f000 fcc7 	bl	8005364 <_Balloc>
 80049d6:	9000      	str	r0, [sp, #0]
 80049d8:	2800      	cmp	r0, #0
 80049da:	d14b      	bne.n	8004a74 <_dtoa_r+0x31c>
 80049dc:	4b24      	ldr	r3, [pc, #144]	; (8004a70 <_dtoa_r+0x318>)
 80049de:	4602      	mov	r2, r0
 80049e0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80049e4:	e6d1      	b.n	800478a <_dtoa_r+0x32>
 80049e6:	2301      	movs	r3, #1
 80049e8:	e7de      	b.n	80049a8 <_dtoa_r+0x250>
 80049ea:	2300      	movs	r3, #0
 80049ec:	9308      	str	r3, [sp, #32]
 80049ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049f0:	eb0a 0903 	add.w	r9, sl, r3
 80049f4:	f109 0301 	add.w	r3, r9, #1
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	9301      	str	r3, [sp, #4]
 80049fc:	bfb8      	it	lt
 80049fe:	2301      	movlt	r3, #1
 8004a00:	e7dd      	b.n	80049be <_dtoa_r+0x266>
 8004a02:	2301      	movs	r3, #1
 8004a04:	e7f2      	b.n	80049ec <_dtoa_r+0x294>
 8004a06:	2501      	movs	r5, #1
 8004a08:	2300      	movs	r3, #0
 8004a0a:	9305      	str	r3, [sp, #20]
 8004a0c:	9508      	str	r5, [sp, #32]
 8004a0e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8004a12:	2200      	movs	r2, #0
 8004a14:	f8cd 9004 	str.w	r9, [sp, #4]
 8004a18:	2312      	movs	r3, #18
 8004a1a:	9209      	str	r2, [sp, #36]	; 0x24
 8004a1c:	e7cf      	b.n	80049be <_dtoa_r+0x266>
 8004a1e:	2301      	movs	r3, #1
 8004a20:	9308      	str	r3, [sp, #32]
 8004a22:	e7f4      	b.n	8004a0e <_dtoa_r+0x2b6>
 8004a24:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8004a28:	f8cd 9004 	str.w	r9, [sp, #4]
 8004a2c:	464b      	mov	r3, r9
 8004a2e:	e7c6      	b.n	80049be <_dtoa_r+0x266>
 8004a30:	3101      	adds	r1, #1
 8004a32:	6041      	str	r1, [r0, #4]
 8004a34:	0052      	lsls	r2, r2, #1
 8004a36:	e7c6      	b.n	80049c6 <_dtoa_r+0x26e>
 8004a38:	636f4361 	.word	0x636f4361
 8004a3c:	3fd287a7 	.word	0x3fd287a7
 8004a40:	8b60c8b3 	.word	0x8b60c8b3
 8004a44:	3fc68a28 	.word	0x3fc68a28
 8004a48:	509f79fb 	.word	0x509f79fb
 8004a4c:	3fd34413 	.word	0x3fd34413
 8004a50:	08006b01 	.word	0x08006b01
 8004a54:	08006b18 	.word	0x08006b18
 8004a58:	7ff00000 	.word	0x7ff00000
 8004a5c:	08006afd 	.word	0x08006afd
 8004a60:	08006af4 	.word	0x08006af4
 8004a64:	08006ad1 	.word	0x08006ad1
 8004a68:	3ff80000 	.word	0x3ff80000
 8004a6c:	08006c10 	.word	0x08006c10
 8004a70:	08006b77 	.word	0x08006b77
 8004a74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a76:	9a00      	ldr	r2, [sp, #0]
 8004a78:	601a      	str	r2, [r3, #0]
 8004a7a:	9b01      	ldr	r3, [sp, #4]
 8004a7c:	2b0e      	cmp	r3, #14
 8004a7e:	f200 80ad 	bhi.w	8004bdc <_dtoa_r+0x484>
 8004a82:	2d00      	cmp	r5, #0
 8004a84:	f000 80aa 	beq.w	8004bdc <_dtoa_r+0x484>
 8004a88:	f1ba 0f00 	cmp.w	sl, #0
 8004a8c:	dd36      	ble.n	8004afc <_dtoa_r+0x3a4>
 8004a8e:	4ac3      	ldr	r2, [pc, #780]	; (8004d9c <_dtoa_r+0x644>)
 8004a90:	f00a 030f 	and.w	r3, sl, #15
 8004a94:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004a98:	ed93 7b00 	vldr	d7, [r3]
 8004a9c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004aa0:	ea4f 172a 	mov.w	r7, sl, asr #4
 8004aa4:	eeb0 8a47 	vmov.f32	s16, s14
 8004aa8:	eef0 8a67 	vmov.f32	s17, s15
 8004aac:	d016      	beq.n	8004adc <_dtoa_r+0x384>
 8004aae:	4bbc      	ldr	r3, [pc, #752]	; (8004da0 <_dtoa_r+0x648>)
 8004ab0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004ab4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004ab8:	f7fb fed0 	bl	800085c <__aeabi_ddiv>
 8004abc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ac0:	f007 070f 	and.w	r7, r7, #15
 8004ac4:	2503      	movs	r5, #3
 8004ac6:	4eb6      	ldr	r6, [pc, #728]	; (8004da0 <_dtoa_r+0x648>)
 8004ac8:	b957      	cbnz	r7, 8004ae0 <_dtoa_r+0x388>
 8004aca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ace:	ec53 2b18 	vmov	r2, r3, d8
 8004ad2:	f7fb fec3 	bl	800085c <__aeabi_ddiv>
 8004ad6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ada:	e029      	b.n	8004b30 <_dtoa_r+0x3d8>
 8004adc:	2502      	movs	r5, #2
 8004ade:	e7f2      	b.n	8004ac6 <_dtoa_r+0x36e>
 8004ae0:	07f9      	lsls	r1, r7, #31
 8004ae2:	d508      	bpl.n	8004af6 <_dtoa_r+0x39e>
 8004ae4:	ec51 0b18 	vmov	r0, r1, d8
 8004ae8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004aec:	f7fb fd8c 	bl	8000608 <__aeabi_dmul>
 8004af0:	ec41 0b18 	vmov	d8, r0, r1
 8004af4:	3501      	adds	r5, #1
 8004af6:	107f      	asrs	r7, r7, #1
 8004af8:	3608      	adds	r6, #8
 8004afa:	e7e5      	b.n	8004ac8 <_dtoa_r+0x370>
 8004afc:	f000 80a6 	beq.w	8004c4c <_dtoa_r+0x4f4>
 8004b00:	f1ca 0600 	rsb	r6, sl, #0
 8004b04:	4ba5      	ldr	r3, [pc, #660]	; (8004d9c <_dtoa_r+0x644>)
 8004b06:	4fa6      	ldr	r7, [pc, #664]	; (8004da0 <_dtoa_r+0x648>)
 8004b08:	f006 020f 	and.w	r2, r6, #15
 8004b0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b14:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004b18:	f7fb fd76 	bl	8000608 <__aeabi_dmul>
 8004b1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b20:	1136      	asrs	r6, r6, #4
 8004b22:	2300      	movs	r3, #0
 8004b24:	2502      	movs	r5, #2
 8004b26:	2e00      	cmp	r6, #0
 8004b28:	f040 8085 	bne.w	8004c36 <_dtoa_r+0x4de>
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d1d2      	bne.n	8004ad6 <_dtoa_r+0x37e>
 8004b30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	f000 808c 	beq.w	8004c50 <_dtoa_r+0x4f8>
 8004b38:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004b3c:	4b99      	ldr	r3, [pc, #612]	; (8004da4 <_dtoa_r+0x64c>)
 8004b3e:	2200      	movs	r2, #0
 8004b40:	4630      	mov	r0, r6
 8004b42:	4639      	mov	r1, r7
 8004b44:	f7fb ffd2 	bl	8000aec <__aeabi_dcmplt>
 8004b48:	2800      	cmp	r0, #0
 8004b4a:	f000 8081 	beq.w	8004c50 <_dtoa_r+0x4f8>
 8004b4e:	9b01      	ldr	r3, [sp, #4]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d07d      	beq.n	8004c50 <_dtoa_r+0x4f8>
 8004b54:	f1b9 0f00 	cmp.w	r9, #0
 8004b58:	dd3c      	ble.n	8004bd4 <_dtoa_r+0x47c>
 8004b5a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8004b5e:	9307      	str	r3, [sp, #28]
 8004b60:	2200      	movs	r2, #0
 8004b62:	4b91      	ldr	r3, [pc, #580]	; (8004da8 <_dtoa_r+0x650>)
 8004b64:	4630      	mov	r0, r6
 8004b66:	4639      	mov	r1, r7
 8004b68:	f7fb fd4e 	bl	8000608 <__aeabi_dmul>
 8004b6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b70:	3501      	adds	r5, #1
 8004b72:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8004b76:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004b7a:	4628      	mov	r0, r5
 8004b7c:	f7fb fcda 	bl	8000534 <__aeabi_i2d>
 8004b80:	4632      	mov	r2, r6
 8004b82:	463b      	mov	r3, r7
 8004b84:	f7fb fd40 	bl	8000608 <__aeabi_dmul>
 8004b88:	4b88      	ldr	r3, [pc, #544]	; (8004dac <_dtoa_r+0x654>)
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f7fb fb86 	bl	800029c <__adddf3>
 8004b90:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8004b94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b98:	9303      	str	r3, [sp, #12]
 8004b9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d15c      	bne.n	8004c5a <_dtoa_r+0x502>
 8004ba0:	4b83      	ldr	r3, [pc, #524]	; (8004db0 <_dtoa_r+0x658>)
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	4630      	mov	r0, r6
 8004ba6:	4639      	mov	r1, r7
 8004ba8:	f7fb fb76 	bl	8000298 <__aeabi_dsub>
 8004bac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004bb0:	4606      	mov	r6, r0
 8004bb2:	460f      	mov	r7, r1
 8004bb4:	f7fb ffb8 	bl	8000b28 <__aeabi_dcmpgt>
 8004bb8:	2800      	cmp	r0, #0
 8004bba:	f040 8296 	bne.w	80050ea <_dtoa_r+0x992>
 8004bbe:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8004bc2:	4630      	mov	r0, r6
 8004bc4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004bc8:	4639      	mov	r1, r7
 8004bca:	f7fb ff8f 	bl	8000aec <__aeabi_dcmplt>
 8004bce:	2800      	cmp	r0, #0
 8004bd0:	f040 8288 	bne.w	80050e4 <_dtoa_r+0x98c>
 8004bd4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004bd8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004bdc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	f2c0 8158 	blt.w	8004e94 <_dtoa_r+0x73c>
 8004be4:	f1ba 0f0e 	cmp.w	sl, #14
 8004be8:	f300 8154 	bgt.w	8004e94 <_dtoa_r+0x73c>
 8004bec:	4b6b      	ldr	r3, [pc, #428]	; (8004d9c <_dtoa_r+0x644>)
 8004bee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004bf2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004bf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	f280 80e3 	bge.w	8004dc4 <_dtoa_r+0x66c>
 8004bfe:	9b01      	ldr	r3, [sp, #4]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f300 80df 	bgt.w	8004dc4 <_dtoa_r+0x66c>
 8004c06:	f040 826d 	bne.w	80050e4 <_dtoa_r+0x98c>
 8004c0a:	4b69      	ldr	r3, [pc, #420]	; (8004db0 <_dtoa_r+0x658>)
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	4640      	mov	r0, r8
 8004c10:	4649      	mov	r1, r9
 8004c12:	f7fb fcf9 	bl	8000608 <__aeabi_dmul>
 8004c16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004c1a:	f7fb ff7b 	bl	8000b14 <__aeabi_dcmpge>
 8004c1e:	9e01      	ldr	r6, [sp, #4]
 8004c20:	4637      	mov	r7, r6
 8004c22:	2800      	cmp	r0, #0
 8004c24:	f040 8243 	bne.w	80050ae <_dtoa_r+0x956>
 8004c28:	9d00      	ldr	r5, [sp, #0]
 8004c2a:	2331      	movs	r3, #49	; 0x31
 8004c2c:	f805 3b01 	strb.w	r3, [r5], #1
 8004c30:	f10a 0a01 	add.w	sl, sl, #1
 8004c34:	e23f      	b.n	80050b6 <_dtoa_r+0x95e>
 8004c36:	07f2      	lsls	r2, r6, #31
 8004c38:	d505      	bpl.n	8004c46 <_dtoa_r+0x4ee>
 8004c3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c3e:	f7fb fce3 	bl	8000608 <__aeabi_dmul>
 8004c42:	3501      	adds	r5, #1
 8004c44:	2301      	movs	r3, #1
 8004c46:	1076      	asrs	r6, r6, #1
 8004c48:	3708      	adds	r7, #8
 8004c4a:	e76c      	b.n	8004b26 <_dtoa_r+0x3ce>
 8004c4c:	2502      	movs	r5, #2
 8004c4e:	e76f      	b.n	8004b30 <_dtoa_r+0x3d8>
 8004c50:	9b01      	ldr	r3, [sp, #4]
 8004c52:	f8cd a01c 	str.w	sl, [sp, #28]
 8004c56:	930c      	str	r3, [sp, #48]	; 0x30
 8004c58:	e78d      	b.n	8004b76 <_dtoa_r+0x41e>
 8004c5a:	9900      	ldr	r1, [sp, #0]
 8004c5c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004c5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004c60:	4b4e      	ldr	r3, [pc, #312]	; (8004d9c <_dtoa_r+0x644>)
 8004c62:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004c66:	4401      	add	r1, r0
 8004c68:	9102      	str	r1, [sp, #8]
 8004c6a:	9908      	ldr	r1, [sp, #32]
 8004c6c:	eeb0 8a47 	vmov.f32	s16, s14
 8004c70:	eef0 8a67 	vmov.f32	s17, s15
 8004c74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004c78:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004c7c:	2900      	cmp	r1, #0
 8004c7e:	d045      	beq.n	8004d0c <_dtoa_r+0x5b4>
 8004c80:	494c      	ldr	r1, [pc, #304]	; (8004db4 <_dtoa_r+0x65c>)
 8004c82:	2000      	movs	r0, #0
 8004c84:	f7fb fdea 	bl	800085c <__aeabi_ddiv>
 8004c88:	ec53 2b18 	vmov	r2, r3, d8
 8004c8c:	f7fb fb04 	bl	8000298 <__aeabi_dsub>
 8004c90:	9d00      	ldr	r5, [sp, #0]
 8004c92:	ec41 0b18 	vmov	d8, r0, r1
 8004c96:	4639      	mov	r1, r7
 8004c98:	4630      	mov	r0, r6
 8004c9a:	f7fb ff65 	bl	8000b68 <__aeabi_d2iz>
 8004c9e:	900c      	str	r0, [sp, #48]	; 0x30
 8004ca0:	f7fb fc48 	bl	8000534 <__aeabi_i2d>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	460b      	mov	r3, r1
 8004ca8:	4630      	mov	r0, r6
 8004caa:	4639      	mov	r1, r7
 8004cac:	f7fb faf4 	bl	8000298 <__aeabi_dsub>
 8004cb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004cb2:	3330      	adds	r3, #48	; 0x30
 8004cb4:	f805 3b01 	strb.w	r3, [r5], #1
 8004cb8:	ec53 2b18 	vmov	r2, r3, d8
 8004cbc:	4606      	mov	r6, r0
 8004cbe:	460f      	mov	r7, r1
 8004cc0:	f7fb ff14 	bl	8000aec <__aeabi_dcmplt>
 8004cc4:	2800      	cmp	r0, #0
 8004cc6:	d165      	bne.n	8004d94 <_dtoa_r+0x63c>
 8004cc8:	4632      	mov	r2, r6
 8004cca:	463b      	mov	r3, r7
 8004ccc:	4935      	ldr	r1, [pc, #212]	; (8004da4 <_dtoa_r+0x64c>)
 8004cce:	2000      	movs	r0, #0
 8004cd0:	f7fb fae2 	bl	8000298 <__aeabi_dsub>
 8004cd4:	ec53 2b18 	vmov	r2, r3, d8
 8004cd8:	f7fb ff08 	bl	8000aec <__aeabi_dcmplt>
 8004cdc:	2800      	cmp	r0, #0
 8004cde:	f040 80b9 	bne.w	8004e54 <_dtoa_r+0x6fc>
 8004ce2:	9b02      	ldr	r3, [sp, #8]
 8004ce4:	429d      	cmp	r5, r3
 8004ce6:	f43f af75 	beq.w	8004bd4 <_dtoa_r+0x47c>
 8004cea:	4b2f      	ldr	r3, [pc, #188]	; (8004da8 <_dtoa_r+0x650>)
 8004cec:	ec51 0b18 	vmov	r0, r1, d8
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f7fb fc89 	bl	8000608 <__aeabi_dmul>
 8004cf6:	4b2c      	ldr	r3, [pc, #176]	; (8004da8 <_dtoa_r+0x650>)
 8004cf8:	ec41 0b18 	vmov	d8, r0, r1
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	4630      	mov	r0, r6
 8004d00:	4639      	mov	r1, r7
 8004d02:	f7fb fc81 	bl	8000608 <__aeabi_dmul>
 8004d06:	4606      	mov	r6, r0
 8004d08:	460f      	mov	r7, r1
 8004d0a:	e7c4      	b.n	8004c96 <_dtoa_r+0x53e>
 8004d0c:	ec51 0b17 	vmov	r0, r1, d7
 8004d10:	f7fb fc7a 	bl	8000608 <__aeabi_dmul>
 8004d14:	9b02      	ldr	r3, [sp, #8]
 8004d16:	9d00      	ldr	r5, [sp, #0]
 8004d18:	930c      	str	r3, [sp, #48]	; 0x30
 8004d1a:	ec41 0b18 	vmov	d8, r0, r1
 8004d1e:	4639      	mov	r1, r7
 8004d20:	4630      	mov	r0, r6
 8004d22:	f7fb ff21 	bl	8000b68 <__aeabi_d2iz>
 8004d26:	9011      	str	r0, [sp, #68]	; 0x44
 8004d28:	f7fb fc04 	bl	8000534 <__aeabi_i2d>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	460b      	mov	r3, r1
 8004d30:	4630      	mov	r0, r6
 8004d32:	4639      	mov	r1, r7
 8004d34:	f7fb fab0 	bl	8000298 <__aeabi_dsub>
 8004d38:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004d3a:	3330      	adds	r3, #48	; 0x30
 8004d3c:	f805 3b01 	strb.w	r3, [r5], #1
 8004d40:	9b02      	ldr	r3, [sp, #8]
 8004d42:	429d      	cmp	r5, r3
 8004d44:	4606      	mov	r6, r0
 8004d46:	460f      	mov	r7, r1
 8004d48:	f04f 0200 	mov.w	r2, #0
 8004d4c:	d134      	bne.n	8004db8 <_dtoa_r+0x660>
 8004d4e:	4b19      	ldr	r3, [pc, #100]	; (8004db4 <_dtoa_r+0x65c>)
 8004d50:	ec51 0b18 	vmov	r0, r1, d8
 8004d54:	f7fb faa2 	bl	800029c <__adddf3>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	460b      	mov	r3, r1
 8004d5c:	4630      	mov	r0, r6
 8004d5e:	4639      	mov	r1, r7
 8004d60:	f7fb fee2 	bl	8000b28 <__aeabi_dcmpgt>
 8004d64:	2800      	cmp	r0, #0
 8004d66:	d175      	bne.n	8004e54 <_dtoa_r+0x6fc>
 8004d68:	ec53 2b18 	vmov	r2, r3, d8
 8004d6c:	4911      	ldr	r1, [pc, #68]	; (8004db4 <_dtoa_r+0x65c>)
 8004d6e:	2000      	movs	r0, #0
 8004d70:	f7fb fa92 	bl	8000298 <__aeabi_dsub>
 8004d74:	4602      	mov	r2, r0
 8004d76:	460b      	mov	r3, r1
 8004d78:	4630      	mov	r0, r6
 8004d7a:	4639      	mov	r1, r7
 8004d7c:	f7fb feb6 	bl	8000aec <__aeabi_dcmplt>
 8004d80:	2800      	cmp	r0, #0
 8004d82:	f43f af27 	beq.w	8004bd4 <_dtoa_r+0x47c>
 8004d86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004d88:	1e6b      	subs	r3, r5, #1
 8004d8a:	930c      	str	r3, [sp, #48]	; 0x30
 8004d8c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004d90:	2b30      	cmp	r3, #48	; 0x30
 8004d92:	d0f8      	beq.n	8004d86 <_dtoa_r+0x62e>
 8004d94:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8004d98:	e04a      	b.n	8004e30 <_dtoa_r+0x6d8>
 8004d9a:	bf00      	nop
 8004d9c:	08006c10 	.word	0x08006c10
 8004da0:	08006be8 	.word	0x08006be8
 8004da4:	3ff00000 	.word	0x3ff00000
 8004da8:	40240000 	.word	0x40240000
 8004dac:	401c0000 	.word	0x401c0000
 8004db0:	40140000 	.word	0x40140000
 8004db4:	3fe00000 	.word	0x3fe00000
 8004db8:	4baf      	ldr	r3, [pc, #700]	; (8005078 <_dtoa_r+0x920>)
 8004dba:	f7fb fc25 	bl	8000608 <__aeabi_dmul>
 8004dbe:	4606      	mov	r6, r0
 8004dc0:	460f      	mov	r7, r1
 8004dc2:	e7ac      	b.n	8004d1e <_dtoa_r+0x5c6>
 8004dc4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004dc8:	9d00      	ldr	r5, [sp, #0]
 8004dca:	4642      	mov	r2, r8
 8004dcc:	464b      	mov	r3, r9
 8004dce:	4630      	mov	r0, r6
 8004dd0:	4639      	mov	r1, r7
 8004dd2:	f7fb fd43 	bl	800085c <__aeabi_ddiv>
 8004dd6:	f7fb fec7 	bl	8000b68 <__aeabi_d2iz>
 8004dda:	9002      	str	r0, [sp, #8]
 8004ddc:	f7fb fbaa 	bl	8000534 <__aeabi_i2d>
 8004de0:	4642      	mov	r2, r8
 8004de2:	464b      	mov	r3, r9
 8004de4:	f7fb fc10 	bl	8000608 <__aeabi_dmul>
 8004de8:	4602      	mov	r2, r0
 8004dea:	460b      	mov	r3, r1
 8004dec:	4630      	mov	r0, r6
 8004dee:	4639      	mov	r1, r7
 8004df0:	f7fb fa52 	bl	8000298 <__aeabi_dsub>
 8004df4:	9e02      	ldr	r6, [sp, #8]
 8004df6:	9f01      	ldr	r7, [sp, #4]
 8004df8:	3630      	adds	r6, #48	; 0x30
 8004dfa:	f805 6b01 	strb.w	r6, [r5], #1
 8004dfe:	9e00      	ldr	r6, [sp, #0]
 8004e00:	1bae      	subs	r6, r5, r6
 8004e02:	42b7      	cmp	r7, r6
 8004e04:	4602      	mov	r2, r0
 8004e06:	460b      	mov	r3, r1
 8004e08:	d137      	bne.n	8004e7a <_dtoa_r+0x722>
 8004e0a:	f7fb fa47 	bl	800029c <__adddf3>
 8004e0e:	4642      	mov	r2, r8
 8004e10:	464b      	mov	r3, r9
 8004e12:	4606      	mov	r6, r0
 8004e14:	460f      	mov	r7, r1
 8004e16:	f7fb fe87 	bl	8000b28 <__aeabi_dcmpgt>
 8004e1a:	b9c8      	cbnz	r0, 8004e50 <_dtoa_r+0x6f8>
 8004e1c:	4642      	mov	r2, r8
 8004e1e:	464b      	mov	r3, r9
 8004e20:	4630      	mov	r0, r6
 8004e22:	4639      	mov	r1, r7
 8004e24:	f7fb fe58 	bl	8000ad8 <__aeabi_dcmpeq>
 8004e28:	b110      	cbz	r0, 8004e30 <_dtoa_r+0x6d8>
 8004e2a:	9b02      	ldr	r3, [sp, #8]
 8004e2c:	07d9      	lsls	r1, r3, #31
 8004e2e:	d40f      	bmi.n	8004e50 <_dtoa_r+0x6f8>
 8004e30:	4620      	mov	r0, r4
 8004e32:	4659      	mov	r1, fp
 8004e34:	f000 fad6 	bl	80053e4 <_Bfree>
 8004e38:	2300      	movs	r3, #0
 8004e3a:	702b      	strb	r3, [r5, #0]
 8004e3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004e3e:	f10a 0001 	add.w	r0, sl, #1
 8004e42:	6018      	str	r0, [r3, #0]
 8004e44:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	f43f acd8 	beq.w	80047fc <_dtoa_r+0xa4>
 8004e4c:	601d      	str	r5, [r3, #0]
 8004e4e:	e4d5      	b.n	80047fc <_dtoa_r+0xa4>
 8004e50:	f8cd a01c 	str.w	sl, [sp, #28]
 8004e54:	462b      	mov	r3, r5
 8004e56:	461d      	mov	r5, r3
 8004e58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004e5c:	2a39      	cmp	r2, #57	; 0x39
 8004e5e:	d108      	bne.n	8004e72 <_dtoa_r+0x71a>
 8004e60:	9a00      	ldr	r2, [sp, #0]
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d1f7      	bne.n	8004e56 <_dtoa_r+0x6fe>
 8004e66:	9a07      	ldr	r2, [sp, #28]
 8004e68:	9900      	ldr	r1, [sp, #0]
 8004e6a:	3201      	adds	r2, #1
 8004e6c:	9207      	str	r2, [sp, #28]
 8004e6e:	2230      	movs	r2, #48	; 0x30
 8004e70:	700a      	strb	r2, [r1, #0]
 8004e72:	781a      	ldrb	r2, [r3, #0]
 8004e74:	3201      	adds	r2, #1
 8004e76:	701a      	strb	r2, [r3, #0]
 8004e78:	e78c      	b.n	8004d94 <_dtoa_r+0x63c>
 8004e7a:	4b7f      	ldr	r3, [pc, #508]	; (8005078 <_dtoa_r+0x920>)
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f7fb fbc3 	bl	8000608 <__aeabi_dmul>
 8004e82:	2200      	movs	r2, #0
 8004e84:	2300      	movs	r3, #0
 8004e86:	4606      	mov	r6, r0
 8004e88:	460f      	mov	r7, r1
 8004e8a:	f7fb fe25 	bl	8000ad8 <__aeabi_dcmpeq>
 8004e8e:	2800      	cmp	r0, #0
 8004e90:	d09b      	beq.n	8004dca <_dtoa_r+0x672>
 8004e92:	e7cd      	b.n	8004e30 <_dtoa_r+0x6d8>
 8004e94:	9a08      	ldr	r2, [sp, #32]
 8004e96:	2a00      	cmp	r2, #0
 8004e98:	f000 80c4 	beq.w	8005024 <_dtoa_r+0x8cc>
 8004e9c:	9a05      	ldr	r2, [sp, #20]
 8004e9e:	2a01      	cmp	r2, #1
 8004ea0:	f300 80a8 	bgt.w	8004ff4 <_dtoa_r+0x89c>
 8004ea4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004ea6:	2a00      	cmp	r2, #0
 8004ea8:	f000 80a0 	beq.w	8004fec <_dtoa_r+0x894>
 8004eac:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004eb0:	9e06      	ldr	r6, [sp, #24]
 8004eb2:	4645      	mov	r5, r8
 8004eb4:	9a04      	ldr	r2, [sp, #16]
 8004eb6:	2101      	movs	r1, #1
 8004eb8:	441a      	add	r2, r3
 8004eba:	4620      	mov	r0, r4
 8004ebc:	4498      	add	r8, r3
 8004ebe:	9204      	str	r2, [sp, #16]
 8004ec0:	f000 fb4c 	bl	800555c <__i2b>
 8004ec4:	4607      	mov	r7, r0
 8004ec6:	2d00      	cmp	r5, #0
 8004ec8:	dd0b      	ble.n	8004ee2 <_dtoa_r+0x78a>
 8004eca:	9b04      	ldr	r3, [sp, #16]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	dd08      	ble.n	8004ee2 <_dtoa_r+0x78a>
 8004ed0:	42ab      	cmp	r3, r5
 8004ed2:	9a04      	ldr	r2, [sp, #16]
 8004ed4:	bfa8      	it	ge
 8004ed6:	462b      	movge	r3, r5
 8004ed8:	eba8 0803 	sub.w	r8, r8, r3
 8004edc:	1aed      	subs	r5, r5, r3
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	9304      	str	r3, [sp, #16]
 8004ee2:	9b06      	ldr	r3, [sp, #24]
 8004ee4:	b1fb      	cbz	r3, 8004f26 <_dtoa_r+0x7ce>
 8004ee6:	9b08      	ldr	r3, [sp, #32]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	f000 809f 	beq.w	800502c <_dtoa_r+0x8d4>
 8004eee:	2e00      	cmp	r6, #0
 8004ef0:	dd11      	ble.n	8004f16 <_dtoa_r+0x7be>
 8004ef2:	4639      	mov	r1, r7
 8004ef4:	4632      	mov	r2, r6
 8004ef6:	4620      	mov	r0, r4
 8004ef8:	f000 fbec 	bl	80056d4 <__pow5mult>
 8004efc:	465a      	mov	r2, fp
 8004efe:	4601      	mov	r1, r0
 8004f00:	4607      	mov	r7, r0
 8004f02:	4620      	mov	r0, r4
 8004f04:	f000 fb40 	bl	8005588 <__multiply>
 8004f08:	4659      	mov	r1, fp
 8004f0a:	9007      	str	r0, [sp, #28]
 8004f0c:	4620      	mov	r0, r4
 8004f0e:	f000 fa69 	bl	80053e4 <_Bfree>
 8004f12:	9b07      	ldr	r3, [sp, #28]
 8004f14:	469b      	mov	fp, r3
 8004f16:	9b06      	ldr	r3, [sp, #24]
 8004f18:	1b9a      	subs	r2, r3, r6
 8004f1a:	d004      	beq.n	8004f26 <_dtoa_r+0x7ce>
 8004f1c:	4659      	mov	r1, fp
 8004f1e:	4620      	mov	r0, r4
 8004f20:	f000 fbd8 	bl	80056d4 <__pow5mult>
 8004f24:	4683      	mov	fp, r0
 8004f26:	2101      	movs	r1, #1
 8004f28:	4620      	mov	r0, r4
 8004f2a:	f000 fb17 	bl	800555c <__i2b>
 8004f2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	4606      	mov	r6, r0
 8004f34:	dd7c      	ble.n	8005030 <_dtoa_r+0x8d8>
 8004f36:	461a      	mov	r2, r3
 8004f38:	4601      	mov	r1, r0
 8004f3a:	4620      	mov	r0, r4
 8004f3c:	f000 fbca 	bl	80056d4 <__pow5mult>
 8004f40:	9b05      	ldr	r3, [sp, #20]
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	4606      	mov	r6, r0
 8004f46:	dd76      	ble.n	8005036 <_dtoa_r+0x8de>
 8004f48:	2300      	movs	r3, #0
 8004f4a:	9306      	str	r3, [sp, #24]
 8004f4c:	6933      	ldr	r3, [r6, #16]
 8004f4e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004f52:	6918      	ldr	r0, [r3, #16]
 8004f54:	f000 fab2 	bl	80054bc <__hi0bits>
 8004f58:	f1c0 0020 	rsb	r0, r0, #32
 8004f5c:	9b04      	ldr	r3, [sp, #16]
 8004f5e:	4418      	add	r0, r3
 8004f60:	f010 001f 	ands.w	r0, r0, #31
 8004f64:	f000 8086 	beq.w	8005074 <_dtoa_r+0x91c>
 8004f68:	f1c0 0320 	rsb	r3, r0, #32
 8004f6c:	2b04      	cmp	r3, #4
 8004f6e:	dd7f      	ble.n	8005070 <_dtoa_r+0x918>
 8004f70:	f1c0 001c 	rsb	r0, r0, #28
 8004f74:	9b04      	ldr	r3, [sp, #16]
 8004f76:	4403      	add	r3, r0
 8004f78:	4480      	add	r8, r0
 8004f7a:	4405      	add	r5, r0
 8004f7c:	9304      	str	r3, [sp, #16]
 8004f7e:	f1b8 0f00 	cmp.w	r8, #0
 8004f82:	dd05      	ble.n	8004f90 <_dtoa_r+0x838>
 8004f84:	4659      	mov	r1, fp
 8004f86:	4642      	mov	r2, r8
 8004f88:	4620      	mov	r0, r4
 8004f8a:	f000 fbfd 	bl	8005788 <__lshift>
 8004f8e:	4683      	mov	fp, r0
 8004f90:	9b04      	ldr	r3, [sp, #16]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	dd05      	ble.n	8004fa2 <_dtoa_r+0x84a>
 8004f96:	4631      	mov	r1, r6
 8004f98:	461a      	mov	r2, r3
 8004f9a:	4620      	mov	r0, r4
 8004f9c:	f000 fbf4 	bl	8005788 <__lshift>
 8004fa0:	4606      	mov	r6, r0
 8004fa2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d069      	beq.n	800507c <_dtoa_r+0x924>
 8004fa8:	4631      	mov	r1, r6
 8004faa:	4658      	mov	r0, fp
 8004fac:	f000 fc58 	bl	8005860 <__mcmp>
 8004fb0:	2800      	cmp	r0, #0
 8004fb2:	da63      	bge.n	800507c <_dtoa_r+0x924>
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	4659      	mov	r1, fp
 8004fb8:	220a      	movs	r2, #10
 8004fba:	4620      	mov	r0, r4
 8004fbc:	f000 fa34 	bl	8005428 <__multadd>
 8004fc0:	9b08      	ldr	r3, [sp, #32]
 8004fc2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004fc6:	4683      	mov	fp, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	f000 818f 	beq.w	80052ec <_dtoa_r+0xb94>
 8004fce:	4639      	mov	r1, r7
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	220a      	movs	r2, #10
 8004fd4:	4620      	mov	r0, r4
 8004fd6:	f000 fa27 	bl	8005428 <__multadd>
 8004fda:	f1b9 0f00 	cmp.w	r9, #0
 8004fde:	4607      	mov	r7, r0
 8004fe0:	f300 808e 	bgt.w	8005100 <_dtoa_r+0x9a8>
 8004fe4:	9b05      	ldr	r3, [sp, #20]
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	dc50      	bgt.n	800508c <_dtoa_r+0x934>
 8004fea:	e089      	b.n	8005100 <_dtoa_r+0x9a8>
 8004fec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004fee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004ff2:	e75d      	b.n	8004eb0 <_dtoa_r+0x758>
 8004ff4:	9b01      	ldr	r3, [sp, #4]
 8004ff6:	1e5e      	subs	r6, r3, #1
 8004ff8:	9b06      	ldr	r3, [sp, #24]
 8004ffa:	42b3      	cmp	r3, r6
 8004ffc:	bfbf      	itttt	lt
 8004ffe:	9b06      	ldrlt	r3, [sp, #24]
 8005000:	9606      	strlt	r6, [sp, #24]
 8005002:	1af2      	sublt	r2, r6, r3
 8005004:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8005006:	bfb6      	itet	lt
 8005008:	189b      	addlt	r3, r3, r2
 800500a:	1b9e      	subge	r6, r3, r6
 800500c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800500e:	9b01      	ldr	r3, [sp, #4]
 8005010:	bfb8      	it	lt
 8005012:	2600      	movlt	r6, #0
 8005014:	2b00      	cmp	r3, #0
 8005016:	bfb5      	itete	lt
 8005018:	eba8 0503 	sublt.w	r5, r8, r3
 800501c:	9b01      	ldrge	r3, [sp, #4]
 800501e:	2300      	movlt	r3, #0
 8005020:	4645      	movge	r5, r8
 8005022:	e747      	b.n	8004eb4 <_dtoa_r+0x75c>
 8005024:	9e06      	ldr	r6, [sp, #24]
 8005026:	9f08      	ldr	r7, [sp, #32]
 8005028:	4645      	mov	r5, r8
 800502a:	e74c      	b.n	8004ec6 <_dtoa_r+0x76e>
 800502c:	9a06      	ldr	r2, [sp, #24]
 800502e:	e775      	b.n	8004f1c <_dtoa_r+0x7c4>
 8005030:	9b05      	ldr	r3, [sp, #20]
 8005032:	2b01      	cmp	r3, #1
 8005034:	dc18      	bgt.n	8005068 <_dtoa_r+0x910>
 8005036:	9b02      	ldr	r3, [sp, #8]
 8005038:	b9b3      	cbnz	r3, 8005068 <_dtoa_r+0x910>
 800503a:	9b03      	ldr	r3, [sp, #12]
 800503c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005040:	b9a3      	cbnz	r3, 800506c <_dtoa_r+0x914>
 8005042:	9b03      	ldr	r3, [sp, #12]
 8005044:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005048:	0d1b      	lsrs	r3, r3, #20
 800504a:	051b      	lsls	r3, r3, #20
 800504c:	b12b      	cbz	r3, 800505a <_dtoa_r+0x902>
 800504e:	9b04      	ldr	r3, [sp, #16]
 8005050:	3301      	adds	r3, #1
 8005052:	9304      	str	r3, [sp, #16]
 8005054:	f108 0801 	add.w	r8, r8, #1
 8005058:	2301      	movs	r3, #1
 800505a:	9306      	str	r3, [sp, #24]
 800505c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800505e:	2b00      	cmp	r3, #0
 8005060:	f47f af74 	bne.w	8004f4c <_dtoa_r+0x7f4>
 8005064:	2001      	movs	r0, #1
 8005066:	e779      	b.n	8004f5c <_dtoa_r+0x804>
 8005068:	2300      	movs	r3, #0
 800506a:	e7f6      	b.n	800505a <_dtoa_r+0x902>
 800506c:	9b02      	ldr	r3, [sp, #8]
 800506e:	e7f4      	b.n	800505a <_dtoa_r+0x902>
 8005070:	d085      	beq.n	8004f7e <_dtoa_r+0x826>
 8005072:	4618      	mov	r0, r3
 8005074:	301c      	adds	r0, #28
 8005076:	e77d      	b.n	8004f74 <_dtoa_r+0x81c>
 8005078:	40240000 	.word	0x40240000
 800507c:	9b01      	ldr	r3, [sp, #4]
 800507e:	2b00      	cmp	r3, #0
 8005080:	dc38      	bgt.n	80050f4 <_dtoa_r+0x99c>
 8005082:	9b05      	ldr	r3, [sp, #20]
 8005084:	2b02      	cmp	r3, #2
 8005086:	dd35      	ble.n	80050f4 <_dtoa_r+0x99c>
 8005088:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800508c:	f1b9 0f00 	cmp.w	r9, #0
 8005090:	d10d      	bne.n	80050ae <_dtoa_r+0x956>
 8005092:	4631      	mov	r1, r6
 8005094:	464b      	mov	r3, r9
 8005096:	2205      	movs	r2, #5
 8005098:	4620      	mov	r0, r4
 800509a:	f000 f9c5 	bl	8005428 <__multadd>
 800509e:	4601      	mov	r1, r0
 80050a0:	4606      	mov	r6, r0
 80050a2:	4658      	mov	r0, fp
 80050a4:	f000 fbdc 	bl	8005860 <__mcmp>
 80050a8:	2800      	cmp	r0, #0
 80050aa:	f73f adbd 	bgt.w	8004c28 <_dtoa_r+0x4d0>
 80050ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050b0:	9d00      	ldr	r5, [sp, #0]
 80050b2:	ea6f 0a03 	mvn.w	sl, r3
 80050b6:	f04f 0800 	mov.w	r8, #0
 80050ba:	4631      	mov	r1, r6
 80050bc:	4620      	mov	r0, r4
 80050be:	f000 f991 	bl	80053e4 <_Bfree>
 80050c2:	2f00      	cmp	r7, #0
 80050c4:	f43f aeb4 	beq.w	8004e30 <_dtoa_r+0x6d8>
 80050c8:	f1b8 0f00 	cmp.w	r8, #0
 80050cc:	d005      	beq.n	80050da <_dtoa_r+0x982>
 80050ce:	45b8      	cmp	r8, r7
 80050d0:	d003      	beq.n	80050da <_dtoa_r+0x982>
 80050d2:	4641      	mov	r1, r8
 80050d4:	4620      	mov	r0, r4
 80050d6:	f000 f985 	bl	80053e4 <_Bfree>
 80050da:	4639      	mov	r1, r7
 80050dc:	4620      	mov	r0, r4
 80050de:	f000 f981 	bl	80053e4 <_Bfree>
 80050e2:	e6a5      	b.n	8004e30 <_dtoa_r+0x6d8>
 80050e4:	2600      	movs	r6, #0
 80050e6:	4637      	mov	r7, r6
 80050e8:	e7e1      	b.n	80050ae <_dtoa_r+0x956>
 80050ea:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80050ec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80050f0:	4637      	mov	r7, r6
 80050f2:	e599      	b.n	8004c28 <_dtoa_r+0x4d0>
 80050f4:	9b08      	ldr	r3, [sp, #32]
 80050f6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	f000 80fd 	beq.w	80052fa <_dtoa_r+0xba2>
 8005100:	2d00      	cmp	r5, #0
 8005102:	dd05      	ble.n	8005110 <_dtoa_r+0x9b8>
 8005104:	4639      	mov	r1, r7
 8005106:	462a      	mov	r2, r5
 8005108:	4620      	mov	r0, r4
 800510a:	f000 fb3d 	bl	8005788 <__lshift>
 800510e:	4607      	mov	r7, r0
 8005110:	9b06      	ldr	r3, [sp, #24]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d05c      	beq.n	80051d0 <_dtoa_r+0xa78>
 8005116:	6879      	ldr	r1, [r7, #4]
 8005118:	4620      	mov	r0, r4
 800511a:	f000 f923 	bl	8005364 <_Balloc>
 800511e:	4605      	mov	r5, r0
 8005120:	b928      	cbnz	r0, 800512e <_dtoa_r+0x9d6>
 8005122:	4b80      	ldr	r3, [pc, #512]	; (8005324 <_dtoa_r+0xbcc>)
 8005124:	4602      	mov	r2, r0
 8005126:	f240 21ea 	movw	r1, #746	; 0x2ea
 800512a:	f7ff bb2e 	b.w	800478a <_dtoa_r+0x32>
 800512e:	693a      	ldr	r2, [r7, #16]
 8005130:	3202      	adds	r2, #2
 8005132:	0092      	lsls	r2, r2, #2
 8005134:	f107 010c 	add.w	r1, r7, #12
 8005138:	300c      	adds	r0, #12
 800513a:	f000 f905 	bl	8005348 <memcpy>
 800513e:	2201      	movs	r2, #1
 8005140:	4629      	mov	r1, r5
 8005142:	4620      	mov	r0, r4
 8005144:	f000 fb20 	bl	8005788 <__lshift>
 8005148:	9b00      	ldr	r3, [sp, #0]
 800514a:	3301      	adds	r3, #1
 800514c:	9301      	str	r3, [sp, #4]
 800514e:	9b00      	ldr	r3, [sp, #0]
 8005150:	444b      	add	r3, r9
 8005152:	9307      	str	r3, [sp, #28]
 8005154:	9b02      	ldr	r3, [sp, #8]
 8005156:	f003 0301 	and.w	r3, r3, #1
 800515a:	46b8      	mov	r8, r7
 800515c:	9306      	str	r3, [sp, #24]
 800515e:	4607      	mov	r7, r0
 8005160:	9b01      	ldr	r3, [sp, #4]
 8005162:	4631      	mov	r1, r6
 8005164:	3b01      	subs	r3, #1
 8005166:	4658      	mov	r0, fp
 8005168:	9302      	str	r3, [sp, #8]
 800516a:	f7ff fa67 	bl	800463c <quorem>
 800516e:	4603      	mov	r3, r0
 8005170:	3330      	adds	r3, #48	; 0x30
 8005172:	9004      	str	r0, [sp, #16]
 8005174:	4641      	mov	r1, r8
 8005176:	4658      	mov	r0, fp
 8005178:	9308      	str	r3, [sp, #32]
 800517a:	f000 fb71 	bl	8005860 <__mcmp>
 800517e:	463a      	mov	r2, r7
 8005180:	4681      	mov	r9, r0
 8005182:	4631      	mov	r1, r6
 8005184:	4620      	mov	r0, r4
 8005186:	f000 fb87 	bl	8005898 <__mdiff>
 800518a:	68c2      	ldr	r2, [r0, #12]
 800518c:	9b08      	ldr	r3, [sp, #32]
 800518e:	4605      	mov	r5, r0
 8005190:	bb02      	cbnz	r2, 80051d4 <_dtoa_r+0xa7c>
 8005192:	4601      	mov	r1, r0
 8005194:	4658      	mov	r0, fp
 8005196:	f000 fb63 	bl	8005860 <__mcmp>
 800519a:	9b08      	ldr	r3, [sp, #32]
 800519c:	4602      	mov	r2, r0
 800519e:	4629      	mov	r1, r5
 80051a0:	4620      	mov	r0, r4
 80051a2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80051a6:	f000 f91d 	bl	80053e4 <_Bfree>
 80051aa:	9b05      	ldr	r3, [sp, #20]
 80051ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051ae:	9d01      	ldr	r5, [sp, #4]
 80051b0:	ea43 0102 	orr.w	r1, r3, r2
 80051b4:	9b06      	ldr	r3, [sp, #24]
 80051b6:	430b      	orrs	r3, r1
 80051b8:	9b08      	ldr	r3, [sp, #32]
 80051ba:	d10d      	bne.n	80051d8 <_dtoa_r+0xa80>
 80051bc:	2b39      	cmp	r3, #57	; 0x39
 80051be:	d029      	beq.n	8005214 <_dtoa_r+0xabc>
 80051c0:	f1b9 0f00 	cmp.w	r9, #0
 80051c4:	dd01      	ble.n	80051ca <_dtoa_r+0xa72>
 80051c6:	9b04      	ldr	r3, [sp, #16]
 80051c8:	3331      	adds	r3, #49	; 0x31
 80051ca:	9a02      	ldr	r2, [sp, #8]
 80051cc:	7013      	strb	r3, [r2, #0]
 80051ce:	e774      	b.n	80050ba <_dtoa_r+0x962>
 80051d0:	4638      	mov	r0, r7
 80051d2:	e7b9      	b.n	8005148 <_dtoa_r+0x9f0>
 80051d4:	2201      	movs	r2, #1
 80051d6:	e7e2      	b.n	800519e <_dtoa_r+0xa46>
 80051d8:	f1b9 0f00 	cmp.w	r9, #0
 80051dc:	db06      	blt.n	80051ec <_dtoa_r+0xa94>
 80051de:	9905      	ldr	r1, [sp, #20]
 80051e0:	ea41 0909 	orr.w	r9, r1, r9
 80051e4:	9906      	ldr	r1, [sp, #24]
 80051e6:	ea59 0101 	orrs.w	r1, r9, r1
 80051ea:	d120      	bne.n	800522e <_dtoa_r+0xad6>
 80051ec:	2a00      	cmp	r2, #0
 80051ee:	ddec      	ble.n	80051ca <_dtoa_r+0xa72>
 80051f0:	4659      	mov	r1, fp
 80051f2:	2201      	movs	r2, #1
 80051f4:	4620      	mov	r0, r4
 80051f6:	9301      	str	r3, [sp, #4]
 80051f8:	f000 fac6 	bl	8005788 <__lshift>
 80051fc:	4631      	mov	r1, r6
 80051fe:	4683      	mov	fp, r0
 8005200:	f000 fb2e 	bl	8005860 <__mcmp>
 8005204:	2800      	cmp	r0, #0
 8005206:	9b01      	ldr	r3, [sp, #4]
 8005208:	dc02      	bgt.n	8005210 <_dtoa_r+0xab8>
 800520a:	d1de      	bne.n	80051ca <_dtoa_r+0xa72>
 800520c:	07da      	lsls	r2, r3, #31
 800520e:	d5dc      	bpl.n	80051ca <_dtoa_r+0xa72>
 8005210:	2b39      	cmp	r3, #57	; 0x39
 8005212:	d1d8      	bne.n	80051c6 <_dtoa_r+0xa6e>
 8005214:	9a02      	ldr	r2, [sp, #8]
 8005216:	2339      	movs	r3, #57	; 0x39
 8005218:	7013      	strb	r3, [r2, #0]
 800521a:	462b      	mov	r3, r5
 800521c:	461d      	mov	r5, r3
 800521e:	3b01      	subs	r3, #1
 8005220:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005224:	2a39      	cmp	r2, #57	; 0x39
 8005226:	d050      	beq.n	80052ca <_dtoa_r+0xb72>
 8005228:	3201      	adds	r2, #1
 800522a:	701a      	strb	r2, [r3, #0]
 800522c:	e745      	b.n	80050ba <_dtoa_r+0x962>
 800522e:	2a00      	cmp	r2, #0
 8005230:	dd03      	ble.n	800523a <_dtoa_r+0xae2>
 8005232:	2b39      	cmp	r3, #57	; 0x39
 8005234:	d0ee      	beq.n	8005214 <_dtoa_r+0xabc>
 8005236:	3301      	adds	r3, #1
 8005238:	e7c7      	b.n	80051ca <_dtoa_r+0xa72>
 800523a:	9a01      	ldr	r2, [sp, #4]
 800523c:	9907      	ldr	r1, [sp, #28]
 800523e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005242:	428a      	cmp	r2, r1
 8005244:	d02a      	beq.n	800529c <_dtoa_r+0xb44>
 8005246:	4659      	mov	r1, fp
 8005248:	2300      	movs	r3, #0
 800524a:	220a      	movs	r2, #10
 800524c:	4620      	mov	r0, r4
 800524e:	f000 f8eb 	bl	8005428 <__multadd>
 8005252:	45b8      	cmp	r8, r7
 8005254:	4683      	mov	fp, r0
 8005256:	f04f 0300 	mov.w	r3, #0
 800525a:	f04f 020a 	mov.w	r2, #10
 800525e:	4641      	mov	r1, r8
 8005260:	4620      	mov	r0, r4
 8005262:	d107      	bne.n	8005274 <_dtoa_r+0xb1c>
 8005264:	f000 f8e0 	bl	8005428 <__multadd>
 8005268:	4680      	mov	r8, r0
 800526a:	4607      	mov	r7, r0
 800526c:	9b01      	ldr	r3, [sp, #4]
 800526e:	3301      	adds	r3, #1
 8005270:	9301      	str	r3, [sp, #4]
 8005272:	e775      	b.n	8005160 <_dtoa_r+0xa08>
 8005274:	f000 f8d8 	bl	8005428 <__multadd>
 8005278:	4639      	mov	r1, r7
 800527a:	4680      	mov	r8, r0
 800527c:	2300      	movs	r3, #0
 800527e:	220a      	movs	r2, #10
 8005280:	4620      	mov	r0, r4
 8005282:	f000 f8d1 	bl	8005428 <__multadd>
 8005286:	4607      	mov	r7, r0
 8005288:	e7f0      	b.n	800526c <_dtoa_r+0xb14>
 800528a:	f1b9 0f00 	cmp.w	r9, #0
 800528e:	9a00      	ldr	r2, [sp, #0]
 8005290:	bfcc      	ite	gt
 8005292:	464d      	movgt	r5, r9
 8005294:	2501      	movle	r5, #1
 8005296:	4415      	add	r5, r2
 8005298:	f04f 0800 	mov.w	r8, #0
 800529c:	4659      	mov	r1, fp
 800529e:	2201      	movs	r2, #1
 80052a0:	4620      	mov	r0, r4
 80052a2:	9301      	str	r3, [sp, #4]
 80052a4:	f000 fa70 	bl	8005788 <__lshift>
 80052a8:	4631      	mov	r1, r6
 80052aa:	4683      	mov	fp, r0
 80052ac:	f000 fad8 	bl	8005860 <__mcmp>
 80052b0:	2800      	cmp	r0, #0
 80052b2:	dcb2      	bgt.n	800521a <_dtoa_r+0xac2>
 80052b4:	d102      	bne.n	80052bc <_dtoa_r+0xb64>
 80052b6:	9b01      	ldr	r3, [sp, #4]
 80052b8:	07db      	lsls	r3, r3, #31
 80052ba:	d4ae      	bmi.n	800521a <_dtoa_r+0xac2>
 80052bc:	462b      	mov	r3, r5
 80052be:	461d      	mov	r5, r3
 80052c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80052c4:	2a30      	cmp	r2, #48	; 0x30
 80052c6:	d0fa      	beq.n	80052be <_dtoa_r+0xb66>
 80052c8:	e6f7      	b.n	80050ba <_dtoa_r+0x962>
 80052ca:	9a00      	ldr	r2, [sp, #0]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d1a5      	bne.n	800521c <_dtoa_r+0xac4>
 80052d0:	f10a 0a01 	add.w	sl, sl, #1
 80052d4:	2331      	movs	r3, #49	; 0x31
 80052d6:	e779      	b.n	80051cc <_dtoa_r+0xa74>
 80052d8:	4b13      	ldr	r3, [pc, #76]	; (8005328 <_dtoa_r+0xbd0>)
 80052da:	f7ff baaf 	b.w	800483c <_dtoa_r+0xe4>
 80052de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	f47f aa86 	bne.w	80047f2 <_dtoa_r+0x9a>
 80052e6:	4b11      	ldr	r3, [pc, #68]	; (800532c <_dtoa_r+0xbd4>)
 80052e8:	f7ff baa8 	b.w	800483c <_dtoa_r+0xe4>
 80052ec:	f1b9 0f00 	cmp.w	r9, #0
 80052f0:	dc03      	bgt.n	80052fa <_dtoa_r+0xba2>
 80052f2:	9b05      	ldr	r3, [sp, #20]
 80052f4:	2b02      	cmp	r3, #2
 80052f6:	f73f aec9 	bgt.w	800508c <_dtoa_r+0x934>
 80052fa:	9d00      	ldr	r5, [sp, #0]
 80052fc:	4631      	mov	r1, r6
 80052fe:	4658      	mov	r0, fp
 8005300:	f7ff f99c 	bl	800463c <quorem>
 8005304:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005308:	f805 3b01 	strb.w	r3, [r5], #1
 800530c:	9a00      	ldr	r2, [sp, #0]
 800530e:	1aaa      	subs	r2, r5, r2
 8005310:	4591      	cmp	r9, r2
 8005312:	ddba      	ble.n	800528a <_dtoa_r+0xb32>
 8005314:	4659      	mov	r1, fp
 8005316:	2300      	movs	r3, #0
 8005318:	220a      	movs	r2, #10
 800531a:	4620      	mov	r0, r4
 800531c:	f000 f884 	bl	8005428 <__multadd>
 8005320:	4683      	mov	fp, r0
 8005322:	e7eb      	b.n	80052fc <_dtoa_r+0xba4>
 8005324:	08006b77 	.word	0x08006b77
 8005328:	08006ad0 	.word	0x08006ad0
 800532c:	08006af4 	.word	0x08006af4

08005330 <_localeconv_r>:
 8005330:	4800      	ldr	r0, [pc, #0]	; (8005334 <_localeconv_r+0x4>)
 8005332:	4770      	bx	lr
 8005334:	20000164 	.word	0x20000164

08005338 <malloc>:
 8005338:	4b02      	ldr	r3, [pc, #8]	; (8005344 <malloc+0xc>)
 800533a:	4601      	mov	r1, r0
 800533c:	6818      	ldr	r0, [r3, #0]
 800533e:	f000 bbef 	b.w	8005b20 <_malloc_r>
 8005342:	bf00      	nop
 8005344:	20000010 	.word	0x20000010

08005348 <memcpy>:
 8005348:	440a      	add	r2, r1
 800534a:	4291      	cmp	r1, r2
 800534c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005350:	d100      	bne.n	8005354 <memcpy+0xc>
 8005352:	4770      	bx	lr
 8005354:	b510      	push	{r4, lr}
 8005356:	f811 4b01 	ldrb.w	r4, [r1], #1
 800535a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800535e:	4291      	cmp	r1, r2
 8005360:	d1f9      	bne.n	8005356 <memcpy+0xe>
 8005362:	bd10      	pop	{r4, pc}

08005364 <_Balloc>:
 8005364:	b570      	push	{r4, r5, r6, lr}
 8005366:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005368:	4604      	mov	r4, r0
 800536a:	460d      	mov	r5, r1
 800536c:	b976      	cbnz	r6, 800538c <_Balloc+0x28>
 800536e:	2010      	movs	r0, #16
 8005370:	f7ff ffe2 	bl	8005338 <malloc>
 8005374:	4602      	mov	r2, r0
 8005376:	6260      	str	r0, [r4, #36]	; 0x24
 8005378:	b920      	cbnz	r0, 8005384 <_Balloc+0x20>
 800537a:	4b18      	ldr	r3, [pc, #96]	; (80053dc <_Balloc+0x78>)
 800537c:	4818      	ldr	r0, [pc, #96]	; (80053e0 <_Balloc+0x7c>)
 800537e:	2166      	movs	r1, #102	; 0x66
 8005380:	f000 fd94 	bl	8005eac <__assert_func>
 8005384:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005388:	6006      	str	r6, [r0, #0]
 800538a:	60c6      	str	r6, [r0, #12]
 800538c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800538e:	68f3      	ldr	r3, [r6, #12]
 8005390:	b183      	cbz	r3, 80053b4 <_Balloc+0x50>
 8005392:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800539a:	b9b8      	cbnz	r0, 80053cc <_Balloc+0x68>
 800539c:	2101      	movs	r1, #1
 800539e:	fa01 f605 	lsl.w	r6, r1, r5
 80053a2:	1d72      	adds	r2, r6, #5
 80053a4:	0092      	lsls	r2, r2, #2
 80053a6:	4620      	mov	r0, r4
 80053a8:	f000 fb5a 	bl	8005a60 <_calloc_r>
 80053ac:	b160      	cbz	r0, 80053c8 <_Balloc+0x64>
 80053ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80053b2:	e00e      	b.n	80053d2 <_Balloc+0x6e>
 80053b4:	2221      	movs	r2, #33	; 0x21
 80053b6:	2104      	movs	r1, #4
 80053b8:	4620      	mov	r0, r4
 80053ba:	f000 fb51 	bl	8005a60 <_calloc_r>
 80053be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053c0:	60f0      	str	r0, [r6, #12]
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d1e4      	bne.n	8005392 <_Balloc+0x2e>
 80053c8:	2000      	movs	r0, #0
 80053ca:	bd70      	pop	{r4, r5, r6, pc}
 80053cc:	6802      	ldr	r2, [r0, #0]
 80053ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80053d2:	2300      	movs	r3, #0
 80053d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80053d8:	e7f7      	b.n	80053ca <_Balloc+0x66>
 80053da:	bf00      	nop
 80053dc:	08006b01 	.word	0x08006b01
 80053e0:	08006b88 	.word	0x08006b88

080053e4 <_Bfree>:
 80053e4:	b570      	push	{r4, r5, r6, lr}
 80053e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80053e8:	4605      	mov	r5, r0
 80053ea:	460c      	mov	r4, r1
 80053ec:	b976      	cbnz	r6, 800540c <_Bfree+0x28>
 80053ee:	2010      	movs	r0, #16
 80053f0:	f7ff ffa2 	bl	8005338 <malloc>
 80053f4:	4602      	mov	r2, r0
 80053f6:	6268      	str	r0, [r5, #36]	; 0x24
 80053f8:	b920      	cbnz	r0, 8005404 <_Bfree+0x20>
 80053fa:	4b09      	ldr	r3, [pc, #36]	; (8005420 <_Bfree+0x3c>)
 80053fc:	4809      	ldr	r0, [pc, #36]	; (8005424 <_Bfree+0x40>)
 80053fe:	218a      	movs	r1, #138	; 0x8a
 8005400:	f000 fd54 	bl	8005eac <__assert_func>
 8005404:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005408:	6006      	str	r6, [r0, #0]
 800540a:	60c6      	str	r6, [r0, #12]
 800540c:	b13c      	cbz	r4, 800541e <_Bfree+0x3a>
 800540e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005410:	6862      	ldr	r2, [r4, #4]
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005418:	6021      	str	r1, [r4, #0]
 800541a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800541e:	bd70      	pop	{r4, r5, r6, pc}
 8005420:	08006b01 	.word	0x08006b01
 8005424:	08006b88 	.word	0x08006b88

08005428 <__multadd>:
 8005428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800542c:	690e      	ldr	r6, [r1, #16]
 800542e:	4607      	mov	r7, r0
 8005430:	4698      	mov	r8, r3
 8005432:	460c      	mov	r4, r1
 8005434:	f101 0014 	add.w	r0, r1, #20
 8005438:	2300      	movs	r3, #0
 800543a:	6805      	ldr	r5, [r0, #0]
 800543c:	b2a9      	uxth	r1, r5
 800543e:	fb02 8101 	mla	r1, r2, r1, r8
 8005442:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005446:	0c2d      	lsrs	r5, r5, #16
 8005448:	fb02 c505 	mla	r5, r2, r5, ip
 800544c:	b289      	uxth	r1, r1
 800544e:	3301      	adds	r3, #1
 8005450:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005454:	429e      	cmp	r6, r3
 8005456:	f840 1b04 	str.w	r1, [r0], #4
 800545a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800545e:	dcec      	bgt.n	800543a <__multadd+0x12>
 8005460:	f1b8 0f00 	cmp.w	r8, #0
 8005464:	d022      	beq.n	80054ac <__multadd+0x84>
 8005466:	68a3      	ldr	r3, [r4, #8]
 8005468:	42b3      	cmp	r3, r6
 800546a:	dc19      	bgt.n	80054a0 <__multadd+0x78>
 800546c:	6861      	ldr	r1, [r4, #4]
 800546e:	4638      	mov	r0, r7
 8005470:	3101      	adds	r1, #1
 8005472:	f7ff ff77 	bl	8005364 <_Balloc>
 8005476:	4605      	mov	r5, r0
 8005478:	b928      	cbnz	r0, 8005486 <__multadd+0x5e>
 800547a:	4602      	mov	r2, r0
 800547c:	4b0d      	ldr	r3, [pc, #52]	; (80054b4 <__multadd+0x8c>)
 800547e:	480e      	ldr	r0, [pc, #56]	; (80054b8 <__multadd+0x90>)
 8005480:	21b5      	movs	r1, #181	; 0xb5
 8005482:	f000 fd13 	bl	8005eac <__assert_func>
 8005486:	6922      	ldr	r2, [r4, #16]
 8005488:	3202      	adds	r2, #2
 800548a:	f104 010c 	add.w	r1, r4, #12
 800548e:	0092      	lsls	r2, r2, #2
 8005490:	300c      	adds	r0, #12
 8005492:	f7ff ff59 	bl	8005348 <memcpy>
 8005496:	4621      	mov	r1, r4
 8005498:	4638      	mov	r0, r7
 800549a:	f7ff ffa3 	bl	80053e4 <_Bfree>
 800549e:	462c      	mov	r4, r5
 80054a0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80054a4:	3601      	adds	r6, #1
 80054a6:	f8c3 8014 	str.w	r8, [r3, #20]
 80054aa:	6126      	str	r6, [r4, #16]
 80054ac:	4620      	mov	r0, r4
 80054ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054b2:	bf00      	nop
 80054b4:	08006b77 	.word	0x08006b77
 80054b8:	08006b88 	.word	0x08006b88

080054bc <__hi0bits>:
 80054bc:	0c03      	lsrs	r3, r0, #16
 80054be:	041b      	lsls	r3, r3, #16
 80054c0:	b9d3      	cbnz	r3, 80054f8 <__hi0bits+0x3c>
 80054c2:	0400      	lsls	r0, r0, #16
 80054c4:	2310      	movs	r3, #16
 80054c6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80054ca:	bf04      	itt	eq
 80054cc:	0200      	lsleq	r0, r0, #8
 80054ce:	3308      	addeq	r3, #8
 80054d0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80054d4:	bf04      	itt	eq
 80054d6:	0100      	lsleq	r0, r0, #4
 80054d8:	3304      	addeq	r3, #4
 80054da:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80054de:	bf04      	itt	eq
 80054e0:	0080      	lsleq	r0, r0, #2
 80054e2:	3302      	addeq	r3, #2
 80054e4:	2800      	cmp	r0, #0
 80054e6:	db05      	blt.n	80054f4 <__hi0bits+0x38>
 80054e8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80054ec:	f103 0301 	add.w	r3, r3, #1
 80054f0:	bf08      	it	eq
 80054f2:	2320      	moveq	r3, #32
 80054f4:	4618      	mov	r0, r3
 80054f6:	4770      	bx	lr
 80054f8:	2300      	movs	r3, #0
 80054fa:	e7e4      	b.n	80054c6 <__hi0bits+0xa>

080054fc <__lo0bits>:
 80054fc:	6803      	ldr	r3, [r0, #0]
 80054fe:	f013 0207 	ands.w	r2, r3, #7
 8005502:	4601      	mov	r1, r0
 8005504:	d00b      	beq.n	800551e <__lo0bits+0x22>
 8005506:	07da      	lsls	r2, r3, #31
 8005508:	d424      	bmi.n	8005554 <__lo0bits+0x58>
 800550a:	0798      	lsls	r0, r3, #30
 800550c:	bf49      	itett	mi
 800550e:	085b      	lsrmi	r3, r3, #1
 8005510:	089b      	lsrpl	r3, r3, #2
 8005512:	2001      	movmi	r0, #1
 8005514:	600b      	strmi	r3, [r1, #0]
 8005516:	bf5c      	itt	pl
 8005518:	600b      	strpl	r3, [r1, #0]
 800551a:	2002      	movpl	r0, #2
 800551c:	4770      	bx	lr
 800551e:	b298      	uxth	r0, r3
 8005520:	b9b0      	cbnz	r0, 8005550 <__lo0bits+0x54>
 8005522:	0c1b      	lsrs	r3, r3, #16
 8005524:	2010      	movs	r0, #16
 8005526:	f013 0fff 	tst.w	r3, #255	; 0xff
 800552a:	bf04      	itt	eq
 800552c:	0a1b      	lsreq	r3, r3, #8
 800552e:	3008      	addeq	r0, #8
 8005530:	071a      	lsls	r2, r3, #28
 8005532:	bf04      	itt	eq
 8005534:	091b      	lsreq	r3, r3, #4
 8005536:	3004      	addeq	r0, #4
 8005538:	079a      	lsls	r2, r3, #30
 800553a:	bf04      	itt	eq
 800553c:	089b      	lsreq	r3, r3, #2
 800553e:	3002      	addeq	r0, #2
 8005540:	07da      	lsls	r2, r3, #31
 8005542:	d403      	bmi.n	800554c <__lo0bits+0x50>
 8005544:	085b      	lsrs	r3, r3, #1
 8005546:	f100 0001 	add.w	r0, r0, #1
 800554a:	d005      	beq.n	8005558 <__lo0bits+0x5c>
 800554c:	600b      	str	r3, [r1, #0]
 800554e:	4770      	bx	lr
 8005550:	4610      	mov	r0, r2
 8005552:	e7e8      	b.n	8005526 <__lo0bits+0x2a>
 8005554:	2000      	movs	r0, #0
 8005556:	4770      	bx	lr
 8005558:	2020      	movs	r0, #32
 800555a:	4770      	bx	lr

0800555c <__i2b>:
 800555c:	b510      	push	{r4, lr}
 800555e:	460c      	mov	r4, r1
 8005560:	2101      	movs	r1, #1
 8005562:	f7ff feff 	bl	8005364 <_Balloc>
 8005566:	4602      	mov	r2, r0
 8005568:	b928      	cbnz	r0, 8005576 <__i2b+0x1a>
 800556a:	4b05      	ldr	r3, [pc, #20]	; (8005580 <__i2b+0x24>)
 800556c:	4805      	ldr	r0, [pc, #20]	; (8005584 <__i2b+0x28>)
 800556e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005572:	f000 fc9b 	bl	8005eac <__assert_func>
 8005576:	2301      	movs	r3, #1
 8005578:	6144      	str	r4, [r0, #20]
 800557a:	6103      	str	r3, [r0, #16]
 800557c:	bd10      	pop	{r4, pc}
 800557e:	bf00      	nop
 8005580:	08006b77 	.word	0x08006b77
 8005584:	08006b88 	.word	0x08006b88

08005588 <__multiply>:
 8005588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800558c:	4614      	mov	r4, r2
 800558e:	690a      	ldr	r2, [r1, #16]
 8005590:	6923      	ldr	r3, [r4, #16]
 8005592:	429a      	cmp	r2, r3
 8005594:	bfb8      	it	lt
 8005596:	460b      	movlt	r3, r1
 8005598:	460d      	mov	r5, r1
 800559a:	bfbc      	itt	lt
 800559c:	4625      	movlt	r5, r4
 800559e:	461c      	movlt	r4, r3
 80055a0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80055a4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80055a8:	68ab      	ldr	r3, [r5, #8]
 80055aa:	6869      	ldr	r1, [r5, #4]
 80055ac:	eb0a 0709 	add.w	r7, sl, r9
 80055b0:	42bb      	cmp	r3, r7
 80055b2:	b085      	sub	sp, #20
 80055b4:	bfb8      	it	lt
 80055b6:	3101      	addlt	r1, #1
 80055b8:	f7ff fed4 	bl	8005364 <_Balloc>
 80055bc:	b930      	cbnz	r0, 80055cc <__multiply+0x44>
 80055be:	4602      	mov	r2, r0
 80055c0:	4b42      	ldr	r3, [pc, #264]	; (80056cc <__multiply+0x144>)
 80055c2:	4843      	ldr	r0, [pc, #268]	; (80056d0 <__multiply+0x148>)
 80055c4:	f240 115d 	movw	r1, #349	; 0x15d
 80055c8:	f000 fc70 	bl	8005eac <__assert_func>
 80055cc:	f100 0614 	add.w	r6, r0, #20
 80055d0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80055d4:	4633      	mov	r3, r6
 80055d6:	2200      	movs	r2, #0
 80055d8:	4543      	cmp	r3, r8
 80055da:	d31e      	bcc.n	800561a <__multiply+0x92>
 80055dc:	f105 0c14 	add.w	ip, r5, #20
 80055e0:	f104 0314 	add.w	r3, r4, #20
 80055e4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80055e8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80055ec:	9202      	str	r2, [sp, #8]
 80055ee:	ebac 0205 	sub.w	r2, ip, r5
 80055f2:	3a15      	subs	r2, #21
 80055f4:	f022 0203 	bic.w	r2, r2, #3
 80055f8:	3204      	adds	r2, #4
 80055fa:	f105 0115 	add.w	r1, r5, #21
 80055fe:	458c      	cmp	ip, r1
 8005600:	bf38      	it	cc
 8005602:	2204      	movcc	r2, #4
 8005604:	9201      	str	r2, [sp, #4]
 8005606:	9a02      	ldr	r2, [sp, #8]
 8005608:	9303      	str	r3, [sp, #12]
 800560a:	429a      	cmp	r2, r3
 800560c:	d808      	bhi.n	8005620 <__multiply+0x98>
 800560e:	2f00      	cmp	r7, #0
 8005610:	dc55      	bgt.n	80056be <__multiply+0x136>
 8005612:	6107      	str	r7, [r0, #16]
 8005614:	b005      	add	sp, #20
 8005616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800561a:	f843 2b04 	str.w	r2, [r3], #4
 800561e:	e7db      	b.n	80055d8 <__multiply+0x50>
 8005620:	f8b3 a000 	ldrh.w	sl, [r3]
 8005624:	f1ba 0f00 	cmp.w	sl, #0
 8005628:	d020      	beq.n	800566c <__multiply+0xe4>
 800562a:	f105 0e14 	add.w	lr, r5, #20
 800562e:	46b1      	mov	r9, r6
 8005630:	2200      	movs	r2, #0
 8005632:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005636:	f8d9 b000 	ldr.w	fp, [r9]
 800563a:	b2a1      	uxth	r1, r4
 800563c:	fa1f fb8b 	uxth.w	fp, fp
 8005640:	fb0a b101 	mla	r1, sl, r1, fp
 8005644:	4411      	add	r1, r2
 8005646:	f8d9 2000 	ldr.w	r2, [r9]
 800564a:	0c24      	lsrs	r4, r4, #16
 800564c:	0c12      	lsrs	r2, r2, #16
 800564e:	fb0a 2404 	mla	r4, sl, r4, r2
 8005652:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005656:	b289      	uxth	r1, r1
 8005658:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800565c:	45f4      	cmp	ip, lr
 800565e:	f849 1b04 	str.w	r1, [r9], #4
 8005662:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005666:	d8e4      	bhi.n	8005632 <__multiply+0xaa>
 8005668:	9901      	ldr	r1, [sp, #4]
 800566a:	5072      	str	r2, [r6, r1]
 800566c:	9a03      	ldr	r2, [sp, #12]
 800566e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005672:	3304      	adds	r3, #4
 8005674:	f1b9 0f00 	cmp.w	r9, #0
 8005678:	d01f      	beq.n	80056ba <__multiply+0x132>
 800567a:	6834      	ldr	r4, [r6, #0]
 800567c:	f105 0114 	add.w	r1, r5, #20
 8005680:	46b6      	mov	lr, r6
 8005682:	f04f 0a00 	mov.w	sl, #0
 8005686:	880a      	ldrh	r2, [r1, #0]
 8005688:	f8be b002 	ldrh.w	fp, [lr, #2]
 800568c:	fb09 b202 	mla	r2, r9, r2, fp
 8005690:	4492      	add	sl, r2
 8005692:	b2a4      	uxth	r4, r4
 8005694:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8005698:	f84e 4b04 	str.w	r4, [lr], #4
 800569c:	f851 4b04 	ldr.w	r4, [r1], #4
 80056a0:	f8be 2000 	ldrh.w	r2, [lr]
 80056a4:	0c24      	lsrs	r4, r4, #16
 80056a6:	fb09 2404 	mla	r4, r9, r4, r2
 80056aa:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80056ae:	458c      	cmp	ip, r1
 80056b0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80056b4:	d8e7      	bhi.n	8005686 <__multiply+0xfe>
 80056b6:	9a01      	ldr	r2, [sp, #4]
 80056b8:	50b4      	str	r4, [r6, r2]
 80056ba:	3604      	adds	r6, #4
 80056bc:	e7a3      	b.n	8005606 <__multiply+0x7e>
 80056be:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d1a5      	bne.n	8005612 <__multiply+0x8a>
 80056c6:	3f01      	subs	r7, #1
 80056c8:	e7a1      	b.n	800560e <__multiply+0x86>
 80056ca:	bf00      	nop
 80056cc:	08006b77 	.word	0x08006b77
 80056d0:	08006b88 	.word	0x08006b88

080056d4 <__pow5mult>:
 80056d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056d8:	4615      	mov	r5, r2
 80056da:	f012 0203 	ands.w	r2, r2, #3
 80056de:	4606      	mov	r6, r0
 80056e0:	460f      	mov	r7, r1
 80056e2:	d007      	beq.n	80056f4 <__pow5mult+0x20>
 80056e4:	4c25      	ldr	r4, [pc, #148]	; (800577c <__pow5mult+0xa8>)
 80056e6:	3a01      	subs	r2, #1
 80056e8:	2300      	movs	r3, #0
 80056ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80056ee:	f7ff fe9b 	bl	8005428 <__multadd>
 80056f2:	4607      	mov	r7, r0
 80056f4:	10ad      	asrs	r5, r5, #2
 80056f6:	d03d      	beq.n	8005774 <__pow5mult+0xa0>
 80056f8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80056fa:	b97c      	cbnz	r4, 800571c <__pow5mult+0x48>
 80056fc:	2010      	movs	r0, #16
 80056fe:	f7ff fe1b 	bl	8005338 <malloc>
 8005702:	4602      	mov	r2, r0
 8005704:	6270      	str	r0, [r6, #36]	; 0x24
 8005706:	b928      	cbnz	r0, 8005714 <__pow5mult+0x40>
 8005708:	4b1d      	ldr	r3, [pc, #116]	; (8005780 <__pow5mult+0xac>)
 800570a:	481e      	ldr	r0, [pc, #120]	; (8005784 <__pow5mult+0xb0>)
 800570c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005710:	f000 fbcc 	bl	8005eac <__assert_func>
 8005714:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005718:	6004      	str	r4, [r0, #0]
 800571a:	60c4      	str	r4, [r0, #12]
 800571c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005720:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005724:	b94c      	cbnz	r4, 800573a <__pow5mult+0x66>
 8005726:	f240 2171 	movw	r1, #625	; 0x271
 800572a:	4630      	mov	r0, r6
 800572c:	f7ff ff16 	bl	800555c <__i2b>
 8005730:	2300      	movs	r3, #0
 8005732:	f8c8 0008 	str.w	r0, [r8, #8]
 8005736:	4604      	mov	r4, r0
 8005738:	6003      	str	r3, [r0, #0]
 800573a:	f04f 0900 	mov.w	r9, #0
 800573e:	07eb      	lsls	r3, r5, #31
 8005740:	d50a      	bpl.n	8005758 <__pow5mult+0x84>
 8005742:	4639      	mov	r1, r7
 8005744:	4622      	mov	r2, r4
 8005746:	4630      	mov	r0, r6
 8005748:	f7ff ff1e 	bl	8005588 <__multiply>
 800574c:	4639      	mov	r1, r7
 800574e:	4680      	mov	r8, r0
 8005750:	4630      	mov	r0, r6
 8005752:	f7ff fe47 	bl	80053e4 <_Bfree>
 8005756:	4647      	mov	r7, r8
 8005758:	106d      	asrs	r5, r5, #1
 800575a:	d00b      	beq.n	8005774 <__pow5mult+0xa0>
 800575c:	6820      	ldr	r0, [r4, #0]
 800575e:	b938      	cbnz	r0, 8005770 <__pow5mult+0x9c>
 8005760:	4622      	mov	r2, r4
 8005762:	4621      	mov	r1, r4
 8005764:	4630      	mov	r0, r6
 8005766:	f7ff ff0f 	bl	8005588 <__multiply>
 800576a:	6020      	str	r0, [r4, #0]
 800576c:	f8c0 9000 	str.w	r9, [r0]
 8005770:	4604      	mov	r4, r0
 8005772:	e7e4      	b.n	800573e <__pow5mult+0x6a>
 8005774:	4638      	mov	r0, r7
 8005776:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800577a:	bf00      	nop
 800577c:	08006cd8 	.word	0x08006cd8
 8005780:	08006b01 	.word	0x08006b01
 8005784:	08006b88 	.word	0x08006b88

08005788 <__lshift>:
 8005788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800578c:	460c      	mov	r4, r1
 800578e:	6849      	ldr	r1, [r1, #4]
 8005790:	6923      	ldr	r3, [r4, #16]
 8005792:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005796:	68a3      	ldr	r3, [r4, #8]
 8005798:	4607      	mov	r7, r0
 800579a:	4691      	mov	r9, r2
 800579c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80057a0:	f108 0601 	add.w	r6, r8, #1
 80057a4:	42b3      	cmp	r3, r6
 80057a6:	db0b      	blt.n	80057c0 <__lshift+0x38>
 80057a8:	4638      	mov	r0, r7
 80057aa:	f7ff fddb 	bl	8005364 <_Balloc>
 80057ae:	4605      	mov	r5, r0
 80057b0:	b948      	cbnz	r0, 80057c6 <__lshift+0x3e>
 80057b2:	4602      	mov	r2, r0
 80057b4:	4b28      	ldr	r3, [pc, #160]	; (8005858 <__lshift+0xd0>)
 80057b6:	4829      	ldr	r0, [pc, #164]	; (800585c <__lshift+0xd4>)
 80057b8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80057bc:	f000 fb76 	bl	8005eac <__assert_func>
 80057c0:	3101      	adds	r1, #1
 80057c2:	005b      	lsls	r3, r3, #1
 80057c4:	e7ee      	b.n	80057a4 <__lshift+0x1c>
 80057c6:	2300      	movs	r3, #0
 80057c8:	f100 0114 	add.w	r1, r0, #20
 80057cc:	f100 0210 	add.w	r2, r0, #16
 80057d0:	4618      	mov	r0, r3
 80057d2:	4553      	cmp	r3, sl
 80057d4:	db33      	blt.n	800583e <__lshift+0xb6>
 80057d6:	6920      	ldr	r0, [r4, #16]
 80057d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80057dc:	f104 0314 	add.w	r3, r4, #20
 80057e0:	f019 091f 	ands.w	r9, r9, #31
 80057e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80057e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80057ec:	d02b      	beq.n	8005846 <__lshift+0xbe>
 80057ee:	f1c9 0e20 	rsb	lr, r9, #32
 80057f2:	468a      	mov	sl, r1
 80057f4:	2200      	movs	r2, #0
 80057f6:	6818      	ldr	r0, [r3, #0]
 80057f8:	fa00 f009 	lsl.w	r0, r0, r9
 80057fc:	4302      	orrs	r2, r0
 80057fe:	f84a 2b04 	str.w	r2, [sl], #4
 8005802:	f853 2b04 	ldr.w	r2, [r3], #4
 8005806:	459c      	cmp	ip, r3
 8005808:	fa22 f20e 	lsr.w	r2, r2, lr
 800580c:	d8f3      	bhi.n	80057f6 <__lshift+0x6e>
 800580e:	ebac 0304 	sub.w	r3, ip, r4
 8005812:	3b15      	subs	r3, #21
 8005814:	f023 0303 	bic.w	r3, r3, #3
 8005818:	3304      	adds	r3, #4
 800581a:	f104 0015 	add.w	r0, r4, #21
 800581e:	4584      	cmp	ip, r0
 8005820:	bf38      	it	cc
 8005822:	2304      	movcc	r3, #4
 8005824:	50ca      	str	r2, [r1, r3]
 8005826:	b10a      	cbz	r2, 800582c <__lshift+0xa4>
 8005828:	f108 0602 	add.w	r6, r8, #2
 800582c:	3e01      	subs	r6, #1
 800582e:	4638      	mov	r0, r7
 8005830:	612e      	str	r6, [r5, #16]
 8005832:	4621      	mov	r1, r4
 8005834:	f7ff fdd6 	bl	80053e4 <_Bfree>
 8005838:	4628      	mov	r0, r5
 800583a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800583e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005842:	3301      	adds	r3, #1
 8005844:	e7c5      	b.n	80057d2 <__lshift+0x4a>
 8005846:	3904      	subs	r1, #4
 8005848:	f853 2b04 	ldr.w	r2, [r3], #4
 800584c:	f841 2f04 	str.w	r2, [r1, #4]!
 8005850:	459c      	cmp	ip, r3
 8005852:	d8f9      	bhi.n	8005848 <__lshift+0xc0>
 8005854:	e7ea      	b.n	800582c <__lshift+0xa4>
 8005856:	bf00      	nop
 8005858:	08006b77 	.word	0x08006b77
 800585c:	08006b88 	.word	0x08006b88

08005860 <__mcmp>:
 8005860:	b530      	push	{r4, r5, lr}
 8005862:	6902      	ldr	r2, [r0, #16]
 8005864:	690c      	ldr	r4, [r1, #16]
 8005866:	1b12      	subs	r2, r2, r4
 8005868:	d10e      	bne.n	8005888 <__mcmp+0x28>
 800586a:	f100 0314 	add.w	r3, r0, #20
 800586e:	3114      	adds	r1, #20
 8005870:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005874:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005878:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800587c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005880:	42a5      	cmp	r5, r4
 8005882:	d003      	beq.n	800588c <__mcmp+0x2c>
 8005884:	d305      	bcc.n	8005892 <__mcmp+0x32>
 8005886:	2201      	movs	r2, #1
 8005888:	4610      	mov	r0, r2
 800588a:	bd30      	pop	{r4, r5, pc}
 800588c:	4283      	cmp	r3, r0
 800588e:	d3f3      	bcc.n	8005878 <__mcmp+0x18>
 8005890:	e7fa      	b.n	8005888 <__mcmp+0x28>
 8005892:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005896:	e7f7      	b.n	8005888 <__mcmp+0x28>

08005898 <__mdiff>:
 8005898:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800589c:	460c      	mov	r4, r1
 800589e:	4606      	mov	r6, r0
 80058a0:	4611      	mov	r1, r2
 80058a2:	4620      	mov	r0, r4
 80058a4:	4617      	mov	r7, r2
 80058a6:	f7ff ffdb 	bl	8005860 <__mcmp>
 80058aa:	1e05      	subs	r5, r0, #0
 80058ac:	d110      	bne.n	80058d0 <__mdiff+0x38>
 80058ae:	4629      	mov	r1, r5
 80058b0:	4630      	mov	r0, r6
 80058b2:	f7ff fd57 	bl	8005364 <_Balloc>
 80058b6:	b930      	cbnz	r0, 80058c6 <__mdiff+0x2e>
 80058b8:	4b39      	ldr	r3, [pc, #228]	; (80059a0 <__mdiff+0x108>)
 80058ba:	4602      	mov	r2, r0
 80058bc:	f240 2132 	movw	r1, #562	; 0x232
 80058c0:	4838      	ldr	r0, [pc, #224]	; (80059a4 <__mdiff+0x10c>)
 80058c2:	f000 faf3 	bl	8005eac <__assert_func>
 80058c6:	2301      	movs	r3, #1
 80058c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80058cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058d0:	bfa4      	itt	ge
 80058d2:	463b      	movge	r3, r7
 80058d4:	4627      	movge	r7, r4
 80058d6:	4630      	mov	r0, r6
 80058d8:	6879      	ldr	r1, [r7, #4]
 80058da:	bfa6      	itte	ge
 80058dc:	461c      	movge	r4, r3
 80058de:	2500      	movge	r5, #0
 80058e0:	2501      	movlt	r5, #1
 80058e2:	f7ff fd3f 	bl	8005364 <_Balloc>
 80058e6:	b920      	cbnz	r0, 80058f2 <__mdiff+0x5a>
 80058e8:	4b2d      	ldr	r3, [pc, #180]	; (80059a0 <__mdiff+0x108>)
 80058ea:	4602      	mov	r2, r0
 80058ec:	f44f 7110 	mov.w	r1, #576	; 0x240
 80058f0:	e7e6      	b.n	80058c0 <__mdiff+0x28>
 80058f2:	693e      	ldr	r6, [r7, #16]
 80058f4:	60c5      	str	r5, [r0, #12]
 80058f6:	6925      	ldr	r5, [r4, #16]
 80058f8:	f107 0114 	add.w	r1, r7, #20
 80058fc:	f104 0914 	add.w	r9, r4, #20
 8005900:	f100 0e14 	add.w	lr, r0, #20
 8005904:	f107 0210 	add.w	r2, r7, #16
 8005908:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800590c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8005910:	46f2      	mov	sl, lr
 8005912:	2700      	movs	r7, #0
 8005914:	f859 3b04 	ldr.w	r3, [r9], #4
 8005918:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800591c:	fa1f f883 	uxth.w	r8, r3
 8005920:	fa17 f78b 	uxtah	r7, r7, fp
 8005924:	0c1b      	lsrs	r3, r3, #16
 8005926:	eba7 0808 	sub.w	r8, r7, r8
 800592a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800592e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005932:	fa1f f888 	uxth.w	r8, r8
 8005936:	141f      	asrs	r7, r3, #16
 8005938:	454d      	cmp	r5, r9
 800593a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800593e:	f84a 3b04 	str.w	r3, [sl], #4
 8005942:	d8e7      	bhi.n	8005914 <__mdiff+0x7c>
 8005944:	1b2b      	subs	r3, r5, r4
 8005946:	3b15      	subs	r3, #21
 8005948:	f023 0303 	bic.w	r3, r3, #3
 800594c:	3304      	adds	r3, #4
 800594e:	3415      	adds	r4, #21
 8005950:	42a5      	cmp	r5, r4
 8005952:	bf38      	it	cc
 8005954:	2304      	movcc	r3, #4
 8005956:	4419      	add	r1, r3
 8005958:	4473      	add	r3, lr
 800595a:	469e      	mov	lr, r3
 800595c:	460d      	mov	r5, r1
 800595e:	4565      	cmp	r5, ip
 8005960:	d30e      	bcc.n	8005980 <__mdiff+0xe8>
 8005962:	f10c 0203 	add.w	r2, ip, #3
 8005966:	1a52      	subs	r2, r2, r1
 8005968:	f022 0203 	bic.w	r2, r2, #3
 800596c:	3903      	subs	r1, #3
 800596e:	458c      	cmp	ip, r1
 8005970:	bf38      	it	cc
 8005972:	2200      	movcc	r2, #0
 8005974:	441a      	add	r2, r3
 8005976:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800597a:	b17b      	cbz	r3, 800599c <__mdiff+0x104>
 800597c:	6106      	str	r6, [r0, #16]
 800597e:	e7a5      	b.n	80058cc <__mdiff+0x34>
 8005980:	f855 8b04 	ldr.w	r8, [r5], #4
 8005984:	fa17 f488 	uxtah	r4, r7, r8
 8005988:	1422      	asrs	r2, r4, #16
 800598a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800598e:	b2a4      	uxth	r4, r4
 8005990:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8005994:	f84e 4b04 	str.w	r4, [lr], #4
 8005998:	1417      	asrs	r7, r2, #16
 800599a:	e7e0      	b.n	800595e <__mdiff+0xc6>
 800599c:	3e01      	subs	r6, #1
 800599e:	e7ea      	b.n	8005976 <__mdiff+0xde>
 80059a0:	08006b77 	.word	0x08006b77
 80059a4:	08006b88 	.word	0x08006b88

080059a8 <__d2b>:
 80059a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80059ac:	4689      	mov	r9, r1
 80059ae:	2101      	movs	r1, #1
 80059b0:	ec57 6b10 	vmov	r6, r7, d0
 80059b4:	4690      	mov	r8, r2
 80059b6:	f7ff fcd5 	bl	8005364 <_Balloc>
 80059ba:	4604      	mov	r4, r0
 80059bc:	b930      	cbnz	r0, 80059cc <__d2b+0x24>
 80059be:	4602      	mov	r2, r0
 80059c0:	4b25      	ldr	r3, [pc, #148]	; (8005a58 <__d2b+0xb0>)
 80059c2:	4826      	ldr	r0, [pc, #152]	; (8005a5c <__d2b+0xb4>)
 80059c4:	f240 310a 	movw	r1, #778	; 0x30a
 80059c8:	f000 fa70 	bl	8005eac <__assert_func>
 80059cc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80059d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80059d4:	bb35      	cbnz	r5, 8005a24 <__d2b+0x7c>
 80059d6:	2e00      	cmp	r6, #0
 80059d8:	9301      	str	r3, [sp, #4]
 80059da:	d028      	beq.n	8005a2e <__d2b+0x86>
 80059dc:	4668      	mov	r0, sp
 80059de:	9600      	str	r6, [sp, #0]
 80059e0:	f7ff fd8c 	bl	80054fc <__lo0bits>
 80059e4:	9900      	ldr	r1, [sp, #0]
 80059e6:	b300      	cbz	r0, 8005a2a <__d2b+0x82>
 80059e8:	9a01      	ldr	r2, [sp, #4]
 80059ea:	f1c0 0320 	rsb	r3, r0, #32
 80059ee:	fa02 f303 	lsl.w	r3, r2, r3
 80059f2:	430b      	orrs	r3, r1
 80059f4:	40c2      	lsrs	r2, r0
 80059f6:	6163      	str	r3, [r4, #20]
 80059f8:	9201      	str	r2, [sp, #4]
 80059fa:	9b01      	ldr	r3, [sp, #4]
 80059fc:	61a3      	str	r3, [r4, #24]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	bf14      	ite	ne
 8005a02:	2202      	movne	r2, #2
 8005a04:	2201      	moveq	r2, #1
 8005a06:	6122      	str	r2, [r4, #16]
 8005a08:	b1d5      	cbz	r5, 8005a40 <__d2b+0x98>
 8005a0a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005a0e:	4405      	add	r5, r0
 8005a10:	f8c9 5000 	str.w	r5, [r9]
 8005a14:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005a18:	f8c8 0000 	str.w	r0, [r8]
 8005a1c:	4620      	mov	r0, r4
 8005a1e:	b003      	add	sp, #12
 8005a20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005a24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a28:	e7d5      	b.n	80059d6 <__d2b+0x2e>
 8005a2a:	6161      	str	r1, [r4, #20]
 8005a2c:	e7e5      	b.n	80059fa <__d2b+0x52>
 8005a2e:	a801      	add	r0, sp, #4
 8005a30:	f7ff fd64 	bl	80054fc <__lo0bits>
 8005a34:	9b01      	ldr	r3, [sp, #4]
 8005a36:	6163      	str	r3, [r4, #20]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	6122      	str	r2, [r4, #16]
 8005a3c:	3020      	adds	r0, #32
 8005a3e:	e7e3      	b.n	8005a08 <__d2b+0x60>
 8005a40:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005a44:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005a48:	f8c9 0000 	str.w	r0, [r9]
 8005a4c:	6918      	ldr	r0, [r3, #16]
 8005a4e:	f7ff fd35 	bl	80054bc <__hi0bits>
 8005a52:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005a56:	e7df      	b.n	8005a18 <__d2b+0x70>
 8005a58:	08006b77 	.word	0x08006b77
 8005a5c:	08006b88 	.word	0x08006b88

08005a60 <_calloc_r>:
 8005a60:	b513      	push	{r0, r1, r4, lr}
 8005a62:	434a      	muls	r2, r1
 8005a64:	4611      	mov	r1, r2
 8005a66:	9201      	str	r2, [sp, #4]
 8005a68:	f000 f85a 	bl	8005b20 <_malloc_r>
 8005a6c:	4604      	mov	r4, r0
 8005a6e:	b118      	cbz	r0, 8005a78 <_calloc_r+0x18>
 8005a70:	9a01      	ldr	r2, [sp, #4]
 8005a72:	2100      	movs	r1, #0
 8005a74:	f7fe f950 	bl	8003d18 <memset>
 8005a78:	4620      	mov	r0, r4
 8005a7a:	b002      	add	sp, #8
 8005a7c:	bd10      	pop	{r4, pc}
	...

08005a80 <_free_r>:
 8005a80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a82:	2900      	cmp	r1, #0
 8005a84:	d048      	beq.n	8005b18 <_free_r+0x98>
 8005a86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a8a:	9001      	str	r0, [sp, #4]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	f1a1 0404 	sub.w	r4, r1, #4
 8005a92:	bfb8      	it	lt
 8005a94:	18e4      	addlt	r4, r4, r3
 8005a96:	f000 fa65 	bl	8005f64 <__malloc_lock>
 8005a9a:	4a20      	ldr	r2, [pc, #128]	; (8005b1c <_free_r+0x9c>)
 8005a9c:	9801      	ldr	r0, [sp, #4]
 8005a9e:	6813      	ldr	r3, [r2, #0]
 8005aa0:	4615      	mov	r5, r2
 8005aa2:	b933      	cbnz	r3, 8005ab2 <_free_r+0x32>
 8005aa4:	6063      	str	r3, [r4, #4]
 8005aa6:	6014      	str	r4, [r2, #0]
 8005aa8:	b003      	add	sp, #12
 8005aaa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005aae:	f000 ba5f 	b.w	8005f70 <__malloc_unlock>
 8005ab2:	42a3      	cmp	r3, r4
 8005ab4:	d90b      	bls.n	8005ace <_free_r+0x4e>
 8005ab6:	6821      	ldr	r1, [r4, #0]
 8005ab8:	1862      	adds	r2, r4, r1
 8005aba:	4293      	cmp	r3, r2
 8005abc:	bf04      	itt	eq
 8005abe:	681a      	ldreq	r2, [r3, #0]
 8005ac0:	685b      	ldreq	r3, [r3, #4]
 8005ac2:	6063      	str	r3, [r4, #4]
 8005ac4:	bf04      	itt	eq
 8005ac6:	1852      	addeq	r2, r2, r1
 8005ac8:	6022      	streq	r2, [r4, #0]
 8005aca:	602c      	str	r4, [r5, #0]
 8005acc:	e7ec      	b.n	8005aa8 <_free_r+0x28>
 8005ace:	461a      	mov	r2, r3
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	b10b      	cbz	r3, 8005ad8 <_free_r+0x58>
 8005ad4:	42a3      	cmp	r3, r4
 8005ad6:	d9fa      	bls.n	8005ace <_free_r+0x4e>
 8005ad8:	6811      	ldr	r1, [r2, #0]
 8005ada:	1855      	adds	r5, r2, r1
 8005adc:	42a5      	cmp	r5, r4
 8005ade:	d10b      	bne.n	8005af8 <_free_r+0x78>
 8005ae0:	6824      	ldr	r4, [r4, #0]
 8005ae2:	4421      	add	r1, r4
 8005ae4:	1854      	adds	r4, r2, r1
 8005ae6:	42a3      	cmp	r3, r4
 8005ae8:	6011      	str	r1, [r2, #0]
 8005aea:	d1dd      	bne.n	8005aa8 <_free_r+0x28>
 8005aec:	681c      	ldr	r4, [r3, #0]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	6053      	str	r3, [r2, #4]
 8005af2:	4421      	add	r1, r4
 8005af4:	6011      	str	r1, [r2, #0]
 8005af6:	e7d7      	b.n	8005aa8 <_free_r+0x28>
 8005af8:	d902      	bls.n	8005b00 <_free_r+0x80>
 8005afa:	230c      	movs	r3, #12
 8005afc:	6003      	str	r3, [r0, #0]
 8005afe:	e7d3      	b.n	8005aa8 <_free_r+0x28>
 8005b00:	6825      	ldr	r5, [r4, #0]
 8005b02:	1961      	adds	r1, r4, r5
 8005b04:	428b      	cmp	r3, r1
 8005b06:	bf04      	itt	eq
 8005b08:	6819      	ldreq	r1, [r3, #0]
 8005b0a:	685b      	ldreq	r3, [r3, #4]
 8005b0c:	6063      	str	r3, [r4, #4]
 8005b0e:	bf04      	itt	eq
 8005b10:	1949      	addeq	r1, r1, r5
 8005b12:	6021      	streq	r1, [r4, #0]
 8005b14:	6054      	str	r4, [r2, #4]
 8005b16:	e7c7      	b.n	8005aa8 <_free_r+0x28>
 8005b18:	b003      	add	sp, #12
 8005b1a:	bd30      	pop	{r4, r5, pc}
 8005b1c:	20000218 	.word	0x20000218

08005b20 <_malloc_r>:
 8005b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b22:	1ccd      	adds	r5, r1, #3
 8005b24:	f025 0503 	bic.w	r5, r5, #3
 8005b28:	3508      	adds	r5, #8
 8005b2a:	2d0c      	cmp	r5, #12
 8005b2c:	bf38      	it	cc
 8005b2e:	250c      	movcc	r5, #12
 8005b30:	2d00      	cmp	r5, #0
 8005b32:	4606      	mov	r6, r0
 8005b34:	db01      	blt.n	8005b3a <_malloc_r+0x1a>
 8005b36:	42a9      	cmp	r1, r5
 8005b38:	d903      	bls.n	8005b42 <_malloc_r+0x22>
 8005b3a:	230c      	movs	r3, #12
 8005b3c:	6033      	str	r3, [r6, #0]
 8005b3e:	2000      	movs	r0, #0
 8005b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b42:	f000 fa0f 	bl	8005f64 <__malloc_lock>
 8005b46:	4921      	ldr	r1, [pc, #132]	; (8005bcc <_malloc_r+0xac>)
 8005b48:	680a      	ldr	r2, [r1, #0]
 8005b4a:	4614      	mov	r4, r2
 8005b4c:	b99c      	cbnz	r4, 8005b76 <_malloc_r+0x56>
 8005b4e:	4f20      	ldr	r7, [pc, #128]	; (8005bd0 <_malloc_r+0xb0>)
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	b923      	cbnz	r3, 8005b5e <_malloc_r+0x3e>
 8005b54:	4621      	mov	r1, r4
 8005b56:	4630      	mov	r0, r6
 8005b58:	f000 f998 	bl	8005e8c <_sbrk_r>
 8005b5c:	6038      	str	r0, [r7, #0]
 8005b5e:	4629      	mov	r1, r5
 8005b60:	4630      	mov	r0, r6
 8005b62:	f000 f993 	bl	8005e8c <_sbrk_r>
 8005b66:	1c43      	adds	r3, r0, #1
 8005b68:	d123      	bne.n	8005bb2 <_malloc_r+0x92>
 8005b6a:	230c      	movs	r3, #12
 8005b6c:	6033      	str	r3, [r6, #0]
 8005b6e:	4630      	mov	r0, r6
 8005b70:	f000 f9fe 	bl	8005f70 <__malloc_unlock>
 8005b74:	e7e3      	b.n	8005b3e <_malloc_r+0x1e>
 8005b76:	6823      	ldr	r3, [r4, #0]
 8005b78:	1b5b      	subs	r3, r3, r5
 8005b7a:	d417      	bmi.n	8005bac <_malloc_r+0x8c>
 8005b7c:	2b0b      	cmp	r3, #11
 8005b7e:	d903      	bls.n	8005b88 <_malloc_r+0x68>
 8005b80:	6023      	str	r3, [r4, #0]
 8005b82:	441c      	add	r4, r3
 8005b84:	6025      	str	r5, [r4, #0]
 8005b86:	e004      	b.n	8005b92 <_malloc_r+0x72>
 8005b88:	6863      	ldr	r3, [r4, #4]
 8005b8a:	42a2      	cmp	r2, r4
 8005b8c:	bf0c      	ite	eq
 8005b8e:	600b      	streq	r3, [r1, #0]
 8005b90:	6053      	strne	r3, [r2, #4]
 8005b92:	4630      	mov	r0, r6
 8005b94:	f000 f9ec 	bl	8005f70 <__malloc_unlock>
 8005b98:	f104 000b 	add.w	r0, r4, #11
 8005b9c:	1d23      	adds	r3, r4, #4
 8005b9e:	f020 0007 	bic.w	r0, r0, #7
 8005ba2:	1ac2      	subs	r2, r0, r3
 8005ba4:	d0cc      	beq.n	8005b40 <_malloc_r+0x20>
 8005ba6:	1a1b      	subs	r3, r3, r0
 8005ba8:	50a3      	str	r3, [r4, r2]
 8005baa:	e7c9      	b.n	8005b40 <_malloc_r+0x20>
 8005bac:	4622      	mov	r2, r4
 8005bae:	6864      	ldr	r4, [r4, #4]
 8005bb0:	e7cc      	b.n	8005b4c <_malloc_r+0x2c>
 8005bb2:	1cc4      	adds	r4, r0, #3
 8005bb4:	f024 0403 	bic.w	r4, r4, #3
 8005bb8:	42a0      	cmp	r0, r4
 8005bba:	d0e3      	beq.n	8005b84 <_malloc_r+0x64>
 8005bbc:	1a21      	subs	r1, r4, r0
 8005bbe:	4630      	mov	r0, r6
 8005bc0:	f000 f964 	bl	8005e8c <_sbrk_r>
 8005bc4:	3001      	adds	r0, #1
 8005bc6:	d1dd      	bne.n	8005b84 <_malloc_r+0x64>
 8005bc8:	e7cf      	b.n	8005b6a <_malloc_r+0x4a>
 8005bca:	bf00      	nop
 8005bcc:	20000218 	.word	0x20000218
 8005bd0:	2000021c 	.word	0x2000021c

08005bd4 <__ssputs_r>:
 8005bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bd8:	688e      	ldr	r6, [r1, #8]
 8005bda:	429e      	cmp	r6, r3
 8005bdc:	4682      	mov	sl, r0
 8005bde:	460c      	mov	r4, r1
 8005be0:	4690      	mov	r8, r2
 8005be2:	461f      	mov	r7, r3
 8005be4:	d838      	bhi.n	8005c58 <__ssputs_r+0x84>
 8005be6:	898a      	ldrh	r2, [r1, #12]
 8005be8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005bec:	d032      	beq.n	8005c54 <__ssputs_r+0x80>
 8005bee:	6825      	ldr	r5, [r4, #0]
 8005bf0:	6909      	ldr	r1, [r1, #16]
 8005bf2:	eba5 0901 	sub.w	r9, r5, r1
 8005bf6:	6965      	ldr	r5, [r4, #20]
 8005bf8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005bfc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005c00:	3301      	adds	r3, #1
 8005c02:	444b      	add	r3, r9
 8005c04:	106d      	asrs	r5, r5, #1
 8005c06:	429d      	cmp	r5, r3
 8005c08:	bf38      	it	cc
 8005c0a:	461d      	movcc	r5, r3
 8005c0c:	0553      	lsls	r3, r2, #21
 8005c0e:	d531      	bpl.n	8005c74 <__ssputs_r+0xa0>
 8005c10:	4629      	mov	r1, r5
 8005c12:	f7ff ff85 	bl	8005b20 <_malloc_r>
 8005c16:	4606      	mov	r6, r0
 8005c18:	b950      	cbnz	r0, 8005c30 <__ssputs_r+0x5c>
 8005c1a:	230c      	movs	r3, #12
 8005c1c:	f8ca 3000 	str.w	r3, [sl]
 8005c20:	89a3      	ldrh	r3, [r4, #12]
 8005c22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c26:	81a3      	strh	r3, [r4, #12]
 8005c28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c30:	6921      	ldr	r1, [r4, #16]
 8005c32:	464a      	mov	r2, r9
 8005c34:	f7ff fb88 	bl	8005348 <memcpy>
 8005c38:	89a3      	ldrh	r3, [r4, #12]
 8005c3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005c3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c42:	81a3      	strh	r3, [r4, #12]
 8005c44:	6126      	str	r6, [r4, #16]
 8005c46:	6165      	str	r5, [r4, #20]
 8005c48:	444e      	add	r6, r9
 8005c4a:	eba5 0509 	sub.w	r5, r5, r9
 8005c4e:	6026      	str	r6, [r4, #0]
 8005c50:	60a5      	str	r5, [r4, #8]
 8005c52:	463e      	mov	r6, r7
 8005c54:	42be      	cmp	r6, r7
 8005c56:	d900      	bls.n	8005c5a <__ssputs_r+0x86>
 8005c58:	463e      	mov	r6, r7
 8005c5a:	4632      	mov	r2, r6
 8005c5c:	6820      	ldr	r0, [r4, #0]
 8005c5e:	4641      	mov	r1, r8
 8005c60:	f000 f966 	bl	8005f30 <memmove>
 8005c64:	68a3      	ldr	r3, [r4, #8]
 8005c66:	6822      	ldr	r2, [r4, #0]
 8005c68:	1b9b      	subs	r3, r3, r6
 8005c6a:	4432      	add	r2, r6
 8005c6c:	60a3      	str	r3, [r4, #8]
 8005c6e:	6022      	str	r2, [r4, #0]
 8005c70:	2000      	movs	r0, #0
 8005c72:	e7db      	b.n	8005c2c <__ssputs_r+0x58>
 8005c74:	462a      	mov	r2, r5
 8005c76:	f000 f981 	bl	8005f7c <_realloc_r>
 8005c7a:	4606      	mov	r6, r0
 8005c7c:	2800      	cmp	r0, #0
 8005c7e:	d1e1      	bne.n	8005c44 <__ssputs_r+0x70>
 8005c80:	6921      	ldr	r1, [r4, #16]
 8005c82:	4650      	mov	r0, sl
 8005c84:	f7ff fefc 	bl	8005a80 <_free_r>
 8005c88:	e7c7      	b.n	8005c1a <__ssputs_r+0x46>
	...

08005c8c <_svfiprintf_r>:
 8005c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c90:	4698      	mov	r8, r3
 8005c92:	898b      	ldrh	r3, [r1, #12]
 8005c94:	061b      	lsls	r3, r3, #24
 8005c96:	b09d      	sub	sp, #116	; 0x74
 8005c98:	4607      	mov	r7, r0
 8005c9a:	460d      	mov	r5, r1
 8005c9c:	4614      	mov	r4, r2
 8005c9e:	d50e      	bpl.n	8005cbe <_svfiprintf_r+0x32>
 8005ca0:	690b      	ldr	r3, [r1, #16]
 8005ca2:	b963      	cbnz	r3, 8005cbe <_svfiprintf_r+0x32>
 8005ca4:	2140      	movs	r1, #64	; 0x40
 8005ca6:	f7ff ff3b 	bl	8005b20 <_malloc_r>
 8005caa:	6028      	str	r0, [r5, #0]
 8005cac:	6128      	str	r0, [r5, #16]
 8005cae:	b920      	cbnz	r0, 8005cba <_svfiprintf_r+0x2e>
 8005cb0:	230c      	movs	r3, #12
 8005cb2:	603b      	str	r3, [r7, #0]
 8005cb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005cb8:	e0d1      	b.n	8005e5e <_svfiprintf_r+0x1d2>
 8005cba:	2340      	movs	r3, #64	; 0x40
 8005cbc:	616b      	str	r3, [r5, #20]
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	9309      	str	r3, [sp, #36]	; 0x24
 8005cc2:	2320      	movs	r3, #32
 8005cc4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005cc8:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ccc:	2330      	movs	r3, #48	; 0x30
 8005cce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005e78 <_svfiprintf_r+0x1ec>
 8005cd2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005cd6:	f04f 0901 	mov.w	r9, #1
 8005cda:	4623      	mov	r3, r4
 8005cdc:	469a      	mov	sl, r3
 8005cde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ce2:	b10a      	cbz	r2, 8005ce8 <_svfiprintf_r+0x5c>
 8005ce4:	2a25      	cmp	r2, #37	; 0x25
 8005ce6:	d1f9      	bne.n	8005cdc <_svfiprintf_r+0x50>
 8005ce8:	ebba 0b04 	subs.w	fp, sl, r4
 8005cec:	d00b      	beq.n	8005d06 <_svfiprintf_r+0x7a>
 8005cee:	465b      	mov	r3, fp
 8005cf0:	4622      	mov	r2, r4
 8005cf2:	4629      	mov	r1, r5
 8005cf4:	4638      	mov	r0, r7
 8005cf6:	f7ff ff6d 	bl	8005bd4 <__ssputs_r>
 8005cfa:	3001      	adds	r0, #1
 8005cfc:	f000 80aa 	beq.w	8005e54 <_svfiprintf_r+0x1c8>
 8005d00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d02:	445a      	add	r2, fp
 8005d04:	9209      	str	r2, [sp, #36]	; 0x24
 8005d06:	f89a 3000 	ldrb.w	r3, [sl]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	f000 80a2 	beq.w	8005e54 <_svfiprintf_r+0x1c8>
 8005d10:	2300      	movs	r3, #0
 8005d12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d1a:	f10a 0a01 	add.w	sl, sl, #1
 8005d1e:	9304      	str	r3, [sp, #16]
 8005d20:	9307      	str	r3, [sp, #28]
 8005d22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d26:	931a      	str	r3, [sp, #104]	; 0x68
 8005d28:	4654      	mov	r4, sl
 8005d2a:	2205      	movs	r2, #5
 8005d2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d30:	4851      	ldr	r0, [pc, #324]	; (8005e78 <_svfiprintf_r+0x1ec>)
 8005d32:	f7fa fa5d 	bl	80001f0 <memchr>
 8005d36:	9a04      	ldr	r2, [sp, #16]
 8005d38:	b9d8      	cbnz	r0, 8005d72 <_svfiprintf_r+0xe6>
 8005d3a:	06d0      	lsls	r0, r2, #27
 8005d3c:	bf44      	itt	mi
 8005d3e:	2320      	movmi	r3, #32
 8005d40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d44:	0711      	lsls	r1, r2, #28
 8005d46:	bf44      	itt	mi
 8005d48:	232b      	movmi	r3, #43	; 0x2b
 8005d4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d4e:	f89a 3000 	ldrb.w	r3, [sl]
 8005d52:	2b2a      	cmp	r3, #42	; 0x2a
 8005d54:	d015      	beq.n	8005d82 <_svfiprintf_r+0xf6>
 8005d56:	9a07      	ldr	r2, [sp, #28]
 8005d58:	4654      	mov	r4, sl
 8005d5a:	2000      	movs	r0, #0
 8005d5c:	f04f 0c0a 	mov.w	ip, #10
 8005d60:	4621      	mov	r1, r4
 8005d62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d66:	3b30      	subs	r3, #48	; 0x30
 8005d68:	2b09      	cmp	r3, #9
 8005d6a:	d94e      	bls.n	8005e0a <_svfiprintf_r+0x17e>
 8005d6c:	b1b0      	cbz	r0, 8005d9c <_svfiprintf_r+0x110>
 8005d6e:	9207      	str	r2, [sp, #28]
 8005d70:	e014      	b.n	8005d9c <_svfiprintf_r+0x110>
 8005d72:	eba0 0308 	sub.w	r3, r0, r8
 8005d76:	fa09 f303 	lsl.w	r3, r9, r3
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	9304      	str	r3, [sp, #16]
 8005d7e:	46a2      	mov	sl, r4
 8005d80:	e7d2      	b.n	8005d28 <_svfiprintf_r+0x9c>
 8005d82:	9b03      	ldr	r3, [sp, #12]
 8005d84:	1d19      	adds	r1, r3, #4
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	9103      	str	r1, [sp, #12]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	bfbb      	ittet	lt
 8005d8e:	425b      	neglt	r3, r3
 8005d90:	f042 0202 	orrlt.w	r2, r2, #2
 8005d94:	9307      	strge	r3, [sp, #28]
 8005d96:	9307      	strlt	r3, [sp, #28]
 8005d98:	bfb8      	it	lt
 8005d9a:	9204      	strlt	r2, [sp, #16]
 8005d9c:	7823      	ldrb	r3, [r4, #0]
 8005d9e:	2b2e      	cmp	r3, #46	; 0x2e
 8005da0:	d10c      	bne.n	8005dbc <_svfiprintf_r+0x130>
 8005da2:	7863      	ldrb	r3, [r4, #1]
 8005da4:	2b2a      	cmp	r3, #42	; 0x2a
 8005da6:	d135      	bne.n	8005e14 <_svfiprintf_r+0x188>
 8005da8:	9b03      	ldr	r3, [sp, #12]
 8005daa:	1d1a      	adds	r2, r3, #4
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	9203      	str	r2, [sp, #12]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	bfb8      	it	lt
 8005db4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005db8:	3402      	adds	r4, #2
 8005dba:	9305      	str	r3, [sp, #20]
 8005dbc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005e88 <_svfiprintf_r+0x1fc>
 8005dc0:	7821      	ldrb	r1, [r4, #0]
 8005dc2:	2203      	movs	r2, #3
 8005dc4:	4650      	mov	r0, sl
 8005dc6:	f7fa fa13 	bl	80001f0 <memchr>
 8005dca:	b140      	cbz	r0, 8005dde <_svfiprintf_r+0x152>
 8005dcc:	2340      	movs	r3, #64	; 0x40
 8005dce:	eba0 000a 	sub.w	r0, r0, sl
 8005dd2:	fa03 f000 	lsl.w	r0, r3, r0
 8005dd6:	9b04      	ldr	r3, [sp, #16]
 8005dd8:	4303      	orrs	r3, r0
 8005dda:	3401      	adds	r4, #1
 8005ddc:	9304      	str	r3, [sp, #16]
 8005dde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005de2:	4826      	ldr	r0, [pc, #152]	; (8005e7c <_svfiprintf_r+0x1f0>)
 8005de4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005de8:	2206      	movs	r2, #6
 8005dea:	f7fa fa01 	bl	80001f0 <memchr>
 8005dee:	2800      	cmp	r0, #0
 8005df0:	d038      	beq.n	8005e64 <_svfiprintf_r+0x1d8>
 8005df2:	4b23      	ldr	r3, [pc, #140]	; (8005e80 <_svfiprintf_r+0x1f4>)
 8005df4:	bb1b      	cbnz	r3, 8005e3e <_svfiprintf_r+0x1b2>
 8005df6:	9b03      	ldr	r3, [sp, #12]
 8005df8:	3307      	adds	r3, #7
 8005dfa:	f023 0307 	bic.w	r3, r3, #7
 8005dfe:	3308      	adds	r3, #8
 8005e00:	9303      	str	r3, [sp, #12]
 8005e02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e04:	4433      	add	r3, r6
 8005e06:	9309      	str	r3, [sp, #36]	; 0x24
 8005e08:	e767      	b.n	8005cda <_svfiprintf_r+0x4e>
 8005e0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e0e:	460c      	mov	r4, r1
 8005e10:	2001      	movs	r0, #1
 8005e12:	e7a5      	b.n	8005d60 <_svfiprintf_r+0xd4>
 8005e14:	2300      	movs	r3, #0
 8005e16:	3401      	adds	r4, #1
 8005e18:	9305      	str	r3, [sp, #20]
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	f04f 0c0a 	mov.w	ip, #10
 8005e20:	4620      	mov	r0, r4
 8005e22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e26:	3a30      	subs	r2, #48	; 0x30
 8005e28:	2a09      	cmp	r2, #9
 8005e2a:	d903      	bls.n	8005e34 <_svfiprintf_r+0x1a8>
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d0c5      	beq.n	8005dbc <_svfiprintf_r+0x130>
 8005e30:	9105      	str	r1, [sp, #20]
 8005e32:	e7c3      	b.n	8005dbc <_svfiprintf_r+0x130>
 8005e34:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e38:	4604      	mov	r4, r0
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e7f0      	b.n	8005e20 <_svfiprintf_r+0x194>
 8005e3e:	ab03      	add	r3, sp, #12
 8005e40:	9300      	str	r3, [sp, #0]
 8005e42:	462a      	mov	r2, r5
 8005e44:	4b0f      	ldr	r3, [pc, #60]	; (8005e84 <_svfiprintf_r+0x1f8>)
 8005e46:	a904      	add	r1, sp, #16
 8005e48:	4638      	mov	r0, r7
 8005e4a:	f7fe f80d 	bl	8003e68 <_printf_float>
 8005e4e:	1c42      	adds	r2, r0, #1
 8005e50:	4606      	mov	r6, r0
 8005e52:	d1d6      	bne.n	8005e02 <_svfiprintf_r+0x176>
 8005e54:	89ab      	ldrh	r3, [r5, #12]
 8005e56:	065b      	lsls	r3, r3, #25
 8005e58:	f53f af2c 	bmi.w	8005cb4 <_svfiprintf_r+0x28>
 8005e5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e5e:	b01d      	add	sp, #116	; 0x74
 8005e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e64:	ab03      	add	r3, sp, #12
 8005e66:	9300      	str	r3, [sp, #0]
 8005e68:	462a      	mov	r2, r5
 8005e6a:	4b06      	ldr	r3, [pc, #24]	; (8005e84 <_svfiprintf_r+0x1f8>)
 8005e6c:	a904      	add	r1, sp, #16
 8005e6e:	4638      	mov	r0, r7
 8005e70:	f7fe fa9e 	bl	80043b0 <_printf_i>
 8005e74:	e7eb      	b.n	8005e4e <_svfiprintf_r+0x1c2>
 8005e76:	bf00      	nop
 8005e78:	08006ce4 	.word	0x08006ce4
 8005e7c:	08006cee 	.word	0x08006cee
 8005e80:	08003e69 	.word	0x08003e69
 8005e84:	08005bd5 	.word	0x08005bd5
 8005e88:	08006cea 	.word	0x08006cea

08005e8c <_sbrk_r>:
 8005e8c:	b538      	push	{r3, r4, r5, lr}
 8005e8e:	4d06      	ldr	r5, [pc, #24]	; (8005ea8 <_sbrk_r+0x1c>)
 8005e90:	2300      	movs	r3, #0
 8005e92:	4604      	mov	r4, r0
 8005e94:	4608      	mov	r0, r1
 8005e96:	602b      	str	r3, [r5, #0]
 8005e98:	f7fb fef4 	bl	8001c84 <_sbrk>
 8005e9c:	1c43      	adds	r3, r0, #1
 8005e9e:	d102      	bne.n	8005ea6 <_sbrk_r+0x1a>
 8005ea0:	682b      	ldr	r3, [r5, #0]
 8005ea2:	b103      	cbz	r3, 8005ea6 <_sbrk_r+0x1a>
 8005ea4:	6023      	str	r3, [r4, #0]
 8005ea6:	bd38      	pop	{r3, r4, r5, pc}
 8005ea8:	20000378 	.word	0x20000378

08005eac <__assert_func>:
 8005eac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005eae:	4614      	mov	r4, r2
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	4b09      	ldr	r3, [pc, #36]	; (8005ed8 <__assert_func+0x2c>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4605      	mov	r5, r0
 8005eb8:	68d8      	ldr	r0, [r3, #12]
 8005eba:	b14c      	cbz	r4, 8005ed0 <__assert_func+0x24>
 8005ebc:	4b07      	ldr	r3, [pc, #28]	; (8005edc <__assert_func+0x30>)
 8005ebe:	9100      	str	r1, [sp, #0]
 8005ec0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005ec4:	4906      	ldr	r1, [pc, #24]	; (8005ee0 <__assert_func+0x34>)
 8005ec6:	462b      	mov	r3, r5
 8005ec8:	f000 f80e 	bl	8005ee8 <fiprintf>
 8005ecc:	f000 faa4 	bl	8006418 <abort>
 8005ed0:	4b04      	ldr	r3, [pc, #16]	; (8005ee4 <__assert_func+0x38>)
 8005ed2:	461c      	mov	r4, r3
 8005ed4:	e7f3      	b.n	8005ebe <__assert_func+0x12>
 8005ed6:	bf00      	nop
 8005ed8:	20000010 	.word	0x20000010
 8005edc:	08006cf5 	.word	0x08006cf5
 8005ee0:	08006d02 	.word	0x08006d02
 8005ee4:	08006d30 	.word	0x08006d30

08005ee8 <fiprintf>:
 8005ee8:	b40e      	push	{r1, r2, r3}
 8005eea:	b503      	push	{r0, r1, lr}
 8005eec:	4601      	mov	r1, r0
 8005eee:	ab03      	add	r3, sp, #12
 8005ef0:	4805      	ldr	r0, [pc, #20]	; (8005f08 <fiprintf+0x20>)
 8005ef2:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ef6:	6800      	ldr	r0, [r0, #0]
 8005ef8:	9301      	str	r3, [sp, #4]
 8005efa:	f000 f88f 	bl	800601c <_vfiprintf_r>
 8005efe:	b002      	add	sp, #8
 8005f00:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f04:	b003      	add	sp, #12
 8005f06:	4770      	bx	lr
 8005f08:	20000010 	.word	0x20000010

08005f0c <__ascii_mbtowc>:
 8005f0c:	b082      	sub	sp, #8
 8005f0e:	b901      	cbnz	r1, 8005f12 <__ascii_mbtowc+0x6>
 8005f10:	a901      	add	r1, sp, #4
 8005f12:	b142      	cbz	r2, 8005f26 <__ascii_mbtowc+0x1a>
 8005f14:	b14b      	cbz	r3, 8005f2a <__ascii_mbtowc+0x1e>
 8005f16:	7813      	ldrb	r3, [r2, #0]
 8005f18:	600b      	str	r3, [r1, #0]
 8005f1a:	7812      	ldrb	r2, [r2, #0]
 8005f1c:	1e10      	subs	r0, r2, #0
 8005f1e:	bf18      	it	ne
 8005f20:	2001      	movne	r0, #1
 8005f22:	b002      	add	sp, #8
 8005f24:	4770      	bx	lr
 8005f26:	4610      	mov	r0, r2
 8005f28:	e7fb      	b.n	8005f22 <__ascii_mbtowc+0x16>
 8005f2a:	f06f 0001 	mvn.w	r0, #1
 8005f2e:	e7f8      	b.n	8005f22 <__ascii_mbtowc+0x16>

08005f30 <memmove>:
 8005f30:	4288      	cmp	r0, r1
 8005f32:	b510      	push	{r4, lr}
 8005f34:	eb01 0402 	add.w	r4, r1, r2
 8005f38:	d902      	bls.n	8005f40 <memmove+0x10>
 8005f3a:	4284      	cmp	r4, r0
 8005f3c:	4623      	mov	r3, r4
 8005f3e:	d807      	bhi.n	8005f50 <memmove+0x20>
 8005f40:	1e43      	subs	r3, r0, #1
 8005f42:	42a1      	cmp	r1, r4
 8005f44:	d008      	beq.n	8005f58 <memmove+0x28>
 8005f46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f4e:	e7f8      	b.n	8005f42 <memmove+0x12>
 8005f50:	4402      	add	r2, r0
 8005f52:	4601      	mov	r1, r0
 8005f54:	428a      	cmp	r2, r1
 8005f56:	d100      	bne.n	8005f5a <memmove+0x2a>
 8005f58:	bd10      	pop	{r4, pc}
 8005f5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005f62:	e7f7      	b.n	8005f54 <memmove+0x24>

08005f64 <__malloc_lock>:
 8005f64:	4801      	ldr	r0, [pc, #4]	; (8005f6c <__malloc_lock+0x8>)
 8005f66:	f000 bc17 	b.w	8006798 <__retarget_lock_acquire_recursive>
 8005f6a:	bf00      	nop
 8005f6c:	20000380 	.word	0x20000380

08005f70 <__malloc_unlock>:
 8005f70:	4801      	ldr	r0, [pc, #4]	; (8005f78 <__malloc_unlock+0x8>)
 8005f72:	f000 bc12 	b.w	800679a <__retarget_lock_release_recursive>
 8005f76:	bf00      	nop
 8005f78:	20000380 	.word	0x20000380

08005f7c <_realloc_r>:
 8005f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f7e:	4607      	mov	r7, r0
 8005f80:	4614      	mov	r4, r2
 8005f82:	460e      	mov	r6, r1
 8005f84:	b921      	cbnz	r1, 8005f90 <_realloc_r+0x14>
 8005f86:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005f8a:	4611      	mov	r1, r2
 8005f8c:	f7ff bdc8 	b.w	8005b20 <_malloc_r>
 8005f90:	b922      	cbnz	r2, 8005f9c <_realloc_r+0x20>
 8005f92:	f7ff fd75 	bl	8005a80 <_free_r>
 8005f96:	4625      	mov	r5, r4
 8005f98:	4628      	mov	r0, r5
 8005f9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f9c:	f000 fc62 	bl	8006864 <_malloc_usable_size_r>
 8005fa0:	42a0      	cmp	r0, r4
 8005fa2:	d20f      	bcs.n	8005fc4 <_realloc_r+0x48>
 8005fa4:	4621      	mov	r1, r4
 8005fa6:	4638      	mov	r0, r7
 8005fa8:	f7ff fdba 	bl	8005b20 <_malloc_r>
 8005fac:	4605      	mov	r5, r0
 8005fae:	2800      	cmp	r0, #0
 8005fb0:	d0f2      	beq.n	8005f98 <_realloc_r+0x1c>
 8005fb2:	4631      	mov	r1, r6
 8005fb4:	4622      	mov	r2, r4
 8005fb6:	f7ff f9c7 	bl	8005348 <memcpy>
 8005fba:	4631      	mov	r1, r6
 8005fbc:	4638      	mov	r0, r7
 8005fbe:	f7ff fd5f 	bl	8005a80 <_free_r>
 8005fc2:	e7e9      	b.n	8005f98 <_realloc_r+0x1c>
 8005fc4:	4635      	mov	r5, r6
 8005fc6:	e7e7      	b.n	8005f98 <_realloc_r+0x1c>

08005fc8 <__sfputc_r>:
 8005fc8:	6893      	ldr	r3, [r2, #8]
 8005fca:	3b01      	subs	r3, #1
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	b410      	push	{r4}
 8005fd0:	6093      	str	r3, [r2, #8]
 8005fd2:	da08      	bge.n	8005fe6 <__sfputc_r+0x1e>
 8005fd4:	6994      	ldr	r4, [r2, #24]
 8005fd6:	42a3      	cmp	r3, r4
 8005fd8:	db01      	blt.n	8005fde <__sfputc_r+0x16>
 8005fda:	290a      	cmp	r1, #10
 8005fdc:	d103      	bne.n	8005fe6 <__sfputc_r+0x1e>
 8005fde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005fe2:	f000 b94b 	b.w	800627c <__swbuf_r>
 8005fe6:	6813      	ldr	r3, [r2, #0]
 8005fe8:	1c58      	adds	r0, r3, #1
 8005fea:	6010      	str	r0, [r2, #0]
 8005fec:	7019      	strb	r1, [r3, #0]
 8005fee:	4608      	mov	r0, r1
 8005ff0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ff4:	4770      	bx	lr

08005ff6 <__sfputs_r>:
 8005ff6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ff8:	4606      	mov	r6, r0
 8005ffa:	460f      	mov	r7, r1
 8005ffc:	4614      	mov	r4, r2
 8005ffe:	18d5      	adds	r5, r2, r3
 8006000:	42ac      	cmp	r4, r5
 8006002:	d101      	bne.n	8006008 <__sfputs_r+0x12>
 8006004:	2000      	movs	r0, #0
 8006006:	e007      	b.n	8006018 <__sfputs_r+0x22>
 8006008:	f814 1b01 	ldrb.w	r1, [r4], #1
 800600c:	463a      	mov	r2, r7
 800600e:	4630      	mov	r0, r6
 8006010:	f7ff ffda 	bl	8005fc8 <__sfputc_r>
 8006014:	1c43      	adds	r3, r0, #1
 8006016:	d1f3      	bne.n	8006000 <__sfputs_r+0xa>
 8006018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800601c <_vfiprintf_r>:
 800601c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006020:	460d      	mov	r5, r1
 8006022:	b09d      	sub	sp, #116	; 0x74
 8006024:	4614      	mov	r4, r2
 8006026:	4698      	mov	r8, r3
 8006028:	4606      	mov	r6, r0
 800602a:	b118      	cbz	r0, 8006034 <_vfiprintf_r+0x18>
 800602c:	6983      	ldr	r3, [r0, #24]
 800602e:	b90b      	cbnz	r3, 8006034 <_vfiprintf_r+0x18>
 8006030:	f000 fb14 	bl	800665c <__sinit>
 8006034:	4b89      	ldr	r3, [pc, #548]	; (800625c <_vfiprintf_r+0x240>)
 8006036:	429d      	cmp	r5, r3
 8006038:	d11b      	bne.n	8006072 <_vfiprintf_r+0x56>
 800603a:	6875      	ldr	r5, [r6, #4]
 800603c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800603e:	07d9      	lsls	r1, r3, #31
 8006040:	d405      	bmi.n	800604e <_vfiprintf_r+0x32>
 8006042:	89ab      	ldrh	r3, [r5, #12]
 8006044:	059a      	lsls	r2, r3, #22
 8006046:	d402      	bmi.n	800604e <_vfiprintf_r+0x32>
 8006048:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800604a:	f000 fba5 	bl	8006798 <__retarget_lock_acquire_recursive>
 800604e:	89ab      	ldrh	r3, [r5, #12]
 8006050:	071b      	lsls	r3, r3, #28
 8006052:	d501      	bpl.n	8006058 <_vfiprintf_r+0x3c>
 8006054:	692b      	ldr	r3, [r5, #16]
 8006056:	b9eb      	cbnz	r3, 8006094 <_vfiprintf_r+0x78>
 8006058:	4629      	mov	r1, r5
 800605a:	4630      	mov	r0, r6
 800605c:	f000 f96e 	bl	800633c <__swsetup_r>
 8006060:	b1c0      	cbz	r0, 8006094 <_vfiprintf_r+0x78>
 8006062:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006064:	07dc      	lsls	r4, r3, #31
 8006066:	d50e      	bpl.n	8006086 <_vfiprintf_r+0x6a>
 8006068:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800606c:	b01d      	add	sp, #116	; 0x74
 800606e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006072:	4b7b      	ldr	r3, [pc, #492]	; (8006260 <_vfiprintf_r+0x244>)
 8006074:	429d      	cmp	r5, r3
 8006076:	d101      	bne.n	800607c <_vfiprintf_r+0x60>
 8006078:	68b5      	ldr	r5, [r6, #8]
 800607a:	e7df      	b.n	800603c <_vfiprintf_r+0x20>
 800607c:	4b79      	ldr	r3, [pc, #484]	; (8006264 <_vfiprintf_r+0x248>)
 800607e:	429d      	cmp	r5, r3
 8006080:	bf08      	it	eq
 8006082:	68f5      	ldreq	r5, [r6, #12]
 8006084:	e7da      	b.n	800603c <_vfiprintf_r+0x20>
 8006086:	89ab      	ldrh	r3, [r5, #12]
 8006088:	0598      	lsls	r0, r3, #22
 800608a:	d4ed      	bmi.n	8006068 <_vfiprintf_r+0x4c>
 800608c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800608e:	f000 fb84 	bl	800679a <__retarget_lock_release_recursive>
 8006092:	e7e9      	b.n	8006068 <_vfiprintf_r+0x4c>
 8006094:	2300      	movs	r3, #0
 8006096:	9309      	str	r3, [sp, #36]	; 0x24
 8006098:	2320      	movs	r3, #32
 800609a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800609e:	f8cd 800c 	str.w	r8, [sp, #12]
 80060a2:	2330      	movs	r3, #48	; 0x30
 80060a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006268 <_vfiprintf_r+0x24c>
 80060a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80060ac:	f04f 0901 	mov.w	r9, #1
 80060b0:	4623      	mov	r3, r4
 80060b2:	469a      	mov	sl, r3
 80060b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060b8:	b10a      	cbz	r2, 80060be <_vfiprintf_r+0xa2>
 80060ba:	2a25      	cmp	r2, #37	; 0x25
 80060bc:	d1f9      	bne.n	80060b2 <_vfiprintf_r+0x96>
 80060be:	ebba 0b04 	subs.w	fp, sl, r4
 80060c2:	d00b      	beq.n	80060dc <_vfiprintf_r+0xc0>
 80060c4:	465b      	mov	r3, fp
 80060c6:	4622      	mov	r2, r4
 80060c8:	4629      	mov	r1, r5
 80060ca:	4630      	mov	r0, r6
 80060cc:	f7ff ff93 	bl	8005ff6 <__sfputs_r>
 80060d0:	3001      	adds	r0, #1
 80060d2:	f000 80aa 	beq.w	800622a <_vfiprintf_r+0x20e>
 80060d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060d8:	445a      	add	r2, fp
 80060da:	9209      	str	r2, [sp, #36]	; 0x24
 80060dc:	f89a 3000 	ldrb.w	r3, [sl]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	f000 80a2 	beq.w	800622a <_vfiprintf_r+0x20e>
 80060e6:	2300      	movs	r3, #0
 80060e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80060ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80060f0:	f10a 0a01 	add.w	sl, sl, #1
 80060f4:	9304      	str	r3, [sp, #16]
 80060f6:	9307      	str	r3, [sp, #28]
 80060f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80060fc:	931a      	str	r3, [sp, #104]	; 0x68
 80060fe:	4654      	mov	r4, sl
 8006100:	2205      	movs	r2, #5
 8006102:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006106:	4858      	ldr	r0, [pc, #352]	; (8006268 <_vfiprintf_r+0x24c>)
 8006108:	f7fa f872 	bl	80001f0 <memchr>
 800610c:	9a04      	ldr	r2, [sp, #16]
 800610e:	b9d8      	cbnz	r0, 8006148 <_vfiprintf_r+0x12c>
 8006110:	06d1      	lsls	r1, r2, #27
 8006112:	bf44      	itt	mi
 8006114:	2320      	movmi	r3, #32
 8006116:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800611a:	0713      	lsls	r3, r2, #28
 800611c:	bf44      	itt	mi
 800611e:	232b      	movmi	r3, #43	; 0x2b
 8006120:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006124:	f89a 3000 	ldrb.w	r3, [sl]
 8006128:	2b2a      	cmp	r3, #42	; 0x2a
 800612a:	d015      	beq.n	8006158 <_vfiprintf_r+0x13c>
 800612c:	9a07      	ldr	r2, [sp, #28]
 800612e:	4654      	mov	r4, sl
 8006130:	2000      	movs	r0, #0
 8006132:	f04f 0c0a 	mov.w	ip, #10
 8006136:	4621      	mov	r1, r4
 8006138:	f811 3b01 	ldrb.w	r3, [r1], #1
 800613c:	3b30      	subs	r3, #48	; 0x30
 800613e:	2b09      	cmp	r3, #9
 8006140:	d94e      	bls.n	80061e0 <_vfiprintf_r+0x1c4>
 8006142:	b1b0      	cbz	r0, 8006172 <_vfiprintf_r+0x156>
 8006144:	9207      	str	r2, [sp, #28]
 8006146:	e014      	b.n	8006172 <_vfiprintf_r+0x156>
 8006148:	eba0 0308 	sub.w	r3, r0, r8
 800614c:	fa09 f303 	lsl.w	r3, r9, r3
 8006150:	4313      	orrs	r3, r2
 8006152:	9304      	str	r3, [sp, #16]
 8006154:	46a2      	mov	sl, r4
 8006156:	e7d2      	b.n	80060fe <_vfiprintf_r+0xe2>
 8006158:	9b03      	ldr	r3, [sp, #12]
 800615a:	1d19      	adds	r1, r3, #4
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	9103      	str	r1, [sp, #12]
 8006160:	2b00      	cmp	r3, #0
 8006162:	bfbb      	ittet	lt
 8006164:	425b      	neglt	r3, r3
 8006166:	f042 0202 	orrlt.w	r2, r2, #2
 800616a:	9307      	strge	r3, [sp, #28]
 800616c:	9307      	strlt	r3, [sp, #28]
 800616e:	bfb8      	it	lt
 8006170:	9204      	strlt	r2, [sp, #16]
 8006172:	7823      	ldrb	r3, [r4, #0]
 8006174:	2b2e      	cmp	r3, #46	; 0x2e
 8006176:	d10c      	bne.n	8006192 <_vfiprintf_r+0x176>
 8006178:	7863      	ldrb	r3, [r4, #1]
 800617a:	2b2a      	cmp	r3, #42	; 0x2a
 800617c:	d135      	bne.n	80061ea <_vfiprintf_r+0x1ce>
 800617e:	9b03      	ldr	r3, [sp, #12]
 8006180:	1d1a      	adds	r2, r3, #4
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	9203      	str	r2, [sp, #12]
 8006186:	2b00      	cmp	r3, #0
 8006188:	bfb8      	it	lt
 800618a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800618e:	3402      	adds	r4, #2
 8006190:	9305      	str	r3, [sp, #20]
 8006192:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006278 <_vfiprintf_r+0x25c>
 8006196:	7821      	ldrb	r1, [r4, #0]
 8006198:	2203      	movs	r2, #3
 800619a:	4650      	mov	r0, sl
 800619c:	f7fa f828 	bl	80001f0 <memchr>
 80061a0:	b140      	cbz	r0, 80061b4 <_vfiprintf_r+0x198>
 80061a2:	2340      	movs	r3, #64	; 0x40
 80061a4:	eba0 000a 	sub.w	r0, r0, sl
 80061a8:	fa03 f000 	lsl.w	r0, r3, r0
 80061ac:	9b04      	ldr	r3, [sp, #16]
 80061ae:	4303      	orrs	r3, r0
 80061b0:	3401      	adds	r4, #1
 80061b2:	9304      	str	r3, [sp, #16]
 80061b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061b8:	482c      	ldr	r0, [pc, #176]	; (800626c <_vfiprintf_r+0x250>)
 80061ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80061be:	2206      	movs	r2, #6
 80061c0:	f7fa f816 	bl	80001f0 <memchr>
 80061c4:	2800      	cmp	r0, #0
 80061c6:	d03f      	beq.n	8006248 <_vfiprintf_r+0x22c>
 80061c8:	4b29      	ldr	r3, [pc, #164]	; (8006270 <_vfiprintf_r+0x254>)
 80061ca:	bb1b      	cbnz	r3, 8006214 <_vfiprintf_r+0x1f8>
 80061cc:	9b03      	ldr	r3, [sp, #12]
 80061ce:	3307      	adds	r3, #7
 80061d0:	f023 0307 	bic.w	r3, r3, #7
 80061d4:	3308      	adds	r3, #8
 80061d6:	9303      	str	r3, [sp, #12]
 80061d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061da:	443b      	add	r3, r7
 80061dc:	9309      	str	r3, [sp, #36]	; 0x24
 80061de:	e767      	b.n	80060b0 <_vfiprintf_r+0x94>
 80061e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80061e4:	460c      	mov	r4, r1
 80061e6:	2001      	movs	r0, #1
 80061e8:	e7a5      	b.n	8006136 <_vfiprintf_r+0x11a>
 80061ea:	2300      	movs	r3, #0
 80061ec:	3401      	adds	r4, #1
 80061ee:	9305      	str	r3, [sp, #20]
 80061f0:	4619      	mov	r1, r3
 80061f2:	f04f 0c0a 	mov.w	ip, #10
 80061f6:	4620      	mov	r0, r4
 80061f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061fc:	3a30      	subs	r2, #48	; 0x30
 80061fe:	2a09      	cmp	r2, #9
 8006200:	d903      	bls.n	800620a <_vfiprintf_r+0x1ee>
 8006202:	2b00      	cmp	r3, #0
 8006204:	d0c5      	beq.n	8006192 <_vfiprintf_r+0x176>
 8006206:	9105      	str	r1, [sp, #20]
 8006208:	e7c3      	b.n	8006192 <_vfiprintf_r+0x176>
 800620a:	fb0c 2101 	mla	r1, ip, r1, r2
 800620e:	4604      	mov	r4, r0
 8006210:	2301      	movs	r3, #1
 8006212:	e7f0      	b.n	80061f6 <_vfiprintf_r+0x1da>
 8006214:	ab03      	add	r3, sp, #12
 8006216:	9300      	str	r3, [sp, #0]
 8006218:	462a      	mov	r2, r5
 800621a:	4b16      	ldr	r3, [pc, #88]	; (8006274 <_vfiprintf_r+0x258>)
 800621c:	a904      	add	r1, sp, #16
 800621e:	4630      	mov	r0, r6
 8006220:	f7fd fe22 	bl	8003e68 <_printf_float>
 8006224:	4607      	mov	r7, r0
 8006226:	1c78      	adds	r0, r7, #1
 8006228:	d1d6      	bne.n	80061d8 <_vfiprintf_r+0x1bc>
 800622a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800622c:	07d9      	lsls	r1, r3, #31
 800622e:	d405      	bmi.n	800623c <_vfiprintf_r+0x220>
 8006230:	89ab      	ldrh	r3, [r5, #12]
 8006232:	059a      	lsls	r2, r3, #22
 8006234:	d402      	bmi.n	800623c <_vfiprintf_r+0x220>
 8006236:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006238:	f000 faaf 	bl	800679a <__retarget_lock_release_recursive>
 800623c:	89ab      	ldrh	r3, [r5, #12]
 800623e:	065b      	lsls	r3, r3, #25
 8006240:	f53f af12 	bmi.w	8006068 <_vfiprintf_r+0x4c>
 8006244:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006246:	e711      	b.n	800606c <_vfiprintf_r+0x50>
 8006248:	ab03      	add	r3, sp, #12
 800624a:	9300      	str	r3, [sp, #0]
 800624c:	462a      	mov	r2, r5
 800624e:	4b09      	ldr	r3, [pc, #36]	; (8006274 <_vfiprintf_r+0x258>)
 8006250:	a904      	add	r1, sp, #16
 8006252:	4630      	mov	r0, r6
 8006254:	f7fe f8ac 	bl	80043b0 <_printf_i>
 8006258:	e7e4      	b.n	8006224 <_vfiprintf_r+0x208>
 800625a:	bf00      	nop
 800625c:	08006e5c 	.word	0x08006e5c
 8006260:	08006e7c 	.word	0x08006e7c
 8006264:	08006e3c 	.word	0x08006e3c
 8006268:	08006ce4 	.word	0x08006ce4
 800626c:	08006cee 	.word	0x08006cee
 8006270:	08003e69 	.word	0x08003e69
 8006274:	08005ff7 	.word	0x08005ff7
 8006278:	08006cea 	.word	0x08006cea

0800627c <__swbuf_r>:
 800627c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800627e:	460e      	mov	r6, r1
 8006280:	4614      	mov	r4, r2
 8006282:	4605      	mov	r5, r0
 8006284:	b118      	cbz	r0, 800628e <__swbuf_r+0x12>
 8006286:	6983      	ldr	r3, [r0, #24]
 8006288:	b90b      	cbnz	r3, 800628e <__swbuf_r+0x12>
 800628a:	f000 f9e7 	bl	800665c <__sinit>
 800628e:	4b21      	ldr	r3, [pc, #132]	; (8006314 <__swbuf_r+0x98>)
 8006290:	429c      	cmp	r4, r3
 8006292:	d12b      	bne.n	80062ec <__swbuf_r+0x70>
 8006294:	686c      	ldr	r4, [r5, #4]
 8006296:	69a3      	ldr	r3, [r4, #24]
 8006298:	60a3      	str	r3, [r4, #8]
 800629a:	89a3      	ldrh	r3, [r4, #12]
 800629c:	071a      	lsls	r2, r3, #28
 800629e:	d52f      	bpl.n	8006300 <__swbuf_r+0x84>
 80062a0:	6923      	ldr	r3, [r4, #16]
 80062a2:	b36b      	cbz	r3, 8006300 <__swbuf_r+0x84>
 80062a4:	6923      	ldr	r3, [r4, #16]
 80062a6:	6820      	ldr	r0, [r4, #0]
 80062a8:	1ac0      	subs	r0, r0, r3
 80062aa:	6963      	ldr	r3, [r4, #20]
 80062ac:	b2f6      	uxtb	r6, r6
 80062ae:	4283      	cmp	r3, r0
 80062b0:	4637      	mov	r7, r6
 80062b2:	dc04      	bgt.n	80062be <__swbuf_r+0x42>
 80062b4:	4621      	mov	r1, r4
 80062b6:	4628      	mov	r0, r5
 80062b8:	f000 f93c 	bl	8006534 <_fflush_r>
 80062bc:	bb30      	cbnz	r0, 800630c <__swbuf_r+0x90>
 80062be:	68a3      	ldr	r3, [r4, #8]
 80062c0:	3b01      	subs	r3, #1
 80062c2:	60a3      	str	r3, [r4, #8]
 80062c4:	6823      	ldr	r3, [r4, #0]
 80062c6:	1c5a      	adds	r2, r3, #1
 80062c8:	6022      	str	r2, [r4, #0]
 80062ca:	701e      	strb	r6, [r3, #0]
 80062cc:	6963      	ldr	r3, [r4, #20]
 80062ce:	3001      	adds	r0, #1
 80062d0:	4283      	cmp	r3, r0
 80062d2:	d004      	beq.n	80062de <__swbuf_r+0x62>
 80062d4:	89a3      	ldrh	r3, [r4, #12]
 80062d6:	07db      	lsls	r3, r3, #31
 80062d8:	d506      	bpl.n	80062e8 <__swbuf_r+0x6c>
 80062da:	2e0a      	cmp	r6, #10
 80062dc:	d104      	bne.n	80062e8 <__swbuf_r+0x6c>
 80062de:	4621      	mov	r1, r4
 80062e0:	4628      	mov	r0, r5
 80062e2:	f000 f927 	bl	8006534 <_fflush_r>
 80062e6:	b988      	cbnz	r0, 800630c <__swbuf_r+0x90>
 80062e8:	4638      	mov	r0, r7
 80062ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062ec:	4b0a      	ldr	r3, [pc, #40]	; (8006318 <__swbuf_r+0x9c>)
 80062ee:	429c      	cmp	r4, r3
 80062f0:	d101      	bne.n	80062f6 <__swbuf_r+0x7a>
 80062f2:	68ac      	ldr	r4, [r5, #8]
 80062f4:	e7cf      	b.n	8006296 <__swbuf_r+0x1a>
 80062f6:	4b09      	ldr	r3, [pc, #36]	; (800631c <__swbuf_r+0xa0>)
 80062f8:	429c      	cmp	r4, r3
 80062fa:	bf08      	it	eq
 80062fc:	68ec      	ldreq	r4, [r5, #12]
 80062fe:	e7ca      	b.n	8006296 <__swbuf_r+0x1a>
 8006300:	4621      	mov	r1, r4
 8006302:	4628      	mov	r0, r5
 8006304:	f000 f81a 	bl	800633c <__swsetup_r>
 8006308:	2800      	cmp	r0, #0
 800630a:	d0cb      	beq.n	80062a4 <__swbuf_r+0x28>
 800630c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006310:	e7ea      	b.n	80062e8 <__swbuf_r+0x6c>
 8006312:	bf00      	nop
 8006314:	08006e5c 	.word	0x08006e5c
 8006318:	08006e7c 	.word	0x08006e7c
 800631c:	08006e3c 	.word	0x08006e3c

08006320 <__ascii_wctomb>:
 8006320:	b149      	cbz	r1, 8006336 <__ascii_wctomb+0x16>
 8006322:	2aff      	cmp	r2, #255	; 0xff
 8006324:	bf85      	ittet	hi
 8006326:	238a      	movhi	r3, #138	; 0x8a
 8006328:	6003      	strhi	r3, [r0, #0]
 800632a:	700a      	strbls	r2, [r1, #0]
 800632c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8006330:	bf98      	it	ls
 8006332:	2001      	movls	r0, #1
 8006334:	4770      	bx	lr
 8006336:	4608      	mov	r0, r1
 8006338:	4770      	bx	lr
	...

0800633c <__swsetup_r>:
 800633c:	4b32      	ldr	r3, [pc, #200]	; (8006408 <__swsetup_r+0xcc>)
 800633e:	b570      	push	{r4, r5, r6, lr}
 8006340:	681d      	ldr	r5, [r3, #0]
 8006342:	4606      	mov	r6, r0
 8006344:	460c      	mov	r4, r1
 8006346:	b125      	cbz	r5, 8006352 <__swsetup_r+0x16>
 8006348:	69ab      	ldr	r3, [r5, #24]
 800634a:	b913      	cbnz	r3, 8006352 <__swsetup_r+0x16>
 800634c:	4628      	mov	r0, r5
 800634e:	f000 f985 	bl	800665c <__sinit>
 8006352:	4b2e      	ldr	r3, [pc, #184]	; (800640c <__swsetup_r+0xd0>)
 8006354:	429c      	cmp	r4, r3
 8006356:	d10f      	bne.n	8006378 <__swsetup_r+0x3c>
 8006358:	686c      	ldr	r4, [r5, #4]
 800635a:	89a3      	ldrh	r3, [r4, #12]
 800635c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006360:	0719      	lsls	r1, r3, #28
 8006362:	d42c      	bmi.n	80063be <__swsetup_r+0x82>
 8006364:	06dd      	lsls	r5, r3, #27
 8006366:	d411      	bmi.n	800638c <__swsetup_r+0x50>
 8006368:	2309      	movs	r3, #9
 800636a:	6033      	str	r3, [r6, #0]
 800636c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006370:	81a3      	strh	r3, [r4, #12]
 8006372:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006376:	e03e      	b.n	80063f6 <__swsetup_r+0xba>
 8006378:	4b25      	ldr	r3, [pc, #148]	; (8006410 <__swsetup_r+0xd4>)
 800637a:	429c      	cmp	r4, r3
 800637c:	d101      	bne.n	8006382 <__swsetup_r+0x46>
 800637e:	68ac      	ldr	r4, [r5, #8]
 8006380:	e7eb      	b.n	800635a <__swsetup_r+0x1e>
 8006382:	4b24      	ldr	r3, [pc, #144]	; (8006414 <__swsetup_r+0xd8>)
 8006384:	429c      	cmp	r4, r3
 8006386:	bf08      	it	eq
 8006388:	68ec      	ldreq	r4, [r5, #12]
 800638a:	e7e6      	b.n	800635a <__swsetup_r+0x1e>
 800638c:	0758      	lsls	r0, r3, #29
 800638e:	d512      	bpl.n	80063b6 <__swsetup_r+0x7a>
 8006390:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006392:	b141      	cbz	r1, 80063a6 <__swsetup_r+0x6a>
 8006394:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006398:	4299      	cmp	r1, r3
 800639a:	d002      	beq.n	80063a2 <__swsetup_r+0x66>
 800639c:	4630      	mov	r0, r6
 800639e:	f7ff fb6f 	bl	8005a80 <_free_r>
 80063a2:	2300      	movs	r3, #0
 80063a4:	6363      	str	r3, [r4, #52]	; 0x34
 80063a6:	89a3      	ldrh	r3, [r4, #12]
 80063a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80063ac:	81a3      	strh	r3, [r4, #12]
 80063ae:	2300      	movs	r3, #0
 80063b0:	6063      	str	r3, [r4, #4]
 80063b2:	6923      	ldr	r3, [r4, #16]
 80063b4:	6023      	str	r3, [r4, #0]
 80063b6:	89a3      	ldrh	r3, [r4, #12]
 80063b8:	f043 0308 	orr.w	r3, r3, #8
 80063bc:	81a3      	strh	r3, [r4, #12]
 80063be:	6923      	ldr	r3, [r4, #16]
 80063c0:	b94b      	cbnz	r3, 80063d6 <__swsetup_r+0x9a>
 80063c2:	89a3      	ldrh	r3, [r4, #12]
 80063c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80063c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063cc:	d003      	beq.n	80063d6 <__swsetup_r+0x9a>
 80063ce:	4621      	mov	r1, r4
 80063d0:	4630      	mov	r0, r6
 80063d2:	f000 fa07 	bl	80067e4 <__smakebuf_r>
 80063d6:	89a0      	ldrh	r0, [r4, #12]
 80063d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80063dc:	f010 0301 	ands.w	r3, r0, #1
 80063e0:	d00a      	beq.n	80063f8 <__swsetup_r+0xbc>
 80063e2:	2300      	movs	r3, #0
 80063e4:	60a3      	str	r3, [r4, #8]
 80063e6:	6963      	ldr	r3, [r4, #20]
 80063e8:	425b      	negs	r3, r3
 80063ea:	61a3      	str	r3, [r4, #24]
 80063ec:	6923      	ldr	r3, [r4, #16]
 80063ee:	b943      	cbnz	r3, 8006402 <__swsetup_r+0xc6>
 80063f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80063f4:	d1ba      	bne.n	800636c <__swsetup_r+0x30>
 80063f6:	bd70      	pop	{r4, r5, r6, pc}
 80063f8:	0781      	lsls	r1, r0, #30
 80063fa:	bf58      	it	pl
 80063fc:	6963      	ldrpl	r3, [r4, #20]
 80063fe:	60a3      	str	r3, [r4, #8]
 8006400:	e7f4      	b.n	80063ec <__swsetup_r+0xb0>
 8006402:	2000      	movs	r0, #0
 8006404:	e7f7      	b.n	80063f6 <__swsetup_r+0xba>
 8006406:	bf00      	nop
 8006408:	20000010 	.word	0x20000010
 800640c:	08006e5c 	.word	0x08006e5c
 8006410:	08006e7c 	.word	0x08006e7c
 8006414:	08006e3c 	.word	0x08006e3c

08006418 <abort>:
 8006418:	b508      	push	{r3, lr}
 800641a:	2006      	movs	r0, #6
 800641c:	f000 fa52 	bl	80068c4 <raise>
 8006420:	2001      	movs	r0, #1
 8006422:	f7fb fbb7 	bl	8001b94 <_exit>
	...

08006428 <__sflush_r>:
 8006428:	898a      	ldrh	r2, [r1, #12]
 800642a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800642e:	4605      	mov	r5, r0
 8006430:	0710      	lsls	r0, r2, #28
 8006432:	460c      	mov	r4, r1
 8006434:	d458      	bmi.n	80064e8 <__sflush_r+0xc0>
 8006436:	684b      	ldr	r3, [r1, #4]
 8006438:	2b00      	cmp	r3, #0
 800643a:	dc05      	bgt.n	8006448 <__sflush_r+0x20>
 800643c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800643e:	2b00      	cmp	r3, #0
 8006440:	dc02      	bgt.n	8006448 <__sflush_r+0x20>
 8006442:	2000      	movs	r0, #0
 8006444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006448:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800644a:	2e00      	cmp	r6, #0
 800644c:	d0f9      	beq.n	8006442 <__sflush_r+0x1a>
 800644e:	2300      	movs	r3, #0
 8006450:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006454:	682f      	ldr	r7, [r5, #0]
 8006456:	602b      	str	r3, [r5, #0]
 8006458:	d032      	beq.n	80064c0 <__sflush_r+0x98>
 800645a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800645c:	89a3      	ldrh	r3, [r4, #12]
 800645e:	075a      	lsls	r2, r3, #29
 8006460:	d505      	bpl.n	800646e <__sflush_r+0x46>
 8006462:	6863      	ldr	r3, [r4, #4]
 8006464:	1ac0      	subs	r0, r0, r3
 8006466:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006468:	b10b      	cbz	r3, 800646e <__sflush_r+0x46>
 800646a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800646c:	1ac0      	subs	r0, r0, r3
 800646e:	2300      	movs	r3, #0
 8006470:	4602      	mov	r2, r0
 8006472:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006474:	6a21      	ldr	r1, [r4, #32]
 8006476:	4628      	mov	r0, r5
 8006478:	47b0      	blx	r6
 800647a:	1c43      	adds	r3, r0, #1
 800647c:	89a3      	ldrh	r3, [r4, #12]
 800647e:	d106      	bne.n	800648e <__sflush_r+0x66>
 8006480:	6829      	ldr	r1, [r5, #0]
 8006482:	291d      	cmp	r1, #29
 8006484:	d82c      	bhi.n	80064e0 <__sflush_r+0xb8>
 8006486:	4a2a      	ldr	r2, [pc, #168]	; (8006530 <__sflush_r+0x108>)
 8006488:	40ca      	lsrs	r2, r1
 800648a:	07d6      	lsls	r6, r2, #31
 800648c:	d528      	bpl.n	80064e0 <__sflush_r+0xb8>
 800648e:	2200      	movs	r2, #0
 8006490:	6062      	str	r2, [r4, #4]
 8006492:	04d9      	lsls	r1, r3, #19
 8006494:	6922      	ldr	r2, [r4, #16]
 8006496:	6022      	str	r2, [r4, #0]
 8006498:	d504      	bpl.n	80064a4 <__sflush_r+0x7c>
 800649a:	1c42      	adds	r2, r0, #1
 800649c:	d101      	bne.n	80064a2 <__sflush_r+0x7a>
 800649e:	682b      	ldr	r3, [r5, #0]
 80064a0:	b903      	cbnz	r3, 80064a4 <__sflush_r+0x7c>
 80064a2:	6560      	str	r0, [r4, #84]	; 0x54
 80064a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80064a6:	602f      	str	r7, [r5, #0]
 80064a8:	2900      	cmp	r1, #0
 80064aa:	d0ca      	beq.n	8006442 <__sflush_r+0x1a>
 80064ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80064b0:	4299      	cmp	r1, r3
 80064b2:	d002      	beq.n	80064ba <__sflush_r+0x92>
 80064b4:	4628      	mov	r0, r5
 80064b6:	f7ff fae3 	bl	8005a80 <_free_r>
 80064ba:	2000      	movs	r0, #0
 80064bc:	6360      	str	r0, [r4, #52]	; 0x34
 80064be:	e7c1      	b.n	8006444 <__sflush_r+0x1c>
 80064c0:	6a21      	ldr	r1, [r4, #32]
 80064c2:	2301      	movs	r3, #1
 80064c4:	4628      	mov	r0, r5
 80064c6:	47b0      	blx	r6
 80064c8:	1c41      	adds	r1, r0, #1
 80064ca:	d1c7      	bne.n	800645c <__sflush_r+0x34>
 80064cc:	682b      	ldr	r3, [r5, #0]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d0c4      	beq.n	800645c <__sflush_r+0x34>
 80064d2:	2b1d      	cmp	r3, #29
 80064d4:	d001      	beq.n	80064da <__sflush_r+0xb2>
 80064d6:	2b16      	cmp	r3, #22
 80064d8:	d101      	bne.n	80064de <__sflush_r+0xb6>
 80064da:	602f      	str	r7, [r5, #0]
 80064dc:	e7b1      	b.n	8006442 <__sflush_r+0x1a>
 80064de:	89a3      	ldrh	r3, [r4, #12]
 80064e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064e4:	81a3      	strh	r3, [r4, #12]
 80064e6:	e7ad      	b.n	8006444 <__sflush_r+0x1c>
 80064e8:	690f      	ldr	r7, [r1, #16]
 80064ea:	2f00      	cmp	r7, #0
 80064ec:	d0a9      	beq.n	8006442 <__sflush_r+0x1a>
 80064ee:	0793      	lsls	r3, r2, #30
 80064f0:	680e      	ldr	r6, [r1, #0]
 80064f2:	bf08      	it	eq
 80064f4:	694b      	ldreq	r3, [r1, #20]
 80064f6:	600f      	str	r7, [r1, #0]
 80064f8:	bf18      	it	ne
 80064fa:	2300      	movne	r3, #0
 80064fc:	eba6 0807 	sub.w	r8, r6, r7
 8006500:	608b      	str	r3, [r1, #8]
 8006502:	f1b8 0f00 	cmp.w	r8, #0
 8006506:	dd9c      	ble.n	8006442 <__sflush_r+0x1a>
 8006508:	6a21      	ldr	r1, [r4, #32]
 800650a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800650c:	4643      	mov	r3, r8
 800650e:	463a      	mov	r2, r7
 8006510:	4628      	mov	r0, r5
 8006512:	47b0      	blx	r6
 8006514:	2800      	cmp	r0, #0
 8006516:	dc06      	bgt.n	8006526 <__sflush_r+0xfe>
 8006518:	89a3      	ldrh	r3, [r4, #12]
 800651a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800651e:	81a3      	strh	r3, [r4, #12]
 8006520:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006524:	e78e      	b.n	8006444 <__sflush_r+0x1c>
 8006526:	4407      	add	r7, r0
 8006528:	eba8 0800 	sub.w	r8, r8, r0
 800652c:	e7e9      	b.n	8006502 <__sflush_r+0xda>
 800652e:	bf00      	nop
 8006530:	20400001 	.word	0x20400001

08006534 <_fflush_r>:
 8006534:	b538      	push	{r3, r4, r5, lr}
 8006536:	690b      	ldr	r3, [r1, #16]
 8006538:	4605      	mov	r5, r0
 800653a:	460c      	mov	r4, r1
 800653c:	b913      	cbnz	r3, 8006544 <_fflush_r+0x10>
 800653e:	2500      	movs	r5, #0
 8006540:	4628      	mov	r0, r5
 8006542:	bd38      	pop	{r3, r4, r5, pc}
 8006544:	b118      	cbz	r0, 800654e <_fflush_r+0x1a>
 8006546:	6983      	ldr	r3, [r0, #24]
 8006548:	b90b      	cbnz	r3, 800654e <_fflush_r+0x1a>
 800654a:	f000 f887 	bl	800665c <__sinit>
 800654e:	4b14      	ldr	r3, [pc, #80]	; (80065a0 <_fflush_r+0x6c>)
 8006550:	429c      	cmp	r4, r3
 8006552:	d11b      	bne.n	800658c <_fflush_r+0x58>
 8006554:	686c      	ldr	r4, [r5, #4]
 8006556:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d0ef      	beq.n	800653e <_fflush_r+0xa>
 800655e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006560:	07d0      	lsls	r0, r2, #31
 8006562:	d404      	bmi.n	800656e <_fflush_r+0x3a>
 8006564:	0599      	lsls	r1, r3, #22
 8006566:	d402      	bmi.n	800656e <_fflush_r+0x3a>
 8006568:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800656a:	f000 f915 	bl	8006798 <__retarget_lock_acquire_recursive>
 800656e:	4628      	mov	r0, r5
 8006570:	4621      	mov	r1, r4
 8006572:	f7ff ff59 	bl	8006428 <__sflush_r>
 8006576:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006578:	07da      	lsls	r2, r3, #31
 800657a:	4605      	mov	r5, r0
 800657c:	d4e0      	bmi.n	8006540 <_fflush_r+0xc>
 800657e:	89a3      	ldrh	r3, [r4, #12]
 8006580:	059b      	lsls	r3, r3, #22
 8006582:	d4dd      	bmi.n	8006540 <_fflush_r+0xc>
 8006584:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006586:	f000 f908 	bl	800679a <__retarget_lock_release_recursive>
 800658a:	e7d9      	b.n	8006540 <_fflush_r+0xc>
 800658c:	4b05      	ldr	r3, [pc, #20]	; (80065a4 <_fflush_r+0x70>)
 800658e:	429c      	cmp	r4, r3
 8006590:	d101      	bne.n	8006596 <_fflush_r+0x62>
 8006592:	68ac      	ldr	r4, [r5, #8]
 8006594:	e7df      	b.n	8006556 <_fflush_r+0x22>
 8006596:	4b04      	ldr	r3, [pc, #16]	; (80065a8 <_fflush_r+0x74>)
 8006598:	429c      	cmp	r4, r3
 800659a:	bf08      	it	eq
 800659c:	68ec      	ldreq	r4, [r5, #12]
 800659e:	e7da      	b.n	8006556 <_fflush_r+0x22>
 80065a0:	08006e5c 	.word	0x08006e5c
 80065a4:	08006e7c 	.word	0x08006e7c
 80065a8:	08006e3c 	.word	0x08006e3c

080065ac <std>:
 80065ac:	2300      	movs	r3, #0
 80065ae:	b510      	push	{r4, lr}
 80065b0:	4604      	mov	r4, r0
 80065b2:	e9c0 3300 	strd	r3, r3, [r0]
 80065b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80065ba:	6083      	str	r3, [r0, #8]
 80065bc:	8181      	strh	r1, [r0, #12]
 80065be:	6643      	str	r3, [r0, #100]	; 0x64
 80065c0:	81c2      	strh	r2, [r0, #14]
 80065c2:	6183      	str	r3, [r0, #24]
 80065c4:	4619      	mov	r1, r3
 80065c6:	2208      	movs	r2, #8
 80065c8:	305c      	adds	r0, #92	; 0x5c
 80065ca:	f7fd fba5 	bl	8003d18 <memset>
 80065ce:	4b05      	ldr	r3, [pc, #20]	; (80065e4 <std+0x38>)
 80065d0:	6263      	str	r3, [r4, #36]	; 0x24
 80065d2:	4b05      	ldr	r3, [pc, #20]	; (80065e8 <std+0x3c>)
 80065d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80065d6:	4b05      	ldr	r3, [pc, #20]	; (80065ec <std+0x40>)
 80065d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80065da:	4b05      	ldr	r3, [pc, #20]	; (80065f0 <std+0x44>)
 80065dc:	6224      	str	r4, [r4, #32]
 80065de:	6323      	str	r3, [r4, #48]	; 0x30
 80065e0:	bd10      	pop	{r4, pc}
 80065e2:	bf00      	nop
 80065e4:	080068fd 	.word	0x080068fd
 80065e8:	0800691f 	.word	0x0800691f
 80065ec:	08006957 	.word	0x08006957
 80065f0:	0800697b 	.word	0x0800697b

080065f4 <_cleanup_r>:
 80065f4:	4901      	ldr	r1, [pc, #4]	; (80065fc <_cleanup_r+0x8>)
 80065f6:	f000 b8af 	b.w	8006758 <_fwalk_reent>
 80065fa:	bf00      	nop
 80065fc:	08006535 	.word	0x08006535

08006600 <__sfmoreglue>:
 8006600:	b570      	push	{r4, r5, r6, lr}
 8006602:	1e4a      	subs	r2, r1, #1
 8006604:	2568      	movs	r5, #104	; 0x68
 8006606:	4355      	muls	r5, r2
 8006608:	460e      	mov	r6, r1
 800660a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800660e:	f7ff fa87 	bl	8005b20 <_malloc_r>
 8006612:	4604      	mov	r4, r0
 8006614:	b140      	cbz	r0, 8006628 <__sfmoreglue+0x28>
 8006616:	2100      	movs	r1, #0
 8006618:	e9c0 1600 	strd	r1, r6, [r0]
 800661c:	300c      	adds	r0, #12
 800661e:	60a0      	str	r0, [r4, #8]
 8006620:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006624:	f7fd fb78 	bl	8003d18 <memset>
 8006628:	4620      	mov	r0, r4
 800662a:	bd70      	pop	{r4, r5, r6, pc}

0800662c <__sfp_lock_acquire>:
 800662c:	4801      	ldr	r0, [pc, #4]	; (8006634 <__sfp_lock_acquire+0x8>)
 800662e:	f000 b8b3 	b.w	8006798 <__retarget_lock_acquire_recursive>
 8006632:	bf00      	nop
 8006634:	20000384 	.word	0x20000384

08006638 <__sfp_lock_release>:
 8006638:	4801      	ldr	r0, [pc, #4]	; (8006640 <__sfp_lock_release+0x8>)
 800663a:	f000 b8ae 	b.w	800679a <__retarget_lock_release_recursive>
 800663e:	bf00      	nop
 8006640:	20000384 	.word	0x20000384

08006644 <__sinit_lock_acquire>:
 8006644:	4801      	ldr	r0, [pc, #4]	; (800664c <__sinit_lock_acquire+0x8>)
 8006646:	f000 b8a7 	b.w	8006798 <__retarget_lock_acquire_recursive>
 800664a:	bf00      	nop
 800664c:	2000037f 	.word	0x2000037f

08006650 <__sinit_lock_release>:
 8006650:	4801      	ldr	r0, [pc, #4]	; (8006658 <__sinit_lock_release+0x8>)
 8006652:	f000 b8a2 	b.w	800679a <__retarget_lock_release_recursive>
 8006656:	bf00      	nop
 8006658:	2000037f 	.word	0x2000037f

0800665c <__sinit>:
 800665c:	b510      	push	{r4, lr}
 800665e:	4604      	mov	r4, r0
 8006660:	f7ff fff0 	bl	8006644 <__sinit_lock_acquire>
 8006664:	69a3      	ldr	r3, [r4, #24]
 8006666:	b11b      	cbz	r3, 8006670 <__sinit+0x14>
 8006668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800666c:	f7ff bff0 	b.w	8006650 <__sinit_lock_release>
 8006670:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006674:	6523      	str	r3, [r4, #80]	; 0x50
 8006676:	4b13      	ldr	r3, [pc, #76]	; (80066c4 <__sinit+0x68>)
 8006678:	4a13      	ldr	r2, [pc, #76]	; (80066c8 <__sinit+0x6c>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	62a2      	str	r2, [r4, #40]	; 0x28
 800667e:	42a3      	cmp	r3, r4
 8006680:	bf04      	itt	eq
 8006682:	2301      	moveq	r3, #1
 8006684:	61a3      	streq	r3, [r4, #24]
 8006686:	4620      	mov	r0, r4
 8006688:	f000 f820 	bl	80066cc <__sfp>
 800668c:	6060      	str	r0, [r4, #4]
 800668e:	4620      	mov	r0, r4
 8006690:	f000 f81c 	bl	80066cc <__sfp>
 8006694:	60a0      	str	r0, [r4, #8]
 8006696:	4620      	mov	r0, r4
 8006698:	f000 f818 	bl	80066cc <__sfp>
 800669c:	2200      	movs	r2, #0
 800669e:	60e0      	str	r0, [r4, #12]
 80066a0:	2104      	movs	r1, #4
 80066a2:	6860      	ldr	r0, [r4, #4]
 80066a4:	f7ff ff82 	bl	80065ac <std>
 80066a8:	68a0      	ldr	r0, [r4, #8]
 80066aa:	2201      	movs	r2, #1
 80066ac:	2109      	movs	r1, #9
 80066ae:	f7ff ff7d 	bl	80065ac <std>
 80066b2:	68e0      	ldr	r0, [r4, #12]
 80066b4:	2202      	movs	r2, #2
 80066b6:	2112      	movs	r1, #18
 80066b8:	f7ff ff78 	bl	80065ac <std>
 80066bc:	2301      	movs	r3, #1
 80066be:	61a3      	str	r3, [r4, #24]
 80066c0:	e7d2      	b.n	8006668 <__sinit+0xc>
 80066c2:	bf00      	nop
 80066c4:	08006abc 	.word	0x08006abc
 80066c8:	080065f5 	.word	0x080065f5

080066cc <__sfp>:
 80066cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ce:	4607      	mov	r7, r0
 80066d0:	f7ff ffac 	bl	800662c <__sfp_lock_acquire>
 80066d4:	4b1e      	ldr	r3, [pc, #120]	; (8006750 <__sfp+0x84>)
 80066d6:	681e      	ldr	r6, [r3, #0]
 80066d8:	69b3      	ldr	r3, [r6, #24]
 80066da:	b913      	cbnz	r3, 80066e2 <__sfp+0x16>
 80066dc:	4630      	mov	r0, r6
 80066de:	f7ff ffbd 	bl	800665c <__sinit>
 80066e2:	3648      	adds	r6, #72	; 0x48
 80066e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80066e8:	3b01      	subs	r3, #1
 80066ea:	d503      	bpl.n	80066f4 <__sfp+0x28>
 80066ec:	6833      	ldr	r3, [r6, #0]
 80066ee:	b30b      	cbz	r3, 8006734 <__sfp+0x68>
 80066f0:	6836      	ldr	r6, [r6, #0]
 80066f2:	e7f7      	b.n	80066e4 <__sfp+0x18>
 80066f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80066f8:	b9d5      	cbnz	r5, 8006730 <__sfp+0x64>
 80066fa:	4b16      	ldr	r3, [pc, #88]	; (8006754 <__sfp+0x88>)
 80066fc:	60e3      	str	r3, [r4, #12]
 80066fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006702:	6665      	str	r5, [r4, #100]	; 0x64
 8006704:	f000 f847 	bl	8006796 <__retarget_lock_init_recursive>
 8006708:	f7ff ff96 	bl	8006638 <__sfp_lock_release>
 800670c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006710:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006714:	6025      	str	r5, [r4, #0]
 8006716:	61a5      	str	r5, [r4, #24]
 8006718:	2208      	movs	r2, #8
 800671a:	4629      	mov	r1, r5
 800671c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006720:	f7fd fafa 	bl	8003d18 <memset>
 8006724:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006728:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800672c:	4620      	mov	r0, r4
 800672e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006730:	3468      	adds	r4, #104	; 0x68
 8006732:	e7d9      	b.n	80066e8 <__sfp+0x1c>
 8006734:	2104      	movs	r1, #4
 8006736:	4638      	mov	r0, r7
 8006738:	f7ff ff62 	bl	8006600 <__sfmoreglue>
 800673c:	4604      	mov	r4, r0
 800673e:	6030      	str	r0, [r6, #0]
 8006740:	2800      	cmp	r0, #0
 8006742:	d1d5      	bne.n	80066f0 <__sfp+0x24>
 8006744:	f7ff ff78 	bl	8006638 <__sfp_lock_release>
 8006748:	230c      	movs	r3, #12
 800674a:	603b      	str	r3, [r7, #0]
 800674c:	e7ee      	b.n	800672c <__sfp+0x60>
 800674e:	bf00      	nop
 8006750:	08006abc 	.word	0x08006abc
 8006754:	ffff0001 	.word	0xffff0001

08006758 <_fwalk_reent>:
 8006758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800675c:	4606      	mov	r6, r0
 800675e:	4688      	mov	r8, r1
 8006760:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006764:	2700      	movs	r7, #0
 8006766:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800676a:	f1b9 0901 	subs.w	r9, r9, #1
 800676e:	d505      	bpl.n	800677c <_fwalk_reent+0x24>
 8006770:	6824      	ldr	r4, [r4, #0]
 8006772:	2c00      	cmp	r4, #0
 8006774:	d1f7      	bne.n	8006766 <_fwalk_reent+0xe>
 8006776:	4638      	mov	r0, r7
 8006778:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800677c:	89ab      	ldrh	r3, [r5, #12]
 800677e:	2b01      	cmp	r3, #1
 8006780:	d907      	bls.n	8006792 <_fwalk_reent+0x3a>
 8006782:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006786:	3301      	adds	r3, #1
 8006788:	d003      	beq.n	8006792 <_fwalk_reent+0x3a>
 800678a:	4629      	mov	r1, r5
 800678c:	4630      	mov	r0, r6
 800678e:	47c0      	blx	r8
 8006790:	4307      	orrs	r7, r0
 8006792:	3568      	adds	r5, #104	; 0x68
 8006794:	e7e9      	b.n	800676a <_fwalk_reent+0x12>

08006796 <__retarget_lock_init_recursive>:
 8006796:	4770      	bx	lr

08006798 <__retarget_lock_acquire_recursive>:
 8006798:	4770      	bx	lr

0800679a <__retarget_lock_release_recursive>:
 800679a:	4770      	bx	lr

0800679c <__swhatbuf_r>:
 800679c:	b570      	push	{r4, r5, r6, lr}
 800679e:	460e      	mov	r6, r1
 80067a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067a4:	2900      	cmp	r1, #0
 80067a6:	b096      	sub	sp, #88	; 0x58
 80067a8:	4614      	mov	r4, r2
 80067aa:	461d      	mov	r5, r3
 80067ac:	da07      	bge.n	80067be <__swhatbuf_r+0x22>
 80067ae:	2300      	movs	r3, #0
 80067b0:	602b      	str	r3, [r5, #0]
 80067b2:	89b3      	ldrh	r3, [r6, #12]
 80067b4:	061a      	lsls	r2, r3, #24
 80067b6:	d410      	bmi.n	80067da <__swhatbuf_r+0x3e>
 80067b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067bc:	e00e      	b.n	80067dc <__swhatbuf_r+0x40>
 80067be:	466a      	mov	r2, sp
 80067c0:	f000 f902 	bl	80069c8 <_fstat_r>
 80067c4:	2800      	cmp	r0, #0
 80067c6:	dbf2      	blt.n	80067ae <__swhatbuf_r+0x12>
 80067c8:	9a01      	ldr	r2, [sp, #4]
 80067ca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80067ce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80067d2:	425a      	negs	r2, r3
 80067d4:	415a      	adcs	r2, r3
 80067d6:	602a      	str	r2, [r5, #0]
 80067d8:	e7ee      	b.n	80067b8 <__swhatbuf_r+0x1c>
 80067da:	2340      	movs	r3, #64	; 0x40
 80067dc:	2000      	movs	r0, #0
 80067de:	6023      	str	r3, [r4, #0]
 80067e0:	b016      	add	sp, #88	; 0x58
 80067e2:	bd70      	pop	{r4, r5, r6, pc}

080067e4 <__smakebuf_r>:
 80067e4:	898b      	ldrh	r3, [r1, #12]
 80067e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80067e8:	079d      	lsls	r5, r3, #30
 80067ea:	4606      	mov	r6, r0
 80067ec:	460c      	mov	r4, r1
 80067ee:	d507      	bpl.n	8006800 <__smakebuf_r+0x1c>
 80067f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80067f4:	6023      	str	r3, [r4, #0]
 80067f6:	6123      	str	r3, [r4, #16]
 80067f8:	2301      	movs	r3, #1
 80067fa:	6163      	str	r3, [r4, #20]
 80067fc:	b002      	add	sp, #8
 80067fe:	bd70      	pop	{r4, r5, r6, pc}
 8006800:	ab01      	add	r3, sp, #4
 8006802:	466a      	mov	r2, sp
 8006804:	f7ff ffca 	bl	800679c <__swhatbuf_r>
 8006808:	9900      	ldr	r1, [sp, #0]
 800680a:	4605      	mov	r5, r0
 800680c:	4630      	mov	r0, r6
 800680e:	f7ff f987 	bl	8005b20 <_malloc_r>
 8006812:	b948      	cbnz	r0, 8006828 <__smakebuf_r+0x44>
 8006814:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006818:	059a      	lsls	r2, r3, #22
 800681a:	d4ef      	bmi.n	80067fc <__smakebuf_r+0x18>
 800681c:	f023 0303 	bic.w	r3, r3, #3
 8006820:	f043 0302 	orr.w	r3, r3, #2
 8006824:	81a3      	strh	r3, [r4, #12]
 8006826:	e7e3      	b.n	80067f0 <__smakebuf_r+0xc>
 8006828:	4b0d      	ldr	r3, [pc, #52]	; (8006860 <__smakebuf_r+0x7c>)
 800682a:	62b3      	str	r3, [r6, #40]	; 0x28
 800682c:	89a3      	ldrh	r3, [r4, #12]
 800682e:	6020      	str	r0, [r4, #0]
 8006830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006834:	81a3      	strh	r3, [r4, #12]
 8006836:	9b00      	ldr	r3, [sp, #0]
 8006838:	6163      	str	r3, [r4, #20]
 800683a:	9b01      	ldr	r3, [sp, #4]
 800683c:	6120      	str	r0, [r4, #16]
 800683e:	b15b      	cbz	r3, 8006858 <__smakebuf_r+0x74>
 8006840:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006844:	4630      	mov	r0, r6
 8006846:	f000 f8d1 	bl	80069ec <_isatty_r>
 800684a:	b128      	cbz	r0, 8006858 <__smakebuf_r+0x74>
 800684c:	89a3      	ldrh	r3, [r4, #12]
 800684e:	f023 0303 	bic.w	r3, r3, #3
 8006852:	f043 0301 	orr.w	r3, r3, #1
 8006856:	81a3      	strh	r3, [r4, #12]
 8006858:	89a0      	ldrh	r0, [r4, #12]
 800685a:	4305      	orrs	r5, r0
 800685c:	81a5      	strh	r5, [r4, #12]
 800685e:	e7cd      	b.n	80067fc <__smakebuf_r+0x18>
 8006860:	080065f5 	.word	0x080065f5

08006864 <_malloc_usable_size_r>:
 8006864:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006868:	1f18      	subs	r0, r3, #4
 800686a:	2b00      	cmp	r3, #0
 800686c:	bfbc      	itt	lt
 800686e:	580b      	ldrlt	r3, [r1, r0]
 8006870:	18c0      	addlt	r0, r0, r3
 8006872:	4770      	bx	lr

08006874 <_raise_r>:
 8006874:	291f      	cmp	r1, #31
 8006876:	b538      	push	{r3, r4, r5, lr}
 8006878:	4604      	mov	r4, r0
 800687a:	460d      	mov	r5, r1
 800687c:	d904      	bls.n	8006888 <_raise_r+0x14>
 800687e:	2316      	movs	r3, #22
 8006880:	6003      	str	r3, [r0, #0]
 8006882:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006886:	bd38      	pop	{r3, r4, r5, pc}
 8006888:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800688a:	b112      	cbz	r2, 8006892 <_raise_r+0x1e>
 800688c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006890:	b94b      	cbnz	r3, 80068a6 <_raise_r+0x32>
 8006892:	4620      	mov	r0, r4
 8006894:	f000 f830 	bl	80068f8 <_getpid_r>
 8006898:	462a      	mov	r2, r5
 800689a:	4601      	mov	r1, r0
 800689c:	4620      	mov	r0, r4
 800689e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068a2:	f000 b817 	b.w	80068d4 <_kill_r>
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d00a      	beq.n	80068c0 <_raise_r+0x4c>
 80068aa:	1c59      	adds	r1, r3, #1
 80068ac:	d103      	bne.n	80068b6 <_raise_r+0x42>
 80068ae:	2316      	movs	r3, #22
 80068b0:	6003      	str	r3, [r0, #0]
 80068b2:	2001      	movs	r0, #1
 80068b4:	e7e7      	b.n	8006886 <_raise_r+0x12>
 80068b6:	2400      	movs	r4, #0
 80068b8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80068bc:	4628      	mov	r0, r5
 80068be:	4798      	blx	r3
 80068c0:	2000      	movs	r0, #0
 80068c2:	e7e0      	b.n	8006886 <_raise_r+0x12>

080068c4 <raise>:
 80068c4:	4b02      	ldr	r3, [pc, #8]	; (80068d0 <raise+0xc>)
 80068c6:	4601      	mov	r1, r0
 80068c8:	6818      	ldr	r0, [r3, #0]
 80068ca:	f7ff bfd3 	b.w	8006874 <_raise_r>
 80068ce:	bf00      	nop
 80068d0:	20000010 	.word	0x20000010

080068d4 <_kill_r>:
 80068d4:	b538      	push	{r3, r4, r5, lr}
 80068d6:	4d07      	ldr	r5, [pc, #28]	; (80068f4 <_kill_r+0x20>)
 80068d8:	2300      	movs	r3, #0
 80068da:	4604      	mov	r4, r0
 80068dc:	4608      	mov	r0, r1
 80068de:	4611      	mov	r1, r2
 80068e0:	602b      	str	r3, [r5, #0]
 80068e2:	f7fb f947 	bl	8001b74 <_kill>
 80068e6:	1c43      	adds	r3, r0, #1
 80068e8:	d102      	bne.n	80068f0 <_kill_r+0x1c>
 80068ea:	682b      	ldr	r3, [r5, #0]
 80068ec:	b103      	cbz	r3, 80068f0 <_kill_r+0x1c>
 80068ee:	6023      	str	r3, [r4, #0]
 80068f0:	bd38      	pop	{r3, r4, r5, pc}
 80068f2:	bf00      	nop
 80068f4:	20000378 	.word	0x20000378

080068f8 <_getpid_r>:
 80068f8:	f7fb b934 	b.w	8001b64 <_getpid>

080068fc <__sread>:
 80068fc:	b510      	push	{r4, lr}
 80068fe:	460c      	mov	r4, r1
 8006900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006904:	f000 f894 	bl	8006a30 <_read_r>
 8006908:	2800      	cmp	r0, #0
 800690a:	bfab      	itete	ge
 800690c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800690e:	89a3      	ldrhlt	r3, [r4, #12]
 8006910:	181b      	addge	r3, r3, r0
 8006912:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006916:	bfac      	ite	ge
 8006918:	6563      	strge	r3, [r4, #84]	; 0x54
 800691a:	81a3      	strhlt	r3, [r4, #12]
 800691c:	bd10      	pop	{r4, pc}

0800691e <__swrite>:
 800691e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006922:	461f      	mov	r7, r3
 8006924:	898b      	ldrh	r3, [r1, #12]
 8006926:	05db      	lsls	r3, r3, #23
 8006928:	4605      	mov	r5, r0
 800692a:	460c      	mov	r4, r1
 800692c:	4616      	mov	r6, r2
 800692e:	d505      	bpl.n	800693c <__swrite+0x1e>
 8006930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006934:	2302      	movs	r3, #2
 8006936:	2200      	movs	r2, #0
 8006938:	f000 f868 	bl	8006a0c <_lseek_r>
 800693c:	89a3      	ldrh	r3, [r4, #12]
 800693e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006942:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006946:	81a3      	strh	r3, [r4, #12]
 8006948:	4632      	mov	r2, r6
 800694a:	463b      	mov	r3, r7
 800694c:	4628      	mov	r0, r5
 800694e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006952:	f000 b817 	b.w	8006984 <_write_r>

08006956 <__sseek>:
 8006956:	b510      	push	{r4, lr}
 8006958:	460c      	mov	r4, r1
 800695a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800695e:	f000 f855 	bl	8006a0c <_lseek_r>
 8006962:	1c43      	adds	r3, r0, #1
 8006964:	89a3      	ldrh	r3, [r4, #12]
 8006966:	bf15      	itete	ne
 8006968:	6560      	strne	r0, [r4, #84]	; 0x54
 800696a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800696e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006972:	81a3      	strheq	r3, [r4, #12]
 8006974:	bf18      	it	ne
 8006976:	81a3      	strhne	r3, [r4, #12]
 8006978:	bd10      	pop	{r4, pc}

0800697a <__sclose>:
 800697a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800697e:	f000 b813 	b.w	80069a8 <_close_r>
	...

08006984 <_write_r>:
 8006984:	b538      	push	{r3, r4, r5, lr}
 8006986:	4d07      	ldr	r5, [pc, #28]	; (80069a4 <_write_r+0x20>)
 8006988:	4604      	mov	r4, r0
 800698a:	4608      	mov	r0, r1
 800698c:	4611      	mov	r1, r2
 800698e:	2200      	movs	r2, #0
 8006990:	602a      	str	r2, [r5, #0]
 8006992:	461a      	mov	r2, r3
 8006994:	f7fb f925 	bl	8001be2 <_write>
 8006998:	1c43      	adds	r3, r0, #1
 800699a:	d102      	bne.n	80069a2 <_write_r+0x1e>
 800699c:	682b      	ldr	r3, [r5, #0]
 800699e:	b103      	cbz	r3, 80069a2 <_write_r+0x1e>
 80069a0:	6023      	str	r3, [r4, #0]
 80069a2:	bd38      	pop	{r3, r4, r5, pc}
 80069a4:	20000378 	.word	0x20000378

080069a8 <_close_r>:
 80069a8:	b538      	push	{r3, r4, r5, lr}
 80069aa:	4d06      	ldr	r5, [pc, #24]	; (80069c4 <_close_r+0x1c>)
 80069ac:	2300      	movs	r3, #0
 80069ae:	4604      	mov	r4, r0
 80069b0:	4608      	mov	r0, r1
 80069b2:	602b      	str	r3, [r5, #0]
 80069b4:	f7fb f931 	bl	8001c1a <_close>
 80069b8:	1c43      	adds	r3, r0, #1
 80069ba:	d102      	bne.n	80069c2 <_close_r+0x1a>
 80069bc:	682b      	ldr	r3, [r5, #0]
 80069be:	b103      	cbz	r3, 80069c2 <_close_r+0x1a>
 80069c0:	6023      	str	r3, [r4, #0]
 80069c2:	bd38      	pop	{r3, r4, r5, pc}
 80069c4:	20000378 	.word	0x20000378

080069c8 <_fstat_r>:
 80069c8:	b538      	push	{r3, r4, r5, lr}
 80069ca:	4d07      	ldr	r5, [pc, #28]	; (80069e8 <_fstat_r+0x20>)
 80069cc:	2300      	movs	r3, #0
 80069ce:	4604      	mov	r4, r0
 80069d0:	4608      	mov	r0, r1
 80069d2:	4611      	mov	r1, r2
 80069d4:	602b      	str	r3, [r5, #0]
 80069d6:	f7fb f92c 	bl	8001c32 <_fstat>
 80069da:	1c43      	adds	r3, r0, #1
 80069dc:	d102      	bne.n	80069e4 <_fstat_r+0x1c>
 80069de:	682b      	ldr	r3, [r5, #0]
 80069e0:	b103      	cbz	r3, 80069e4 <_fstat_r+0x1c>
 80069e2:	6023      	str	r3, [r4, #0]
 80069e4:	bd38      	pop	{r3, r4, r5, pc}
 80069e6:	bf00      	nop
 80069e8:	20000378 	.word	0x20000378

080069ec <_isatty_r>:
 80069ec:	b538      	push	{r3, r4, r5, lr}
 80069ee:	4d06      	ldr	r5, [pc, #24]	; (8006a08 <_isatty_r+0x1c>)
 80069f0:	2300      	movs	r3, #0
 80069f2:	4604      	mov	r4, r0
 80069f4:	4608      	mov	r0, r1
 80069f6:	602b      	str	r3, [r5, #0]
 80069f8:	f7fb f92b 	bl	8001c52 <_isatty>
 80069fc:	1c43      	adds	r3, r0, #1
 80069fe:	d102      	bne.n	8006a06 <_isatty_r+0x1a>
 8006a00:	682b      	ldr	r3, [r5, #0]
 8006a02:	b103      	cbz	r3, 8006a06 <_isatty_r+0x1a>
 8006a04:	6023      	str	r3, [r4, #0]
 8006a06:	bd38      	pop	{r3, r4, r5, pc}
 8006a08:	20000378 	.word	0x20000378

08006a0c <_lseek_r>:
 8006a0c:	b538      	push	{r3, r4, r5, lr}
 8006a0e:	4d07      	ldr	r5, [pc, #28]	; (8006a2c <_lseek_r+0x20>)
 8006a10:	4604      	mov	r4, r0
 8006a12:	4608      	mov	r0, r1
 8006a14:	4611      	mov	r1, r2
 8006a16:	2200      	movs	r2, #0
 8006a18:	602a      	str	r2, [r5, #0]
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	f7fb f924 	bl	8001c68 <_lseek>
 8006a20:	1c43      	adds	r3, r0, #1
 8006a22:	d102      	bne.n	8006a2a <_lseek_r+0x1e>
 8006a24:	682b      	ldr	r3, [r5, #0]
 8006a26:	b103      	cbz	r3, 8006a2a <_lseek_r+0x1e>
 8006a28:	6023      	str	r3, [r4, #0]
 8006a2a:	bd38      	pop	{r3, r4, r5, pc}
 8006a2c:	20000378 	.word	0x20000378

08006a30 <_read_r>:
 8006a30:	b538      	push	{r3, r4, r5, lr}
 8006a32:	4d07      	ldr	r5, [pc, #28]	; (8006a50 <_read_r+0x20>)
 8006a34:	4604      	mov	r4, r0
 8006a36:	4608      	mov	r0, r1
 8006a38:	4611      	mov	r1, r2
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	602a      	str	r2, [r5, #0]
 8006a3e:	461a      	mov	r2, r3
 8006a40:	f7fb f8b2 	bl	8001ba8 <_read>
 8006a44:	1c43      	adds	r3, r0, #1
 8006a46:	d102      	bne.n	8006a4e <_read_r+0x1e>
 8006a48:	682b      	ldr	r3, [r5, #0]
 8006a4a:	b103      	cbz	r3, 8006a4e <_read_r+0x1e>
 8006a4c:	6023      	str	r3, [r4, #0]
 8006a4e:	bd38      	pop	{r3, r4, r5, pc}
 8006a50:	20000378 	.word	0x20000378

08006a54 <_init>:
 8006a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a56:	bf00      	nop
 8006a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a5a:	bc08      	pop	{r3}
 8006a5c:	469e      	mov	lr, r3
 8006a5e:	4770      	bx	lr

08006a60 <_fini>:
 8006a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a62:	bf00      	nop
 8006a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a66:	bc08      	pop	{r3}
 8006a68:	469e      	mov	lr, r3
 8006a6a:	4770      	bx	lr
